\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp record.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{verbatim}
                        Usage

)bo inputFile2RecordFile('"<idir>fn.input",'"<odir>a.b")
  converts input file "fn" to a record file stored at "<odir>fn.record".
  If you give one argument, <idir> is used for <odir>

)bo htFile2RecordFile('"<idir>fn.ht",'"<odir>a.b")
   converts HT file "fn" to a record file stored at "<odir>fn.record".
   If you give one argument, record file goes to "<idir>fn.record".
   A file "<odir>fn.input" is produced as a side-effect.

)bo htFile2InputFile('"<idir>fn.input",'"<odir>a.b")
   converts input file "fn" to an input file stored at "<odir>fn.input"

)bo printRecordFile('"<idir>fn.record") to display results recorded

)bo verifyRecordFile('"<idir>fn.record") to verfiy that same output
   results from running original fn.input file
\end{verbatim}
\begin{chunk}{*}

(IN-PACKAGE "BOOT" )

;--=======================================================================
;--                      Global Variables
;--=======================================================================
;$backslash := char '_\

(setq |$backslash| (|char| '|\\|))

;$testOutputLineFlag := nil   -- referenced by charyTop, prnd to stash lines

(setq |$testOutputLineFlag| NIL)

;$testOutputLineStack := nil  -- saves lines to be printed (needed to convert

(setq |$testOutputLineStack| NIL)

;                             -- lines for use in hypertex)
;$runTestFlag := nil          -- referenced by maPrin to stash output

(setq |$runTestFlag| NIL)

;                             -- by recordAndPrint to not print type/time
;$mkTestFlag := nil           -- referenced by READLN to stash input

(setq |$mkTestFlag| NIL) 

;                             -- by maPrin to stash output
;                             -- by recordAndPrint to write i/o onto $testStream
;$mkTestInputStack := nil     -- saves input for $testStream (see READLN)

(setq |$mkTestInputStack| NIL) 

;$mkTestOutputStack := nil    -- saves output for $testStream (see maPrin)

(setq |$mkTestOutputStack| NIL) 

;$mkTestOutputType := nil     -- saves the type for $testStream

(setq |$mkTestOutputType| NIL) 

;
;--=======================================================================
;--                Function for Creating a `record' file
;--=======================================================================
;inputFile2RecordFile(pathname,:option) ==
;  ifn := PATHNAME_-NAME pathname
;  not isExistingFile pathname => throwKeyedMsg("S2IL0003",[namestring ifn])
;  opath := KAR option or pathname
;  odirect := pathnameDirectory opath
;  opathname := htMkPath(odirect,ifn,'"rec")
;  _*PRINT_-ARRAY_*: local := true
;  $mkTestFlag: local := true
;  $runTestFlag: local := false
;  $mkTestInputStack: local := nil
;  $mkTestOutputStack: local := nil
;  $mkTestOutputType: local := nil
;  $currentLine: local := nil
;  if isExistingFile opathname then DELETE_-FILE opathname
;  $testStream := MAKE_-OUTSTREAM opathname
;  CATCH('SPAD__READER,_/READ(pathname,nil))
;  --for trailing system commands
;  if not null $currentLine then recordAndPrintTest '(ForSystemCommands)
;  SHUT $testStream
;  opathname

(DEFUN |inputFile2RecordFile| (&REST G166085 &AUX |option| |pathname|)
  (DSETQ (|pathname| . |option|) G166085)
  (PROG (|$mkTestFlag| |$runTestFlag| |$mkTestInputStack|
            |$mkTestOutputStack| |$mkTestOutputType| |$currentLine|
            |ifn| |opath| |odirect| |opathname| *PRINT-ARRAY*)
    (DECLARE (SPECIAL |$mkTestFlag| |$runTestFlag| |$mkTestInputStack|
                      |$mkTestOutputStack| |$mkTestOutputType|
                      |$currentLine| |$testStream|))
    (RETURN
      (PROGN
        (setq |ifn| (PATHNAME-NAME |pathname|))
        (COND
          ((NULL (|isExistingFile| |pathname|))
           (|throwKeyedMsg| "The file %1 is needed but does not exist."
            (CONS (|namestring| |ifn|) NIL)))
          ('T (setq |opath| (OR (KAR |option|) |pathname|))
           (setq |odirect| (|pathnameDirectory| |opath|))
           (setq |opathname|
                    (|htMkPath| |odirect| |ifn| "rec"))
           (setq *PRINT-ARRAY* 'T) (setq |$mkTestFlag| 'T)
           (setq |$runTestFlag| NIL)
           (setq |$mkTestInputStack| NIL)
           (setq |$mkTestOutputStack| NIL)
           (setq |$mkTestOutputType| NIL)
           (setq |$currentLine| NIL)
           (COND
             ((|isExistingFile| |opathname|) (DELETE-FILE |opathname|)))
           (setq |$testStream| (MAKE-OUTSTREAM |opathname|))
           (CATCH 'SPAD_READER (/READ |pathname| NIL))
           (COND
             ((NULL (NULL |$currentLine|))
              (|recordAndPrintTest| '(|ForSystemCommands|))))
           (SHUT |$testStream|) |opathname|))))))

;--=======================================================================
;--                Function for Displaying a `record' file
;--=======================================================================
;printRecordFile(pathname,:option) ==
;  $LINELENGTH : local := KAR option or 76
;  $printTimeIfTrue: local := nil
;  $printTypeIfTrue: local := true
;  stream := DEFIOSTREAM([['FILE,:pathname], '(MODE . INPUT)],80,0)
;  repeat
;    NULL (PEEK_-CHAR ( true, stream , nil, nil )) => return nil
;    [i,t,:o] := dewritify READ stream
;    sayNewLine()
;    for x in i repeat sayBrightly x
;    sayNewLine()
;    for x in o repeat maPrin x
;    if t^= '(Void) then printTypeAndTime(nil,t)

(DEFUN |printRecordFile| (&REST G166136 &AUX |option| |pathname|)
  (DSETQ (|pathname| . |option|) G166136)
  (PROG ($LINELENGTH |$printTimeIfTrue| |$printTypeIfTrue| |stream|
            |LETTMP#1| |i| |t| |o|)
    (DECLARE (SPECIAL $LINELENGTH |$printTimeIfTrue|
                      |$printTypeIfTrue|))
    (RETURN
      (SEQ (PROGN
             (setq $LINELENGTH (OR (KAR |option|) 76))
             (setq |$printTimeIfTrue| NIL)
             (setq |$printTypeIfTrue| 'T)
             (setq |stream|
                      (DEFIOSTREAM
                          (CONS (CONS 'FILE |pathname|)
                                (CONS '(MODE . INPUT) NIL))
                          80 0))
             (DO () (NIL NIL)
               (SEQ (EXIT (COND
                            ((NULL (PEEK-CHAR 'T |stream| NIL NIL))
                             (RETURN NIL))
                            ('T
                             (setq |LETTMP#1|
                                      (|dewritify| (VMREAD |stream|)))
                             (setq |i| (CAR |LETTMP#1|))
                             (setq |t| (CADR |LETTMP#1|))
                             (setq |o| (CDDR |LETTMP#1|))
                             (terpri)
                             (DO ((G166104 |i| (CDR G166104))
                                  (|x| NIL))
                                 ((OR (ATOM G166104)
                                      (PROGN
                                        (SETQ |x| (CAR G166104))
                                        NIL))
                                  NIL)
                               (SEQ (EXIT (|sayBrightly| |x|))))
                             (terpri)
                             (DO ((G166113 |o| (CDR G166113))
                                  (|x| NIL))
                                 ((OR (ATOM G166113)
                                      (PROGN
                                        (SETQ |x| (CAR G166113))
                                        NIL))
                                  NIL)
                               (SEQ (EXIT (|maPrin| |x|))))
                             (COND
                               ((NEQUAL |t| '(|Void|))
                                (|printTypeAndTime| NIL |t|))
                               ('T NIL))))))))))))

;testPrin(u,w) == --same as maPrin but lines are stored in $testOutputLineList
;                 --these lines are needed for pasting into HT files
;  $LINELENGTH: local := w
;  $mkTestFlag: local := nil
;  $testOutputLineFlag: local := true
;  $testOutputLineList: local := nil
;  maPrin COPY u
;  res := REVERSE $testOutputLineList
;  for x in res repeat sayBrightly x
;  res

(DEFUN |testPrin| (|u| |w|)
  (PROG ($LINELENGTH |$mkTestFlag| |$testOutputLineFlag|
            |$testOutputLineList| |res|)
    (DECLARE (SPECIAL $LINELENGTH |$mkTestFlag| |$testOutputLineFlag|
                      |$testOutputLineList|))
    (RETURN
      (SEQ (PROGN
             (setq $LINELENGTH |w|)
             (setq |$mkTestFlag| NIL)
             (setq |$testOutputLineFlag| 'T)
             (setq |$testOutputLineList| NIL)
             (|maPrin| (COPY |u|))
             (setq |res| (REVERSE |$testOutputLineList|))
             (DO ((G166141 |res| (CDR G166141)) (|x| NIL))
                 ((OR (ATOM G166141)
                      (PROGN (SETQ |x| (CAR G166141)) NIL))
                  NIL)
               (SEQ (EXIT (|sayBrightly| |x|))))
             |res|)))))

;--=======================================================================
;--     Function for converting a maPrin expression to HyperTeX format
;--=======================================================================
;hyperize(u,w) ==
;  $LINELENGTH: local := w
;  $mkTestFlag: local := nil
;  $testOutputLineFlag: local := true
;  $testOutputLineList: local := nil
;  maPrin COPY u
;  res := REVERSE $testOutputLineList
;  null res => '""
;  null rest res => first res
;  "STRCONC"/[first res,:[STRCONC("\newline ",x) for x in rest res]]

(DEFUN |hyperize| (|u| |w|)
  (PROG ($LINELENGTH |$mkTestFlag| |$testOutputLineFlag|
            |$testOutputLineList| |res|)
    (DECLARE (SPECIAL $LINELENGTH |$mkTestFlag| |$testOutputLineFlag|
                      |$testOutputLineList|))
    (RETURN
      (SEQ (PROGN
             (setq $LINELENGTH |w|)
             (setq |$mkTestFlag| NIL)
             (setq |$testOutputLineFlag| 'T)
             (setq |$testOutputLineList| NIL)
             (|maPrin| (COPY |u|))
             (setq |res| (REVERSE |$testOutputLineList|))
             (COND
               ((NULL |res|) "")
               ((NULL (CDR |res|)) (CAR |res|))
               ('T
                (PROG (G166165)
                  (setq G166165 "")
                  (RETURN
                    (DO ((G166170
                             (CONS (CAR |res|)
                                   (PROG (G166180)
                                     (setq G166180 NIL)
                                     (RETURN
                                       (DO
                                        ((G166185 (CDR |res|)
                                          (CDR G166185))
                                         (|x| NIL))
                                        ((OR (ATOM G166185)
                                          (PROGN
                                            (SETQ |x| (CAR G166185))
                                            NIL))
                                         (NREVERSE0 G166180))
                                         (SEQ
                                          (EXIT
                                           (SETQ G166180
                                            (CONS
                                             (STRCONC '|\\newline |
                                              |x|)
                                             G166180))))))))
                             (CDR G166170))
                         (G166163 NIL))
                        ((OR (ATOM G166170)
                             (PROGN
                               (SETQ G166163 (CAR G166170))
                               NIL))
                         G166165)
                      (SEQ (EXIT (SETQ G166165
                                     (STRCONC G166165 G166163))))))))))))))

;verbatimize u ==
;  u = '"" => u
;  STRCONC('"\begin{verbatim}",u,'"\end{verbatim}")

(DEFUN |verbatimize| (|u|)
  (COND
    ((BOOT-EQUAL |u| "") |u|)
    ('T
     (STRCONC "\\begin{verbatim}" |u|
              "\\end{verbatim}"))))

;--=======================================================================
;--                Function for Verifying a `record' file
;--=======================================================================
;verifyRecordFile(pathname) ==
;  ifn := PATHNAME_-NAME pathname
;  sayBrightly ['"Verifying",:bright ifn]
;  not isExistingFile pathname => throwKeyedMsg("S2IL0003",[namestring ifn])
;  stream := MAKE_-INSTREAM pathname
;  clearCmdAll()
;  result := 'ok
;  for j in 1.. repeat
;    NULL (PEEK_-CHAR ( true, stream ,nil,nil ))=>return nil
;    [i,t,:o] := dewritify READ stream
;    null i => return nil
;    t = 'ForSystemCommands =>
;      return testInput2Output(i,nil)
;        --read trailing system commands
;    [typ,:output] := testInput2Output(i,j)
;    typ = t =>
;      output = o => 'ok
;      result := 'error
;      wasIs(o,output)
;    result := 'error
;    wasIs(o,output,t,typ)
;  suffix := (result = 'ok => '"is ok"; '"has errors")
;  sayBrightly [:bright ifn,suffix]

(DEFUN |verifyRecordFile| (|pathname|)
  (PROG (|ifn| |stream| |i| |t| |o| |LETTMP#1| |typ| |output| |result|
               |suffix|)
    (RETURN
      (SEQ (PROGN
             (setq |ifn| (PATHNAME-NAME |pathname|))
             (|sayBrightly|
                 (CONS "Verifying" (|bright| |ifn|)))
             (COND
               ((NULL (|isExistingFile| |pathname|))
                (|throwKeyedMsg| "The file %1 is needed but does not exist."
                    (CONS (|namestring| |ifn|) NIL)))
               ('T (setq |stream| (MAKE-INSTREAM |pathname|))
                (|clearCmdAll|) (setq |result| '|ok|)
                (DO ((|j| 1 (QSADD1 |j|))) (NIL NIL)
                  (SEQ (EXIT (COND
                               ((NULL (PEEK-CHAR 'T |stream| NIL NIL))
                                (RETURN NIL))
                               ('T
                                (setq |LETTMP#1|
                                         (|dewritify|
                                          (VMREAD |stream|)))
                                (setq |i| (CAR |LETTMP#1|))
                                (setq |t| (CADR |LETTMP#1|))
                                (setq |o| (CDDR |LETTMP#1|))
                                (COND
                                  ((NULL |i|) (RETURN NIL))
                                  ((BOOT-EQUAL |t|
                                    '|ForSystemCommands|)
                                   (RETURN
                                     (|testInput2Output| |i| NIL)))
                                  ('T
                                   (setq |LETTMP#1|
                                    (|testInput2Output| |i| |j|))
                                   (setq |typ| (CAR |LETTMP#1|))
                                   (setq |output| (CDR |LETTMP#1|))
                                   (COND
                                     ((BOOT-EQUAL |typ| |t|)
                                      (COND
                                        ((BOOT-EQUAL |output| |o|)
                                         '|ok|)
                                        ('T (setq |result| '|error|)
                                         (|wasIs| |o| |output|))))
                                     ('T (setq |result| '|error|)
                                      (|wasIs| |o| |output| |t| |typ|))))))))))
                (setq |suffix|
                         (COND
                           ((BOOT-EQUAL |result| '|ok|)
                            "is ok")
                           ('T "has errors")))
                (|sayBrightly|
                    (APPEND (|bright| |ifn|) (CONS |suffix| NIL))))))))))

;testInput2Output(lines,n) ==
;  $mkTestOutputStack: local := nil
;  $mkTestOutputType: local := nil
;  $mkTestFlag: local := nil
;  $runTestFlag: local := true
;  $testOutput: local := nil
;  evaluateLines lines
;  null n => nil     --return from reading trailing system commands
;  typ := $mkTestOutputType
;  output := NREVERSE $mkTestOutputStack
;  [prefix2String typ,:output]

(DEFUN |testInput2Output| (|lines| |n|)
  (PROG (|$mkTestOutputStack| |$mkTestOutputType| |$mkTestFlag|
            |$runTestFlag| |$testOutput| |typ| |output|)
    (DECLARE (SPECIAL |$mkTestOutputStack| |$mkTestOutputType|
                      |$mkTestFlag| |$runTestFlag| |$testOutput|))
    (RETURN
      (PROGN
        (setq |$mkTestOutputStack| NIL)
        (setq |$mkTestOutputType| NIL)
        (setq |$mkTestFlag| NIL)
        (setq |$runTestFlag| 'T)
        (setq |$testOutput| NIL)
        (|evaluateLines| |lines|)
        (COND
          ((NULL |n|) NIL)
          ('T (setq |typ| |$mkTestOutputType|)
           (setq |output| (NREVERSE |$mkTestOutputStack|))
           (CONS (|prefix2String| |typ|) |output|)))))))

;evaluateLines lines ==
;  file := MAKE_-OUTSTREAM '"/tmp/temp.input"
;  for line in lines repeat
;--  stringPrefix?('")read ",line) => 'skip
;    stringPrefix?('")r",line) => 'skip
;    stringPrefix?('")undo )redo",line) => 'skip
;    PRINC(line, file)
;    TERPRI file
;  SHUT file
;  _/EDITFILE: fluid := '"/tmp/temp.input"
;  _/RF()
;    -- can't use _/EDITFILE since it might be reset
;  DELETE_-FILE '"/tmp/temp.input"

(DEFUN |evaluateLines| (|lines|)
  (PROG (/EDITFILE |file|)
    (DECLARE (SPECIAL /EDITFILE))
    (RETURN
      (SEQ (PROGN
             (setq |file|
                      (MAKE-OUTSTREAM "/tmp/temp.input"))
             (DO ((G166280 |lines| (CDR G166280)) (|line| NIL))
                 ((OR (ATOM G166280)
                      (PROGN (SETQ |line| (CAR G166280)) NIL))
                  NIL)
               (SEQ (EXIT (COND
                            ((|stringPrefix?| ")r" |line|)
                             '|skip|)
                            ((|stringPrefix?|
                                 ")undo )redo" |line|)
                             '|skip|)
                            ('T (PRINC |line| |file|)
                             (TERPRI |file|))))))
             (SHUT |file|)
             (setq /EDITFILE "/tmp/temp.input")
             (/RF)
             (DELETE-FILE "/tmp/temp.input"))))))

;wasIs(old,new,:typePart) ==
;  sayBrightly '"*************************************************************"
;  if old ^= new then
;    sayBrightly '"Was ----------> "
;    for x in old repeat maPrin x
;    sayBrightly '"Is -----------> "
;    for x in new repeat maPrin x
;  typePart is [oldtype,newtype] and oldtype ^= newtype =>
;    sayBrightlyNT ['" Type was ---> ",oldtype]
;    pp old
;    sayBrightlyNT ['" Type is  ---> ",newtype]
;    pp new

(DEFUN |wasIs| (&REST G166329 &AUX |typePart| |new| |old|)
  (DSETQ (|old| |new| . |typePart|) G166329)
  (PROG (|oldtype| |ISTMP#1| |newtype|)
    (RETURN
      (SEQ (PROGN
             (|sayBrightly|
                               "*************************************************************")
             (COND
               ((NEQUAL |old| |new|)
                (|sayBrightly| "Was ----------> ")
                (DO ((G166308 |old| (CDR G166308)) (|x| NIL))
                    ((OR (ATOM G166308)
                         (PROGN (SETQ |x| (CAR G166308)) NIL))
                     NIL)
                  (SEQ (EXIT (|maPrin| |x|))))
                (|sayBrightly| "Is -----------> ")
                (DO ((G166317 |new| (CDR G166317)) (|x| NIL))
                    ((OR (ATOM G166317)
                         (PROGN (SETQ |x| (CAR G166317)) NIL))
                     NIL)
                  (SEQ (EXIT (|maPrin| |x|))))))
             (COND
               ((AND (CONSP |typePart|)
                     (PROGN
                       (setq |oldtype| (QCAR |typePart|))
                       (setq |ISTMP#1| (QCDR |typePart|))
                       (AND (CONSP |ISTMP#1|) (EQ (QCDR |ISTMP#1|) NIL)
                            (PROGN
                              (setq |newtype| (QCAR |ISTMP#1|))
                              'T)))
                     (NEQUAL |oldtype| |newtype|))
                (PROGN
                  (|sayBrightlyNT|
                      (CONS " Type was ---> "
                            (CONS |oldtype| NIL)))
                  (|pp| |old|)
                  (|sayBrightlyNT|
                      (CONS " Type is  ---> "
                            (CONS |newtype| NIL)))
                  (|pp| |new|)))))))))

;--=======================================================================
;--              Creating Input Files from HT Files
;--=======================================================================
;htFile2InputFile(pathname,:option) ==
;  ifn := pathnameName pathname
;  not isExistingFile pathname => throwKeyedMsg("S2IL0003",[namestring ifn])
;  opath := KAR option or pathname
;  odirect := pathnameDirectory opath
;  opathname := htMkPath(odirect,ifn,'"input")
;  if isExistingFile opathname then DELETE_-FILE opathname
;  $htStream : local := MAKE_-INSTREAM pathname
;  alist := [[htGetPageName u,:htGetSpadCommands()]
;              while (u := htExampleFind '"\begin{page}")]
;  SHUT $htStream
;  outStream := MAKE_-OUTSTREAM opathname
;  for [pageName,:commands] in alist repeat
;    PRINC('"-- ",outStream)
;    PRINC(pageName,outStream)
;    TERPRI outStream
;    PRINC('")cl all",outStream)
;    TERPRI outStream
;    for x in commands repeat
;      PRINC(htCommandToInputLine x,outStream)
;      TERPRI outStream
;    TERPRI outStream
;  SHUT outStream
;  opathname

(DEFUN |htFile2InputFile| (&REST G166396 &AUX |option| |pathname|)
  (DSETQ (|pathname| . |option|) G166396)
  (PROG (|$htStream| |ifn| |opath| |odirect| |opathname| |u| |alist|
            |outStream| |pageName| |commands|)
    (DECLARE (SPECIAL |$htStream|))
    (RETURN
      (SEQ (PROGN
             (setq |ifn| (|pathnameName| |pathname|))
             (COND
               ((NULL (|isExistingFile| |pathname|))
                (|throwKeyedMsg| "The file %1 is needed but does not exist."
                    (CONS (|namestring| |ifn|) NIL)))
               ('T (setq |opath| (OR (KAR |option|) |pathname|))
                (setq |odirect| (|pathnameDirectory| |opath|))
                (setq |opathname|
                         (|htMkPath| |odirect| |ifn|
                             "input"))
                (COND
                  ((|isExistingFile| |opathname|)
                   (DELETE-FILE |opathname|)))
                (setq |$htStream| (MAKE-INSTREAM |pathname|))
                (setq |alist|
                         (PROG (G166341)
                           (setq G166341 NIL)
                           (RETURN
                             (DO ()
                                 ((NULL (setq |u|
                                         (|htExampleFind|
                                          "\\begin{page}")))
                                  (NREVERSE0 G166341))
                               (SEQ (EXIT
                                     (SETQ G166341
                                      (CONS
                                       (CONS (|htGetPageName| |u|)
                                        (|htGetSpadCommands|))
                                       G166341))))))))
                (SHUT |$htStream|)
                (setq |outStream| (MAKE-OUTSTREAM |opathname|))
                (DO ((G166362 |alist| (CDR G166362))
                     (G166332 NIL))
                    ((OR (ATOM G166362)
                         (PROGN (SETQ G166332 (CAR G166362)) NIL)
                         (PROGN
                           (PROGN
                             (setq |pageName| (CAR G166332))
                             (setq |commands| (CDR G166332))
                             G166332)
                           NIL))
                     NIL)
                  (SEQ (EXIT (PROGN
                               (PRINC "-- "
                                   |outStream|)
                               (PRINC |pageName| |outStream|)
                               (TERPRI |outStream|)
                               (PRINC ")cl all"
                                   |outStream|)
                               (TERPRI |outStream|)
                               (DO ((G166374 |commands|
                                     (CDR G166374))
                                    (|x| NIL))
                                   ((OR (ATOM G166374)
                                     (PROGN
                                       (SETQ |x| (CAR G166374))
                                       NIL))
                                    NIL)
                                 (SEQ (EXIT
                                       (PROGN
                                         (PRINC
                                          (|htCommandToInputLine| |x|)
                                          |outStream|)
                                         (TERPRI |outStream|)))))
                               (TERPRI |outStream|)))))
                (SHUT |outStream|) |opathname|)))))))

;htCommandToInputLine s == fn(s,0) where fn(s,init) ==
;--similar to htTrimAtBackSlash except removes all \
;  k := or/[i for i in init..MAXINDEX s | s.i = char '_\] =>
;    MEMBER(s.(k + 1),[char 'f,char 'b]) => SUBSTRING(s,init,k - init)
;    STRCONC(SUBSTRING(s,init,k - init),fn(s,k + 1))
;  SUBSTRING(s,init,nil)

(DEFUN |htCommandToInputLine,fn| (|s| |init|)
  (PROG (|k|)
    (RETURN
      (SEQ (IF (setq |k|
                        (PROG (G166399)
                          (setq G166399 NIL)
                          (RETURN
                            (DO ((G166406 NIL G166399)
                                 (G166407 (MAXINDEX |s|))
                                 (|i| |init| (+ |i| 1)))
                                ((OR G166406 (> |i| G166407))
                                 G166399)
                              (SEQ (EXIT
                                    (COND
                                      ((BOOT-EQUAL (ELT |s| |i|)
                                        (|char| '|\\|))
                                       (SETQ G166399
                                        (OR G166399 |i|))))))))))
               (EXIT (SEQ (IF (|member| (ELT |s| (+ |k| 1))
                                  (CONS (|char| '|f|)
                                        (CONS (|char| '|b|) NIL)))
                              (EXIT (SUBSTRING |s| |init|
                                     (- |k| |init|))))
                          (EXIT (STRCONC (SUBSTRING |s| |init|
                                          (- |k| |init|))
                                         (|htCommandToInputLine,fn| |s|
                                          (+ |k| 1)))))))
           (EXIT (SUBSTRING |s| |init| NIL))))))

(DEFUN |htCommandToInputLine| (|s|) (|htCommandToInputLine,fn| |s| 0)) 

;htTrimAtBackSlash s ==
;  backslash := char '_\
;  k := or/[i for i in 0..MAXINDEX s | s.i = backslash
;          and MEMBER(s.(i + 1),[char 'f,char 'b])] => SUBSTRING(s,0,k - 1)
;  s

(DEFUN |htTrimAtBackSlash| (|s|)
  (PROG (|backslash| |k|)
    (RETURN
      (SEQ (PROGN
             (setq |backslash| (|char| '|\\|))
             (COND
               ((setq |k|
                         (PROG (G166422)
                           (setq G166422 NIL)
                           (RETURN
                             (DO ((G166429 NIL G166422)
                                  (G166430 (MAXINDEX |s|))
                                  (|i| 0 (QSADD1 |i|)))
                                 ((OR G166429
                                      (QSGREATERP |i| G166430))
                                  G166422)
                               (SEQ (EXIT
                                     (COND
                                       ((AND
                                         (BOOT-EQUAL (ELT |s| |i|)
                                          |backslash|)
                                         (|member|
                                          (ELT |s| (+ |i| 1))
                                          (CONS (|char| '|f|)
                                           (CONS (|char| '|b|) NIL))))
                                        (SETQ G166422
                                         (OR G166422 |i|))))))))))
                (SUBSTRING |s| 0 (- |k| 1)))
               ('T |s|)))))))

;htMkPath(directory,name,typ) ==
;  nameType := STRCONC(name,'".",typ)
;  null directory => nameType
;  STRCONC(directory,nameType)

(DEFUN |htMkPath| (|directory| |name| |typ|)
  (PROG (|nameType|)
    (RETURN
      (PROGN
        (setq |nameType| (STRCONC |name| "." |typ|))
        (COND
          ((NULL |directory|) |nameType|)
          ('T (STRCONC |directory| |nameType|)))))))

;--=======================================================================
;--              Creating Record File from HT Files
;--=======================================================================
;htFile2RecordFile(pathname,:option) ==
;  inputFile2RecordFile htFile2InputFile(pathname,KAR option)

(DEFUN |htFile2RecordFile| (&REST G166449 &AUX |option| |pathname|)
  (DSETQ (|pathname| . |option|) G166449)
  (|inputFile2RecordFile|
      (|htFile2InputFile| |pathname| (KAR |option|))))

;--=======================================================================
;--           Function to record and print values into $testStream
;--=======================================================================
;recordAndPrintTest md ==  --called by recordAndPrint
;  input :=
;    STRINGP $currentLine => [$currentLine]
;    fn $currentLine where fn x ==
;      x is [y,:r] =>
;        y.(k := MAXINDEX y) = char '__ =>
;          u := fn r
;          [STRCONC(SUBSTRING(y,0,k),'" ",first u),:rest u]
;        [y,:fn r]
;      x
;  output := NREVERSE $mkTestOutputStack -- set by maPrin
;  PRINT(writify [input,prefix2String md,:output],$testStream)
;  $mkTestInputStack := nil
;  $mkTestOutputStack := nil

(DEFUN |recordAndPrintTest,fn| (|x|)
  (PROG (|y| |r| |k| |u|)
    (RETURN
      (SEQ (IF (AND (CONSP |x|)
                    (PROGN
                      (setq |y| (QCAR |x|))
                      (setq |r| (QCDR |x|))
                      'T))
               (EXIT (SEQ (IF (BOOT-EQUAL
                                  (ELT |y|
                                       (setq |k| (MAXINDEX |y|)))
                                  (|char| '_))
                              (EXIT (SEQ
                                     (setq |u|
                                      (|recordAndPrintTest,fn| |r|))
                                     (EXIT
                                      (CONS
                                       (STRCONC (SUBSTRING |y| 0 |k|)
                                        " " (CAR |u|))
                                       (CDR |u|))))))
                          (EXIT (CONS |y|
                                      (|recordAndPrintTest,fn| |r|))))))
           (EXIT |x|)))))

(DEFUN |recordAndPrintTest| (|md|)
  (PROG (|input| |output|)
  (declare (special |$mkTestOutputStack| |$mkTestInputStack| |$testStream|
                    |$currentLine|))
    (RETURN
      (PROGN
        (setq |input|
                 (COND
                   ((STRINGP |$currentLine|) (CONS |$currentLine| NIL))
                   ('T (|recordAndPrintTest,fn| |$currentLine|))))
        (setq |output| (NREVERSE |$mkTestOutputStack|))
        (PRINT (|writify|
                   (CONS |input|
                         (CONS (|prefix2String| |md|) |output|)))
               |$testStream|)
        (setq |$mkTestInputStack| NIL)
        (setq |$mkTestOutputStack| NIL)))))

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
