\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp i-toplev.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{verbatim}
This file contains the top-most code for receiving parser output,
calling the analysis routines and printing the result output. It
also contains several flavors of routines that start the interpreter
from LISP.
\end{verbatim}
<<*>>=

(IN-PACKAGE "BOOT" )

;-- When $ProcessInteractiveValue is true, we don't want the value printed
;-- or recorded.
;SETANDFILEQ($ProcessInteractiveValue, NIL)

(SETANDFILEQ |$ProcessInteractiveValue| NIL) 

;SETANDFILEQ($HTCompanionWindowID, NIL)

(SETANDFILEQ |$HTCompanionWindowID| NIL) 

;--% Starting the interpreter from LISP
;spadpo() ==
;  -- starts the interpreter but only displays parsed input
;  $PrintOnly: local:= true
;  spad()

(DEFUN |spadpo| ()
  (PROG (|$PrintOnly|)
    (DECLARE (SPECIAL |$PrintOnly|))
    (RETURN (PROGN (SPADLET |$PrintOnly| 'T) (|spad|)))))

;start(:l) ==
;  -- The function  start  begins the interpreter process, reading in
;  -- the profile and printing start-up messages.
;  $PrintCompilerMessageIfTrue: local := nil
;  $inLispVM : local := nil
;  if $displayStartMsgs then sayKeyedMsg("S2IZ0053",['"interpreter"])
;  initializeTimedNames($interpreterTimedNames,$interpreterTimedClasses)
;  statisticsInitialization()
;  $InteractiveFrame := makeInitialModemapFrame()
;  initializeSystemCommands()
;  initializeInterpreterFrameRing()
;  SETQ(ERROROUTSTREAM,
;    DEFIOSTREAM('((DEVICE . CONSOLE)(MODE . OUTPUT)),80,0))
;  setOutputAlgebra "%initialize%"
;  loadExposureGroupData()
;  if $displayStartMsgs then sayKeyedMsg("S2IZ0053",['"database"])
;  mkLowerCaseConTable()
;  if not $ruleSetsInitialized then initializeRuleSets()
;  if $displayStartMsgs then sayKeyedMsg("S2IZ0053",['"constructors"])
;  makeConstructorsAutoLoad()
;  GCMSG(NIL)
;  SETQ($IOindex,1)
;  if $displayStartMsgs then sayKeyedMsg("S2IZ0053",['"history"])
;  initHist()
;  if functionp 'addtopath then addtopath CONCAT($SPADROOT,'"bin")
;  SETQ($CURRENT_-DIRECTORY,_*DEFAULT_-PATHNAME_-DEFAULTS_*)
;  if null(l) then
;    if $displayStartMsgs then
;      sayKeyedMsg("S2IZ0053",[namestring ['_.axiom,'input]])
;    readSpadProfileIfThere()
;  if $displayStartMsgs then spadStartUpMsgs()
;  if $OLDLINE then
;    SAY fillerSpaces($LINELENGTH,'"=")
;    sayKeyedMsg("S2IZ0050",[namestring ['axiom,'input]])
;    if $OLDLINE ^= 'END__UNIT
;      then
;        centerAndHighlight($OLDLINE,$LINELENGTH,'" ")
;        sayKeyedMsg("S2IZ0051",NIL)
;      else sayKeyedMsg("S2IZ0052",NIL)
;    SAY fillerSpaces($LINELENGTH,'"=")
;    TERPRI()
;    $OLDLINE := NIL
;  $superHash := MAKE_-HASHTABLE('UEQUAL)
;  if null l then runspad()
;  'EndOfSpad

(DEFUN |start| (&REST G166080 &AUX |l|)
  (DSETQ |l| G166080)
  (PROG (|$PrintCompilerMessageIfTrue| |$inLispVM|)
    (DECLARE (SPECIAL |$PrintCompilerMessageIfTrue| |$inLispVM| |$superHash|
                      $OLDLINE $LINELENGTH |$displayStartMsgs|
                      $CURRENT-DIRECTORY *DEFAULT-PATHNAME-DEFAULTS*
                      $SPADROOT |$IOindex| |$ruleSetsInitialized|
                      |$InteractiveFrame| |$interpreterTimedClasses|
                      |$interpreterTimedNames|))
    (RETURN
      (PROGN
        (SPADLET |$PrintCompilerMessageIfTrue| NIL)
        (SPADLET |$inLispVM| NIL)
        (COND
          (|$displayStartMsgs|
              (|sayKeyedMsg| 'S2IZ0053
                  (CONS (MAKESTRING "interpreter") NIL))))
        (|initializeTimedNames| |$interpreterTimedNames|
            |$interpreterTimedClasses|)
        (|statisticsInitialization|)
        (SPADLET |$InteractiveFrame| (|makeInitialModemapFrame|))
        (|initializeSystemCommands|)
        (|initializeInterpreterFrameRing|)
        (SETQ ERROROUTSTREAM
              (DEFIOSTREAM '((DEVICE . CONSOLE) (MODE . OUTPUT)) 80 0))
        (|setOutputAlgebra| '|%initialize%|)
        (COND
          (|$displayStartMsgs|
              (|sayKeyedMsg| 'S2IZ0053
                  (CONS (MAKESTRING "database") NIL))))
        (|mkLowerCaseConTable|)
        (COND ((NULL |$ruleSetsInitialized|) (|initializeRuleSets|)))
        (COND
          (|$displayStartMsgs|
              (|sayKeyedMsg| 'S2IZ0053
                  (CONS (MAKESTRING "constructors") NIL))))
        (|makeConstructorsAutoLoad|)
        (GCMSG NIL)
        (SETQ |$IOindex| 1)
        (COND
          (|$displayStartMsgs|
              (|sayKeyedMsg| 'S2IZ0053
                  (CONS (MAKESTRING "history") NIL))))
        (|initHist|)
        (COND
          ((|functionp| '|addtopath|)
           (|addtopath| (CONCAT $SPADROOT (MAKESTRING "bin")))))
        (SETQ $CURRENT-DIRECTORY *DEFAULT-PATHNAME-DEFAULTS*)
        (COND
          ((NULL |l|)
           (COND
             (|$displayStartMsgs|
                 (|sayKeyedMsg| 'S2IZ0053
                     (CONS (|namestring|
                               (CONS (INTERN ".axiom" "BOOT")
                                     (CONS '|input| NIL)))
                           NIL))))
           (|readSpadProfileIfThere|)))
        (COND (|$displayStartMsgs| (|spadStartUpMsgs|)))
        (COND
          ($OLDLINE (SAY (|fillerSpaces| $LINELENGTH (MAKESTRING "=")))
              (|sayKeyedMsg| 'S2IZ0050
                  (CONS (|namestring|
                            (CONS '|axiom| (CONS '|input| NIL)))
                        NIL))
              (COND
                ((NEQUAL $OLDLINE 'END_UNIT)
                 (|centerAndHighlight| $OLDLINE $LINELENGTH
                     (MAKESTRING " "))
                 (|sayKeyedMsg| 'S2IZ0051 NIL))
                ('T (|sayKeyedMsg| 'S2IZ0052 NIL)))
              (SAY (|fillerSpaces| $LINELENGTH (MAKESTRING "=")))
              (TERPRI) (SPADLET $OLDLINE NIL)))
        (SPADLET |$superHash| (MAKE-HASHTABLE 'UEQUAL))
        (COND ((NULL |l|) (|runspad|)))
        '|EndOfSpad|))))


;typeTimePrin x ==
;  $highlightDelta: local:= 0
;  maprinSpecial(x,0,79)

(DEFUN |typeTimePrin| (|x|)
  (PROG (|$highlightDelta|)
    (DECLARE (SPECIAL |$highlightDelta|))
    (RETURN
      (PROGN (SPADLET |$highlightDelta| 0) (|maprinSpecial| |x| 0 79)))))

;--%  Interpreter Middle-Level Driver + Utilities
;interpretTopLevel(x, posnForm) ==
;  --  Top level entry point from processInteractive1.  Sets up catch
;  --  for a thrown result
;  savedTimerStack := COPY $timedNameStack
;  c := CATCH('interpreter,interpret(x, posnForm))
;  while savedTimerStack ^= $timedNameStack repeat
;    stopTimingProcess peekTimedName()
;  c = 'tryAgain => interpretTopLevel(x, posnForm)
;  c

(DEFUN |interpretTopLevel| (|x| |posnForm|)
  (PROG (|savedTimerStack| |c|)
  (declare (special |$timedNameStack|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |savedTimerStack| (COPY |$timedNameStack|))
             (SPADLET |c|
                      (CATCH '|interpreter|
                        (|interpret| |x| |posnForm|)))
             (DO ()
                 ((NULL (NEQUAL |savedTimerStack| |$timedNameStack|))
                  NIL)
               (SEQ (EXIT (|stopTimingProcess| (|peekTimedName|)))))
             (COND
               ((BOOT-EQUAL |c| '|tryAgain|)
                (|interpretTopLevel| |x| |posnForm|))
               ('T |c|)))))))

;interpret(x, :restargs) ==
;  posnForm := if PAIRP restargs then CAR restargs else restargs
;  --type analyzes and evaluates expression x, returns object
;  $env:local := [[NIL]]
;  $eval:local := true           --generate code-- don't just type analyze
;  $genValue:local := true       --evaluate all generated code
;  interpret1(x,nil,posnForm)

(DEFUN |interpret| (&REST G166333 &AUX |restargs| |x|)
  (DSETQ (|x| . |restargs|) G166333)
  (PROG (|$env| |$eval| |$genValue| |posnForm|)
    (DECLARE (SPECIAL |$env| |$eval| |$genValue|))
    (RETURN
      (PROGN
        (SPADLET |posnForm|
                 (COND
                   ((PAIRP |restargs|) (CAR |restargs|))
                   ('T |restargs|)))
        (SPADLET |$env| (CONS (CONS NIL NIL) NIL))
        (SPADLET |$eval| 'T)
        (SPADLET |$genValue| 'T)
        (|interpret1| |x| NIL |posnForm|)))))

;interpret1(x,rootMode,posnForm) ==
;  -- dispatcher for the type analysis routines.  type analyzes and
;  -- evaluates the expression x in the rootMode (if non-nil)
;  -- which may be $EmptyMode.  returns an object if evaluating, and a
;  -- modeset otherwise
;  -- create the attributed tree
;  node := mkAtreeWithSrcPos(x, posnForm)
;  if rootMode then putTarget(node,rootMode)
;  -- do type analysis and evaluation of expression.  The real guts
;  modeSet:= bottomUp node
;  not $eval => modeSet
;  newRootMode := (null rootMode => first modeSet ; rootMode)
;  argVal := getArgValue(node, newRootMode)
;  argVal and not $genValue => objNew(argVal, newRootMode)
;  argVal and (val:=getValue node) => interpret2(val,newRootMode,posnForm)
;  keyedSystemError("S2IS0053",[x])

(DEFUN |interpret1| (|x| |rootMode| |posnForm|)
  (PROG (|node| |modeSet| |newRootMode| |argVal| |val|)
  (declare (special |$genValue| |$eval|))
    (RETURN
      (PROGN
        (SPADLET |node| (|mkAtreeWithSrcPos| |x| |posnForm|))
        (COND (|rootMode| (|putTarget| |node| |rootMode|)))
        (SPADLET |modeSet| (|bottomUp| |node|))
        (COND
          ((NULL |$eval|) |modeSet|)
          ('T
           (SPADLET |newRootMode|
                    (COND
                      ((NULL |rootMode|) (CAR |modeSet|))
                      ('T |rootMode|)))
           (SPADLET |argVal| (|getArgValue| |node| |newRootMode|))
           (COND
             ((AND |argVal| (NULL |$genValue|))
              (|objNew| |argVal| |newRootMode|))
             ((AND |argVal| (SPADLET |val| (|getValue| |node|)))
              (|interpret2| |val| |newRootMode| |posnForm|))
             ('T (|keyedSystemError| 'S2IS0053 (CONS |x| NIL))))))))))

;interpret2(object,m1,posnForm) ==
;  -- this is the late interpretCoerce. I removed the call to
;  -- coerceInteractive, so it only does the JENKS cases    ALBI
;  m1=$ThrowAwayMode => object
;  x := objVal object
;  m := objMode object
;  m=$EmptyMode =>
;    x is [op,:.]  and op in '(MAP STREAM) => objNew(x,m1)
;    m1 = $EmptyMode => objNew(x,m)
;    systemErrorHere '"interpret2"
;  m1 =>
;    if (ans := coerceInteractive(object,m1)) then ans
;    else throwKeyedMsgCannotCoerceWithValue(x,m,m1)
;  object

(DEFUN |interpret2| (|object| |m1| |posnForm|)
  (declare (ignore  |posnForm|))
  (PROG (|x| |m| |op| |ans|)
  (declare (special |$EmptyMode| |$ThrowAwayMode|))
    (RETURN
      (COND
        ((BOOT-EQUAL |m1| |$ThrowAwayMode|) |object|)
        ('T (SPADLET |x| (|objVal| |object|))
         (SPADLET |m| (|objMode| |object|))
         (COND
           ((BOOT-EQUAL |m| |$EmptyMode|)
            (COND
              ((AND (PAIRP |x|) (PROGN (SPADLET |op| (QCAR |x|)) 'T)
                    (|member| |op| '(MAP STREAM)))
               (|objNew| |x| |m1|))
              ((BOOT-EQUAL |m1| |$EmptyMode|) (|objNew| |x| |m|))
              ('T (|systemErrorHere| (MAKESTRING "interpret2")))))
           (|m1| (COND
                   ((SPADLET |ans| (|coerceInteractive| |object| |m1|))
                    |ans|)
                   ('T
                    (|throwKeyedMsgCannotCoerceWithValue| |x| |m| |m1|))))
           ('T |object|)))))))

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
