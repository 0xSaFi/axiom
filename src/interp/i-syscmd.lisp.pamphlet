\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp i-syscmd.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
<<*>>=

(IN-PACKAGE "BOOT" )

;SETANDFILEQ($errorReportLevel,'warning)

(SETANDFILEQ |$errorReportLevel| (QUOTE |warning|)) 

;SETANDFILEQ($sourceFileTypes,'(INPUT SPAD BOOT LISP LISP370 META))

(SETANDFILEQ |$sourceFileTypes| (QUOTE (INPUT SPAD BOOT LISP LISP370 META))) 

;SETANDFILEQ($countAssoc,'( (cache countCache) ))

(SETANDFILEQ |$countAssoc| (QUOTE ((|cache| |countCache|)))) 

;--% Top level system command
;-- (mapcar #'car $systemCommands)
;initializeSystemCommands() ==
;  l := $systemCommands
;  $SYSCOMMANDS := NIL
;  while l repeat
;    $SYSCOMMANDS := CONS(CAAR l, $SYSCOMMANDS)
;    l := CDR l
;  $SYSCOMMANDS := NREVERSE $SYSCOMMANDS

(DEFUN |initializeSystemCommands| ()
  (PROG (|l|)
  (declare (special $SYSCOMMANDS |$systemCommands|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |l| |$systemCommands|)
             (SPADLET $SYSCOMMANDS NIL)
             (DO () ((NULL |l|) NIL)
               (SEQ (EXIT (PROGN
                            (SPADLET $SYSCOMMANDS
                                     (CONS (CAAR |l|) $SYSCOMMANDS))
                            (SPADLET |l| (CDR |l|))))))
             (SPADLET $SYSCOMMANDS (NREVERSE $SYSCOMMANDS)))))))

;synonymsForUserLevel l ==
;  -- l is a list of synonyms, and this returns a sublist of applicable
;  -- synonyms at the current user level.
;  $UserLevel = 'development => l
;  nl := NIL
;  for syn in reverse l repeat
;    cmd := STRING2ID_-N(CDR syn,1)
;    null selectOptionLC(cmd,commandsForUserLevel
;      $systemCommands,NIL) => nil
;    nl := [syn,:nl]
;  nl

(DEFUN |synonymsForUserLevel| (|l|)
  (PROG (|cmd| |nl|)
  (declare (special |$systemCommands| |$UserLevel|))
    (RETURN
      (SEQ (COND
             ((BOOT-EQUAL |$UserLevel| '|development|) |l|)
             ('T (SPADLET |nl| NIL)
              (DO ((G166131 (REVERSE |l|) (CDR G166131))
                   (|syn| NIL))
                  ((OR (ATOM G166131)
                       (PROGN (SETQ |syn| (CAR G166131)) NIL))
                   NIL)
                (SEQ (EXIT (PROGN
                             (SPADLET |cmd|
                                      (STRING2ID-N (CDR |syn|) 1))
                             (COND
                               ((NULL (|selectOptionLC| |cmd|
                                       (|commandsForUserLevel|
                                        |$systemCommands|)
                                       NIL))
                                NIL)
                               ('T (SPADLET |nl| (CONS |syn| |nl|))))))))
              |nl|))))))

;--% Utility for access to original command line
;getSystemCommandLine() ==
;  p := STRPOS('")",$currentLine,0,NIL)
;  line := if p then SUBSTRING($currentLine,p,NIL) else $currentLine
;  maxIndex:= MAXINDEX line
;  for i in 0..maxIndex while (line.i^=" ") repeat index:= i
;  if index=maxIndex then line := '""
;  else line := SUBSTRING(line,index+2,nil)
;  line

(DEFUN |getSystemCommandLine| ()
  (PROG (|p| |maxIndex| |index| |line|)
  (declare (special |$currentLine|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |p|
                      (STRPOS (MAKESTRING ")") |$currentLine| 0 NIL))
             (SPADLET |line|
                      (COND
                        (|p| (SUBSTRING |$currentLine| |p| NIL))
                        ('T |$currentLine|)))
             (SPADLET |maxIndex| (MAXINDEX |line|))
             (DO ((|i| 0 (QSADD1 |i|)))
                 ((OR (QSGREATERP |i| |maxIndex|)
                      (NULL (NEQUAL (ELT |line| |i|) '| |)))
                  NIL)
               (SEQ (EXIT (SPADLET |index| |i|))))
             (COND
               ((BOOT-EQUAL |index| |maxIndex|)
                (SPADLET |line| (MAKESTRING "")))
               ('T
                (SPADLET |line|
                         (SUBSTRING |line| (PLUS |index| 2) NIL))))
             |line|)))))

;--% )load
;load args == loadSpad2Cmd args

(DEFUN |load| (|args|) (|loadSpad2Cmd| |args|)) 

;loadSpad2Cmd args ==
;    sayKeyedMsg("S2IU0003", nil)
;    NIL

(DEFUN |loadSpad2Cmd| (|args|)
 (declare (ignore |args|))
 (PROGN (|sayKeyedMsg| (QUOTE S2IU0003) NIL) NIL)) 

;--  load1(args,$forceDatabaseUpdate)
;--load1(args,$forceDatabaseUpdate) ==  -- $ var is now local
;--  null args => helpSpad2Cmd '(load)
;--  loadfun := 'loadLib
;--  justWondering := nil
;--  compiler := 'old
;--  doExpose := true
;--  $forceDatabaseUpdate := true  -- BMT request, 5/14/90
;--  for [opt,:.] in $options repeat
;--    fullopt := selectOptionLC(opt,
;--      '(cond update query new noexpose noupdate),
;--        'optionError)
;--    fullopt = 'cond     => loadfun := 'loadLibIfNotLoaded
;--    fullopt = 'query    => justWondering := true
;--    fullopt = 'update   => $forceDatabaseUpdate := true
;--    fullopt = 'noexpose => doExpose := false
;--    fullopt = 'noupdate => $forceDatabaseUpdate := false
;--  if $forceDatabaseUpdate then clearClams()
;--  for lib in args repeat
;--    lib := object2Identifier lib
;--    justWondering =>
;--      GET(lib,'LOADED) => sayKeyedMsg("S2IZ0028",[lib])
;--      sayKeyedMsg("S2IZ0029",[lib])
;--    null GETDATABASE(lib,'OBJECT) and
;--     null (lib := GETDATABASE(lib,'CONSTRUCTOR)) =>
;--      sayKeyedMsg("S2IL0020", [namestring [lib,$spadLibFT,"*"]])
;--    null FUNCALL(loadfun,lib) =>
;--      sayKeyedMsg("S2IZ0029",[lib])
;--    sayKeyedMsg("S2IZ0028",[lib])
;--    if doExpose and
;--       not isExposedConstructor(lib) then
;--          setExposeAddConstr([lib])
;--  'EndOfLoad
;reportCount () ==
;  centerAndHighlight(" Current Count Settings ",$LINELENGTH,specialChar 'hbar)
;  SAY " "
;  sayBrightly [:bright " cache",fillerSpaces(30,'".")," ",$cacheCount]
;  if $cacheAlist then
;    for [a,:b] in $cacheAlist repeat
;      aPart:= linearFormatName a
;      n:= sayBrightlyLength aPart
;      sayBrightly concat("     ",aPart," ",fillerSpaces(32-n,'".")," ",b)
;  SAY " "
;  sayBrightly [:bright " stream",fillerSpaces(29,'".")," ",$streamCount]

(DEFUN |reportCount| ()
  (PROG (|a| |b| |aPart| |n|)
  (declare (special |$streamCount| |$cacheAlist| |$cacheCount| $LINELENGTH))
    (RETURN
      (SEQ (PROGN
             (|centerAndHighlight| '| Current Count Settings |
                 $LINELENGTH (|specialChar| '|hbar|))
             (SAY (MAKESTRING " "))
             (|sayBrightly|
                 (APPEND (|bright| '| cache|)
                         (CONS (|fillerSpaces| 30 (MAKESTRING "."))
                               (CONS '| | (CONS |$cacheCount| NIL)))))
             (COND
               (|$cacheAlist|
                   (DO ((G166567 |$cacheAlist| (CDR G166567))
                        (G166555 NIL))
                       ((OR (ATOM G166567)
                            (PROGN
                              (SETQ G166555 (CAR G166567))
                              NIL)
                            (PROGN
                              (PROGN
                                (SPADLET |a| (CAR G166555))
                                (SPADLET |b| (CDR G166555))
                                G166555)
                              NIL))
                        NIL)
                     (SEQ (EXIT (PROGN
                                  (SPADLET |aPart|
                                           (|linearFormatName| |a|))
                                  (SPADLET |n|
                                           (|sayBrightlyLength|
                                            |aPart|))
                                  (|sayBrightly|
                                      (|concat| '|     | |aPart| '| |
                                       (|fillerSpaces|
                                        (SPADDIFFERENCE 32 |n|)
                                        (MAKESTRING "."))
                                       '| | |b|))))))))
             (SAY (MAKESTRING " "))
             (|sayBrightly|
                 (APPEND (|bright| '| stream|)
                         (CONS (|fillerSpaces| 29 (MAKESTRING "."))
                               (CONS '| | (CONS |$streamCount| NIL))))))))))

;whatCommands(patterns) ==
;  label := STRCONC("System Commands for User Level: ",
;    STRINGIMAGE $UserLevel)
;  centerAndHighlight(label,$LINELENGTH,specialChar 'hbar)
;  l := filterListOfStrings(patterns,
;    [(STRINGIMAGE a) for a in commandsForUserLevel $systemCommands])
;  if patterns then
;    null l =>
;      sayMessage ['"No system commands at this level matching patterns:",
;        '%l,'"   ",'%b,:blankList patterns,'%d]
;    sayMessage ['"System commands at this level matching patterns:",
;      '%l,'"   ",'%b,:blankList patterns,'%d]
;  if l then
;    sayAsManyPerLineAsPossible l
;    SAY " "
;  patterns => nil  -- don't be so verbose
;  sayKeyedMsg("S2IZ0046",NIL)
;  nil

;; (DEFUN |whatCommands| (|patterns|)
;;   (PROG (|label| |l|)
;;   (declare (special |$systemCommands| $LINELENGTH |$UserLevel|))
;;     (RETURN
;;       (SEQ (PROGN
;;              (SPADLET |label|
;;                       (STRCONC '|System Commands for User Level: |
;;                                (STRINGIMAGE |$UserLevel|)))
;;              (|centerAndHighlight| |label| $LINELENGTH
;;                  (|specialChar| '|hbar|))
;;              (SPADLET |l|
;;                       (|filterListOfStrings| |patterns|
;;                           (PROG (G167084)
;;                             (SPADLET G167084 NIL)
;;                             (RETURN
;;                               (DO ((G167089
;;                                     (|commandsForUserLevel|
;;                                      |$systemCommands|)
;;                                     (CDR G167089))
;;                                    (|a| NIL))
;;                                   ((OR (ATOM G167089)
;;                                     (PROGN
;;                                       (SETQ |a| (CAR G167089))
;;                                       NIL))
;;                                    (NREVERSE0 G167084))
;;                                 (SEQ (EXIT
;;                                       (SETQ G167084
;;                                        (CONS (STRINGIMAGE |a|)
;;                                         G167084)))))))))
;;              (COND
;;                (|patterns|
;;                    (COND
;;                      ((NULL |l|)
;;                       (|sayMessage|
;;                           (CONS (MAKESTRING
;;                                     "No system commands at this level matching patterns:")
;;                                 (CONS '|%l|
;;                                       (CONS (MAKESTRING "   ")
;;                                        (CONS '|%b|
;;                                         (APPEND
;;                                          (|blankList| |patterns|)
;;                                          (CONS '|%d| NIL))))))))
;;                      ('T
;;                       (|sayMessage|
;;                           (CONS (MAKESTRING
;;                                     "System commands at this level matching patterns:")
;;                                 (CONS '|%l|
;;                                       (CONS (MAKESTRING "   ")
;;                                        (CONS '|%b|
;;                                         (APPEND
;;                                          (|blankList| |patterns|)
;;                                          (CONS '|%d| NIL)))))))))))
;;              (COND
;;                (|l| (|sayAsManyPerLineAsPossible| |l|)
;;                     (SAY (MAKESTRING " "))))
;;              (COND
;;                (|patterns| NIL)
;;                ('T (|sayKeyedMsg| 'S2IZ0046 NIL) NIL)))))))


;reportWhatOptions() ==
;  optList1:= "append"/[['%l,'"        ",x] for x in $whatOptions]
;  sayBrightly
;    ['%b,'"  )what",'%d,'"argument keywords are",'%b,:optList1,'%d,'%l,
;      '"   or abbreviations thereof.",'%l,
;        '%l,'"   Issue",'%b,'")what ?",'%d,'"for more information."]

(DEFUN |reportWhatOptions| ()
  (PROG (|optList1|)
  (declare (special |$whatOptions|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |optList1|
                      (PROG (G167102)
                        (SPADLET G167102 NIL)
                        (RETURN
                          (DO ((G167107 |$whatOptions|
                                   (CDR G167107))
                               (|x| NIL))
                              ((OR (ATOM G167107)
                                   (PROGN
                                     (SETQ |x| (CAR G167107))
                                     NIL))
                               G167102)
                            (SEQ (EXIT (SETQ G167102
                                        (APPEND G167102
                                         (CONS '|%l|
                                          (CONS (MAKESTRING "        ")
                                           (CONS |x| NIL)))))))))))
             (|sayBrightly|
                 (CONS '|%b|
                       (CONS (MAKESTRING "  )what")
                             (CONS '|%d|
                                   (CONS
                                    (MAKESTRING
                                     "argument keywords are")
                                    (CONS '|%b|
                                     (APPEND |optList1|
                                      (CONS '|%d|
                                       (CONS '|%l|
                                        (CONS
                                         (MAKESTRING
                                          "   or abbreviations thereof.")
                                         (CONS '|%l|
                                          (CONS '|%l|
                                           (CONS
                                            (MAKESTRING "   Issue")
                                            (CONS '|%b|
                                             (CONS
                                              (MAKESTRING ")what ?")
                                              (CONS '|%d|
                                               (CONS
                                                (MAKESTRING
                                                 "for more information.")
                                                NIL))))))))))))))))))))))

;filterListOfStrings(patterns,names) ==
;  -- names and patterns are lists of strings
;  -- returns: list of strings in names that contains any of the strings
;  -- in patterns
;  (null patterns) or (null names) => names
;  names' := NIL
;  for name in reverse names repeat
;    satisfiesRegularExpressions(name,patterns) =>
;      names' := [name,:names']
;  names'

(DEFUN |filterListOfStrings| (|patterns| |names|)
  (PROG (|names'|)
    (RETURN
      (SEQ (COND
             ((OR (NULL |patterns|) (NULL |names|)) |names|)
             ('T (SPADLET |names'| NIL)
              (SEQ (DO ((G167122 (REVERSE |names|) (CDR G167122))
                        (|name| NIL))
                       ((OR (ATOM G167122)
                            (PROGN (SETQ |name| (CAR G167122)) NIL))
                        NIL)
                     (SEQ (EXIT (COND
                                  ((|satisfiesRegularExpressions|
                                    |name| |patterns|)
                                   (EXIT
                                    (SPADLET |names'|
                                     (CONS |name| |names'|))))))))
                   (EXIT |names'|))))))))

;filterListOfStringsWithFn(patterns,names,fn) ==
;  -- names and patterns are lists of strings
;  -- fn is something like CAR or CADR
;  -- returns: list of strings in names that contains any of the strings
;  -- in patterns
;  (null patterns) or (null names) => names
;  names' := NIL
;  for name in reverse names repeat
;    satisfiesRegularExpressions(FUNCALL(fn,name),patterns) =>
;      names' := [name,:names']
;  names'

(DEFUN |filterListOfStringsWithFn| (|patterns| |names| |fn|)
  (PROG (|names'|)
    (RETURN
      (SEQ (COND
             ((OR (NULL |patterns|) (NULL |names|)) |names|)
             ('T (SPADLET |names'| NIL)
              (SEQ (DO ((G167137 (REVERSE |names|) (CDR G167137))
                        (|name| NIL))
                       ((OR (ATOM G167137)
                            (PROGN (SETQ |name| (CAR G167137)) NIL))
                        NIL)
                     (SEQ (EXIT (COND
                                  ((|satisfiesRegularExpressions|
                                    (FUNCALL |fn| |name|) |patterns|)
                                   (EXIT
                                    (SPADLET |names'|
                                     (CONS |name| |names'|))))))))
                   (EXIT |names'|))))))))

;satisfiesRegularExpressions(name,patterns) ==
;  -- this is a first cut
;  nf := true
;  dname := DOWNCASE COPY name
;  for pattern in patterns while nf repeat
;    -- use @ as a wildcard
;    STRPOS(pattern,dname,0,'"@") => nf := nil
;  null nf

(DEFUN |satisfiesRegularExpressions| (|name| |patterns|)
  (PROG (|dname| |nf|)
    (RETURN
      (SEQ (PROGN
             (SPADLET |nf| 'T)
             (SPADLET |dname| (DOWNCASE (COPY |name|)))
             (SEQ (DO ((G167153 |patterns| (CDR G167153))
                       (|pattern| NIL))
                      ((OR (ATOM G167153)
                           (PROGN
                             (SETQ |pattern| (CAR G167153))
                             NIL)
                           (NULL |nf|))
                       NIL)
                    (SEQ (EXIT (COND
                                 ((STRPOS |pattern| |dname| 0
                                          (MAKESTRING "@"))
                                  (EXIT (SPADLET |nf| NIL)))))))
                  (NULL |nf|)))))))

;;;     ***       |processSynonyms| REDEFINED

;-- functions for interfacing to system commands from algebra code
;-- common lisp dependent
;tabsToBlanks s ==
;   k := charPosition($charTab,s,0)
;   n := #s
;   k < n =>
;      k = 0 => tabsToBlanks SUBSTRING(s,1,nil)
;      STRCONC(SUBSTRING(s,0,k),$charBlank, tabsToBlanks SUBSTRING(s,k + 1,nil))
;   s

(DEFUN |tabsToBlanks| (|s|)
  (PROG (|k| |n|)
  (declare (special |$charBlank| |$charTab|))
    (RETURN
      (PROGN
        (SPADLET |k| (|charPosition| |$charTab| |s| 0))
        (SPADLET |n| (|#| |s|))
        (COND
          ((> |n| |k|)
           (COND
             ((EQL |k| 0) (|tabsToBlanks| (SUBSTRING |s| 1 NIL)))
             ('T
              (STRCONC (SUBSTRING |s| 0 |k|) |$charBlank|
                       (|tabsToBlanks|
                           (SUBSTRING |s| (PLUS |k| 1) NIL))))))
          ('T |s|))))))

;npboot str ==
;  sex := string2BootTree str
;  FORMAT(true, '"~&~S~%", sex)
;  $ans := EVAL sex
;  FORMAT(true, '"~&Value = ~S~%", $ans)

(DEFUN |npboot| (|str|)
  (PROG (|sex|)
  (declare (special |$ans|))
    (RETURN
      (PROGN
        (SPADLET |sex| (|string2BootTree| |str|))
        (FORMAT 'T (MAKESTRING "~&~S~%") |sex|)
        (SPADLET |$ans| (EVAL |sex|))
        (FORMAT 'T (MAKESTRING "~&Value = ~S~%") |$ans|)))))

;ltrace l == trace l

(DEFUN |ltrace| (|l|) (|trace| |l|)) 

@
\eject
\begin{thebibliography}{99}
\bibitem{1} [[src/interp/setq.lisp.pamphlet]]
\end{thebibliography}
\end{document}
