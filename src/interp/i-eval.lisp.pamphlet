\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp i-eval.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}
(IN-PACKAGE "BOOT" )

;evaluateType0 form ==
;  -- Takes a parsed, unabbreviated type and evaluates it, replacing
;  --  type valued variables with their values, and calling bottomUp
;  --  on non-type valued arguemnts to the constructor
;  --  and finally checking to see whether the type satisfies the
;  --  conditions of its modemap
;  -- However, the input might be an attribute, not a type
;  -- $noEvalTypeMsg: fluid := true
;  domain:= isDomainValuedVariable form => domain
;  form = $EmptyMode => form
;  form = "?"        => $EmptyMode
;  STRINGP form => form
;  form = "$" => form
;  $expandSegments : local := nil
;  form is ['typeOf,.] =>
;    form' := mkAtree form
;    bottomUp form'
;    objVal getValue(form')
;  form is [op,:argl] =>
;    op='CATEGORY =>
;      argl is [x,:sigs] => [op,x,:[evaluateSignature(s) for s in sigs]]
;      form
;    op in '(Join Mapping) =>
;      [op,:[evaluateType arg for arg in argl]]
;    op='Union  =>
;      argl and first argl is [x,.,.] and member(x,'(_: Declare)) =>
;        [op,:[['_:,sel,evaluateType type] for ['_:,sel,type] in argl]]
;      [op,:[evaluateType arg for arg in argl]]
;    op='Record =>
;      [op,:[['_:,sel,evaluateType type] for ['_:,sel,type] in argl]]
;    op='Enumeration => form
;    constructor? op => evaluateType1 form
;    NIL
;  constructor? form =>
;    ATOM form => evaluateType [form]
;    throwEvalTypeMsg("S2IE0003",[form,form])

(DEFUN |evaluateType0| (|form|)
 (PROG (|$expandSegments| |domain| |form'| |op| |argl| |sigs| |ISTMP#1| 
        |x| |ISTMP#2| |ISTMP#3| |sel| |type|)
 (DECLARE (SPECIAL |$expandSegments| |$EmptyMode|))
  (RETURN
   (SEQ
    (COND
     ((SPADLET |domain| (|isDomainValuedVariable| |form|)) |domain|)
     ((BOOT-EQUAL |form| |$EmptyMode|) |form|)
     ((BOOT-EQUAL |form| (QUOTE ?)) |$EmptyMode|)
     ((STRINGP |form|) |form|)
     ((BOOT-EQUAL |form| (QUOTE $)) |form|)
     ((QUOTE T)
      (SPADLET |$expandSegments| NIL)
      (COND
       ((AND (CONSP |form|)
             (EQ (QCAR |form|) (QUOTE |typeOf|))
             (PROGN
              (SPADLET |ISTMP#1| (QCDR |form|))
              (AND (CONSP |ISTMP#1|) (EQ (QCDR |ISTMP#1|) NIL))))
        (SPADLET |form'| (|mkAtree| |form|))
        (|bottomUp| |form'|)
        (|objVal| (|getValue| |form'|)))
       ((AND (CONSP |form|)
             (PROGN
              (SPADLET |op| (QCAR |form|))
              (SPADLET |argl| (QCDR |form|))
              (QUOTE T)))
        (COND
         ((BOOT-EQUAL |op| (QUOTE CATEGORY))
          (COND
           ((AND (CONSP |argl|)
                 (PROGN
                  (SPADLET |x| (QCAR |argl|))
                  (SPADLET |sigs| (QCDR |argl|))
                  (QUOTE T)))
            (CONS |op|
             (CONS |x|
              (PROG (#0=#:G166269)
               (SPADLET #0# NIL)
               (RETURN
                (DO ((#1=#:G166274 |sigs| (CDR #1#)) (|s| NIL))
                    ((OR (ATOM #1#) (PROGN (SETQ |s| (CAR #1#)) NIL))
                      (NREVERSE0 #0#))
                 (SEQ
                  (EXIT (SETQ #0# (CONS (|evaluateSignature| |s|) #0#))))))))))
           ((QUOTE T) |form|)))
         ((|member| |op| (QUOTE (|Join| |Mapping|)))
           (CONS |op|
            (PROG (#2=#:G166284)
             (SPADLET #2# NIL)
             (RETURN
              (DO ((#3=#:G166289 |argl| (CDR #3#)) (|arg| NIL))
                  ((OR (ATOM #3#) (PROGN (SETQ |arg| (CAR #3#)) NIL))
                    (NREVERSE0 #2#))
                (SEQ (EXIT (SETQ #2# (CONS (|evaluateType| |arg|) #2#)))))))))
         ((BOOT-EQUAL |op| (QUOTE |Union|))
          (COND
           ((AND
             |argl|
             (PROGN
              (SPADLET |ISTMP#1| (CAR |argl|))
              (AND
               (CONSP |ISTMP#1|)
               (PROGN
                (SPADLET |x| (QCAR |ISTMP#1|))
                (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                (AND
                 (CONSP |ISTMP#2|)
                 (PROGN
                  (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                  (AND (CONSP |ISTMP#3|) (EQ (QCDR |ISTMP#3|) NIL)))))))
             (|member| |x| (QUOTE (|:| |Declare|))))
            (CONS |op|
             (PROG (#4=#:G166300)
              (SPADLET #4# NIL)
              (RETURN
               (DO ((#5=#:G166306 |argl| (CDR #5#)) (#6=#:G166253 NIL))
                   ((OR (ATOM #5#)
                        (PROGN (SETQ #6# (CAR #5#)) NIL)
                        (PROGN
                         (PROGN
                          (SPADLET |sel| (CADR #6#))
                          (SPADLET |type| (CADDR #6#))
                          #6#)
                         NIL))
                     (NREVERSE0 #4#))
                (SEQ
                 (EXIT
                  (SETQ #4#
                   (CONS
                    (CONS
                     (QUOTE |:|)
                      (CONS |sel| (CONS (|evaluateType| |type|) NIL)))
                    #4#)))))))))
           ((QUOTE T)
            (CONS |op|
             (PROG (#7=#:G166317)
              (SPADLET #7# NIL)
              (RETURN
               (DO ((#8=#:G166322 |argl| (CDR #8#)) (|arg| NIL))
                   ((OR (ATOM #8#) (PROGN (SETQ |arg| (CAR #8#)) NIL))
                     (NREVERSE0 #7#))
                 (SEQ
                  (EXIT
                   (SETQ #7# (CONS (|evaluateType| |arg|) #7#)))))))))))
         ((BOOT-EQUAL |op| (QUOTE |Record|))
          (CONS |op|
           (PROG (#9=#:G166333)
            (SPADLET #9# NIL)
            (RETURN
             (DO ((#10=#:G166339 |argl| (CDR #10#)) (#11=#:G166258 NIL))
                 ((OR (ATOM #10#)
                      (PROGN (SETQ #11# (CAR #10#)) NIL)
                      (PROGN
                       (PROGN
                        (SPADLET |sel| (CADR #11#))
                        (SPADLET |type| (CADDR #11#))
                        #11#)
                       NIL))
                   (NREVERSE0 #9#))
              (SEQ
               (EXIT
                (SETQ #9#
                 (CONS
                  (CONS
                   (QUOTE |:|)
                   (CONS |sel| (CONS (|evaluateType| |type|) NIL)))
                  #9#)))))))))
         ((BOOT-EQUAL |op| (QUOTE |Enumeration|)) |form|)
         ((|constructor?| |op|) (|evaluateType1| |form|))
         ((QUOTE T) NIL)))
       ((|constructor?| |form|)
        (COND
         ((ATOM |form|) (|evaluateType| (CONS |form| NIL)))
         ((QUOTE T)
         (|throwEvalTypeMsg| 'S2IE0003
          (CONS |form| (CONS |form| NIL))))))))))))) 

;--% Code Evaluation
;-- This code generates, then evaluates code during the bottom up phase
;-- of interpretation
;splitIntoBlocksOf200 a ==
;  null a => nil
;  [[first (r:=x) for x in tails a for i in 1..200],
;    :splitIntoBlocksOf200 rest r]

(DEFUN |splitIntoBlocksOf200| (|a|)
 (PROG (|r|)
  (RETURN
   (SEQ
    (COND
     ((NULL |a|) NIL)
     ((QUOTE T)
      (CONS
       (PROG (#0=#:G166642)
        (SPADLET #0# NIL)
        (RETURN
         (DO ((|x| |a| (CDR |x|)) (|i| 1 (QSADD1 |i|)))
             ((OR (ATOM |x|) (QSGREATERP |i| 200)) (NREVERSE0 #0#))
           (SEQ (EXIT (SETQ #0# (CONS (CAR (SPADLET |r| |x|)) #0#)))))))
       (|splitIntoBlocksOf200| (CDR |r|))))))))) 

;evalForm(op,opName,argl,mmS) ==
;  -- applies the first applicable function
;  for mm in mmS until form repeat
;    [sig,fun,cond]:= mm
;    (CAR sig) = 'interpOnly => form := CAR sig
;    #argl ^= #CDDR sig => 'skip ---> RDJ 6/95
;    form:=
;      $genValue or null cond =>
;        [getArgValue2(x,t,sideEffectedArg?(t,sig,opName),opName) or return NIL
;         for x in argl for t in CDDR sig]
;      [getArgValueComp2(x,t,c,sideEffectedArg?(t,sig,opName),opName) 
;       or return NIL
;        for x in argl for t in CDDR sig for c in cond]
;    form or null argl =>
;      dc:= CAR sig
;      form :=
;        dc='local => --[fun,:form]
;          atom fun =>
;            fun in $localVars => ['SPADCALL,:form,fun]
;            [fun,:form,NIL]
;          ['SPADCALL,:form,fun]
;        dc is ["__FreeFunction__",:freeFun] =>
;          ['SPADCALL,:form,freeFun]
;        fun is ['XLAM,xargs,:xbody] =>
;          rec :=  first form
;          xbody is [['RECORDELT,.,ind,len]] =>
;            optRECORDELT([CAAR xbody,rec,ind,len])
;          xbody is [['SETRECORDELT,.,ind,len,.]] =>
;            optSETRECORDELT([CAAR xbody,rec,ind,len,CADDR form])
;          xbody is [['RECORDCOPY,.,len]] =>
;            optRECORDCOPY([CAAR xbody,rec,len])
;          ['FUNCALL,['function , ['LAMBDA,xargs,:xbody]],:TAKE(#xargs, form)]
;        dcVector := evalDomain dc
;        fun0 :=
;          newType? CAAR mm =>
;            mm' := first ncSigTransform mm
;            ncGetFunction(opName, first mm', rest mm')
;          NRTcompileEvalForm(opName,fun,dcVector)
;        null fun0 => throwKeyedMsg("S2IE0008",[opName])
;        [bpi,:domain] := fun0
;        EQ(bpi,function Undef) =>
;         sayKeyedMsg("S2IE0009",[opName,formatSignature CDR sig,CAR sig])
;         NIL
;        if $NRTmonitorIfTrue = true then
;          sayBrightlyNT ['"Applying ",first fun0,'" to:"]
;          pp [devaluateDeeply x for x in form]
;        _$:fluid := domain
;        ['SPADCALL, :form, fun0]
;  not form => nil
;--  not form => throwKeyedMsg("S2IE0008",[opName])
;  form='interpOnly => rewriteMap(op,opName,argl)
;  targetType := CADR sig
;  if CONTAINED('_#,targetType) then targetType := NRTtypeHack targetType
;  evalFormMkValue(op,form,targetType)

(DEFUN |evalForm| (|op| |opName| |argl| |mmS|)
 (PROG ($ |sig| |fun| |cond| |dc| |freeFun| |xargs| |xbody| |rec| |ind| 
        |ISTMP#4| |ISTMP#5| |ISTMP#1| |ISTMP#2| |ISTMP#3| |len| |dcVector| 
        |mm'| |fun0| |bpi| |domain| |form| |targetType|)
 (DECLARE (SPECIAL $ |$NRTmonitorIfTrue| |$localVars| |$genValue|))
  (RETURN
   (SEQ
    (PROGN
     (DO ((#0=#:G166832 |mmS| (CDR #0#)) (|mm| NIL) (#1=#:G166833 NIL |form|))
         ((OR (ATOM #0#) (PROGN (SETQ |mm| (CAR #0#)) NIL) #1#) NIL)
      (SEQ
       (EXIT
        (PROGN
         (SPADLET |sig| (CAR |mm|))
         (SPADLET |fun| (CADR |mm|))
         (SPADLET |cond| (CADDR |mm|))
         (COND
          ((BOOT-EQUAL (CAR |sig|) (QUOTE |interpOnly|))
           (SPADLET |form| (CAR |sig|)))
          ((NEQUAL (|#| |argl|) (|#| (CDDR |sig|))) (QUOTE |skip|))
          ((QUOTE T)
           (SPADLET |form|
            (COND
             ((OR |$genValue| (NULL |cond|))
              (PROG (#2=#:G166845)
               (SPADLET #2# NIL)
               (RETURN
                (DO ((#3=#:G166851 |argl| (CDR #3#))
                     (|x| NIL)
                     (#4=#:G166852 (CDDR |sig|) (CDR #4#))
                     (|t| NIL))
                    ((OR (ATOM #3#)
                         (PROGN (SETQ |x| (CAR #3#)) NIL)
                         (ATOM #4#)
                         (PROGN (SETQ |t| (CAR #4#)) NIL))
                      (NREVERSE0 #2#))
                 (SEQ
                  (EXIT
                   (SETQ #2#
                    (CONS
                     (OR
                      (|getArgValue2| |x| |t|
                       (|sideEffectedArg?| |t| |sig| |opName|) |opName|)
                      (RETURN NIL))
                     #2#))))))))
             ((QUOTE T)
              (PROG (#5=#:G166867)
               (SPADLET #5# NIL)
               (RETURN
                (DO ((#6=#:G166874 |argl| (CDR #6#))
                     (|x| NIL)
                     (#7=#:G166875 (CDDR |sig|) (CDR #7#))
                     (|t| NIL)
                     (#8=#:G166876 |cond| (CDR #8#))
                     (|c| NIL))
                    ((OR (ATOM #6#)
                         (PROGN (SETQ |x| (CAR #6#)) NIL)
                         (ATOM #7#)
                         (PROGN (SETQ |t| (CAR #7#)) NIL)
                         (ATOM #8#)
                         (PROGN (SETQ |c| (CAR #8#)) NIL))
                      (NREVERSE0 #5#))
                 (SEQ
                  (EXIT
                   (SETQ #5#
                    (CONS
                     (OR
                      (|getArgValueComp2| |x| |t| |c|
                       (|sideEffectedArg?| |t| |sig| |opName|) |opName|)
                      (RETURN NIL))
                     #5#))))))))))
           (COND
            ((OR |form| (NULL |argl|))
             (PROGN
              (SPADLET |dc| (CAR |sig|))
              (SPADLET |form|
               (COND
                ((BOOT-EQUAL |dc| (QUOTE |local|))
                 (COND
                  ((ATOM |fun|)
                   (COND
                    ((|member| |fun| |$localVars|)
                     (CONS (QUOTE SPADCALL) (APPEND |form| (CONS |fun| NIL))))
                    ((QUOTE T)
                     (CONS |fun| (APPEND |form| (CONS NIL NIL))))))
                  ((QUOTE T)
                   (CONS (QUOTE SPADCALL) (APPEND |form| (CONS |fun| NIL))))))
                ((AND (CONSP |dc|)
                      (EQ (QCAR |dc|) (QUOTE |_FreeFunction_|))
                      (PROGN (SPADLET |freeFun| (QCDR |dc|)) (QUOTE T)))
                 (CONS (QUOTE SPADCALL) (APPEND |form| (CONS |freeFun| NIL))))
                ((AND (CONSP |fun|)
                      (EQ (QCAR |fun|) (QUOTE XLAM))
                      (PROGN
                       (SPADLET |ISTMP#1| (QCDR |fun|))
                       (AND
                        (CONSP |ISTMP#1|)
                        (PROGN
                         (SPADLET |xargs| (QCAR |ISTMP#1|))
                         (SPADLET |xbody| (QCDR |ISTMP#1|))
                         (QUOTE T)))))
                 (SPADLET |rec| (CAR |form|))
                 (COND 
                  ((AND (CONSP |xbody|)
                        (EQ (QCDR |xbody|) NIL)
                        (PROGN
                         (SPADLET |ISTMP#1| (QCAR |xbody|))
                         (AND
                          (CONSP |ISTMP#1|)
                          (EQ (QCAR |ISTMP#1|) (QUOTE RECORDELT))
                          (PROGN
                           (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                           (AND
                            (CONSP |ISTMP#2|)
                            (PROGN
                             (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                             (AND
                              (CONSP |ISTMP#3|)
                              (PROGN
                               (SPADLET |ind| (QCAR |ISTMP#3|))
                               (SPADLET |ISTMP#4| (QCDR |ISTMP#3|))
                               (AND
                                (CONSP |ISTMP#4|)
                                (EQ (QCDR |ISTMP#4|) NIL)
                                (PROGN
                                 (SPADLET |len| (QCAR |ISTMP#4|))
                                 (QUOTE T)))))))))))
                   (|optRECORDELT|
                    (CONS
                     (CAAR |xbody|)
                     (CONS |rec| (CONS |ind| (CONS |len| NIL))))))
                  ((AND (CONSP |xbody|)
                        (EQ (QCDR |xbody|) NIL)
                        (PROGN
                         (SPADLET |ISTMP#1| (QCAR |xbody|))
                         (AND
                          (CONSP |ISTMP#1|)
                          (EQ (QCAR |ISTMP#1|) (QUOTE SETRECORDELT))
                          (PROGN
                           (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                           (AND
                            (CONSP |ISTMP#2|)
                            (PROGN
                             (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                             (AND
                              (CONSP |ISTMP#3|)
                              (PROGN
                               (SPADLET |ind| (QCAR |ISTMP#3|))
                               (SPADLET |ISTMP#4| (QCDR |ISTMP#3|))
                               (AND
                                (CONSP |ISTMP#4|)
                                (PROGN
                                 (SPADLET |len| (QCAR |ISTMP#4|))
                                 (SPADLET |ISTMP#5| (QCDR |ISTMP#4|))
                                 (AND
                                  (CONSP |ISTMP#5|)
                                  (EQ (QCDR |ISTMP#5|) NIL))))))))))))
                   (|optSETRECORDELT|
                    (CONS
                     (CAAR |xbody|)
                     (CONS |rec|
                      (CONS |ind| (CONS |len| (CONS (CADDR |form|) NIL)))))))
                  ((AND
                    (CONSP |xbody|)
                    (EQ (QCDR |xbody|) NIL)
                    (PROGN
                     (SPADLET |ISTMP#1| (QCAR |xbody|))
                     (AND
                      (CONSP |ISTMP#1|)
                      (EQ (QCAR |ISTMP#1|) (QUOTE RECORDCOPY))
                      (PROGN
                       (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                       (AND
                        (CONSP |ISTMP#2|)
                        (PROGN
                         (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                         (AND
                          (CONSP |ISTMP#3|)
                          (EQ (QCDR |ISTMP#3|) NIL)
                          (PROGN
                           (SPADLET |len| (QCAR |ISTMP#3|))
                           (QUOTE T)))))))))
                   (|optRECORDCOPY|
                    (CONS
                     (CAAR |xbody|)
                     (CONS |rec| (CONS |len| NIL)))))
                  ((QUOTE T)
                   (CONS
                    (QUOTE FUNCALL)
                    (CONS
                     (CONS 'function
                      (CONS (CONS (QUOTE LAMBDA) (CONS |xargs| |xbody|)) NIL))
                     (TAKE (|#| |xargs|) |form|))))))
                ((QUOTE T)
                 (SPADLET |dcVector| (|evalDomain| |dc|))
                 (SPADLET |fun0| 
                  (|NRTcompileEvalForm| |opName| |fun| |dcVector|))
                 (COND
                  ((NULL |fun0|)
                   (|throwKeyedMsg| (QUOTE S2IE0008) (CONS |opName| NIL)))
                  ((QUOTE T)
                   (SPADLET |bpi| (CAR |fun0|))
                   (SPADLET |domain| (CDR |fun0|))
                   (COND
                    ((EQ |bpi| #'|Undef|)
                     (|sayKeyedMsg| (QUOTE S2IE0009)
                      (CONS |opName|
                       (CONS 
                        (|formatSignature| (CDR |sig|))
                        (CONS (CAR |sig|) NIL))))
                     NIL)
                    ((QUOTE T)
                     (COND
                      ((BOOT-EQUAL |$NRTmonitorIfTrue| (QUOTE T))
                       (|sayBrightlyNT|
                        (CONS "Applying "
                         (CONS (CAR |fun0|) (CONS " to:" NIL))))
                       (|pp|
                        (PROG (#9=#:G166892)
                         (SPADLET #9# NIL)
                         (RETURN
                          (DO ((#10=#:G166897 |form| (CDR #10#)) (|x| NIL))
                              ((OR (ATOM #10#)
                                   (PROGN (SETQ |x| (CAR #10#)) NIL))
                                (NREVERSE0 #9#))
                           (SEQ
                            (EXIT
                             (SETQ #9#
                              (CONS (|devaluateDeeply| |x|) #9#))))))))))
                     (SPADLET $ |domain|)
                     (CONS
                      (QUOTE SPADCALL)
                      (APPEND |form| (CONS |fun0| NIL)))))))))))))))))))
     (COND
      ((NULL |form|) NIL)
      ((BOOT-EQUAL |form| (QUOTE |interpOnly|))
       (|rewriteMap| |op| |opName| |argl|))
      ((QUOTE T)
       (SPADLET |targetType| (CADR |sig|))
       (COND
        ((CONTAINED (QUOTE |#|) |targetType|)
         (SPADLET |targetType| (|NRTtypeHack| |targetType|))))
       (|evalFormMkValue| |op| |form| |targetType|)))))))) 

;devaluateDeeply x ==
;  VECP x => devaluate x
;  atom x => x
;  [devaluateDeeply y for y in x]

(DEFUN |devaluateDeeply| (|x|)
  (PROG ()
    (RETURN
      (SEQ (COND
             ((VECP |x|) (|devaluate| |x|))
             ((ATOM |x|) |x|)
             ('T
              (PROG (G166066)
                (SPADLET G166066 NIL)
                (RETURN
                  (DO ((G166071 |x| (CDR G166071)) (|y| NIL))
                      ((OR (ATOM G166071)
                           (PROGN (SETQ |y| (CAR G166071)) NIL))
                       (NREVERSE0 G166066))
                    (SEQ (EXIT (SETQ G166066
                                     (CONS (|devaluateDeeply| |y|)
                                      G166066)))))))))))))

;sideEffectedArg?(t,sig,opName) ==
;  opString := SYMBOL_-NAME opName
;  (opName ^= 'setelt) and (ELT(opString, #opString-1) ^= char '_!) => nil
;  dc := first sig
;  t = dc

(DEFUN |sideEffectedArg?| (|t| |sig| |opName|)
 (PROG (|opString| |dc|)
  (RETURN
   (PROGN
    (SPADLET |opString| (SYMBOL-NAME |opName|))
    (COND
     ((AND (NEQUAL |opName| (QUOTE |setelt|))
           (NEQUAL
             (ELT |opString| (SPADDIFFERENCE (|#| |opString|) 1))
             (|char| (QUOTE !))))
      NIL)
     ((QUOTE T) (SPADLET |dc| (CAR |sig|)) (BOOT-EQUAL |t| |dc|))))))) 

;getArgValue(a, t) ==
;  atom a and not VECP a =>
;    t' := coerceOrRetract(getBasicObject a,t)
;    t' and wrapped2Quote objVal t'
;  v := getArgValue1(a, t) => v
;  alt := altTypeOf(objMode getValue a, a, nil) =>
;    t' := coerceInt(getValue a, alt)
;    t' := coerceOrRetract(t',t)
;    t' and wrapped2Quote objVal t'
;  nil

(DEFUN |getArgValue| (|a| |t|)
 (PROG (|v| |alt| |t'|)
  (RETURN
   (COND
    ((AND (ATOM |a|) (NULL (VECP |a|)))
     (SPADLET |t'| (|coerceOrRetract| (|getBasicObject| |a|) |t|))
     (AND |t'| (|wrapped2Quote| (|objVal| |t'|))))
    ((SPADLET |v| (|getArgValue1| |a| |t|)) |v|)
    ((SPADLET |alt| (|altTypeOf| (|objMode| (|getValue| |a|)) |a| NIL))
     (SPADLET |t'| (|coerceInt| (|getValue| |a|) |alt|))
     (SPADLET |t'| (|coerceOrRetract| |t'| |t|))
     (AND |t'| (|wrapped2Quote| (|objVal| |t'|))))
    ((QUOTE T) NIL))))) 

;getArgValue1(a,t) ==
;  -- creates a value for a, coercing to t
;  t' := getValue(a) =>
;    (m := getMode a) and (m is ['Mapping,:ml]) and (m = t) and
;      objValUnwrap(t') is ['MAP,:.] =>
;        getMappingArgValue(a,t,m)
;    t' := coerceOrRetract(t',t)
;    t' and wrapped2Quote objVal t'
;  systemErrorHere '"getArgValue"

(DEFUN |getArgValue1| (|a| |t|)
 (PROG (|m| |ml| |ISTMP#1| |t'|)
  (RETURN
   (COND
    ((SPADLET |t'| (|getValue| |a|))
     (COND
      ((AND
        (SPADLET |m| (|getMode| |a|))
        (CONSP |m|)
        (EQ (QCAR |m|) (QUOTE |Mapping|))
        (PROGN (SPADLET |ml| (QCDR |m|)) (QUOTE T))
        (BOOT-EQUAL |m| |t|)
        (PROGN
         (SPADLET |ISTMP#1| (|objValUnwrap| |t'|))
         (AND (CONSP |ISTMP#1|) (EQ (QCAR |ISTMP#1|) (QUOTE MAP)))))
       (|getMappingArgValue| |a| |t| |m|))
      ((QUOTE T)
       (SPADLET |t'| (|coerceOrRetract| |t'| |t|))
       (AND |t'| (|wrapped2Quote| (|objVal| |t'|))))))
    ((QUOTE T) (|systemErrorHere| "getArgValue")))))) 

;getArgValue2(a,t,se?,opName) ==
;  se? and (objMode(getValue a) ^= t) =>
;    throwKeyedMsg("S2IE0013", [opName, objMode(getValue a), t])
;  getArgValue(a,t)

(DEFUN |getArgValue2| (|a| |t| |se?| |opName|)
 (COND
  ((AND |se?| (NEQUAL (|objMode| (|getValue| |a|)) |t|))
   (|throwKeyedMsg| (QUOTE S2IE0013)
    (CONS |opName| (CONS (|objMode| (|getValue| |a|)) (CONS |t| NIL)))))
  ((QUOTE T) (|getArgValue| |a| |t|)))) 

;getArgValueOrThrow(x, type) ==
;  getArgValue(x,type) or throwKeyedMsg("S2IC0007",[type])

(DEFUN |getArgValueOrThrow| (|x| |type|)
 (OR
  (|getArgValue| |x| |type|)
  (|throwKeyedMsg| (QUOTE S2IC0007) (CONS |type| NIL)))) 

;getMappingArgValue(a,t,m is ['Mapping,:ml]) ==
;  (una := getUnname a) in $localVars =>
;    $genValue =>
;      name := get(una,'name,$env)
;      a.0 := name
;      mmS := selectLocalMms(a,name,rest ml, nil)
;      or/[mm for mm in mmS |
;        (mm is [[., :ml1],oldName,:.] and ml=ml1)] => MKQ [oldName]
;      NIL
;    una
;  mmS := selectLocalMms(a,una,rest ml, nil)
;  or/[mm for mm in mmS |
;    (mm is [[., :ml1],oldName,:.] and ml=ml1)] => MKQ [oldName]
;  NIL

(DEFUN |getMappingArgValue| (|a| |t| |m|)
 (declare (ignore |t|))
 (PROG (|ml| |una| |name| |mmS| |ISTMP#1| |ml1| |ISTMP#2| |oldName|)
 (declare (special |$env| |$genValue| |$localVars|))
  (RETURN
   (SEQ
    (PROGN
     (SPADLET |ml| (CDR |m|))
     (COND
      ((|member| (SPADLET |una| (|getUnname| |a|)) |$localVars|)
       (COND
        (|$genValue|
         (SPADLET |name| (|get| |una| (QUOTE |name|) |$env|))
         (SETELT |a| 0 |name|)
         (SPADLET |mmS| (|selectLocalMms| |a| |name| (CDR |ml|) NIL))
         (COND
          ((PROG (#0=#:G167025)
            (SPADLET #0# NIL)
            (RETURN
             (DO ((#1=#:G167032 NIL #0#)
                  (#2=#:G167033 |mmS| (CDR #2#))
                  (|mm| NIL))
                 ((OR #1# (ATOM #2#) (PROGN (SETQ |mm| (CAR #2#)) NIL)) #0#)
              (SEQ
               (EXIT
                (COND
                 ((AND
                   (CONSP |mm|)
                   (PROGN
                    (SPADLET |ISTMP#1| (QCAR |mm|))
                    (AND
                     (CONSP |ISTMP#1|)
                     (PROGN (SPADLET |ml1| (QCDR |ISTMP#1|)) (QUOTE T))))
                   (PROGN
                    (SPADLET |ISTMP#2| (QCDR |mm|))
                    (AND (CONSP |ISTMP#2|)
                         (PROGN
                          (SPADLET |oldName| (QCAR |ISTMP#2|))
                          (QUOTE T))))
                   (BOOT-EQUAL |ml| |ml1|))
                  (SETQ #0# (OR #0# |mm|)))))))))
           (MKQ (CONS |oldName| NIL)))
          ((QUOTE T) NIL)))
        ((QUOTE T) |una|)))
      ((QUOTE T)
       (SPADLET |mmS| (|selectLocalMms| |a| |una| (CDR |ml|) NIL))
       (COND
        ((PROG (#3=#:G167040)
         (SPADLET #3# NIL)
         (RETURN
          (DO ((#4=#:G167047 NIL #3#)
               (#5=#:G167048 |mmS| (CDR #5#))
               (|mm| NIL))
              ((OR #4# (ATOM #5#) (PROGN (SETQ |mm| (CAR #5#)) NIL)) #3#)
           (SEQ
            (EXIT
             (COND
              ((AND (CONSP |mm|)
                    (PROGN
                     (SPADLET |ISTMP#1| (QCAR |mm|))
                     (AND
                      (CONSP |ISTMP#1|)
                      (PROGN (SPADLET |ml1| (QCDR |ISTMP#1|)) (QUOTE T))))
                    (PROGN
                     (SPADLET |ISTMP#2| (QCDR |mm|))
                     (AND
                      (CONSP |ISTMP#2|)
                      (PROGN (SPADLET |oldName| (QCAR |ISTMP#2|)) (QUOTE T))))
                    (BOOT-EQUAL |ml| |ml1|))
               (SETQ #3# (OR #3# |mm|)))))))))
         (MKQ (CONS |oldName| NIL)))
        ((QUOTE T) NIL))))))))) 

;getArgValueComp2(arg, type, cond, se?, opName) ==
;  se? and (objMode(getValue arg) ^= type) =>
;    throwKeyedMsg("S2IE0013", [opName, objMode(getValue arg), type])
;  getArgValueComp(arg, type, cond)

(DEFUN |getArgValueComp2| (|arg| |type| |cond| |se?| |opName|)
 (COND
  ((AND |se?| (NEQUAL (|objMode| (|getValue| |arg|)) |type|))
   (|throwKeyedMsg| (QUOTE S2IE0013)
    (CONS |opName| (CONS (|objMode| (|getValue| |arg|)) (CONS |type| NIL)))))
  ((QUOTE T)
   (|getArgValueComp| |arg| |type| |cond|)))) 

;getArgValueComp(arg,type,cond) ==
;  -- getArgValue for compiled case.  if there is a condition then
;  --  v must be data to verify that coerceInteractive succeeds.
;  v:= getArgValue(arg,type)
;  null v => nil
;  null cond => v
;  v is ['QUOTE,:.] or getBasicMode v => v
;  n := getUnnameIfCan arg
;  if num := isSharpVarWithNum n then
;    not $compilingMap => n := 'unknownVar
;    alias := get($mapName,'alias,$e)
;    n := alias.(num - 1)
;  keyedMsgCompFailure("S2IE0010",[n])

(DEFUN |getArgValueComp| (|arg| |type| |cond|)
 (PROG (|v| |num| |alias| |n|)
 (declare (special |$e| |$mapName| |$compilingMap|))
  (RETURN
   (PROGN 
    (SPADLET |v| (|getArgValue| |arg| |type|))
    (COND
     ((NULL |v|) NIL)
     ((NULL |cond|) |v|)
     ((OR (AND (CONSP |v|) (EQ (QCAR |v|) (QUOTE QUOTE))) (|getBasicMode| |v|))
      |v|)
     ((QUOTE T)
      (SPADLET |n| (|getUnnameIfCan| |arg|))
      (COND
       ((SPADLET |num| (|isSharpVarWithNum| |n|))
        (COND
         ((NULL |$compilingMap|) (SPADLET |n| (QUOTE |unknownVar|)))
         ((QUOTE T)
          (SPADLET |alias| (|get| |$mapName| (QUOTE |alias|) |$e|))
          (SPADLET |n| (ELT |alias| (SPADDIFFERENCE |num| 1)))))))
      (|keyedMsgCompFailure| (QUOTE S2IE0010) (CONS |n| NIL)))))))) 

;evalFormMkValue(op,form,tm) ==
;  val:=
;    u:=
;      $genValue => wrap timedEVALFUN form
;      form
;    objNew(u,tm)
;--+
;  if $NRTmonitorIfTrue = true then
;    sayBrightlyNT ['"Value of ",op.0,'" ===> "]
;    pp unwrap u
;  putValue(op,val)
;  [tm]

(DEFUN |evalFormMkValue| (|op| |form| |tm|)
 (PROG (|u| |val|)
 (declare (special |$NRTmonitorIfTrue| |$genValue|))
  (RETURN
   (PROGN
    (SPADLET |val|
     (PROGN
      (SPADLET |u|
       (COND
        (|$genValue| (|wrap| (|timedEVALFUN| |form|)))
        ((QUOTE T) |form|)))
      (mkObj |u| |tm|)))
    (COND
     ((BOOT-EQUAL |$NRTmonitorIfTrue| (QUOTE T))
      (|sayBrightlyNT|
       (CONS "Value of "
        (CONS (ELT |op| 0) (CONS " ===> " NIL)))) (|pp| (|unwrap| |u|))))
    (|putValue| |op| |val|) (CONS |tm| NIL))))) 

;failCheck x ==
;  x = '"failed" =>
;    stopTimingProcess peekTimedName()
;    THROW('interpreter,objNewWrap('"failed",$String))
;  x = $coerceFailure =>
;    NIL
;  x

(DEFUN |failCheck| (|x|)
 (declare (special |$coerceFailure| |$String|))
 (COND
  ((BOOT-EQUAL |x| "failed")
   (|stopTimingProcess| (|peekTimedName|))
    (THROW (QUOTE |interpreter|) (mkObjWrap "failed" |$String|)))
  ((BOOT-EQUAL |x| |$coerceFailure|) NIL)
  ((QUOTE T) |x|))) 

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
