\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp parini.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
<<*>>=
(in-package "BOOT")

(eval-when (eval load) 

(defvar space (qenum "    " 0))
(defvar escape (qenum "_  " 0))
(defvar stringchar (qenum "\"  " 0))
(defvar pluscomment (qenum "+   " 0))
(defvar minuscomment (qenum "-   " 0))
(defvar radixchar (qenum "r   " 0))
(defvar dot (qenum ".   " 0))
(defvar exponent1 (qenum "E   " 0))
(defvar exponent2 (qenum "e   " 0))
(defvar closeparen (qenum ")   " 0))
(defvar closeangle (qenum ">   " 0))
(defvar question (qenum "?   " 0))

(defvar |scanKeyWords|
 (list
  (list "add" 'add)
  (list "and" 'and)
  (list "break" 'break)
  (list "by" 'by)
  (list "case" 'case)
  (list "default" 'default)
  (list "define" 'defn)
  (list "do" 'do)
  (list "else" 'else)
  (list "exit" 'exit)
  (list "export" 'export)
  (list "for" 'for)
  (list "free" 'free)
  (list "from" 'from)
  (list "has" 'has)
  (list "if" 'if)
  (list "import" 'import)
  (list "in" 'in)
  (list "inline" 'inline)
  (list "is" 'is)
  (list "isnt" 'isnt)
  (list "iterate" 'iterate)
  (list "local" '|local|)
  (list "macro" 'macro)
  (list "mod" 'mod)
  (list "or" 'or)
  (list "pretend" 'pretend)
  (list "quo" 'quo)
  (list "rem" 'rem)
  (list "repeat" 'repeat)
  (list "return" 'return)
  (list "rule" 'rule)
  (list "then" 'then)
  (list "where" 'where)
  (list "while" 'while)
  (list "with" 'with)
  (list "|" 'bar)
  (list "." 'dot)
  (list "::" 'coerce)
  (list ":" 'colon)
  (list ":-" 'colondash)
  (list "@" 'at)
  (list "@@" 'atat)
  (list "," 'comma)
  (list ";" 'semicolon)
  (list "**" 'power)
  (list "*" 'times)
  (list "+" 'plus)
  (list "-" 'minus)
  (list "<" 'lt)
  (list ">" 'gt)
  (list "<=" 'le)
  (list ">=" 'ge)
  (list "=" 'equal)
  (list "~=" 'notequal)
  (list "~" '~)
  (list "^" 'carat)
  (list ".." 'seg)
  (list "#" '|#|)
  (list "&" 'ampersand)
  (list "$" '$)
  (list "/" 'slash)
  (list "\\" 'backslash)
  (list "//" 'slashslash)
  (list "\\\\" 'backslashbackslash)
  (list "/\\" 'slashbackslash)
  (list "\\/" 'backslashslash)
  (list "=>" 'exit)
  (list ":=" 'becomes)
  (list "==" 'def)
  (list "==>" 'mdef)
  (list "->" 'arrow)
  (list "<-" 'larrow)
  (list "+->" 'gives)
  (list "(" '|(|)
  (list ")" '|)|)
  (list "(|" '|(\||)
  (list "|)" '|\|)|)
  (list "[" '[)
  (list "]" '])
  (list "[_]" '[])
  (list "{" '{)
  (list "}" '})
  (list "{_}" '{})
  (list "[|" '|[\||)
  (list "|]" '|\|]|)
  (list "[|_|]" '|[\|\|]|)
  (list "{|" '|{\||)
  (list "|}" '|\|}|)
  (list "{|_|}" '|{\|\|}|)
  (list "<<" 'oangle)
  (list ">>" 'cangle)
  (list "'" '|'|)
  (list "`" 'backquote)))

(defvar |scanKeyTable| (|scanKeyTableCons|))
(defvar |scanDict| (|scanDictCons|))
(defvar |scanPun| (|scanPunCons|))

(prog ()
  (return
    ((lambda (var value)
       (loop
         (cond
           ((or (atom var)
                (progn (setq value (car var)) nil))
            (return nil))
           (t (makeprop (car value) 'infgeneric (cadr value))))
         (setq var (cdr var))))
     (list
      (list 'equal '=)
      (list 'times '*)
      (list 'has '|has|)
      (list 'case '|case|)
      (list 'rem '|rem|)
      (list 'mod '|mod|)
      (list 'quo '|quo|)
      (list 'slash '/)
      (list 'backslash '|\\|)
      (list 'slashslash '//)
      (list 'backslashbackslash '|\\\\|)
      (list 'slashbackslash '|/\\|)
      (list 'backslashslash '|\\/|)
      (list 'power '**)
      (list 'carat '^)
      (list 'plus '+)
      (list 'minus '-)
      (list 'lt '<)
      (list 'gt '>)
      (list 'oangle '<<)
      (list 'cangle '>>)
      (list 'le '<=)
      (list 'ge '>=)
      (list 'notequal '~=)
      (list 'by '|by|)
      (list 'arrow '->)
      (list 'larrow '<-)
      (list 'bar '|\||)
      (list 'seg '|..|))
     nil)))
)
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
