\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp nruncomp.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
<<*>>=
(IN-PACKAGE "BOOT" )

;-----------------------------NEW buildFunctor CODE-----------------------------
;NRTaddDeltaCode() ==
;--NOTES: This function is called from NRTbuildFunctor to initially
;--  fill slots in $template. The $template so created is stored in the
;--  nrlib. On load, makeDomainTemplate is called on this $template to
;--  create a template which becomes slot 0 of the infovec for the constructor.
;--The template has 6 kinds of entries:
;--  (1) formal arguments and local variables, represented by (QUOTE <entry>)
;--      this conflicts by (5) but is ok since each is explicitly set by
;--      instantiator code;
;--  (2) domains, represented by lazy forms, e.g. (Foo 12 17 6)
;--  (3) latch slots, represented SPADCALLable forms which goGet an operation
;--      from a domain then cache the operation in the same slot
;--  (4) functions, represented by identifiers which are names of functions
;--  (5) identifiers/strings, parts of signatures (now parts of signatures
;--      now must all have slot numbers, represented by (QUOTE <entry>)
;--  (6) constants, like 0 and 1, represented by (CONS .. ) form
;  kvec := first $catvecList
;  for i in $NRTbase.. for item in REVERSE $NRTdeltaList
;    for compItem in REVERSE $NRTdeltaListComp
;      |null (s:=kvec.i) repeat
;        $template.i:= deltaTran(item,compItem)
;  $template.5 :=
;    $NRTaddForm =>
;      $NRTaddForm is ['Tuple,:y] => NREVERSE y
;      NRTencode($NRTaddForm,$addForm)
;    nil

(DEFUN |NRTaddDeltaCode| ()
  (PROG (|kvec| |s| |y|)
  (declare (special |$addForm| |$NRTaddForm| |$template| |$NRTdeltaListComp|
                    |$NRTdeltaList| |$NRTbase| |$catvecList|)) 
    (RETURN
      (SEQ (PROGN
             (SPADLET |kvec| (CAR |$catvecList|))
             (DO ((|i| |$NRTbase| (+ |i| 1))
                  (G166066 (REVERSE |$NRTdeltaList|) (CDR G166066))
                  (|item| NIL)
                  (G166067 (REVERSE |$NRTdeltaListComp|)
                      (CDR G166067))
                  (|compItem| NIL))
                 ((OR (ATOM G166066)
                      (PROGN (SETQ |item| (CAR G166066)) NIL)
                      (ATOM G166067)
                      (PROGN (SETQ |compItem| (CAR G166067)) NIL))
                  NIL)
               (SEQ (EXIT (COND
                            ((NULL (SPADLET |s| (ELT |kvec| |i|)))
                             (SETELT |$template| |i|
                                     (|deltaTran| |item| |compItem|)))))))
             (SETELT |$template| 5
                     (COND
                       (|$NRTaddForm|
                           (COND
                             ((AND (PAIRP |$NRTaddForm|)
                                   (EQ (QCAR |$NRTaddForm|) '|@Tuple|)
                                   (PROGN
                                     (SPADLET |y| (QCDR |$NRTaddForm|))
                                     'T))
                              (NREVERSE |y|))
                             ('T
                              (|NRTencode| |$NRTaddForm| |$addForm|))))
                       ('T NIL))))))))

;deltaTran(item,compItem) ==
;  item is ['domain,lhs,:.] => NRTencode(lhs,compItem)
;  --NOTE: all items but signatures are wrapped with domain forms
;  [op,:modemap] := item
;  [dcSig,[.,[kind,:.]]] := modemap
;  [dc,:sig] := dcSig
;  sig := substitute('$,dc,substitute("$$",'$,sig))
;  dcCode :=
;    dc = '$ =>
;      --$NRTaddForm => -5
;      0
;    NRTassocIndexAdd dc or keyedSystemError("S2NR0004",[dc])
;  formalSig:= SUBLISLIS($FormalMapVariableList,$formalArgList,sig)
;  kindFlag:= (kind = 'CONST => 'CONST; nil)
;  newSig := [NRTassocIndex x or x for x in formalSig]
;  [newSig,dcCode,op,:kindFlag]

(DEFUN |deltaTran| (|item| |compItem|)
  (PROG (|ISTMP#1| |lhs| |op| |modemap| |dcSig| |kind| |dc| |sig|
            |dcCode| |formalSig| |kindFlag| |newSig|)
  (declare (special |$formalArgList| |$FormalMapVariableList|))
    (RETURN
      (SEQ (COND
             ((AND (PAIRP |item|) (EQ (QCAR |item|) '|domain|)
                   (PROGN
                     (SPADLET |ISTMP#1| (QCDR |item|))
                     (AND (PAIRP |ISTMP#1|)
                          (PROGN (SPADLET |lhs| (QCAR |ISTMP#1|)) 'T))))
              (|NRTencode| |lhs| |compItem|))
             ('T (SPADLET |op| (CAR |item|))
              (SPADLET |modemap| (CDR |item|))
              (SPADLET |dcSig| (CAR |modemap|))
              (SPADLET |kind| (CAR (CADADR |modemap|)))
              (SPADLET |dc| (CAR |dcSig|))
              (SPADLET |sig| (CDR |dcSig|))
              (SPADLET |sig| (MSUBST '$ |dc| (MSUBST '$$ '$ |sig|)))
              (SPADLET |dcCode|
                       (COND
                         ((BOOT-EQUAL |dc| '$) 0)
                         ('T
                          (OR (|NRTassocIndexAdd| |dc|)
                              (|keyedSystemError| 'S2NR0004
                                  (CONS |dc| NIL))))))
              (SPADLET |formalSig|
                       (SUBLISLIS |$FormalMapVariableList|
                           |$formalArgList| |sig|))
              (SPADLET |kindFlag|
                       (COND
                         ((BOOT-EQUAL |kind| 'CONST) 'CONST)
                         ('T NIL)))
              (SPADLET |newSig|
                       (PROG (G166102)
                         (SPADLET G166102 NIL)
                         (RETURN
                           (DO ((G166107 |formalSig| (CDR G166107))
                                (|x| NIL))
                               ((OR (ATOM G166107)
                                    (PROGN
                                      (SETQ |x| (CAR G166107))
                                      NIL))
                                (NREVERSE0 G166102))
                             (SEQ (EXIT (SETQ G166102
                                         (CONS
                                          (OR (|NRTassocIndex| |x|)
                                           |x|)
                                          G166102))))))))
              (CONS |newSig| (CONS |dcCode| (CONS |op| |kindFlag|)))))))))

;--NRTencodeSig x == [NRTencode y for y in x]
;NRTreplaceAllLocalReferences(form) ==
;  $devaluateList :local := []
;  NRTputInLocalReferences form

(DEFUN |NRTreplaceAllLocalReferences| (|form|)
  (PROG (|$devaluateList|)
    (DECLARE (SPECIAL |$devaluateList|))
    (RETURN
      (PROGN
        (SPADLET |$devaluateList| NIL)
        (|NRTputInLocalReferences| |form|)))))

;NRTencode(x,y) == encode(x,y,true) where encode(x,compForm,firstTime) ==
;  --converts a domain form to a lazy domain form; everything other than
;  --the operation name should be assigned a slot
;  null firstTime and (k:= NRTassocIndex x) => k
;  VECP x => systemErrorHere '"NRTencode"
;  PAIRP x =>
;    QCAR x='Record or x is ['Union,['_:,a,b],:.] =>
;      [QCAR x,:[['_:,a,encode(b,c,false)]
;        for [.,a,b] in QCDR x for [.,=a,c] in CDR compForm]]
;    constructor? QCAR x or MEMQ(QCAR x,'(Union Mapping)) =>
;      [QCAR x,:[encode(y,z,false) for y in QCDR x for z in CDR compForm]]
;    ['NRTEVAL,NRTreplaceAllLocalReferences COPY_-TREE lispize compForm]
;  MEMQ(x,$formalArgList) =>
;    v := $FormalMapVariableList.(POSN1(x,$formalArgList))
;    firstTime => ['local,v]
;    v
;  x = '$ => x
;  x = "$$" => x
;  ['QUOTE,x]

(DEFUN |NRTencode,encode| (|x| |compForm| |firstTime|)
  (PROG (|k| |ISTMP#1| |ISTMP#2| |ISTMP#3| |ISTMP#4| |a| |b| |c| |v|)
  (declare (special |$formalArgList| |$FormalMapVariableList|))
    (RETURN
      (SEQ (IF (AND (NULL |firstTime|)
                    (SPADLET |k| (|NRTassocIndex| |x|)))
               (EXIT |k|))
           (IF (VECP |x|)
               (EXIT (|systemErrorHere| (MAKESTRING "NRTencode"))))
           (IF (PAIRP |x|)
               (EXIT (SEQ (IF (OR (BOOT-EQUAL (QCAR |x|) '|Record|)
                                  (AND (PAIRP |x|)
                                       (EQ (QCAR |x|) '|Union|)
                                       (PROGN
                                         (SPADLET |ISTMP#1| (QCDR |x|))
                                         (AND (PAIRP |ISTMP#1|)
                                          (PROGN
                                            (SPADLET |ISTMP#2|
                                             (QCAR |ISTMP#1|))
                                            (AND (PAIRP |ISTMP#2|)
                                             (EQ (QCAR |ISTMP#2|) '|:|)
                                             (PROGN
                                               (SPADLET |ISTMP#3|
                                                (QCDR |ISTMP#2|))
                                               (AND (PAIRP |ISTMP#3|)
                                                (PROGN
                                                  (SPADLET |a|
                                                   (QCAR |ISTMP#3|))
                                                  (SPADLET |ISTMP#4|
                                                   (QCDR |ISTMP#3|))
                                                  (AND
                                                   (PAIRP |ISTMP#4|)
                                                   (EQ (QCDR |ISTMP#4|)
                                                    NIL)
                                                   (PROGN
                                                     (SPADLET |b|
                                                      (QCAR |ISTMP#4|))
                                                     'T)))))))))))
                              (EXIT (CONS (QCAR |x|)
                                     (PROG (G166191)
                                       (SPADLET G166191 NIL)
                                       (RETURN
                                         (DO
                                          ((G166199 (QCDR |x|)
                                            (CDR G166199))
                                           (G166173 NIL)
                                           (G166200 (CDR |compForm|)
                                            (CDR G166200))
                                           (G166177 NIL))
                                          ((OR (ATOM G166199)
                                            (PROGN
                                              (SETQ G166173
                                               (CAR G166199))
                                              NIL)
                                            (PROGN
                                              (PROGN
                                                (SPADLET |a|
                                                 (CADR G166173))
                                                (SPADLET |b|
                                                 (CADDR G166173))
                                                G166173)
                                              NIL)
                                            (ATOM G166200)
                                            (PROGN
                                              (SETQ G166177
                                               (CAR G166200))
                                              NIL)
                                            (PROGN
                                              (PROGN
                                                (COND
                                                  ((EQUAL |a|
                                                    (CADR G166177))
                                                   |a|))
                                                (SPADLET |c|
                                                 (CADDR G166177))
                                                G166177)
                                              NIL))
                                           (NREVERSE0 G166191))
                                           (SEQ
                                            (EXIT
                                             (SETQ G166191
                                              (CONS
                                               (CONS '|:|
                                                (CONS |a|
                                                 (CONS
                                                  (|NRTencode,encode|
                                                   |b| |c| NIL)
                                                  NIL)))
                                               G166191))))))))))
                          (IF (OR (|constructor?| (QCAR |x|))
                                  (MEMQ (QCAR |x|)
                                        '(|Union| |Mapping|)))
                              (EXIT (CONS (QCAR |x|)
                                     (PROG (G166216)
                                       (SPADLET G166216 NIL)
                                       (RETURN
                                         (DO
                                          ((G166222 (QCDR |x|)
                                            (CDR G166222))
                                           (|y| NIL)
                                           (G166223 (CDR |compForm|)
                                            (CDR G166223))
                                           (|z| NIL))
                                          ((OR (ATOM G166222)
                                            (PROGN
                                              (SETQ |y|
                                               (CAR G166222))
                                              NIL)
                                            (ATOM G166223)
                                            (PROGN
                                              (SETQ |z|
                                               (CAR G166223))
                                              NIL))
                                           (NREVERSE0 G166216))
                                           (SEQ
                                            (EXIT
                                             (SETQ G166216
                                              (CONS
                                               (|NRTencode,encode| |y|
                                                |z| NIL)
                                               G166216))))))))))
                          (EXIT (CONS 'NRTEVAL
                                      (CONS
                                       (|NRTreplaceAllLocalReferences|
                                        (COPY-TREE
                                         (|lispize| |compForm|)))
                                       NIL))))))
           (IF (MEMQ |x| |$formalArgList|)
               (EXIT (SEQ (SPADLET |v|
                                   (ELT |$FormalMapVariableList|
                                    (POSN1 |x| |$formalArgList|)))
                          (IF |firstTime|
                              (EXIT (CONS '|local| (CONS |v| NIL))))
                          (EXIT |v|))))
           (IF (BOOT-EQUAL |x| '$) (EXIT |x|))
           (IF (BOOT-EQUAL |x| '$$) (EXIT |x|))
           (EXIT (CONS 'QUOTE (CONS |x| NIL)))))))


(DEFUN |NRTencode| (|x| |y|) (|NRTencode,encode| |x| |y| 'T))

;--------------FUNCTIONS CALLED DURING CAPSULE FUNCTION COMPILATION-------------
;listOfBoundVars form ==
;-- Only called from the function genDeltaEntry below
;  form = '$ => []
;  IDENTP form and (u:=get(form,'value,$e)) =>
;    u:=u.expr
;    MEMQ(KAR u,'(Union Record)) => listOfBoundVars u
;    [form]
;  atom form => []
;  CAR form = 'QUOTE => []
;  EQ(CAR form,":") => listOfBoundVars CADDR form
;  -- We don't want to pick up the tag, only the domain
;  "UNION"/[listOfBoundVars x for x in CDR form]

(DEFUN |listOfBoundVars| (|form|)
  (PROG (|u|)
  (declare (special |$e|))
    (RETURN
      (SEQ (COND
             ((BOOT-EQUAL |form| '$) NIL)
             ((AND (IDENTP |form|)
                   (SPADLET |u| (|get| |form| '|value| |$e|)))
              (SPADLET |u| (CAR |u|))
              (COND
                ((MEMQ (KAR |u|) '(|Union| |Record|))
                 (|listOfBoundVars| |u|))
                ('T (CONS |form| NIL))))
             ((ATOM |form|) NIL)
             ((BOOT-EQUAL (CAR |form|) 'QUOTE) NIL)
             ((EQ (CAR |form|) '|:|)
              (|listOfBoundVars| (CADDR |form|)))
             ('T
              (PROG (G166254)
                (SPADLET G166254 NIL)
                (RETURN
                  (DO ((G166259 (CDR |form|) (CDR G166259))
                       (|x| NIL))
                      ((OR (ATOM G166259)
                           (PROGN (SETQ |x| (CAR G166259)) NIL))
                       G166254)
                    (SEQ (EXIT (SETQ G166254
                                     (|union| G166254
                                      (|listOfBoundVars| |x|))))))))))))))

;optDeltaEntry(op,sig,dc,eltOrConst) ==
;  $killOptimizeIfTrue = true => nil
;  ndc :=
;    dc = '$ => $functorForm
;    atom dc and (dcval := get(dc,'value,$e)) => dcval.expr
;    dc
;--if (atom dc) and (dcval := get(dc,'value,$e))
;--   then ndc := dcval.expr
;--   else ndc := dc
;  sig := SUBST(ndc,dc,sig)
;  not MEMQ(KAR ndc,$optimizableConstructorNames) => nil
;  dcval := optCallEval ndc
;  -- MSUBST guarantees to use EQUAL testing
;  sig := MSUBST(devaluate dcval, ndc, sig)
;  if rest ndc then
;     for new in rest devaluate dcval for old in rest ndc repeat
;       sig := MSUBST(new,old,sig)
;     -- optCallEval sends (List X) to (LIst (Integer)) etc,
;     -- so we should make the same transformation
;  fn := compiledLookup(op,sig,dcval)
;  if null fn then
;    -- following code is to handle selectors like first, rest
;     nsig := [quoteSelector tt for tt in sig] where
;       quoteSelector(x) ==
;         not(IDENTP x) => x
;         get(x,'value,$e) => x
;         x='$ => x
;         MKQ x
;     fn := compiledLookup(op,nsig,dcval)
;     if null fn then return nil
;  eltOrConst="CONST" => ['XLAM,'ignore,MKQ SPADCALL fn]
;  GET(compileTimeBindingOf first fn,'SPADreplace)

(DEFUN |optDeltaEntry,quoteSelector| (|x|)
  (declare (special |$e|))
  (SEQ (IF (NULL (IDENTP |x|)) (EXIT |x|))
       (IF (|get| |x| '|value| |$e|) (EXIT |x|))
       (IF (BOOT-EQUAL |x| '$) (EXIT |x|)) (EXIT (MKQ |x|))))

(DEFUN |optDeltaEntry| (|op| |sig| |dc| |eltOrConst|)
  (PROG (|ndc| |dcval| |nsig| |fn|)
  (declare (special |$optimizableConstructorNames| |$e| |$functorForm|
                    |$killOptimizeIfTrue|))
    (RETURN
      (SEQ (COND
             ((BOOT-EQUAL |$killOptimizeIfTrue| 'T) NIL)
             ('T
              (SPADLET |ndc|
                       (COND
                         ((BOOT-EQUAL |dc| '$) |$functorForm|)
                         ((AND (ATOM |dc|)
                               (SPADLET |dcval|
                                        (|get| |dc| '|value| |$e|)))
                          (CAR |dcval|))
                         ('T |dc|)))
              (SPADLET |sig| (MSUBST |ndc| |dc| |sig|))
              (COND
                ((NULL (MEMQ (KAR |ndc|)
                             |$optimizableConstructorNames|))
                 NIL)
                ('T (SPADLET |dcval| (|optCallEval| |ndc|))
                 (SPADLET |sig|
                          (MSUBST (|devaluate| |dcval|) |ndc| |sig|))
                 (COND
                   ((CDR |ndc|)
                    (DO ((G166283 (CDR (|devaluate| |dcval|))
                             (CDR G166283))
                         (|new| NIL)
                         (G166284 (CDR |ndc|) (CDR G166284))
                         (|old| NIL))
                        ((OR (ATOM G166283)
                             (PROGN (SETQ |new| (CAR G166283)) NIL)
                             (ATOM G166284)
                             (PROGN (SETQ |old| (CAR G166284)) NIL))
                         NIL)
                      (SEQ (EXIT (SPADLET |sig|
                                          (MSUBST |new| |old| |sig|)))))))
                 (SPADLET |fn| (|compiledLookup| |op| |sig| |dcval|))
                 (COND
                   ((NULL |fn|)
                    (SPADLET |nsig|
                             (PROG (G166297)
                               (SPADLET G166297 NIL)
                               (RETURN
                                 (DO ((G166302 |sig| (CDR G166302))
                                      (|tt| NIL))
                                     ((OR (ATOM G166302)
                                       (PROGN
                                         (SETQ |tt| (CAR G166302))
                                         NIL))
                                      (NREVERSE0 G166297))
                                   (SEQ
                                    (EXIT
                                     (SETQ G166297
                                      (CONS
                                       (|optDeltaEntry,quoteSelector|
                                        |tt|)
                                       G166297))))))))
                    (SPADLET |fn|
                             (|compiledLookup| |op| |nsig| |dcval|))
                    (COND ((NULL |fn|) (RETURN NIL)) ('T NIL))))
                 (COND
                   ((BOOT-EQUAL |eltOrConst| 'CONST)
                    (CONS 'XLAM
                          (CONS '|ignore|
                                (CONS (MKQ (SPADCALL |fn|)) NIL))))
                   ('T
                    (GETL (|compileTimeBindingOf| (CAR |fn|))
                          '|SPADreplace|)))))))))))

;genDeltaEntry opMmPair ==
;--called from compApplyModemap
;--$NRTdeltaLength=0.. always equals length of $NRTdeltaList
;  [.,[odc,:.],.] := opMmPair
;  --opModemapPair := SUBLIS($LocalDomainAlist,opMmPair)
;  [op,[dc,:sig],[.,cform:=[eltOrConst,.,nsig]]] := opMmPair
;  if $profileCompiler = true then profileRecord(dc,op,sig)
;  eltOrConst = 'XLAM => cform
;  if eltOrConst = 'Subsumed then eltOrConst := 'ELT
;  if atom dc then
;    dc = "$" => nsig := sig
;    if NUMBERP nsig then nsig := substitute('$,dc,substitute("$$","$",sig))
;    -- following hack needed to invert Rep to $ substitution
;--  if odc = 'Rep and cform is [.,.,osig] then sig:=osig
;  newimp := optDeltaEntry(op,nsig,dc,eltOrConst) => newimp
;  setDifference(listOfBoundVars dc,$functorLocalParameters) ^= [] =>
;    ['applyFun,['compiledLookupCheck,MKQ op,
;         mkList consSig(nsig,dc),consDomainForm(dc,nil)]]
;  odc := dc
;  if null atom dc then dc := substitute("$$",'$,dc)
; --   sig := substitute('$,dc,sig)
; --   cform := substitute('$,dc,cform)
;  opModemapPair :=
;    [op,[dc,:[genDeltaSig x for x in nsig]],['T,cform]] -- force pred to T
;  if null NRTassocIndex dc and dc ^= $NRTaddForm and
;    (MEMBER(dc,$functorLocalParameters) or null atom dc) then
;    --create "domain" entry to $NRTdeltaList
;      $NRTdeltaList:= [['domain,NRTaddInner dc,:dc],:$NRTdeltaList]
;      saveNRTdeltaListComp:= $NRTdeltaListComp:=[nil,:$NRTdeltaListComp]
;      $NRTdeltaLength := $NRTdeltaLength+1
;      compEntry:= compOrCroak(odc,$EmptyMode,$e).expr
;--      dc
;      RPLACA(saveNRTdeltaListComp,compEntry)
;  u :=
;    [eltOrConst,'$,$NRTbase+$NRTdeltaLength-index] where index ==
;      (n:= POSN1(opModemapPair,$NRTdeltaList)) => n + 1
;        --n + 1 since $NRTdeltaLength is 1 too large
;      $NRTdeltaList:= [opModemapPair,:$NRTdeltaList]
;      $NRTdeltaListComp:=[nil,:$NRTdeltaListComp]
;      $NRTdeltaLength := $NRTdeltaLength+1
;      0
;  u

(DEFUN |genDeltaEntry| (|opMmPair|)
  (PROG (|op| |sig| |cform| |eltOrConst| |nsig| |newimp| |odc| |dc|
              |opModemapPair| |saveNRTdeltaListComp| |compEntry| |n| |u|)
  (declare (special |$NRTdeltaLength| |$NRTdeltaListComp| |$NRTdeltaList|
                    |$NRTbase| |$e| |$EmptyMode| |$functorLocalParameters|
                    |$NRTaddForm| |$profileCompiler|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |odc| (CAADR |opMmPair|))
             (SPADLET |op| (CAR |opMmPair|))
             (SPADLET |dc| (CAADR |opMmPair|))
             (SPADLET |sig| (CDADR |opMmPair|))
             (SPADLET |cform| (CAR (CDADDR |opMmPair|)))
             (SPADLET |eltOrConst| (CAAR (CDADDR |opMmPair|)))
             (SPADLET |nsig| (CADDAR (CDADDR |opMmPair|)))
             (COND
               ((BOOT-EQUAL |$profileCompiler| 'T)
                (|profileRecord| |dc| |op| |sig|)))
             (COND
               ((BOOT-EQUAL |eltOrConst| 'XLAM) |cform|)
               ('T
                (COND
                  ((BOOT-EQUAL |eltOrConst| '|Subsumed|)
                   (SPADLET |eltOrConst| 'ELT)))
                (COND
                  ((ATOM |dc|)
                   (COND
                     ((BOOT-EQUAL |dc| '$) (SPADLET |nsig| |sig|))
                     ((NUMBERP |nsig|)
                      (SPADLET |nsig|
                               (MSUBST '$ |dc| (MSUBST '$$ '$ |sig|))))
                     ('T NIL))))
                (COND
                  ((SPADLET |newimp|
                            (|optDeltaEntry| |op| |nsig| |dc|
                                |eltOrConst|))
                   |newimp|)
                  ((NEQUAL (SETDIFFERENCE (|listOfBoundVars| |dc|)
                               |$functorLocalParameters|)
                           NIL)
                   (CONS '|applyFun|
                         (CONS (CONS '|compiledLookupCheck|
                                     (CONS (MKQ |op|)
                                      (CONS
                                       (|mkList|
                                        (|consSig| |nsig| |dc|))
                                       (CONS
                                        (|consDomainForm| |dc| NIL)
                                        NIL))))
                               NIL)))
                  ('T (SPADLET |odc| |dc|)
                   (COND
                     ((NULL (ATOM |dc|))
                      (SPADLET |dc| (MSUBST '$$ '$ |dc|))))
                   (SPADLET |opModemapPair|
                            (CONS |op|
                                  (CONS (CONS |dc|
                                         (PROG (G166339)
                                           (SPADLET G166339 NIL)
                                           (RETURN
                                             (DO
                                              ((G166344 |nsig|
                                                (CDR G166344))
                                               (|x| NIL))
                                              ((OR (ATOM G166344)
                                                (PROGN
                                                  (SETQ |x|
                                                   (CAR G166344))
                                                  NIL))
                                               (NREVERSE0 G166339))
                                               (SEQ
                                                (EXIT
                                                 (SETQ G166339
                                                  (CONS
                                                   (|genDeltaSig| |x|)
                                                   G166339))))))))
                                        (CONS
                                         (CONS 'T (CONS |cform| NIL))
                                         NIL))))
                   (COND
                     ((AND (NULL (|NRTassocIndex| |dc|))
                           (NEQUAL |dc| |$NRTaddForm|)
                           (OR (|member| |dc| |$functorLocalParameters|)
                               (NULL (ATOM |dc|))))
                      (SPADLET |$NRTdeltaList|
                               (CONS (CONS '|domain|
                                      (CONS (|NRTaddInner| |dc|) |dc|))
                                     |$NRTdeltaList|))
                      (SPADLET |saveNRTdeltaListComp|
                               (SPADLET |$NRTdeltaListComp|
                                        (CONS NIL |$NRTdeltaListComp|)))
                      (SPADLET |$NRTdeltaLength|
                               (PLUS |$NRTdeltaLength| 1))
                      (SPADLET |compEntry|
                               (CAR (|compOrCroak| |odc| |$EmptyMode|
                                     |$e|)))
                      (RPLACA |saveNRTdeltaListComp| |compEntry|)))
                   (SPADLET |u|
                            (CONS |eltOrConst|
                                  (CONS '$
                                        (CONS
                                         (SPADDIFFERENCE
                                          (PLUS |$NRTbase|
                                           |$NRTdeltaLength|)
                                          (COND
                                            ((SPADLET |n|
                                              (POSN1 |opModemapPair|
                                               |$NRTdeltaList|))
                                             (PLUS |n| 1))
                                            ('T
                                             (SPADLET |$NRTdeltaList|
                                              (CONS |opModemapPair|
                                               |$NRTdeltaList|))
                                             (SPADLET
                                              |$NRTdeltaListComp|
                                              (CONS NIL
                                               |$NRTdeltaListComp|))
                                             (SPADLET |$NRTdeltaLength|
                                              (PLUS |$NRTdeltaLength|
                                               1))
                                             0)))
                                         NIL))))
                   |u|)))))))))

;genDeltaSig x ==
;  NRTgetLocalIndex x

(DEFUN |genDeltaSig| (|x|) (|NRTgetLocalIndex| |x|))

;genDeltaSpecialSig x ==
;  x is [":",y,z] => [":",y,genDeltaSig z]
;  genDeltaSig x

(DEFUN |genDeltaSpecialSig| (|x|)
  (PROG (|ISTMP#1| |y| |ISTMP#2| |z|)
    (RETURN
      (COND
        ((AND (PAIRP |x|) (EQ (QCAR |x|) '|:|)
              (PROGN
                (SPADLET |ISTMP#1| (QCDR |x|))
                (AND (PAIRP |ISTMP#1|)
                     (PROGN
                       (SPADLET |y| (QCAR |ISTMP#1|))
                       (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                       (AND (PAIRP |ISTMP#2|) (EQ (QCDR |ISTMP#2|) NIL)
                            (PROGN (SPADLET |z| (QCAR |ISTMP#2|)) 'T))))))
         (CONS '|:| (CONS |y| (CONS (|genDeltaSig| |z|) NIL))))
        ('T (|genDeltaSig| |x|))))))

;NRTassocIndexAdd x ==
;  x = $NRTaddForm => 5
;  NRTassocIndex x

(DEFUN |NRTassocIndexAdd| (|x|)
  (declare (special |$NRTaddForm|))
  (COND ((BOOT-EQUAL |x| |$NRTaddForm|) 5) ('T (|NRTassocIndex| |x|))))

;NRTassocIndex x == --returns index of "domain" entry x in al
;  NULL x => x
;  x = $NRTaddForm => 5
;  k := or/[i for i in 1.. for y in $NRTdeltaList
;            | y.0 = 'domain and y.1 = x and ($found := y)] =>
;    $NRTbase + $NRTdeltaLength - k
;  nil

(DEFUN |NRTassocIndex| (|x|)
  (PROG (|k|)
  (declare (special |$NRTdeltaLength| |$NRTbase| |$found| |$NRTdeltaList|
                    |$NRTaddForm|))
    (RETURN
      (SEQ (COND
             ((NULL |x|) |x|)
             ((BOOT-EQUAL |x| |$NRTaddForm|) 5)
             ((SPADLET |k|
                       (PROG (G166410)
                         (SPADLET G166410 NIL)
                         (RETURN
                           (DO ((G166418 NIL G166410)
                                (|i| 1 (QSADD1 |i|))
                                (G166419 |$NRTdeltaList|
                                    (CDR G166419))
                                (|y| NIL))
                               ((OR G166418 (ATOM G166419)
                                    (PROGN
                                      (SETQ |y| (CAR G166419))
                                      NIL))
                                G166410)
                             (SEQ (EXIT (COND
                                          ((AND
                                            (BOOT-EQUAL (ELT |y| 0)
                                             '|domain|)
                                            (BOOT-EQUAL (ELT |y| 1)
                                             |x|)
                                            (SPADLET |$found| |y|))
                                           (SETQ G166410
                                            (OR G166410 |i|))))))))))
              (SPADDIFFERENCE (PLUS |$NRTbase| |$NRTdeltaLength|) |k|))
             ('T NIL))))))

;NRTgetLocalIndexClear item == NRTgetLocalIndex1(item,true)

(DEFUN |NRTgetLocalIndexClear| (|item|)
  (|NRTgetLocalIndex1| |item| 'T))

;NRTgetLocalIndex item == NRTgetLocalIndex1(item,false)

(DEFUN |NRTgetLocalIndex| (|item|) (|NRTgetLocalIndex1| |item| NIL))

;NRTgetLocalIndex1(item,killBindingIfTrue) ==
;  k := NRTassocIndex item => k
;  item = $NRTaddForm => 5
;  item = '$ => 0
;  item = '_$_$ => 2
;  value:=
;    MEMQ(item,$formalArgList) => item
;    nil
;  atom item and null MEMQ(item,'($ _$_$))
;   and null value =>  --give slots to atoms
;    $NRTdeltaList:= [['domain,NRTaddInner item,:value],:$NRTdeltaList]
;    $NRTdeltaListComp:=[item,:$NRTdeltaListComp]
;    $NRTdeltaLength := $NRTdeltaLength+1
;    $NRTbase + $NRTdeltaLength - 1
;  $NRTdeltaList:= [['domain,NRTaddInner item,:value],:$NRTdeltaList]
;  saveNRTdeltaListComp:= $NRTdeltaListComp:=[nil,:$NRTdeltaListComp]
;  saveIndex := $NRTbase + $NRTdeltaLength
;  $NRTdeltaLength := $NRTdeltaLength+1
;  compEntry:= compOrCroak(item,$EmptyMode,$e).expr
;--    item
;  RPLACA(saveNRTdeltaListComp,compEntry)
;  saveIndex

(DEFUN |NRTgetLocalIndex1| (|item| |killBindingIfTrue|)
  (declare (ignore |killBindingIfTrue|))
  (PROG (|k| |value| |saveNRTdeltaListComp| |saveIndex| |compEntry|)
  (declare (special |$e| |$EmptyMode| |$NRTdeltaLength| |$NRTbase|
                    |$NRTdeltaListComp| |$NRTdeltaList| |$formalArgList|
                    |$NRTaddForm|))
    (RETURN
      (COND
        ((SPADLET |k| (|NRTassocIndex| |item|)) |k|)
        ((BOOT-EQUAL |item| |$NRTaddForm|) 5)
        ((BOOT-EQUAL |item| '$) 0)
        ((BOOT-EQUAL |item| '$$) 2)
        ('T
         (SPADLET |value|
                  (COND
                    ((MEMQ |item| |$formalArgList|) |item|)
                    ('T NIL)))
         (COND
           ((AND (ATOM |item|) (NULL (MEMQ |item| '($ $$)))
                 (NULL |value|))
            (SPADLET |$NRTdeltaList|
                     (CONS (CONS '|domain|
                                 (CONS (|NRTaddInner| |item|) |value|))
                           |$NRTdeltaList|))
            (SPADLET |$NRTdeltaListComp|
                     (CONS |item| |$NRTdeltaListComp|))
            (SPADLET |$NRTdeltaLength| (PLUS |$NRTdeltaLength| 1))
            (SPADDIFFERENCE (PLUS |$NRTbase| |$NRTdeltaLength|) 1))
           ('T
            (SPADLET |$NRTdeltaList|
                     (CONS (CONS '|domain|
                                 (CONS (|NRTaddInner| |item|) |value|))
                           |$NRTdeltaList|))
            (SPADLET |saveNRTdeltaListComp|
                     (SPADLET |$NRTdeltaListComp|
                              (CONS NIL |$NRTdeltaListComp|)))
            (SPADLET |saveIndex| (PLUS |$NRTbase| |$NRTdeltaLength|))
            (SPADLET |$NRTdeltaLength| (PLUS |$NRTdeltaLength| 1))
            (SPADLET |compEntry|
                     (CAR (|compOrCroak| |item| |$EmptyMode| |$e|)))
            (RPLACA |saveNRTdeltaListComp| |compEntry|) |saveIndex|)))))))

;NRTgetAddForm domain ==
;  u := HGET($Slot1DataBase,first domain) =>
;    EQSUBSTLIST(rest domain,$FormalMapVariableList,first u)
;  systemErrorHere '"NRTgetAddForm"

(DEFUN |NRTgetAddForm| (|domain|)
  (PROG (|u|)
  (declare (special |$FormalMapVariableList| |$Slot1DataBase|))
    (RETURN
      (COND
        ((SPADLET |u| (HGET |$Slot1DataBase| (CAR |domain|)))
         (EQSUBSTLIST (CDR |domain|) |$FormalMapVariableList|
             (CAR |u|)))
        ('T (|systemErrorHere| (MAKESTRING "NRTgetAddForm")))))))

;NRTassignCapsuleFunctionSlot(op,sig) ==
;--called from compDefineCapsuleFunction
;  opSig := [op,sig]
;  [.,.,implementation] := NRTisExported? opSig or return nil
;    --if opSig is not exported, it is local and need not be assigned
;  if $insideCategoryPackageIfTrue then
;      sig := substitute('$,CADR($functorForm),sig)
;  sig := [genDeltaSig x for x in sig]
;  opModemapPair := [op,['_$,:sig],['T,implementation]]
;  POSN1(opModemapPair,$NRTdeltaList) => nil   --already there
;  $NRTdeltaList:= [opModemapPair,:$NRTdeltaList]
;  $NRTdeltaListComp := [nil,:$NRTdeltaListComp]
;  $NRTdeltaLength := $NRTdeltaLength+1

(DEFUN |NRTassignCapsuleFunctionSlot| (|op| |sig|)
  (PROG (|opSig| |LETTMP#1| |implementation| |opModemapPair|)
  (declare (special |$NRTdeltaLength| |$NRTdeltaListComp| |$NRTdeltaList|
                    |$functorForm| |$insideCategoryPackageIfTrue|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |opSig| (CONS |op| (CONS |sig| NIL)))
             (SPADLET |LETTMP#1|
                      (OR (|NRTisExported?| |opSig|) (RETURN NIL)))
             (SPADLET |implementation| (CADDR |LETTMP#1|))
             (COND
               (|$insideCategoryPackageIfTrue|
                   (SPADLET |sig|
                            (MSUBST '$ (CADR |$functorForm|) |sig|))))
             (SPADLET |sig|
                      (PROG (G166470)
                        (SPADLET G166470 NIL)
                        (RETURN
                          (DO ((G166475 |sig| (CDR G166475))
                               (|x| NIL))
                              ((OR (ATOM G166475)
                                   (PROGN
                                     (SETQ |x| (CAR G166475))
                                     NIL))
                               (NREVERSE0 G166470))
                            (SEQ (EXIT (SETQ G166470
                                        (CONS (|genDeltaSig| |x|)
                                         G166470))))))))
             (SPADLET |opModemapPair|
                      (CONS |op|
                            (CONS (CONS '$ |sig|)
                                  (CONS (CONS 'T
                                         (CONS |implementation| NIL))
                                        NIL))))
             (COND
               ((POSN1 |opModemapPair| |$NRTdeltaList|) NIL)
               ('T
                (SPADLET |$NRTdeltaList|
                         (CONS |opModemapPair| |$NRTdeltaList|))
                (SPADLET |$NRTdeltaListComp|
                         (CONS NIL |$NRTdeltaListComp|))
                (SPADLET |$NRTdeltaLength| (PLUS |$NRTdeltaLength| 1)))))))))

;NRTisExported? opSig ==
;  or/[u for u in $domainShell.1 | u.0 = opSig]

(DEFUN |NRTisExported?| (|opSig|)
  (PROG ()
  (declare (special |$domainShell|))
    (RETURN
      (SEQ (PROG (G166494)
             (SPADLET G166494 NIL)
             (RETURN
               (DO ((G166501 NIL G166494)
                    (G166502 (ELT |$domainShell| 1) (CDR G166502))
                    (|u| NIL))
                   ((OR G166501 (ATOM G166502)
                        (PROGN (SETQ |u| (CAR G166502)) NIL))
                    G166494)
                 (SEQ (EXIT (COND
                              ((BOOT-EQUAL (ELT |u| 0) |opSig|)
                               (SETQ G166494 (OR G166494 |u|)))))))))))))

;consOpSig(op,sig,dc) ==
;  if null atom op then
;    keyedSystemError("S2GE0016",['"consOpSig",'"bad operator in table"])
;  mkList [MKQ op,mkList consSig(sig,dc)]

(DEFUN |consOpSig| (|op| |sig| |dc|)
  (PROGN
    (COND
      ((NULL (ATOM |op|))
       (|keyedSystemError| 'S2GE0016
           (CONS (MAKESTRING "consOpSig")
                 (CONS (MAKESTRING "bad operator in table") NIL)))))
    (|mkList|
        (CONS (MKQ |op|) (CONS (|mkList| (|consSig| |sig| |dc|)) NIL)))))

;consSig(sig,dc) == [consDomainName(sigpart,dc) for sigpart in sig]

(DEFUN |consSig| (|sig| |dc|)
  (PROG ()
    (RETURN
      (SEQ (PROG (G166521)
             (SPADLET G166521 NIL)
             (RETURN
               (DO ((G166526 |sig| (CDR G166526)) (|sigpart| NIL))
                   ((OR (ATOM G166526)
                        (PROGN (SETQ |sigpart| (CAR G166526)) NIL))
                    (NREVERSE0 G166521))
                 (SEQ (EXIT (SETQ G166521
                                  (CONS (|consDomainName| |sigpart|
                                         |dc|)
                                        G166521)))))))))))

;consDomainName(x,dc) ==
;  x = dc => ''$
;  x = '$ => ''$
;  x = "$$" => ['devaluate,'$]
;  x is [op,:argl] =>
;    (op = 'Record) or (op = 'Union and argl is [[":",:.],:.])  =>
;       mkList [MKQ op,
;         :[['LIST,MKQ '_:,MKQ tag,consDomainName(dom,dc)]
;                   for [.,tag,dom] in argl]]
;    isFunctor op or op = 'Mapping or constructor? op =>
;         -- call to constructor? needed if op was compiled in $bootStrapMode
;        mkList [MKQ op,:[consDomainName(y,dc) for y in argl]]
;    substitute('$,"$$",x)
;  x = [] => x
;  (y := LASSOC(x,$devaluateList)) => y
;  k:=NRTassocIndex x =>
;    ['devaluate,['ELT,'$,k]]
;  get(x,'value,$e) =>
;    isDomainForm(x,$e) => ['devaluate,x]
;    x
;  MKQ x

(DEFUN |consDomainName| (|x| |dc|)
  (PROG (|op| |argl| |ISTMP#1| |tag| |dom| |y| |k|)
  (declare (special |$e| |$devaluateList|))
    (RETURN
      (SEQ (COND
             ((BOOT-EQUAL |x| |dc|) ''$)
             ((BOOT-EQUAL |x| '$) ''$)
             ((BOOT-EQUAL |x| '$$) (CONS '|devaluate| (CONS '$ NIL)))
             ((AND (PAIRP |x|)
                   (PROGN
                     (SPADLET |op| (QCAR |x|))
                     (SPADLET |argl| (QCDR |x|))
                     'T))
              (COND
                ((OR (BOOT-EQUAL |op| '|Record|)
                     (AND (BOOT-EQUAL |op| '|Union|) (PAIRP |argl|)
                          (PROGN
                            (SPADLET |ISTMP#1| (QCAR |argl|))
                            (AND (PAIRP |ISTMP#1|)
                                 (EQ (QCAR |ISTMP#1|) '|:|)))))
                 (|mkList|
                     (CONS (MKQ |op|)
                           (PROG (G166553)
                             (SPADLET G166553 NIL)
                             (RETURN
                               (DO ((G166559 |argl| (CDR G166559))
                                    (G166541 NIL))
                                   ((OR (ATOM G166559)
                                     (PROGN
                                       (SETQ G166541 (CAR G166559))
                                       NIL)
                                     (PROGN
                                       (PROGN
                                         (SPADLET |tag|
                                          (CADR G166541))
                                         (SPADLET |dom|
                                          (CADDR G166541))
                                         G166541)
                                       NIL))
                                    (NREVERSE0 G166553))
                                 (SEQ (EXIT
                                       (SETQ G166553
                                        (CONS
                                         (CONS 'LIST
                                          (CONS (MKQ '|:|)
                                           (CONS (MKQ |tag|)
                                            (CONS
                                             (|consDomainName| |dom|
                                              |dc|)
                                             NIL))))
                                         G166553))))))))))
                ((OR (|isFunctor| |op|) (BOOT-EQUAL |op| '|Mapping|)
                     (|constructor?| |op|))
                 (|mkList|
                     (CONS (MKQ |op|)
                           (PROG (G166570)
                             (SPADLET G166570 NIL)
                             (RETURN
                               (DO ((G166575 |argl| (CDR G166575))
                                    (|y| NIL))
                                   ((OR (ATOM G166575)
                                     (PROGN
                                       (SETQ |y| (CAR G166575))
                                       NIL))
                                    (NREVERSE0 G166570))
                                 (SEQ (EXIT
                                       (SETQ G166570
                                        (CONS
                                         (|consDomainName| |y| |dc|)
                                         G166570))))))))))
                ('T (MSUBST '$ '$$ |x|))))
             ((NULL |x|) |x|)
             ((SPADLET |y| (LASSOC |x| |$devaluateList|)) |y|)
             ((SPADLET |k| (|NRTassocIndex| |x|))
              (CONS '|devaluate|
                    (CONS (CONS 'ELT (CONS '$ (CONS |k| NIL))) NIL)))
             ((|get| |x| '|value| |$e|)
              (COND
                ((|isDomainForm| |x| |$e|)
                 (CONS '|devaluate| (CONS |x| NIL)))
                ('T |x|)))
             ('T (MKQ |x|)))))))

;consDomainForm(x,dc) ==
;  x = '$ => '$
;  x is [op,:argl] =>
;     op = ":" and argl is [tag, value] => [op, tag, consDomainForm(value,dc)]
;     [op,:[consDomainForm(y,dc) for y in argl]]
;  x = [] => x
;  (y := LASSOC(x,$devaluateList)) => y
;  k:=NRTassocIndex x => ['ELT,'$,k]
;  get(x,'value,$e) or get(x,'mode,$e) => x
;  MKQ x

(DEFUN |consDomainForm| (|x| |dc|)
  (PROG (|op| |argl| |tag| |ISTMP#1| |value| |y| |k|)
  (declare (special |$e| |$devaluateList|))
    (RETURN
      (SEQ (COND
             ((BOOT-EQUAL |x| '$) '$)
             ((AND (PAIRP |x|)
                   (PROGN
                     (SPADLET |op| (QCAR |x|))
                     (SPADLET |argl| (QCDR |x|))
                     'T))
              (COND
                ((AND (BOOT-EQUAL |op| '|:|) (PAIRP |argl|)
                      (PROGN
                        (SPADLET |tag| (QCAR |argl|))
                        (SPADLET |ISTMP#1| (QCDR |argl|))
                        (AND (PAIRP |ISTMP#1|)
                             (EQ (QCDR |ISTMP#1|) NIL)
                             (PROGN
                               (SPADLET |value| (QCAR |ISTMP#1|))
                               'T))))
                 (CONS |op|
                       (CONS |tag|
                             (CONS (|consDomainForm| |value| |dc|) NIL))))
                ('T
                 (CONS |op|
                       (PROG (G166611)
                         (SPADLET G166611 NIL)
                         (RETURN
                           (DO ((G166616 |argl| (CDR G166616))
                                (|y| NIL))
                               ((OR (ATOM G166616)
                                    (PROGN
                                      (SETQ |y| (CAR G166616))
                                      NIL))
                                (NREVERSE0 G166611))
                             (SEQ (EXIT (SETQ G166611
                                         (CONS
                                          (|consDomainForm| |y| |dc|)
                                          G166611)))))))))))
             ((NULL |x|) |x|)
             ((SPADLET |y| (LASSOC |x| |$devaluateList|)) |y|)
             ((SPADLET |k| (|NRTassocIndex| |x|))
              (CONS 'ELT (CONS '$ (CONS |k| NIL))))
             ((OR (|get| |x| '|value| |$e|) (|get| |x| '|mode| |$e|))
              |x|)
             ('T (MKQ |x|)))))))

;buildFunctor($definition is [name,:args],sig,code,$locals,$e) ==
;--PARAMETERS
;--  $definition: constructor form, e.g. (SquareMatrix 10 (RationalNumber))
;--  sig: signature of constructor form
;--  code: result of "doIt", converting body of capsule to CodeDefine forms, e.g.
;--       (PROGN (LET Rep ...)
;--              (: (ListOf x y) $)
;--              (CodeDefine (<op> <signature> <functionName>))
;--              (COND ((HasCategory $ ...) (PROGN ...))) ..)
;--  $locals: list of variables to go into slot 5, e.g. (R Rep R,1 R,2 R,3 R,4)
;--           same as $functorLocalParameters
;--           this list is not augmented by this function
;--  $e: environment
;--GLOBAL VARIABLES REFERENCED:
;--  $domainShell: passed in from compDefineFunctor1
;--  $QuickCode: compilation flag
;  if code is ['add,.,newstuff] then code := newstuff
;  changeDirectoryInSlot1()  --this extends $NRTslot1PredicateList
;  --pp '"=================="
;  --for item in $NRTdeltaList repeat pp item
;--LOCAL BOUND FLUID VARIABLES:
;  $GENNO: local:= 0     --bound in compDefineFunctor1, then as parameter here
;--$frontier: local      --index of first local slot=#(cat part of princ view)
;  $catvecList: local    --list of vectors v1..vn for each view
;  $hasCategoryAlist: local  --list of GENSYMs bound to (HasCategory ..) items
;  $catNames: local      --list of names n1..nn for each view
;  $maximalViews: local  --list of maximal categories for domain (???)
;  $catsig: local        --target category (used in ProcessCond)
;  $SetFunctions: local  --copy of p view with preds telling when fnct defined
;  $MissingFunctionInfo: local --now useless
;     --vector marking which functions are assigned
;  $ConstantAssignments: local --code for creation of constants
;  $epilogue: local := nil     --code to set slot 5, things to be done last
;  $HackSlot4: local  --Invention of JHD 13/July/86-set in InvestigateConditions
;  $extraParms:local  --Set in DomainSubstitutionFunction, used in setVector12
;  $devaluateList: local --Bound to ((#1 . dv$1)..) where &1 := devaluate #1 later
;  $devaluateList:= [[arg,:b] for arg in args for b in $ModeVariableList]
;  $supplementaries: local := nil
;   --set in InvestigateConditions to represent any additional
;   --category membership tests that may be needed(see buildFunctor for details)
;------------------------
;  $maximalViews: local := nil
;  oldtime:= TEMPUS_-FUGIT()
;  [$catsig,:argsig]:= sig
;  catvecListMaker:=REMDUP
;    [(comp($catsig,$EmptyMode,$e)).expr,
;      :[compCategories first u for u in CADR $domainShell.4]]
;  condCats:= InvestigateConditions [$catsig,:rest catvecListMaker]
;  -- a list, one %for each element of catvecListMaker
;  -- indicating under what conditions this
;  -- category should be present.  true => always
;  makeCatvecCode:= first catvecListMaker
;  emptyVector := VECTOR()
;--if $NRTaddForm and null NRTassocIndex $NRTaddForm then
;--  --create "domain" entry to $NRTdeltaList
;--    $NRTdeltaList:=
;--      [['domain,NRTaddInner $NRTaddForm,:$NRTaddForm],:$NRTdeltaList]
;--    $NRTdeltaLength := $NRTdeltaLength+1
;--NRTgetLocalIndex $NRTaddForm
;  domainShell := GETREFV (6 + $NRTdeltaLength)
;  for i in 0..4 repeat domainShell.i := $domainShell.i
;    --we will clobber elements; copy since $domainShell may be a cached vector
;  $template :=
;    $NRTvec = true => GETREFV (6 + $NRTdeltaLength)
;    nil
;  $catvecList:= [domainShell,:[emptyVector for u in CADR domainShell.4]]
;  $catNames := ['$] -- for DescendCode -- to be changed below for slot 4
;  $maximalViews:= nil
;  $SetFunctions:= GETREFV SIZE domainShell
;  $MissingFunctionInfo:= GETREFV SIZE domainShell
;  $catNames:= ['$,:[GENVAR() for u in rest catvecListMaker]]
;  domname:='dv_$
;-->  Do this now to create predicate vector; then DescendCode can refer
;-->  to predicate vector if it can
;  [$uncondAlist,:$condAlist] :=    --bound in compDefineFunctor1
;      NRTsetVector4Part1($catNames,catvecListMaker,condCats)
;  [$NRTslot1PredicateList,predBitVectorCode1,:predBitVectorCode2] :=
;      makePredicateBitVector [:ASSOCRIGHT $condAlist,:$NRTslot1PredicateList]
;  storeOperationCode:= DescendCode(code,true,nil,first $catNames)
;  outsideFunctionCode:= NRTaddDeltaCode()
;  storeOperationCode:= NRTputInLocalReferences storeOperationCode
;  if $NRTvec = true then
;    NRTdescendCodeTran(storeOperationCode,nil) --side effects storeOperationCode
;  codePart2:=
;    $NRTvec = true =>
;      argStuffCode :=
;        [[$setelt,'$,i,v] for i in 6.. for v in $FormalMapVariableList
;          for arg in rest $definition]
;      if MEMQ($NRTaddForm,$locals) then
;         addargname := $FormalMapVariableList.(POSN1($NRTaddForm,$locals))
;         argStuffCode := [[$setelt,'$,5,addargname],:argStuffCode]
;      [['stuffDomainSlots,'$],:argStuffCode,
;         :predBitVectorCode2,storeOperationCode]
;    [:outsideFunctionCode,storeOperationCode]
;  $CheckVectorList := NRTcheckVector domainShell
;--CODE: part 1
;  codePart1:= [:devaluateCode,:domainFormCode,createDomainCode,
;                createViewCode,setVector0Code, slot3Code,:slamCode] where
;    devaluateCode:= [['LET,b,['devaluate,a]] for [a,:b] in $devaluateList]
;    domainFormCode := [['LET,a,b] for [a,:b] in NREVERSE $NRTdomainFormList]
;      --$NRTdomainFormList is unused now
;    createDomainCode:=
;      ['LET,domname,['LIST,MKQ CAR $definition,:ASSOCRIGHT $devaluateList]]
;    createViewCode:= ['LET,'$,['GETREFV, 6+$NRTdeltaLength]]
;    setVector0Code:=[$setelt,'$,0,'dv_$]
;    slot3Code := ['QSETREFV,'$,3,['LET,'pv_$,predBitVectorCode1]]
;    slamCode:=
;      isCategoryPackageName opOf $definition => nil
;      [NRTaddToSlam($definition,'$)]
;--CODE: part 3
;  $ConstantAssignments :=
;      [NRTputInLocalReferences code for code in $ConstantAssignments]
;  codePart3:= [:constantCode1,
;                :constantCode2,:epilogue] where
;    constantCode1:=
;      name='Integer => $ConstantAssignments
;      nil
;                      -- The above line is needed to get the recursion
;                      -- Integer => FontTable => NonNegativeInteger  => Integer
;                      -- right.  Otherwise NNI has 'unset' for 0 and 1
;--  setVector4c:= setVector4part3($catNames,$catvecList)
;                      -- In particular, setVector4part3 and setVector5,
;                      -- which generate calls to local domain-instantiators,
;                      -- must come after operations are set in the vector.
;                      -- The symptoms of getting this wrong are that
;                      -- operations are not set which should be
;    constantCode2:= --matches previous test on Integer
;      name='Integer => nil
;      $ConstantAssignments
;    epilogue:= $epilogue
;  ans :=
;    ['PROGN,:optFunctorPROGN [:codePart1,:codePart2,:codePart3], '$]
;  $getDomainCode:= nil
;    --if we didn't kill this, DEFINE would insert it in the wrong place
;  ans:= minimalise ans
;  SAY ['"time taken in buildFunctor: ",TEMPUS_-FUGIT()-oldtime]
;  --sayBrightly '"------------------functor code: -------------------"
;  --pp ans
;  ans

(DEFUN |buildFunctor| (|$definition| |sig| |code| |$locals| |$e|)
  (DECLARE (SPECIAL |$definition| |$locals| |$e|))
  (PROG ($GENNO |$catvecList| |$hasCategoryAlist| |$catNames| |$catsig|
                |$SetFunctions| |$MissingFunctionInfo|
                |$ConstantAssignments| |$epilogue| |$HackSlot4|
                |$extraParms| |$devaluateList| |$supplementaries|
                |$maximalViews| |name| |args| |ISTMP#1| |ISTMP#2|
                |newstuff| |oldtime| |argsig| |catvecListMaker|
                |condCats| |makeCatvecCode| |emptyVector| |domainShell|
                |domname| |LETTMP#1| |predBitVectorCode1|
                |predBitVectorCode2| |outsideFunctionCode|
                |storeOperationCode| |addargname| |argStuffCode|
                |codePart2| |devaluateCode| |a| |b| |domainFormCode|
                |createDomainCode| |createViewCode| |setVector0Code|
                |slot3Code| |slamCode| |codePart1| |constantCode1|
                |constantCode2| |epilogue| |codePart3| |ans|)
    (DECLARE (SPECIAL $GENNO |$catvecList| |$hasCategoryAlist| |$EmptyMode|
                      |$catNames| |$catsig| |$SetFunctions| |$ModeVariableList|
                      |$MissingFunctionInfo| |$ConstantAssignments| |$setelt|
                      |$epilogue| |$HackSlot4| |$extraParms| |$NRTdeltaLength|
                      |$devaluateList| |$supplementaries| |$NRTdomainFormList|
                      |$maximalViews| |$getDomainCode| |$CheckVectorList|
                      |$NRTaddForm| |$FormalMapVariableList| |$NRTvec|
                      |$catNames| |$NRTslot1PredicateList| |$condAlist|
                      |$uncondAlist| |$template| |$domainShell| 
                      |$SetFunctions|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |name| (CAR |$definition|))
             (SPADLET |args| (CDR |$definition|))
             (COND
               ((AND (PAIRP |code|) (EQ (QCAR |code|) '|add|)
                     (PROGN
                       (SPADLET |ISTMP#1| (QCDR |code|))
                       (AND (PAIRP |ISTMP#1|)
                            (PROGN
                              (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                              (AND (PAIRP |ISTMP#2|)
                                   (EQ (QCDR |ISTMP#2|) NIL)
                                   (PROGN
                                     (SPADLET |newstuff|
                                      (QCAR |ISTMP#2|))
                                     'T))))))
                (SPADLET |code| |newstuff|)))
             (|changeDirectoryInSlot1|)
             (SPADLET $GENNO 0)
             (SPADLET |$catvecList| NIL)
             (SPADLET |$hasCategoryAlist| NIL)
             (SPADLET |$catNames| NIL)
             (SPADLET |$maximalViews| NIL)
             (SPADLET |$catsig| NIL)
             (SPADLET |$SetFunctions| NIL)
             (SPADLET |$MissingFunctionInfo| NIL)
             (SPADLET |$ConstantAssignments| NIL)
             (SPADLET |$epilogue| NIL)
             (SPADLET |$HackSlot4| NIL)
             (SPADLET |$extraParms| NIL)
             (SPADLET |$devaluateList| NIL)
             (SPADLET |$devaluateList|
                      (PROG (G166745)
                        (SPADLET G166745 NIL)
                        (RETURN
                          (DO ((G166751 |args| (CDR G166751))
                               (|arg| NIL)
                               (G166752 |$ModeVariableList|
                                   (CDR G166752))
                               (|b| NIL))
                              ((OR (ATOM G166751)
                                   (PROGN
                                     (SETQ |arg| (CAR G166751))
                                     NIL)
                                   (ATOM G166752)
                                   (PROGN
                                     (SETQ |b| (CAR G166752))
                                     NIL))
                               (NREVERSE0 G166745))
                            (SEQ (EXIT (SETQ G166745
                                        (CONS (CONS |arg| |b|)
                                         G166745))))))))
             (SPADLET |$supplementaries| NIL)
             (SPADLET |$maximalViews| NIL)
             (SPADLET |oldtime| (get-internal-run-time))
             (SPADLET |$catsig| (CAR |sig|))
             (SPADLET |argsig| (CDR |sig|))
             (SPADLET |catvecListMaker|
                      (REMDUP (CONS (CAR
                                     (|comp| |$catsig| |$EmptyMode|
                                      |$e|))
                                    (PROG (G166765)
                                      (SPADLET G166765 NIL)
                                      (RETURN
                                        (DO
                                         ((G166770
                                           (CADR
                                            (ELT |$domainShell| 4))
                                           (CDR G166770))
                                          (|u| NIL))
                                         ((OR (ATOM G166770)
                                           (PROGN
                                             (SETQ |u| (CAR G166770))
                                             NIL))
                                          (NREVERSE0 G166765))
                                          (SEQ
                                           (EXIT
                                            (SETQ G166765
                                             (CONS
                                              (|compCategories|
                                               (CAR |u|))
                                              G166765))))))))))
             (SPADLET |condCats|
                      (|InvestigateConditions|
                          (CONS |$catsig| (CDR |catvecListMaker|))))
             (SPADLET |makeCatvecCode| (CAR |catvecListMaker|))
             (SPADLET |emptyVector| (VECTOR))
             (SPADLET |domainShell|
                      (GETREFV (PLUS 6 |$NRTdeltaLength|)))
             (DO ((|i| 0 (QSADD1 |i|))) ((QSGREATERP |i| 4) NIL)
               (SEQ (EXIT (SETELT |domainShell| |i|
                                  (ELT |$domainShell| |i|)))))
             (SPADLET |$template|
                      (COND
                        ((BOOT-EQUAL |$NRTvec| 'T)
                         (GETREFV (PLUS 6 |$NRTdeltaLength|)))
                        ('T NIL)))
             (SPADLET |$catvecList|
                      (CONS |domainShell|
                            (PROG (G166786)
                              (SPADLET G166786 NIL)
                              (RETURN
                                (DO ((G166791
                                      (CADR (ELT |domainShell| 4))
                                      (CDR G166791))
                                     (|u| NIL))
                                    ((OR (ATOM G166791)
                                      (PROGN
                                        (SETQ |u| (CAR G166791))
                                        NIL))
                                     (NREVERSE0 G166786))
                                  (SEQ (EXIT
                                        (SETQ G166786
                                         (CONS |emptyVector| G166786)))))))))
             (SPADLET |$catNames| (CONS '$ NIL))
             (SPADLET |$maximalViews| NIL)
             (SPADLET |$SetFunctions| (GETREFV (SIZE |domainShell|)))
             (SPADLET |$MissingFunctionInfo|
                      (GETREFV (SIZE |domainShell|)))
             (SPADLET |$catNames|
                      (CONS '$
                            (PROG (G166801)
                              (SPADLET G166801 NIL)
                              (RETURN
                                (DO ((G166806 (CDR |catvecListMaker|)
                                      (CDR G166806))
                                     (|u| NIL))
                                    ((OR (ATOM G166806)
                                      (PROGN
                                        (SETQ |u| (CAR G166806))
                                        NIL))
                                     (NREVERSE0 G166801))
                                  (SEQ (EXIT
                                        (SETQ G166801
                                         (CONS (GENVAR) G166801)))))))))
             (SPADLET |domname| '|dv$|)
             (SPADLET |LETTMP#1|
                      (|NRTsetVector4Part1| |$catNames|
                          |catvecListMaker| |condCats|))
             (SPADLET |$uncondAlist| (CAR |LETTMP#1|))
             (SPADLET |$condAlist| (CDR |LETTMP#1|))
             (SPADLET |LETTMP#1|
                      (|makePredicateBitVector|
                          (APPEND (ASSOCRIGHT |$condAlist|)
                                  |$NRTslot1PredicateList|)))
             (SPADLET |$NRTslot1PredicateList| (CAR |LETTMP#1|))
             (SPADLET |predBitVectorCode1| (CADR |LETTMP#1|))
             (SPADLET |predBitVectorCode2| (CDDR |LETTMP#1|))
             (SPADLET |storeOperationCode|
                      (|DescendCode| |code| 'T NIL (CAR |$catNames|)))
             (SPADLET |outsideFunctionCode| (|NRTaddDeltaCode|))
             (SPADLET |storeOperationCode|
                      (|NRTputInLocalReferences| |storeOperationCode|))
             (COND
               ((BOOT-EQUAL |$NRTvec| 'T)
                (|NRTdescendCodeTran| |storeOperationCode| NIL)))
             (SPADLET |codePart2|
                      (COND
                        ((BOOT-EQUAL |$NRTvec| 'T)
                         (SPADLET |argStuffCode|
                                  (PROG (G166818)
                                    (SPADLET G166818 NIL)
                                    (RETURN
                                      (DO
                                       ((|i| 6 (+ |i| 1))
                                        (G166825
                                         |$FormalMapVariableList|
                                         (CDR G166825))
                                        (|v| NIL)
                                        (G166826 (CDR |$definition|)
                                         (CDR G166826))
                                        (|arg| NIL))
                                       ((OR (ATOM G166825)
                                         (PROGN
                                           (SETQ |v| (CAR G166825))
                                           NIL)
                                         (ATOM G166826)
                                         (PROGN
                                           (SETQ |arg| (CAR G166826))
                                           NIL))
                                        (NREVERSE0 G166818))
                                        (SEQ
                                         (EXIT
                                          (SETQ G166818
                                           (CONS
                                            (CONS |$setelt|
                                             (CONS '$
                                              (CONS |i| (CONS |v| NIL))))
                                            G166818))))))))
                         (COND
                           ((MEMQ |$NRTaddForm| |$locals|)
                            (SPADLET |addargname|
                                     (ELT |$FormalMapVariableList|
                                      (POSN1 |$NRTaddForm| |$locals|)))
                            (SPADLET |argStuffCode|
                                     (CONS
                                      (CONS |$setelt|
                                       (CONS '$
                                        (CONS 5
                                         (CONS |addargname| NIL))))
                                      |argStuffCode|))))
                         (CONS (CONS '|stuffDomainSlots| (CONS '$ NIL))
                               (APPEND |argStuffCode|
                                       (APPEND |predBitVectorCode2|
                                        (CONS |storeOperationCode| NIL)))))
                        ('T
                         (APPEND |outsideFunctionCode|
                                 (CONS |storeOperationCode| NIL)))))
             (SPADLET |$CheckVectorList|
                      (|NRTcheckVector| |domainShell|))
             (SPADLET |devaluateCode|
                      (PROG (G166840)
                        (SPADLET G166840 NIL)
                        (RETURN
                          (DO ((G166846 |$devaluateList|
                                   (CDR G166846))
                               (G166666 NIL))
                              ((OR (ATOM G166846)
                                   (PROGN
                                     (SETQ G166666 (CAR G166846))
                                     NIL)
                                   (PROGN
                                     (PROGN
                                       (SPADLET |a| (CAR G166666))
                                       (SPADLET |b| (CDR G166666))
                                       G166666)
                                     NIL))
                               (NREVERSE0 G166840))
                            (SEQ (EXIT (SETQ G166840
                                        (CONS
                                         (CONS 'LET
                                          (CONS |b|
                                           (CONS
                                            (CONS '|devaluate|
                                             (CONS |a| NIL))
                                            NIL)))
                                         G166840))))))))
             (SPADLET |domainFormCode|
                      (PROG (G166858)
                        (SPADLET G166858 NIL)
                        (RETURN
                          (DO ((G166864
                                   (NREVERSE |$NRTdomainFormList|)
                                   (CDR G166864))
                               (G166670 NIL))
                              ((OR (ATOM G166864)
                                   (PROGN
                                     (SETQ G166670 (CAR G166864))
                                     NIL)
                                   (PROGN
                                     (PROGN
                                       (SPADLET |a| (CAR G166670))
                                       (SPADLET |b| (CDR G166670))
                                       G166670)
                                     NIL))
                               (NREVERSE0 G166858))
                            (SEQ (EXIT (SETQ G166858
                                        (CONS
                                         (CONS 'LET
                                          (CONS |a| (CONS |b| NIL)))
                                         G166858))))))))
             (SPADLET |createDomainCode|
                      (CONS 'LET
                            (CONS |domname|
                                  (CONS (CONS 'LIST
                                         (CONS
                                          (MKQ (CAR |$definition|))
                                          (ASSOCRIGHT |$devaluateList|)))
                                        NIL))))
             (SPADLET |createViewCode|
                      (CONS 'LET
                            (CONS '$
                                  (CONS (CONS 'GETREFV
                                         (CONS
                                          (PLUS 6 |$NRTdeltaLength|)
                                          NIL))
                                        NIL))))
             (SPADLET |setVector0Code|
                      (CONS |$setelt|
                            (CONS '$ (CONS 0 (CONS '|dv$| NIL)))))
             (SPADLET |slot3Code|
                      (CONS 'QSETREFV
                            (CONS '$
                                  (CONS 3
                                        (CONS
                                         (CONS 'LET
                                          (CONS '|pv$|
                                           (CONS |predBitVectorCode1|
                                            NIL)))
                                         NIL)))))
             (SPADLET |slamCode|
                      (COND
                        ((|isCategoryPackageName|
                             (|opOf| |$definition|))
                         NIL)
                        ('T
                         (CONS (|NRTaddToSlam| |$definition| '$) NIL))))
             (SPADLET |codePart1|
                      (APPEND |devaluateCode|
                              (APPEND |domainFormCode|
                                      (CONS |createDomainCode|
                                       (CONS |createViewCode|
                                        (CONS |setVector0Code|
                                         (CONS |slot3Code| |slamCode|)))))))
             (SPADLET |$ConstantAssignments|
                      (PROG (G166875)
                        (SPADLET G166875 NIL)
                        (RETURN
                          (DO ((G166880 |$ConstantAssignments|
                                   (CDR G166880))
                               (|code| NIL))
                              ((OR (ATOM G166880)
                                   (PROGN
                                     (SETQ |code| (CAR G166880))
                                     NIL))
                               (NREVERSE0 G166875))
                            (SEQ (EXIT (SETQ G166875
                                        (CONS
                                         (|NRTputInLocalReferences|
                                          |code|)
                                         G166875))))))))
             (SPADLET |constantCode1|
                      (COND
                        ((BOOT-EQUAL |name| '|Integer|)
                         |$ConstantAssignments|)
                        ('T NIL)))
             (SPADLET |constantCode2|
                      (COND
                        ((BOOT-EQUAL |name| '|Integer|) NIL)
                        ('T |$ConstantAssignments|)))
             (SPADLET |epilogue| |$epilogue|)
             (SPADLET |codePart3|
                      (APPEND |constantCode1|
                              (APPEND |constantCode2| |epilogue|)))
             (SPADLET |ans|
                      (CONS 'PROGN
                            (APPEND (|optFunctorPROGN|
                                     (APPEND |codePart1|
                                      (APPEND |codePart2| |codePart3|)))
                                    (CONS '$ NIL))))
             (SPADLET |$getDomainCode| NIL)
             (SPADLET |ans| (|minimalise| |ans|))
             (SAY (CONS (MAKESTRING "time taken in buildFunctor: ")
                       (CONS (SPADDIFFERENCE (get-internal-run-time) |oldtime|)
                              NIL)))
             |ans|)))))

;NRTcheckVector domainShell ==
;--RETURNS: an alist (((op,sig),:pred) ...) of missing functions
;  alist := nil
;  for i in 6..MAXINDEX domainShell repeat
;--Vector elements can be one of
;-- (a) T           -- item was marked
;-- (b) NIL         -- item is a domain; will be filled in by setVector4part3
;-- (c) categoryForm-- it was a domain view; now irrelevant
;-- (d) op-signature-- store missing function info in $CheckVectorList
;    v:= domainShell.i
;    v=true => nil  --item is marked; ignore
;    null v => nil  --a domain, which setVector4part3 will fill in
;    atom first v => nil  --category form; ignore
;    atom v => systemErrorHere '"CheckVector"
;    ASSOC(first v,alist) => nil
;    alist:=
;      [[first v,:$SetFunctions.i],:alist]
;  alist

(DEFUN |NRTcheckVector| (|domainShell|)
  (PROG (|v| |alist|)
  (declare (special |$SetFunctions|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |alist| NIL)
             (DO ((G167008 (MAXINDEX |domainShell|))
                  (|i| 6 (+ |i| 1)))
                 ((> |i| G167008) NIL)
               (SEQ (EXIT (PROGN
                            (SPADLET |v| (ELT |domainShell| |i|))
                            (COND
                              ((BOOT-EQUAL |v| 'T) NIL)
                              ((NULL |v|) NIL)
                              ((ATOM (CAR |v|)) NIL)
                              ((ATOM |v|)
                               (|systemErrorHere|
                                   (MAKESTRING "CheckVector")))
                              ((|assoc| (CAR |v|) |alist|) NIL)
                              ('T
                               (SPADLET |alist|
                                        (CONS
                                         (CONS (CAR |v|)
                                          (ELT |$SetFunctions| |i|))
                                         |alist|))))))))
             |alist|)))))

;-- Obsolete once we have moved to JHD's world
;NRTvectorCopy(cacheName,domName,deltaLength) == GETREFV (6 + deltaLength)

(DEFUN |NRTvectorCopy| (|cacheName| |domName| |deltaLength|)
  (declare (ignore |cacheName| |domName| ))
  (GETREFV (PLUS 6 |deltaLength|)))

;mkDomainCatName id == INTERN STRCONC(id,";CAT")

(DEFUN |mkDomainCatName| (|id|) (INTERN (STRCONC |id| '|;CAT|)))

;NRTsetVector4(siglist,formlist,condlist) ==
;  $uncondList: local := nil
;  $condList: local := nil
;  $count: local := 0
;  for sig in reverse siglist for form in reverse formlist
;         for cond in reverse condlist repeat
;                  NRTsetVector4a(sig,form,cond)
;  --NRTsetVector4a(first siglist,first formlist,first condlist)
;  $lisplibCategoriesExtended:= [$uncondList,:$condList]
;  code := ['mapConsDB,MKQ REVERSE REMDUP $uncondList]
;  if $condList then
;    localVariable := GENSYM()
;    code := [['LET,localVariable,code]]
;    for [pred,list] in $condList repeat
;      code :=
;        [['COND,[pred,['LET,localVariable,
;          ['mergeAppend,['mapConsDB,MKQ list],localVariable]]]],
;            :code]
;    code := ['PROGN,:NREVERSE [['NREVERSE,localVariable],:code]]
;  g := GENSYM()
;  [$setelt,'$,4,['PROG2,['LET,g,code],
;    ['VECTOR,['catList2catPackageList,g],g]]]

(DEFUN |NRTsetVector4| (|siglist| |formlist| |condlist|)
  (PROG (|$uncondList| |$condList| |$count| |localVariable| |pred| LIST
            |code| |g|)
    (DECLARE (SPECIAL |$uncondList| |$condList| |$count| |$setelt|
                      |$lisplibCategoriesExtended|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |$uncondList| NIL)
             (SPADLET |$condList| NIL)
             (SPADLET |$count| 0)
             (DO ((G167035 (REVERSE |siglist|) (CDR G167035))
                  (|sig| NIL)
                  (G167036 (REVERSE |formlist|) (CDR G167036))
                  (|form| NIL)
                  (G167037 (REVERSE |condlist|) (CDR G167037))
                  (|cond| NIL))
                 ((OR (ATOM G167035)
                      (PROGN (SETQ |sig| (CAR G167035)) NIL)
                      (ATOM G167036)
                      (PROGN (SETQ |form| (CAR G167036)) NIL)
                      (ATOM G167037)
                      (PROGN (SETQ |cond| (CAR G167037)) NIL))
                  NIL)
               (SEQ (EXIT (|NRTsetVector4a| |sig| |form| |cond|))))
             (SPADLET |$lisplibCategoriesExtended|
                      (CONS |$uncondList| |$condList|))
             (SPADLET |code|
                      (CONS '|mapConsDB|
                            (CONS (MKQ (REVERSE (REMDUP |$uncondList|)))
                                  NIL)))
             (COND
               (|$condList| (SPADLET |localVariable| (GENSYM))
                   (SPADLET |code|
                            (CONS (CONS 'LET
                                        (CONS |localVariable|
                                         (CONS |code| NIL)))
                                  NIL))
                   (DO ((G167053 |$condList| (CDR G167053))
                        (G167024 NIL))
                       ((OR (ATOM G167053)
                            (PROGN
                              (SETQ G167024 (CAR G167053))
                              NIL)
                            (PROGN
                              (PROGN
                                (SPADLET |pred| (CAR G167024))
                                (SPADLET LIST (CADR G167024))
                                G167024)
                              NIL))
                        NIL)
                     (SEQ (EXIT (SPADLET |code|
                                         (CONS
                                          (CONS 'COND
                                           (CONS
                                            (CONS |pred|
                                             (CONS
                                              (CONS 'LET
                                               (CONS |localVariable|
                                                (CONS
                                                 (CONS '|mergeAppend|
                                                  (CONS
                                                   (CONS '|mapConsDB|
                                                    (CONS (MKQ LIST)
                                                     NIL))
                                                   (CONS
                                                    |localVariable|
                                                    NIL)))
                                                 NIL)))
                                              NIL))
                                            NIL))
                                          |code|)))))
                   (SPADLET |code|
                            (CONS 'PROGN
                                  (NREVERSE
                                      (CONS
                                       (CONS 'NREVERSE
                                        (CONS |localVariable| NIL))
                                       |code|))))))
             (SPADLET |g| (GENSYM))
             (CONS |$setelt|
                   (CONS '$
                         (CONS 4
                               (CONS (CONS 'PROG2
                                      (CONS
                                       (CONS 'LET
                                        (CONS |g| (CONS |code| NIL)))
                                       (CONS
                                        (CONS 'VECTOR
                                         (CONS
                                          (CONS
                                           '|catList2catPackageList|
                                           (CONS |g| NIL))
                                          (CONS |g| NIL)))
                                        NIL)))
                                     NIL)))))))))

;NRTsetVector4Part1(siglist,formlist,condlist) ==
;  $uncondList: local := nil
;  $condList: local := nil
;  $count: local := 0
;  for sig in reverse siglist for form in reverse formlist
;         for cond in reverse condlist repeat
;                  NRTsetVector4a(sig,form,cond)
;  reducedUncondlist := REMDUP $uncondList
;  reducedConlist :=
;    [[x,:y] for [x,z] in $condList| y := SETDIFFERENCE(z,reducedUncondlist)]
;  revCondlist := reverseCondlist reducedConlist
;  orCondlist := [[x,:MKPF(y,'OR)] for [x,:y] in revCondlist]
;  [reducedUncondlist,:orCondlist]

(DEFUN |NRTsetVector4Part1| (|siglist| |formlist| |condlist|)
  (PROG (|$uncondList| |$condList| |$count| |reducedUncondlist| |z|
            |reducedConlist| |revCondlist| |x| |y| |orCondlist|)
    (DECLARE (SPECIAL |$uncondList| |$condList| |$count|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |$uncondList| NIL)
             (SPADLET |$condList| NIL)
             (SPADLET |$count| 0)
             (DO ((G167095 (REVERSE |siglist|) (CDR G167095))
                  (|sig| NIL)
                  (G167096 (REVERSE |formlist|) (CDR G167096))
                  (|form| NIL)
                  (G167097 (REVERSE |condlist|) (CDR G167097))
                  (|cond| NIL))
                 ((OR (ATOM G167095)
                      (PROGN (SETQ |sig| (CAR G167095)) NIL)
                      (ATOM G167096)
                      (PROGN (SETQ |form| (CAR G167096)) NIL)
                      (ATOM G167097)
                      (PROGN (SETQ |cond| (CAR G167097)) NIL))
                  NIL)
               (SEQ (EXIT (|NRTsetVector4a| |sig| |form| |cond|))))
             (SPADLET |reducedUncondlist| (REMDUP |$uncondList|))
             (SPADLET |reducedConlist|
                      (PROG (G167115)
                        (SPADLET G167115 NIL)
                        (RETURN
                          (DO ((G167122 |$condList| (CDR G167122))
                               (G167081 NIL))
                              ((OR (ATOM G167122)
                                   (PROGN
                                     (SETQ G167081 (CAR G167122))
                                     NIL)
                                   (PROGN
                                     (PROGN
                                       (SPADLET |x| (CAR G167081))
                                       (SPADLET |z| (CADR G167081))
                                       G167081)
                                     NIL))
                               (NREVERSE0 G167115))
                            (SEQ (EXIT (COND
                                         ((SPADLET |y|
                                           (SETDIFFERENCE |z|
                                            |reducedUncondlist|))
                                          (SETQ G167115
                                           (CONS (CONS |x| |y|)
                                            G167115))))))))))
             (SPADLET |revCondlist|
                      (|reverseCondlist| |reducedConlist|))
             (SPADLET |orCondlist|
                      (PROG (G167134)
                        (SPADLET G167134 NIL)
                        (RETURN
                          (DO ((G167140 |revCondlist|
                                   (CDR G167140))
                               (G167085 NIL))
                              ((OR (ATOM G167140)
                                   (PROGN
                                     (SETQ G167085 (CAR G167140))
                                     NIL)
                                   (PROGN
                                     (PROGN
                                       (SPADLET |x| (CAR G167085))
                                       (SPADLET |y| (CDR G167085))
                                       G167085)
                                     NIL))
                               (NREVERSE0 G167134))
                            (SEQ (EXIT (SETQ G167134
                                        (CONS (CONS |x| (MKPF |y| 'OR))
                                         G167134))))))))
             (CONS |reducedUncondlist| |orCondlist|))))))

;  --NRTsetVector4a(first siglist,first formlist,first condlist)
;reverseCondlist cl ==
;  alist := nil
;  for [x,:y] in cl repeat
;    for z in y repeat
;      u := ASSOC(z,alist)
;      null u => alist := [[z,x],:alist]
;      MEMBER(x,CDR u) => nil
;      RPLACD(u,[x,:CDR u])
;  alist

(DEFUN |reverseCondlist| (|cl|)
  (PROG (|x| |y| |u| |alist|)
    (RETURN
      (SEQ (PROGN
             (SPADLET |alist| NIL)
             (DO ((G167182 |cl| (CDR G167182)) (G167171 NIL))
                 ((OR (ATOM G167182)
                      (PROGN (SETQ G167171 (CAR G167182)) NIL)
                      (PROGN
                        (PROGN
                          (SPADLET |x| (CAR G167171))
                          (SPADLET |y| (CDR G167171))
                          G167171)
                        NIL))
                  NIL)
               (SEQ (EXIT (DO ((G167194 |y| (CDR G167194))
                               (|z| NIL))
                              ((OR (ATOM G167194)
                                   (PROGN
                                     (SETQ |z| (CAR G167194))
                                     NIL))
                               NIL)
                            (SEQ (EXIT (PROGN
                                         (SPADLET |u|
                                          (|assoc| |z| |alist|))
                                         (COND
                                           ((NULL |u|)
                                            (SPADLET |alist|
                                             (CONS
                                              (CONS |z| (CONS |x| NIL))
                                              |alist|)))
                                           ((|member| |x| (CDR |u|))
                                            NIL)
                                           ('T
                                            (RPLACD |u|
                                             (CONS |x| (CDR |u|))))))))))))
             |alist|)))))

;NRTsetVector4Part2(uncondList,condList) ==
;  $lisplibCategoriesExtended:= [uncondList,:condList]
;  code := ['mapConsDB,MKQ REVERSE REMDUP uncondList]
;  if condList then
;    localVariable := GENSYM()
;    code := [['LET,localVariable,code]]
;    for [pred,list] in condList repeat
;      code :=
;        [['COND,[predicateBitRef SUBLIS($pairlis,pred),['LET,localVariable,
;          ['mergeAppend,['mapConsDB,MKQ list],localVariable]]]],
;            :code]
;    code := ['PROGN,:NREVERSE [['NREVERSE,localVariable],:code]]
;  g := GENSYM()
;  [$setelt,'$,4,['PROG2,['LET,g,code],
;    ['VECTOR,['catList2catPackageList,g],g]]]

(DEFUN |NRTsetVector4Part2| (|uncondList| |condList|)
  (PROG (|localVariable| |pred| LIST |code| |g|)
  (declare (special |$setelt| |$pairlis| |$lisplibCategoriesExtended|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |$lisplibCategoriesExtended|
                      (CONS |uncondList| |condList|))
             (SPADLET |code|
                      (CONS '|mapConsDB|
                            (CONS (MKQ (REVERSE (REMDUP |uncondList|)))
                                  NIL)))
             (COND
               (|condList| (SPADLET |localVariable| (GENSYM))
                   (SPADLET |code|
                            (CONS (CONS 'LET
                                        (CONS |localVariable|
                                         (CONS |code| NIL)))
                                  NIL))
                   (DO ((G167218 |condList| (CDR G167218))
                        (G167208 NIL))
                       ((OR (ATOM G167218)
                            (PROGN
                              (SETQ G167208 (CAR G167218))
                              NIL)
                            (PROGN
                              (PROGN
                                (SPADLET |pred| (CAR G167208))
                                (SPADLET LIST (CADR G167208))
                                G167208)
                              NIL))
                        NIL)
                     (SEQ (EXIT (SPADLET |code|
                                         (CONS
                                          (CONS 'COND
                                           (CONS
                                            (CONS
                                             (|predicateBitRef|
                                              (SUBLIS |$pairlis|
                                               |pred|))
                                             (CONS
                                              (CONS 'LET
                                               (CONS |localVariable|
                                                (CONS
                                                 (CONS '|mergeAppend|
                                                  (CONS
                                                   (CONS '|mapConsDB|
                                                    (CONS (MKQ LIST)
                                                     NIL))
                                                   (CONS
                                                    |localVariable|
                                                    NIL)))
                                                 NIL)))
                                              NIL))
                                            NIL))
                                          |code|)))))
                   (SPADLET |code|
                            (CONS 'PROGN
                                  (NREVERSE
                                      (CONS
                                       (CONS 'NREVERSE
                                        (CONS |localVariable| NIL))
                                       |code|))))))
             (SPADLET |g| (GENSYM))
             (CONS |$setelt|
                   (CONS '$
                         (CONS 4
                               (CONS (CONS 'PROG2
                                      (CONS
                                       (CONS 'LET
                                        (CONS |g| (CONS |code| NIL)))
                                       (CONS
                                        (CONS 'VECTOR
                                         (CONS
                                          (CONS
                                           '|catList2catPackageList|
                                           (CONS |g| NIL))
                                          (CONS |g| NIL)))
                                        NIL)))
                                     NIL)))))))))

;mergeAppend(l1,l2) ==
;  ATOM l1 => l2
;  member(QCAR l1,l2) => mergeAppend(QCDR l1, l2)
;  CONS(QCAR l1, mergeAppend(QCDR l1, l2))

(DEFUN |mergeAppend| (|l1| |l2|)
  (COND
    ((ATOM |l1|) |l2|)
    ((|member| (QCAR |l1|) |l2|) (|mergeAppend| (QCDR |l1|) |l2|))
    ('T (CONS (QCAR |l1|) (|mergeAppend| (QCDR |l1|) |l2|)))))

;--genLoadTimeValue u ==
;--  name :=
;--    INTERN STRCONC(PNAME first $definition,'";",STRINGIZE($count:=$count+1))
;--  $NRTloadTimeAlist := [[name,:['addConsDB,MKQ u]],:$NRTloadTimeAlist]
;--  --see compDefineFunctor1
;--  name
;catList2catPackageList u ==
;--converts ((Set) (Module R) ...) to ((Set& $) (Module& $ R)...)
;  [fn x for x in u] where
;    fn [op,:argl] ==
;      newOp := INTERN(STRCONC(PNAME op,"&"))
;      addConsDB [newOp,"$",:argl]

(DEFUN |catList2catPackageList,fn| (G167242)
  (PROG (|op| |argl| |newOp|)
    (RETURN
      (SEQ (PROGN
             (SPADLET |op| (CAR G167242))
             (SPADLET |argl| (CDR G167242))
             G167242
             (SEQ (SPADLET |newOp| (INTERN (STRCONC (PNAME |op|) '&)))
                  (EXIT (|addConsDB| (CONS |newOp| (CONS '$ |argl|))))))))))

(DEFUN |catList2catPackageList| (|u|)
  (PROG ()
    (RETURN
      (SEQ (PROG (G167262)
             (SPADLET G167262 NIL)
             (RETURN
               (DO ((G167267 |u| (CDR G167267)) (|x| NIL))
                   ((OR (ATOM G167267)
                        (PROGN (SETQ |x| (CAR G167267)) NIL))
                    (NREVERSE0 G167262))
                 (SEQ (EXIT (SETQ G167262
                                  (CONS (|catList2catPackageList,fn|
                                         |x|)
                                        G167262)))))))))))

;NRTsetVector4a(sig,form,cond) ==
;  sig = '$ =>
;     domainList :=
;       [optimize COPY KAR comp(d,$EmptyMode,$e) or d for d in $domainShell.4.0]
;     $uncondList := APPEND(domainList,$uncondList)
;     if isCategoryForm(form,$e) then $uncondList := [form,:$uncondList]
;     $uncondList
;  evalform := eval mkEvalableCategoryForm form
;  cond = true => $uncondList := [form,:APPEND(evalform.4.0,$uncondList)]
;  $condList := [[cond,[form,:evalform.4.0]],:$condList]

(DEFUN |NRTsetVector4a| (|sig| |form| |cond|)
  (PROG (|domainList| |evalform|)
  (declare (special |$condList| |$uncondList| |$e| |$EmptyMode| 
                    |$domainShell|))
    (RETURN
      (SEQ (COND
             ((BOOT-EQUAL |sig| '$)
              (SPADLET |domainList|
                       (PROG (G167283)
                         (SPADLET G167283 NIL)
                         (RETURN
                           (DO ((G167288
                                    (ELT (ELT |$domainShell| 4) 0)
                                    (CDR G167288))
                                (|d| NIL))
                               ((OR (ATOM G167288)
                                    (PROGN
                                      (SETQ |d| (CAR G167288))
                                      NIL))
                                (NREVERSE0 G167283))
                             (SEQ (EXIT (SETQ G167283
                                         (CONS
                                          (OR
                                           (|optimize|
                                            (COPY
                                             (KAR
                                              (|comp| |d| |$EmptyMode|
                                               |$e|))))
                                           |d|)
                                          G167283))))))))
              (SPADLET |$uncondList|
                       (APPEND |domainList| |$uncondList|))
              (COND
                ((|isCategoryForm| |form| |$e|)
                 (SPADLET |$uncondList| (CONS |form| |$uncondList|))))
              |$uncondList|)
             ('T
              (SPADLET |evalform|
                       (|eval| (|mkEvalableCategoryForm| |form|)))
              (COND
                ((BOOT-EQUAL |cond| 'T)
                 (SPADLET |$uncondList|
                          (CONS |form|
                                (APPEND (ELT (ELT |evalform| 4) 0)
                                        |$uncondList|))))
                ('T
                 (SPADLET |$condList|
                          (CONS (CONS |cond|
                                      (CONS
                                       (CONS |form|
                                        (ELT (ELT |evalform| 4) 0))
                                       NIL))
                                |$condList|))))))))))

;NRTmakeSlot1 domainShell ==
;  opDirectName := INTERN STRCONC(PNAME first $definition,'";opDirect")
;  fun :=
;    $NRTmakeCompactDirect => '(function lookupInCompactTable)
;    '(function lookupInTable)
;  [($QuickCode=>'QSETREFV;'SETELT), '$,1, ['LIST,fun,'$,opDirectName]]

(DEFUN |NRTmakeSlot1| (|domainShell|)
  (declare (ignore |domainShell|))
  (PROG (|opDirectName| |fun|)
  (declare (special |$QuickCode| |$NRTmakeCompactDirect| |$definition|))
    (RETURN
      (PROGN
        (SPADLET |opDirectName|
                 (INTERN (STRCONC (PNAME (CAR |$definition|))
                                  (MAKESTRING ";opDirect"))))
        (SPADLET |fun|
                 (COND
                   (|$NRTmakeCompactDirect|
                       '(|function| |lookupInCompactTable|))
                   ('T '(|function| |lookupInTable|))))
        (CONS (COND (|$QuickCode| 'QSETREFV) ('T 'SETELT))
              (CONS '$
                    (CONS 1
                          (CONS (CONS 'LIST
                                      (CONS |fun|
                                       (CONS '$
                                        (CONS |opDirectName| NIL))))
                                NIL))))))))

;NRTmakeSlot1Info() ==
;-- 4 cases:
;-- a:T == b add c  --- slot1 directory has #s for entries defined in c
;-- a:T == b        --- slot1 has all slot #s = NIL (see compFunctorBody)
;-- a == b add c    --- not allowed (line 7 of getTargetFromRhs)
;-- a == b          --- $NRTderivedTargetIfTrue = true; set directory to NIL
;  pairlis :=
;    $insideCategoryPackageIfTrue = true =>
;      [:argl,dollarName] := rest $form
;      [[dollarName,:'_$],:mkSlot1sublis argl]
;    mkSlot1sublis rest $form
;  $lisplibOpAlist := transformOperationAlist SUBLIS(pairlis,$domainShell.1)
;  opList :=
;    $NRTderivedTargetIfTrue => 'derived
;    $insideCategoryPackageIfTrue = true => slot1Filter $lisplibOpAlist
;    $lisplibOpAlist
;  addList := SUBLIS(pairlis,$NRTaddForm)
;  [first $form,[addList,:opList]]

(DEFUN |NRTmakeSlot1Info| ()
  (PROG (|LETTMP#1| |LETTMP#2| |dollarName| |argl| |pairlis| |opList|
            |addList|)
  (declare (special |$form| |$NRTaddForm| |$lisplibOpAlist| |$domainShell|
                    |$insideCategoryPackageIfTrue| |$NRTderivedTargetIfTrue|))
    (RETURN
      (PROGN
        (SPADLET |pairlis|
                 (COND
                   ((BOOT-EQUAL |$insideCategoryPackageIfTrue| 'T)
                    (SPADLET |LETTMP#1| (CDR |$form|))
                    (SPADLET |LETTMP#2| (REVERSE |LETTMP#1|))
                    (SPADLET |dollarName| (CAR |LETTMP#2|))
                    (SPADLET |argl| (NREVERSE (CDR |LETTMP#2|)))
                    (CONS (CONS |dollarName| '$)
                          (|mkSlot1sublis| |argl|)))
                   ('T (|mkSlot1sublis| (CDR |$form|)))))
        (SPADLET |$lisplibOpAlist|
                 (|transformOperationAlist|
                     (SUBLIS |pairlis| (ELT |$domainShell| 1))))
        (SPADLET |opList|
                 (COND
                   (|$NRTderivedTargetIfTrue| '|derived|)
                   ((BOOT-EQUAL |$insideCategoryPackageIfTrue| 'T)
                    (|slot1Filter| |$lisplibOpAlist|))
                   ('T |$lisplibOpAlist|)))
        (SPADLET |addList| (SUBLIS |pairlis| |$NRTaddForm|))
        (CONS (CAR |$form|) (CONS (CONS |addList| |opList|) NIL))))))

;mkSlot1sublis argl ==
;  [[a,:b] for a in argl for b in $FormalMapVariableList]

(DEFUN |mkSlot1sublis| (|argl|)
  (PROG ()
  (declare (special |$FormalMapVariableList|))
    (RETURN
      (SEQ (PROG (G167341)
             (SPADLET G167341 NIL)
             (RETURN
               (DO ((G167347 |argl| (CDR G167347)) (|a| NIL)
                    (G167348 |$FormalMapVariableList|
                        (CDR G167348))
                    (|b| NIL))
                   ((OR (ATOM G167347)
                        (PROGN (SETQ |a| (CAR G167347)) NIL)
                        (ATOM G167348)
                        (PROGN (SETQ |b| (CAR G167348)) NIL))
                    (NREVERSE0 G167341))
                 (SEQ (EXIT (SETQ G167341
                                  (CONS (CONS |a| |b|) G167341)))))))))))

;slot1Filter opList ==
;--include only those ops which are defined within the capsule
;  [u for x in opList | u := fn x] where
;    fn [op,:l] ==
;      u := [entry for entry in l | INTEGERP CADR entry] => [op,:u]
;      nil

(DEFUN |slot1Filter,fn| (G167362)
  (PROG (|op| |l| |u|)
    (RETURN
      (SEQ (PROGN
             (SPADLET |op| (CAR G167362))
             (SPADLET |l| (CDR G167362))
             G167362
             (SEQ (IF (SPADLET |u|
                               (PROG (G167376)
                                 (SPADLET G167376 NIL)
                                 (RETURN
                                   (DO
                                    ((G167382 |l| (CDR G167382))
                                     (|entry| NIL))
                                    ((OR (ATOM G167382)
                                      (PROGN
                                        (SETQ |entry| (CAR G167382))
                                        NIL))
                                     (NREVERSE0 G167376))
                                     (SEQ
                                      (EXIT
                                       (COND
                                         ((INTEGERP (CADR |entry|))
                                          (SETQ G167376
                                           (CONS |entry| G167376))))))))))
                      (EXIT (CONS |op| |u|)))
                  (EXIT NIL)))))))

(DEFUN |slot1Filter| (|opList|)
  (PROG (|u|)
    (RETURN
      (SEQ (PROG (G167401)
             (SPADLET G167401 NIL)
             (RETURN
               (DO ((G167407 |opList| (CDR G167407)) (|x| NIL))
                   ((OR (ATOM G167407)
                        (PROGN (SETQ |x| (CAR G167407)) NIL))
                    (NREVERSE0 G167401))
                 (SEQ (EXIT (COND
                              ((SPADLET |u| (|slot1Filter,fn| |x|))
                               (SETQ G167401 (CONS |u| G167401)))))))))))))

;NRToptimizeHas u ==
;--u is a list ((pred cond)...) -- see optFunctorBody
;--produces an alist: (((HasCategory a b) . GENSYM)...)
;  u is [a,:b] =>
;    a='HasCategory => LASSOC(u,$hasCategoryAlist) or
;      $hasCategoryAlist := [[u,:(y:=GENSYM())],:$hasCategoryAlist]
;      y
;    a='has => NRToptimizeHas ['HasCategory,first b,MKQ first rest b]
;    a = 'QUOTE => u
;    [NRToptimizeHas a,:NRToptimizeHas b]
;  u

(DEFUN |NRToptimizeHas| (|u|)
  (PROG (|a| |b| |y|)
  (declare (special |$hasCategoryAlist|))
    (RETURN
      (COND
        ((AND (PAIRP |u|)
              (PROGN
                (SPADLET |a| (QCAR |u|))
                (SPADLET |b| (QCDR |u|))
                'T))
         (COND
           ((BOOT-EQUAL |a| '|HasCategory|)
            (OR (LASSOC |u| |$hasCategoryAlist|)
                (PROGN
                  (SPADLET |$hasCategoryAlist|
                           (CONS (CONS |u| (SPADLET |y| (GENSYM)))
                                 |$hasCategoryAlist|))
                  |y|)))
           ((BOOT-EQUAL |a| '|has|)
            (|NRToptimizeHas|
                (CONS '|HasCategory|
                      (CONS (CAR |b|) (CONS (MKQ (CAR (CDR |b|))) NIL)))))
           ((BOOT-EQUAL |a| 'QUOTE) |u|)
           ('T (CONS (|NRToptimizeHas| |a|) (|NRToptimizeHas| |b|)))))
        ('T |u|)))))

;NRTaddToSlam([name,:argnames],shell) ==
;  $mutableDomain => return nil
;  null argnames => addToConstructorCache(name,nil,shell)
;  args:= ['LIST,:ASSOCRIGHT $devaluateList]
;  addToConstructorCache(name,args,shell)

(DEFUN |NRTaddToSlam| (G167432 |shell|)
  (PROG (|name| |argnames| |args|)
  (declare (special |$devaluateList| |$mutableDomain|))
    (RETURN
      (PROGN
        (SPADLET |name| (CAR G167432))
        (SPADLET |argnames| (CDR G167432))
        (COND
          (|$mutableDomain| (RETURN NIL))
          ((NULL |argnames|)
           (|addToConstructorCache| |name| NIL |shell|))
          ('T
           (SPADLET |args| (CONS 'LIST (ASSOCRIGHT |$devaluateList|)))
           (|addToConstructorCache| |name| |args| |shell|)))))))

;changeDirectoryInSlot1() ==  --called by NRTbuildFunctor
;  --3 cases:
;  --  if called inside NRTbuildFunctor, $NRTdeltaLength gives different locs
;  --  otherwise called from compFunctorBody (all lookups are forwarded):
;  --    $NRTdeltaList = nil  ===> all slot numbers become nil
;  $lisplibOperationAlist := [sigloc entry for entry in $domainShell.1] where
;    sigloc [opsig,pred,fnsel] ==
;        if pred ^= 'T then
;          pred := simpBool pred
;          $NRTslot1PredicateList := insert(pred,$NRTslot1PredicateList)
;        fnsel is [op,a,:.] and (op = 'ELT or op = 'CONST) =>
;          if $insideCategoryPackageIfTrue then
;              opsig := substitute('$,CADR($functorForm),opsig)
;          [opsig,pred,[op,a,vectorLocation(first opsig,CADR opsig)]]
;        [opsig,pred,fnsel]
;  sortedOplist := listSort(function GLESSEQP,
;                           COPY_-LIST $lisplibOperationAlist,function CADR)
;  $lastPred :local := nil
;  $newEnv :local := $e
;  $domainShell.1 := [fn entry for entry in sortedOplist] where
;    fn [[op,sig],pred,fnsel] ==
;       if $lastPred ^= pred then
;            $newEnv := deepChaseInferences(pred,$e)
;            $lastPred := pred
;       newfnsel :=
;         fnsel is ['Subsumed,op1,sig1] =>
;           ['Subsumed,op1,genSlotSig(sig1,'T,$newEnv)]
;         fnsel
;       [[op, genSlotSig(sig,pred,$newEnv)] ,pred,newfnsel]

(DEFUN |changeDirectoryInSlot1,sigloc| (G167459)
  (PROG (|fnsel| |pred| |op| |ISTMP#1| |a| |opsig|)
  (declare (special |$functorForm| |$insideCategoryPackageIfTrue|
                    |$NRTslot1PredicateList|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |opsig| (CAR G167459))
             (SPADLET |pred| (CADR G167459))
             (SPADLET |fnsel| (CADDR G167459))
             G167459
             (SEQ (IF (NEQUAL |pred| 'T)
                      (SEQ (SPADLET |pred| (|simpBool| |pred|))
                           (EXIT (SPADLET |$NRTslot1PredicateList|
                                          (|insert| |pred|
                                           |$NRTslot1PredicateList|))))
                      NIL)
                  (IF (AND (AND (PAIRP |fnsel|)
                                (PROGN
                                  (SPADLET |op| (QCAR |fnsel|))
                                  (SPADLET |ISTMP#1| (QCDR |fnsel|))
                                  (AND (PAIRP |ISTMP#1|)
                                       (PROGN
                                         (SPADLET |a| (QCAR |ISTMP#1|))
                                         'T))))
                           (OR (BOOT-EQUAL |op| 'ELT)
                               (BOOT-EQUAL |op| 'CONST)))
                      (EXIT (SEQ (IF |$insideCategoryPackageIfTrue|
                                     (SPADLET |opsig|
                                      (MSUBST '$ (CADR |$functorForm|)
                                       |opsig|))
                                     NIL)
                                 (EXIT (CONS |opsig|
                                        (CONS |pred|
                                         (CONS
                                          (CONS |op|
                                           (CONS |a|
                                            (CONS
                                             (|vectorLocation|
                                              (CAR |opsig|)
                                              (CADR |opsig|))
                                             NIL)))
                                          NIL)))))))
                  (EXIT (CONS |opsig| (CONS |pred| (CONS |fnsel| NIL))))))))))

(DEFUN |changeDirectoryInSlot1,fn| (G167507)
  (PROG (|op| |sig| |pred| |fnsel| |ISTMP#1| |op1| |ISTMP#2| |sig1|
              |newfnsel|)
  (declare (special |$newEnv| |$lastPred| |$e|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |op| (CAAR G167507))
             (SPADLET |sig| (CADAR G167507))
             (SPADLET |pred| (CADR G167507))
             (SPADLET |fnsel| (CADDR G167507))
             G167507
             (SEQ (IF (NEQUAL |$lastPred| |pred|)
                      (SEQ (SPADLET |$newEnv|
                                    (|deepChaseInferences| |pred| |$e|))
                           (EXIT (SPADLET |$lastPred| |pred|)))
                      NIL)
                  (SPADLET |newfnsel|
                           (SEQ (IF (AND (PAIRP |fnsel|)
                                     (EQ (QCAR |fnsel|) '|Subsumed|)
                                     (PROGN
                                       (SPADLET |ISTMP#1|
                                        (QCDR |fnsel|))
                                       (AND (PAIRP |ISTMP#1|)
                                        (PROGN
                                          (SPADLET |op1|
                                           (QCAR |ISTMP#1|))
                                          (SPADLET |ISTMP#2|
                                           (QCDR |ISTMP#1|))
                                          (AND (PAIRP |ISTMP#2|)
                                           (EQ (QCDR |ISTMP#2|) NIL)
                                           (PROGN
                                             (SPADLET |sig1|
                                              (QCAR |ISTMP#2|))
                                             'T))))))
                                    (EXIT
                                     (CONS '|Subsumed|
                                      (CONS |op1|
                                       (CONS
                                        (|genSlotSig| |sig1| 'T
                                         |$newEnv|)
                                        NIL)))))
                                (EXIT |fnsel|)))
                  (EXIT (CONS (CONS |op|
                                    (CONS
                                     (|genSlotSig| |sig| |pred|
                                      |$newEnv|)
                                     NIL))
                              (CONS |pred| (CONS |newfnsel| NIL))))))))))

(DEFUN |changeDirectoryInSlot1| ()
  (PROG (|$lastPred| |$newEnv| |sortedOplist|)
    (DECLARE (SPECIAL |$lastPred| |$newEnv| |$domainShell| 
                      |$lisplibOperationAlist|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |$lisplibOperationAlist|
                      (PROG (G167547)
                        (SPADLET G167547 NIL)
                        (RETURN
                          (DO ((G167552 (ELT |$domainShell| 1)
                                   (CDR G167552))
                               (|entry| NIL))
                              ((OR (ATOM G167552)
                                   (PROGN
                                     (SETQ |entry| (CAR G167552))
                                     NIL))
                               (NREVERSE0 G167547))
                            (SEQ (EXIT (SETQ G167547
                                        (CONS
                                         (|changeDirectoryInSlot1,sigloc|
                                          |entry|)
                                         G167547))))))))
             (SPADLET |sortedOplist|
                      (|listSort| (|function| GLESSEQP)
                          (COPY-LIST |$lisplibOperationAlist|)
                          (|function| CADR)))
             (SPADLET |$lastPred| NIL)
             (SPADLET |$newEnv| |$e|)
             (SETELT |$domainShell| 1
                     (PROG (G167562)
                       (SPADLET G167562 NIL)
                       (RETURN
                         (DO ((G167567 |sortedOplist|
                                  (CDR G167567))
                              (|entry| NIL))
                             ((OR (ATOM G167567)
                                  (PROGN
                                    (SETQ |entry| (CAR G167567))
                                    NIL))
                              (NREVERSE0 G167562))
                           (SEQ (EXIT (SETQ G167562
                                       (CONS
                                        (|changeDirectoryInSlot1,fn|
                                         |entry|)
                                        G167562)))))))))))))

;genSlotSig(sig,pred,$e) ==
;   [genDeltaSig t for t in sig]

(DEFUN |genSlotSig| (|sig| |pred| |$e|)
  (DECLARE (SPECIAL |$e|) (ignore |pred|))
  (PROG ()
    (RETURN
      (SEQ (PROG (G167590)
             (SPADLET G167590 NIL)
             (RETURN
               (DO ((G167595 |sig| (CDR G167595)) (|t| NIL))
                   ((OR (ATOM G167595)
                        (PROGN (SETQ |t| (CAR G167595)) NIL))
                    (NREVERSE0 G167590))
                 (SEQ (EXIT (SETQ G167590
                                 (CONS (|genDeltaSig| |t|) G167590)))))))))))

;deepChaseInferences(pred,$e) ==
;    pred is ['AND,:preds] or pred is ['and,:preds] =>
;        for p in preds repeat $e := deepChaseInferences(p,$e)
;        $e
;    pred is ['OR,pred1,:.] or pred is ['or,pred1,:.] =>
;        deepChaseInferences(pred1,$e)
;    pred is 'T or pred is ['NOT,:.] or pred is ['not,:.] => $e
;    chaseInferences(pred,$e)

(DEFUN |deepChaseInferences| (|pred| |$e|)
  (DECLARE (SPECIAL |$e|))
  (PROG (|preds| |ISTMP#1| |pred1|)
    (RETURN
      (SEQ (COND
             ((OR (AND (PAIRP |pred|) (EQ (QCAR |pred|) 'AND)
                       (PROGN (SPADLET |preds| (QCDR |pred|)) 'T))
                  (AND (PAIRP |pred|) (EQ (QCAR |pred|) '|and|)
                       (PROGN (SPADLET |preds| (QCDR |pred|)) 'T)))
              (DO ((G167619 |preds| (CDR G167619)) (|p| NIL))
                  ((OR (ATOM G167619)
                       (PROGN (SETQ |p| (CAR G167619)) NIL))
                   NIL)
                (SEQ (EXIT (SPADLET |$e|
                                    (|deepChaseInferences| |p| |$e|)))))
              |$e|)
             ((OR (AND (PAIRP |pred|) (EQ (QCAR |pred|) 'OR)
                       (PROGN
                         (SPADLET |ISTMP#1| (QCDR |pred|))
                         (AND (PAIRP |ISTMP#1|)
                              (PROGN
                                (SPADLET |pred1| (QCAR |ISTMP#1|))
                                'T))))
                  (AND (PAIRP |pred|) (EQ (QCAR |pred|) '|or|)
                       (PROGN
                         (SPADLET |ISTMP#1| (QCDR |pred|))
                         (AND (PAIRP |ISTMP#1|)
                              (PROGN
                                (SPADLET |pred1| (QCAR |ISTMP#1|))
                                'T)))))
              (|deepChaseInferences| |pred1| |$e|))
             ((OR (EQ |pred| 'T)
                  (AND (PAIRP |pred|) (EQ (QCAR |pred|) 'NOT))
                  (AND (PAIRP |pred|) (EQ (QCAR |pred|) '|not|)))
              |$e|)
             ('T (|chaseInferences| |pred| |$e|)))))))

;vectorLocation(op,sig) ==
;  u := or/[i for i in 1.. for u in $NRTdeltaList
;        | u is [=op,[='$,: xsig],:.] and sig=NRTsubstDelta(xsig) ]
;  u => $NRTdeltaLength - u + 6
;  nil    -- this signals that calls should be forwarded

(DEFUN |vectorLocation| (|op| |sig|)
  (PROG (|ISTMP#1| |ISTMP#2| |xsig| |u|)
  (declare (special |$NRTdeltaLength| |$NRTdeltaList|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |u|
                      (PROG (G167647)
                        (SPADLET G167647 NIL)
                        (RETURN
                          (DO ((G167655 NIL G167647)
                               (|i| 1 (QSADD1 |i|))
                               (G167656 |$NRTdeltaList|
                                   (CDR G167656))
                               (|u| NIL))
                              ((OR G167655 (ATOM G167656)
                                   (PROGN
                                     (SETQ |u| (CAR G167656))
                                     NIL))
                               G167647)
                            (SEQ (EXIT (COND
                                         ((AND (PAIRP |u|)
                                           (EQUAL (QCAR |u|) |op|)
                                           (PROGN
                                             (SPADLET |ISTMP#1|
                                              (QCDR |u|))
                                             (AND (PAIRP |ISTMP#1|)
                                              (PROGN
                                                (SPADLET |ISTMP#2|
                                                 (QCAR |ISTMP#1|))
                                                (AND (PAIRP |ISTMP#2|)
                                                 (EQUAL
                                                  (QCAR |ISTMP#2|) '$)
                                                 (PROGN
                                                   (SPADLET |xsig|
                                                    (QCDR |ISTMP#2|))
                                                   'T)))))
                                           (BOOT-EQUAL |sig|
                                            (|NRTsubstDelta| |xsig|)))
                                          (SETQ G167647
                                           (OR G167647 |i|))))))))))
             (COND
               (|u| (PLUS (SPADDIFFERENCE |$NRTdeltaLength| |u|) 6))
               ('T NIL)))))))

;NRTsubstDelta(initSig) ==
;  sig := [replaceSlotTypes s for s in initSig] where
;     replaceSlotTypes(t) ==
;        atom t =>
;          not INTEGERP t => t
;          t = 0 => '$
;          t = 2 => '_$_$
;          t = 5 => $NRTaddForm
;          u:= $NRTdeltaList.($NRTdeltaLength+5-t)
;          CAR u = 'domain => CADR u
;          error "bad $NRTdeltaList entry"
;        MEMQ(CAR t,'(Mapping Union Record _:)) =>
;           [CAR t,:[replaceSlotTypes(x) for x in rest t]]
;        t

(DEFUN |NRTsubstDelta,replaceSlotTypes| (|t|)
  (PROG (|u|)
  (declare (special |$NRTdeltaLength| |$NRTdeltaList| |$NRTaddForm|))
    (RETURN
      (SEQ (IF (ATOM |t|)
               (EXIT (SEQ (IF (NULL (INTEGERP |t|)) (EXIT |t|))
                          (IF (EQL |t| 0) (EXIT '$))
                          (IF (EQL |t| 2) (EXIT '$$))
                          (IF (EQL |t| 5) (EXIT |$NRTaddForm|))
                          (SPADLET |u|
                                   (ELT |$NRTdeltaList|
                                    (SPADDIFFERENCE
                                     (PLUS |$NRTdeltaLength| 5) |t|)))
                          (IF (BOOT-EQUAL (CAR |u|) '|domain|)
                              (EXIT (CADR |u|)))
                          (EXIT (|error| '|bad $NRTdeltaList entry|)))))
           (IF (MEMQ (CAR |t|) '(|Mapping| |Union| |Record| |:|))
               (EXIT (CONS (CAR |t|)
                           (PROG (G167677)
                             (SPADLET G167677 NIL)
                             (RETURN
                               (DO ((G167682 (CDR |t|)
                                     (CDR G167682))
                                    (|x| NIL))
                                   ((OR (ATOM G167682)
                                     (PROGN
                                       (SETQ |x| (CAR G167682))
                                       NIL))
                                    (NREVERSE0 G167677))
                                 (SEQ (EXIT
                                       (SETQ G167677
                                        (CONS
                                         (|NRTsubstDelta,replaceSlotTypes|
                                          |x|)
                                         G167677))))))))))
           (EXIT |t|)))))

(DEFUN |NRTsubstDelta| (|initSig|)
  (PROG (|sig|)
    (RETURN
      (SEQ (SPADLET |sig|
                    (PROG (G167698)
                      (SPADLET G167698 NIL)
                      (RETURN
                        (DO ((G167703 |initSig| (CDR G167703))
                             (|s| NIL))
                            ((OR (ATOM G167703)
                                 (PROGN
                                   (SETQ |s| (CAR G167703))
                                   NIL))
                             (NREVERSE0 G167698))
                          (SEQ (EXIT (SETQ G167698
                                      (CONS
                                       (|NRTsubstDelta,replaceSlotTypes|
                                        |s|)
                                       G167698))))))))))))

;-----------------------------SLOT1 DATABASE------------------------------------
;updateSlot1DataBase [name,info] == HPUT($Slot1DataBase,name,info)

(DEFUN |updateSlot1DataBase| (G167714)
  (PROG (|name| |info|)
  (declare (special |$Slot1DataBase|))
    (RETURN
      (PROGN
        (SPADLET |name| (CAR G167714))
        (SPADLET |info| (CADR G167714))
        (HPUT |$Slot1DataBase| |name| |info|)))))

;NRTputInLocalReferences bod ==
;  $elt: local := ($QuickCode => 'QREFELT; 'ELT)
;  NRTputInHead bod

(DEFUN |NRTputInLocalReferences| (|bod|)
  (PROG (|$elt|)
    (DECLARE (SPECIAL |$elt| |$QuickCode|))
    (RETURN
      (PROGN
        (SPADLET |$elt| (COND (|$QuickCode| 'QREFELT) ('T 'ELT)))
        (|NRTputInHead| |bod|)))))

;NRTputInHead bod ==
;  atom bod => bod
;--  LASSOC(bod,$devaluateList) => nil
;--  k:= NRTassocIndex bod => [$elt,'_$,k]
;--  systemError '"unexpected position of domain reference"
;--  bod
;--bod is ['LET,var,val,:extra] and IDENTP var =>
;--  NRTputInTail extra
;--  k:= NRTassocIndex var => RPLAC(CADDR bod,[$elt,'$,k])
;--  NRTputInHead val
;--  bod
;  bod is ['SPADCALL,:args,fn] =>
;    NRTputInTail rest bod --NOTE: args = COPY of rest bod
;    -- The following test allows function-returning expressions
;    fn is [elt,dom,ind] and not (dom='$) and MEMQ(elt,'(ELT QREFELT CONST)) =>
;      k:= NRTassocIndex dom => RPLACA(LASTNODE bod,[$elt,'_$,k])
;--    sayBrightlyNT '"unexpected SPADCALL:"
;--    pp fn
;--    nil
;--    keyedSystemError("S2GE0016",['"NRTputInHead",
;--       '"unexpected SPADCALL form"])
;      nil
;    NRTputInHead fn
;    bod
;  bod is ["COND",:clauses] =>
;    for cc in clauses repeat NRTputInTail cc
;    bod
;  bod is ["QUOTE",:.] => bod
;  bod is ["CLOSEDFN",:.] => bod
;  bod is ["SPADCONST",dom,ind] =>
;    RPLACA(bod,$elt)
;    dom = '_$ => nil
;    k:= NRTassocIndex dom =>
;      RPLACA(LASTNODE bod,[$elt,'_$,k])
;      bod
;    keyedSystemError("S2GE0016",['"NRTputInHead",
;       '"unexpected SPADCONST form"])
;  NRTputInHead first bod
;  NRTputInTail rest bod
;  bod

(DEFUN |NRTputInHead| (|bod|)
  (PROG (|fn| |args| |elt| |clauses| |ISTMP#1| |dom| |ISTMP#2| |ind| |k|)
  (declare (special |$elt|))
    (RETURN
      (SEQ (COND
             ((ATOM |bod|) |bod|)
             ((AND (PAIRP |bod|) (EQ (QCAR |bod|) 'SPADCALL)
                   (PROGN
                     (SPADLET |ISTMP#1| (QCDR |bod|))
                     (AND (PAIRP |ISTMP#1|)
                          (PROGN
                            (SPADLET |ISTMP#2| (REVERSE |ISTMP#1|))
                            'T)
                          (PAIRP |ISTMP#2|)
                          (PROGN
                            (SPADLET |fn| (QCAR |ISTMP#2|))
                            (SPADLET |args| (QCDR |ISTMP#2|))
                            'T)
                          (PROGN
                            (SPADLET |args| (NREVERSE |args|))
                            'T))))
              (|NRTputInTail| (CDR |bod|))
              (COND
                ((AND (PAIRP |fn|)
                      (PROGN
                        (SPADLET |elt| (QCAR |fn|))
                        (SPADLET |ISTMP#1| (QCDR |fn|))
                        (AND (PAIRP |ISTMP#1|)
                             (PROGN
                               (SPADLET |dom| (QCAR |ISTMP#1|))
                               (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                               (AND (PAIRP |ISTMP#2|)
                                    (EQ (QCDR |ISTMP#2|) NIL)
                                    (PROGN
                                      (SPADLET |ind| (QCAR |ISTMP#2|))
                                      'T)))))
                      (NULL (BOOT-EQUAL |dom| '$))
                      (MEMQ |elt| '(ELT QREFELT CONST)))
                 (COND
                   ((SPADLET |k| (|NRTassocIndex| |dom|))
                    (RPLACA (LASTNODE |bod|)
                            (CONS |$elt| (CONS '$ (CONS |k| NIL)))))
                   ('T NIL)))
                ('T (|NRTputInHead| |fn|) |bod|)))
             ((AND (PAIRP |bod|) (EQ (QCAR |bod|) 'COND)
                   (PROGN (SPADLET |clauses| (QCDR |bod|)) 'T))
              (DO ((G167797 |clauses| (CDR G167797)) (|cc| NIL))
                  ((OR (ATOM G167797)
                       (PROGN (SETQ |cc| (CAR G167797)) NIL))
                   NIL)
                (SEQ (EXIT (|NRTputInTail| |cc|))))
              |bod|)
             ((AND (PAIRP |bod|) (EQ (QCAR |bod|) 'QUOTE)) |bod|)
             ((AND (PAIRP |bod|) (EQ (QCAR |bod|) 'CLOSEDFN)) |bod|)
             ((AND (PAIRP |bod|) (EQ (QCAR |bod|) 'SPADCONST)
                   (PROGN
                     (SPADLET |ISTMP#1| (QCDR |bod|))
                     (AND (PAIRP |ISTMP#1|)
                          (PROGN
                            (SPADLET |dom| (QCAR |ISTMP#1|))
                            (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                            (AND (PAIRP |ISTMP#2|)
                                 (EQ (QCDR |ISTMP#2|) NIL)
                                 (PROGN
                                   (SPADLET |ind| (QCAR |ISTMP#2|))
                                   'T))))))
              (RPLACA |bod| |$elt|)
              (COND
                ((BOOT-EQUAL |dom| '$) NIL)
                ((SPADLET |k| (|NRTassocIndex| |dom|))
                 (RPLACA (LASTNODE |bod|)
                         (CONS |$elt| (CONS '$ (CONS |k| NIL))))
                 |bod|)
                ('T
                 (|keyedSystemError| 'S2GE0016
                     (CONS (MAKESTRING "NRTputInHead")
                           (CONS (MAKESTRING
                                     "unexpected SPADCONST form")
                                 NIL))))))
             ('T (|NRTputInHead| (CAR |bod|))
              (|NRTputInTail| (CDR |bod|)) |bod|))))))

;NRTputInTail x ==
;  for y in tails x repeat
;    atom (u := first y) =>
;      EQ(u,'$) or LASSOC(u,$devaluateList) => nil
;      k:= NRTassocIndex u =>
;        atom u => RPLACA(y,[$elt,'_$,k])
;        -- u atomic means that the slot will always contain a vector
;        RPLACA(y,['SPADCHECKELT,'_$,k])
;      --this reference must check that slot is a vector
;      nil
;    NRTputInHead u
;  x

(DEFUN |NRTputInTail| (|x|)
  (PROG (|u| |k|)
  (declare (special |$elt| |$devaluateList|))
    (RETURN
      (SEQ (PROGN
             (DO ((|y| |x| (CDR |y|))) ((ATOM |y|) NIL)
               (SEQ (EXIT (COND
                            ((ATOM (SPADLET |u| (CAR |y|)))
                             (COND
                               ((OR (EQ |u| '$)
                                    (LASSOC |u| |$devaluateList|))
                                NIL)
                               ((SPADLET |k| (|NRTassocIndex| |u|))
                                (COND
                                  ((ATOM |u|)
                                   (RPLACA |y|
                                    (CONS |$elt|
                                     (CONS '$ (CONS |k| NIL)))))
                                  ('T
                                   (RPLACA |y|
                                    (CONS 'SPADCHECKELT
                                     (CONS '$ (CONS |k| NIL)))))))
                               ('T NIL)))
                            ('T (|NRTputInHead| |u|))))))
             |x|)))))

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
