\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp server.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}

(IN-PACKAGE "BOOT" )

;-- Includued for compatability with old-parser systems
;serverLoop() ==
;  IN_-STREAM: fluid := CURINSTREAM
;  _*EOF_*: fluid := NIL
;  while not $EndServerSession and not _*EOF_* repeat
;    if $Prompt then (PRINC MKPROMPT(); FINISH_-OUTPUT())
;    $Prompt := NIL
;    action := serverSwitch()
;    action = $CallInterp =>
;      CATCH('coerceFailure,CATCH('top__level, CATCH('SPAD__READER,
;        parseAndInterpret READ_-LINE(CURINSTREAM) )))
;      PRINC MKPROMPT()
;      FINISH_-OUTPUT()
;      sockSendInt($SessionManager, $EndOfOutput)
;    action = $CreateFrame =>
;      frameName := GENTEMP('"frame")
;      addNewInterpreterFrame(frameName)
;      $frameAlist := [[$frameNumber,:frameName], :$frameAlist]
;      $currentFrameNum := $frameNumber
;      sockSendInt($SessionManager, $frameNumber)
;      $frameNumber := $frameNumber + 1
;      sockSendString($SessionManager, MKPROMPT())
;    action = $SwitchFrames =>
;      $currentFrameNum := sockGetInt($SessionManager)
;      currentFrame := LASSOC($currentFrameNum, $frameAlist)
;      changeToNamedInterpreterFrame currentFrame
;    action = $EndSession =>
;      $EndServerSession := true
;    action = $LispCommand =>
;      stringBuf := MAKE_-STRING 512
;      sockGetString($MenuServer, stringBuf, 512)
;      form := unescapeStringsInForm READ_-FROM_-STRING stringBuf
;      EVAL form
;    action = $QuietSpadCommand =>
;      executeQuietCommand()
;    action = $SpadCommand =>
;      stringBuf := MAKE_-STRING 512
;      sockGetString($MenuServer, stringBuf, 512)
;      CATCH('coerceFailure,CATCH('top__level, CATCH('SPAD__READER,
;        parseAndInterpret stringBuf)))
;      PRINC MKPROMPT()
;      FINISH_-OUTPUT()
;      sockSendInt($SessionManager, $EndOfOutput)
;    NIL
;  if _*EOF_* then $Prompt := true
;  NIL

(DEFUN |serverLoop| ()
  (PROG (IN-STREAM *EOF* |action| |frameName| |currentFrame| |form|
            |stringBuf|)
    (DECLARE (SPECIAL IN-STREAM *EOF* |$Prompt| |$EndOfOutput| |$EndSession|
                      |$SessionManager| |$MenuServer| |$SpadCommand|
                      |$QuietSpadCommand| |$LispCommand| |$EndServerSession|
                      |$frameAlist| |$currentFrameNum| |$SwitchFrames|
                      |$frameNumber| |$CreateFrame| |$CallInterp|))
    (RETURN
      (SEQ (PROGN
             (setq IN-STREAM CURINSTREAM)
             (setq *EOF* NIL)
             (DO ()
                 ((NULL (AND (NULL |$EndServerSession|) (NULL *EOF*)))
                  NIL)
               (SEQ (EXIT (PROGN
                            (COND
                              (|$Prompt| (PRINC (MKPROMPT))
                                  (FINISH-OUTPUT)))
                            (setq |$Prompt| NIL)
                            (setq |action| (|serverSwitch|))
                            (COND
                              ((BOOT-EQUAL |action| |$CallInterp|)
                               (CATCH '|coerceFailure|
                                 (CATCH '|top_level|
                                   (CATCH 'SPAD_READER
                                     (|parseAndInterpret|
                                      (|read-line| CURINSTREAM)))))
                               (PRINC (MKPROMPT)) (FINISH-OUTPUT)
                               (|sockSendInt| |$SessionManager|
                                   |$EndOfOutput|))
                              ((BOOT-EQUAL |action| |$CreateFrame|)
                               (setq |frameName|
                                        (GENTEMP "frame"))
                               (|addNewInterpreterFrame| |frameName|)
                               (setq |$frameAlist|
                                        (CONS
                                         (CONS |$frameNumber|
                                          |frameName|)
                                         |$frameAlist|))
                               (setq |$currentFrameNum|
                                        |$frameNumber|)
                               (|sockSendInt| |$SessionManager|
                                   |$frameNumber|)
                               (setq |$frameNumber|
                                        (+ |$frameNumber| 1))
                               (|sockSendString| |$SessionManager|
                                   (MKPROMPT)))
                              ((BOOT-EQUAL |action| |$SwitchFrames|)
                               (setq |$currentFrameNum|
                                        (|sockGetInt|
                                         |$SessionManager|))
                               (setq |currentFrame|
                                        (LASSOC |$currentFrameNum|
                                         |$frameAlist|))
                               (|changeToNamedInterpreterFrame|
                                   |currentFrame|))
                              ((BOOT-EQUAL |action| |$EndSession|)
                               (setq |$EndServerSession| 'T))
                              ((BOOT-EQUAL |action| |$LispCommand|)
                               (setq |stringBuf| (MAKE-STRING 512))
                               (|sockGetString| |$MenuServer|
                                   |stringBuf| 512)
                               (setq |form|
                                        (|unescapeStringsInForm|
                                         (READ-FROM-STRING |stringBuf|)))
                               (EVAL |form|))
                              ((BOOT-EQUAL |action|
                                   |$QuietSpadCommand|)
                               (|executeQuietCommand|))
                              ((BOOT-EQUAL |action| |$SpadCommand|)
                               (setq |stringBuf| (MAKE-STRING 512))
                               (|sockGetString| |$MenuServer|
                                   |stringBuf| 512)
                               (CATCH '|coerceFailure|
                                 (CATCH '|top_level|
                                   (CATCH 'SPAD_READER
                                     (|parseAndInterpret| |stringBuf|))))
                               (PRINC (MKPROMPT)) (FINISH-OUTPUT)
                               (|sockSendInt| |$SessionManager|
                                   |$EndOfOutput|))
                              ('T NIL))))))
             (COND (*EOF* (setq |$Prompt| 'T)))
             NIL)))))

;parseAndEvalToHypertex str ==
;  lines := parseAndEvalToStringForHypertex str
;  len := LENGTH lines
;  sockSendInt($MenuServer, len)
;  for s in lines repeat
;    sockSendString($MenuServer, s)

(DEFUN |parseAndEvalToHypertex| (|str|)
  (PROG (|lines| |len|)
  (declare (special |$MenuServer|))
    (RETURN
      (SEQ (PROGN
             (setq |lines|
                      (|parseAndEvalToStringForHypertex| |str|))
             (setq |len| (LENGTH |lines|))
             (|sockSendInt| |$MenuServer| |len|)
             (DO ((G166130 |lines| (CDR G166130)) (|s| NIL))
                 ((OR (ATOM G166130)
                      (PROGN (SETQ |s| (CAR G166130)) NIL))
                  NIL)
               (SEQ (EXIT (|sockSendString| |$MenuServer| |s|)))))))))

;parseAndEvalToString str ==
;  $collectOutput:local := true
;  $outputLines: local := nil
;  $IOindex: local := nil
;  v := CATCH('SPAD__READER, CATCH('top__level, parseAndEvalStr str))
;  v = 'restart => ['"error"]
;  NREVERSE $outputLines

(DEFUN |parseAndEvalToString| (|str|)
  (PROG (|$collectOutput| |$outputLines| |$IOindex| |v|)
    (DECLARE (SPECIAL |$collectOutput| |$outputLines| |$IOindex|))
    (RETURN
      (PROGN
        (setq |$collectOutput| 'T)
        (setq |$outputLines| NIL)
        (setq |$IOindex| NIL)
        (setq |v|
                 (CATCH 'SPAD_READER
                   (CATCH '|top_level| (|parseAndEvalStr| |str|))))
        (COND
          ((BOOT-EQUAL |v| '|restart|) (CONS "error" NIL))
          ('T (NREVERSE |$outputLines|)))))))

;parseAndEvalToStringForHypertex str ==
;  $collectOutput:local := true
;  $outputLines: local := nil
;  v := CATCH('SPAD__READER, CATCH('top__level, parseAndEvalStr str))
;  v = 'restart => ['"error"]
;  NREVERSE $outputLines

(DEFUN |parseAndEvalToStringForHypertex| (|str|)
  (PROG (|$collectOutput| |$outputLines| |v|)
    (DECLARE (SPECIAL |$collectOutput| |$outputLines|))
    (RETURN
      (PROGN
        (setq |$collectOutput| 'T)
        (setq |$outputLines| NIL)
        (setq |v|
                 (CATCH 'SPAD_READER
                   (CATCH '|top_level| (|parseAndEvalStr| |str|))))
        (COND
          ((BOOT-EQUAL |v| '|restart|) (CONS "error" NIL))
          ('T (NREVERSE |$outputLines|)))))))

;parseAndEvalToStringEqNum str ==
;  $collectOutput:local := true
;  $outputLines: local := nil
;  v := CATCH('SPAD__READER, CATCH('top__level, parseAndEvalStr str))
;  v = 'restart => ['"error"]
;  NREVERSE $outputLines

(DEFUN |parseAndEvalToStringEqNum| (|str|)
  (PROG (|$collectOutput| |$outputLines| |v|)
    (DECLARE (SPECIAL |$collectOutput| |$outputLines|))
    (RETURN
      (PROGN
        (setq |$collectOutput| 'T)
        (setq |$outputLines| NIL)
        (setq |v|
                 (CATCH 'SPAD_READER
                   (CATCH '|top_level| (|parseAndEvalStr| |str|))))
        (COND
          ((BOOT-EQUAL |v| '|restart|) (CONS "error" NIL))
          ('T (NREVERSE |$outputLines|)))))))

;parseAndInterpToString str ==
;  v := applyWithOutputToString('parseAndEvalStr, [str])
;  breakIntoLines CDR v

(DEFUN |parseAndInterpToString| (|str|)
  (PROG (|v|)
    (RETURN
      (PROGN
        (setq |v|
                 (|applyWithOutputToString| '|parseAndEvalStr|
                     (CONS |str| NIL)))
        (|breakIntoLines| (CDR |v|))))))

;parseAndEvalStr string ==
;  $InteractiveMode :fluid := true
;  $BOOT: fluid := NIL
;  $SPAD: fluid := true
;  $e:fluid := $InteractiveFrame
;  parseAndEvalStr1 string

(DEFUN |parseAndEvalStr| (|string|)
  (PROG (|$InteractiveMode| $BOOT $SPAD |$e|)
    (DECLARE (SPECIAL |$InteractiveMode| $BOOT $SPAD |$e|))
    (RETURN
      (PROGN
        (setq |$InteractiveMode| 'T)
        (setq $BOOT NIL)
        (setq $SPAD 'T)
        (setq |$e| |$InteractiveFrame|)
        (|parseAndEvalStr1| |string|)))))

;parseAndEvalStr1 string ==
;  string.0 = char '")" =>
;    doSystemCommand SUBSEQ(string, 1)
;  processInteractive(ncParseFromString string, NIL)

(DEFUN |parseAndEvalStr1| (|string|)
  (COND
    ((BOOT-EQUAL (ELT |string| 0) #\) )
     (|doSystemCommand| (SUBSEQ |string| 1)))
    ('T (|processInteractive| (|ncParseFromString| |string|) NIL))))

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
