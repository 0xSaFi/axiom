\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp simpbool.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}

(IN-PACKAGE "BOOT" )

;simpBool x == dnf2pf reduceDnf be x

(DEFUN |simpBool| (|x|) (|dnf2pf| (|reduceDnf| (|be| |x|))))

;reduceDnf u ==
;-- (OR (AND ..b..) b) ==> (OR  b  )
;  atom u => u
;  for x in u repeat
;    ok := true
;    for y in u repeat
;      x = y => 'skip
;      dnfContains(x,y) => return (ok := false)
;    ok = true => acc := [x,:acc]
;  NREVERSE acc

(DEFUN |reduceDnf| (|u|)
  (PROG (|ok| |acc|)
    (RETURN
      (SEQ (COND
             ((ATOM |u|) |u|)
             ('T
              (DO ((G166069 |u| (CDR G166069)) (|x| NIL))
                  ((OR (ATOM G166069)
                       (PROGN (SETQ |x| (CAR G166069)) NIL))
                   NIL)
                (SEQ (EXIT (PROGN
                             (setq |ok| 'T)
                             (DO ((G166078 |u| (CDR G166078))
                                  (|y| NIL))
                                 ((OR (ATOM G166078)
                                      (PROGN
                                        (SETQ |y| (CAR G166078))
                                        NIL))
                                  NIL)
                               (SEQ (EXIT
                                     (COND
                                       ((BOOT-EQUAL |x| |y|) '|skip|)
                                       ((|dnfContains| |x| |y|)
                                        (RETURN (setq |ok| NIL)))))))
                             (COND
                               ((BOOT-EQUAL |ok| 'T)
                                (setq |acc| (CONS |x| |acc|))))))))
              (NREVERSE |acc|)))))))

;dnfContains([a,b],[c,d]) == fn(a,c) and fn(b,d) where
;  fn(x,y) == and/[MEMBER(u,x) for u in y]

(DEFUN |dnfContains,fn| (|x| |y|)
  (PROG ()
    (RETURN
      (SEQ (PROG (G166090)
             (setq G166090 'T)
             (RETURN
               (DO ((G166096 NIL (NULL G166090))
                    (G166097 |y| (CDR G166097)) (|u| NIL))
                   ((OR G166096 (ATOM G166097)
                        (PROGN (SETQ |u| (CAR G166097)) NIL))
                    G166090)
                 (SEQ (EXIT (SETQ G166090
                                  (AND G166090 (|member| |u| |x|))))))))))))


(DEFUN |dnfContains| (G166109 G166118)
  (PROG (|c| |d| |a| |b|)
    (RETURN
      (PROGN
        (setq |c| (CAR G166118))
        (setq |d| (CADR G166118))
        (setq |a| (CAR G166109))
        (setq |b| (CADR G166109))
        (AND (|dnfContains,fn| |a| |c|) (|dnfContains,fn| |b| |d|))))))

;prove x ==
;  world := [p for y in listOfUserIds x | (p := getPredicate y)] =>
;    'false = be MKPF([['NOT,x],:world],'AND) => true
;    'false = be MKPF([x,:world],'AND) => false
;    x
;  'false = (y := be x) => 'false
;  y = 'true => true
;  dnf2pf y

(DEFUN |prove| (|x|)
  (PROG (|p| |world| |y|)
    (RETURN
      (SEQ (COND
             ((setq |world|
                       (PROG (G166145)
                         (setq G166145 NIL)
                         (RETURN
                           (DO ((G166151 (|listOfUserIds| |x|)
                                    (CDR G166151))
                                (|y| NIL))
                               ((OR (ATOM G166151)
                                    (PROGN
                                      (SETQ |y| (CAR G166151))
                                      NIL))
                                (NREVERSE0 G166145))
                             (SEQ (EXIT (COND
                                          ((setq |p|
                                            (|getPredicate| |y|))
                                           (SETQ G166145
                                            (CONS |p| G166145))))))))))
              (COND
                ((BOOT-EQUAL '|false|
                     (|be| (MKPF (CONS (CONS 'NOT (CONS |x| NIL))
                                       |world|)
                                 'AND)))
                 'T)
                ((BOOT-EQUAL '|false|
                     (|be| (MKPF (CONS |x| |world|) 'AND)))
                 NIL)
                ('T |x|)))
             ((BOOT-EQUAL '|false| (setq |y| (|be| |x|))) '|false|)
             ((BOOT-EQUAL |y| '|true|) 'T)
             ('T (|dnf2pf| |y|)))))))

;simpBoolGiven(x,world) ==
;  world =>
;    'false = be MKPF([['NOT,x],:world],'AND) => true
;    'false = (y := be MKPF([x,:world],'AND)) => false
;    (u := andReduce(dnf2pf y,world)) is ['AND,:v] and
;      (w := SETDIFFERENCE(v,world)) ^= v => simpBool ['AND,:w]
;    u
;  'false = (y := be x) => false
;  'true = y => true
;  dnf2pf y

(DEFUN |simpBoolGiven| (|x| |world|)
  (PROG (|u| |ISTMP#1| |v| |w| |y|)
    (RETURN
      (COND
        (|world| (COND
                   ((BOOT-EQUAL '|false|
                        (|be| (MKPF (CONS (CONS 'NOT (CONS |x| NIL))
                                     |world|)
                                    'AND)))
                    'T)
                   ((BOOT-EQUAL '|false|
                        (setq |y|
                                 (|be| (MKPF (CONS |x| |world|) 'AND))))
                    NIL)
                   ((AND (PROGN
                           (setq |ISTMP#1|
                                    (setq |u|
                                     (|andReduce| (|dnf2pf| |y|)
                                      |world|)))
                           (AND (CONSP |ISTMP#1|)
                                (EQ (QCAR |ISTMP#1|) 'AND)
                                (PROGN
                                  (setq |v| (QCDR |ISTMP#1|))
                                  'T)))
                         (NEQUAL (setq |w|
                                          (SETDIFFERENCE |v| |world|))
                                 |v|))
                    (|simpBool| (CONS 'AND |w|)))
                   ('T |u|)))
        ((BOOT-EQUAL '|false| (setq |y| (|be| |x|))) NIL)
        ((BOOT-EQUAL '|true| |y|) 'T)
        ('T (|dnf2pf| |y|))))))

;andReduce(x,y) ==
;  x is ['AND,:r] =>
;    y is ['AND,:s] => MKPF(S_-(r,s),'AND)
;    MKPF(S_-(r,[s]),'AND)
;  x

(DEFUN |andReduce| (|x| |y|)
  (PROG (|r| |s|)
    (RETURN
      (COND
        ((AND (CONSP |x|) (EQ (QCAR |x|) 'AND)
              (PROGN (setq |r| (QCDR |x|)) 'T))
         (COND
           ((AND (CONSP |y|) (EQ (QCAR |y|) 'AND)
                 (PROGN (setq |s| (QCDR |y|)) 'T))
            (MKPF (S- |r| |s|) 'AND))
           ('T (MKPF (S- |r| (CONS |s| NIL)) 'AND))))
        ('T |x|)))))

;dnf2pf(x) ==
;  x = 'true => 'T
;  x = 'false => nil
;  atom x => x
;  MKPF(
;    [MKPF([:[k for k in b],:[['not,k] for k in a]],'AND) for [a,b] in x],'OR)

(DEFUN |dnf2pf| (|x|)
  (PROG (|a| |b|)
    (RETURN
      (SEQ (COND
             ((BOOT-EQUAL |x| '|true|) 'T)
             ((BOOT-EQUAL |x| '|false|) NIL)
             ((ATOM |x|) |x|)
             ('T
              (MKPF (PROG (G166196)
                      (setq G166196 NIL)
                      (RETURN
                        (DO ((G166202 |x| (CDR G166202))
                             (G166186 NIL))
                            ((OR (ATOM G166202)
                                 (PROGN
                                   (SETQ G166186 (CAR G166202))
                                   NIL)
                                 (PROGN
                                   (PROGN
                                     (setq |a| (CAR G166186))
                                     (setq |b| (CADR G166186))
                                     G166186)
                                   NIL))
                             (NREVERSE0 G166196))
                          (SEQ (EXIT (SETQ G166196
                                      (CONS
                                       (MKPF
                                        (APPEND
                                         (PROG (G166213)
                                           (setq G166213 NIL)
                                           (RETURN
                                             (DO
                                              ((G166218 |b|
                                                (CDR G166218))
                                               (|k| NIL))
                                              ((OR (ATOM G166218)
                                                (PROGN
                                                  (SETQ |k|
                                                   (CAR G166218))
                                                  NIL))
                                               (NREVERSE0 G166213))
                                               (SEQ
                                                (EXIT
                                                 (SETQ G166213
                                                  (CONS |k| G166213)))))))
                                         (PROG (G166228)
                                           (setq G166228 NIL)
                                           (RETURN
                                             (DO
                                              ((G166233 |a|
                                                (CDR G166233))
                                               (|k| NIL))
                                              ((OR (ATOM G166233)
                                                (PROGN
                                                  (SETQ |k|
                                                   (CAR G166233))
                                                  NIL))
                                               (NREVERSE0 G166228))
                                               (SEQ
                                                (EXIT
                                                 (SETQ G166228
                                                  (CONS
                                                   (CONS '|not|
                                                    (CONS |k| NIL))
                                                   G166228))))))))
                                        'AND)
                                       G166196)))))))
                    'OR)))))))

;be x == b2dnf x

(DEFUN |be| (|x|) (|b2dnf| |x|)) 

;b2dnf x ==
;  x = 'T => 'true
;  x = NIL => 'false
;  atom x => bassert x
;  [op,:argl] := x
;  MEMQ(op,'(AND and)) => band argl
;  MEMQ(op,'(OR or))   => bor argl
;  MEMQ(op,'(NOT not)) => bnot first argl
;  bassert x

(DEFUN |b2dnf| (|x|)
  (PROG (|op| |argl|)
    (RETURN
      (COND
        ((BOOT-EQUAL |x| 'T) '|true|)
        ((NULL |x|) '|false|)
        ((ATOM |x|) (|bassert| |x|))
        ('T (setq |op| (CAR |x|)) (setq |argl| (CDR |x|))
         (COND
           ((member |op| '(AND |and|)) (|band| |argl|))
           ((member |op| '(OR |or|)) (|bor| |argl|))
           ((member |op| '(NOT |not|)) (|bnot| (CAR |argl|)))
           ('T (|bassert| |x|))))))))

;band x ==
;  x is [h,:t] => andDnf(b2dnf h,band t)
;  'true

(DEFUN |band| (|x|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((AND (CONSP |x|)
              (PROGN
                (setq |h| (QCAR |x|))
                (setq |t| (QCDR |x|))
                'T))
         (|andDnf| (|b2dnf| |h|) (|band| |t|)))
        ('T '|true|)))))

;bor x ==
;  x is [a,:b] => orDnf(b2dnf a,bor b)
;  'false

(DEFUN |bor| (|x|)
  (PROG (|a| |b|)
    (RETURN
      (COND
        ((AND (CONSP |x|)
              (PROGN
                (setq |a| (QCAR |x|))
                (setq |b| (QCDR |x|))
                'T))
         (|orDnf| (|b2dnf| |a|) (|bor| |b|)))
        ('T '|false|)))))

;bnot x == notDnf b2dnf x

(DEFUN |bnot| (|x|) (|notDnf| (|b2dnf| |x|))) 

;bassert x == [[nil,[x]]]

(DEFUN |bassert| (|x|)
  (CONS (CONS NIL (CONS (CONS |x| NIL) NIL)) NIL))

;bassertNot x == [[[x],nil]]

(DEFUN |bassertNot| (|x|)
  (CONS (CONS (CONS |x| NIL) (CONS NIL NIL)) NIL))

;------------------------Disjunctive Normal Form Code-----------------------
;--        dnf is  true | false | [coaf ... ]
;--        coaf is true | false | [item ... ]
;--        item is anything
;orDnf(a,b) ==                   -- or:  (dnf, dnf) -> dnf
;  a = 'false => b
;  b = 'false => a
;  a = 'true or b = 'true => 'true
;  null a => b     --null list means false
;  a is [c] = coafOrDnf(c,b)
;  coafOrDnf(first a,orDnf(rest a,b))

(DEFUN |orDnf| (|a| |b|)
  (PROG (|c|)
    (RETURN
      (COND
        ((BOOT-EQUAL |a| '|false|) |b|)
        ((BOOT-EQUAL |b| '|false|) |a|)
        ((OR (BOOT-EQUAL |a| '|true|) (BOOT-EQUAL |b| '|true|))
         '|true|)
        ((NULL |a|) |b|)
        ('T
         (BOOT-EQUAL
             (AND (CONSP |a|) (EQ (QCDR |a|) NIL)
                  (PROGN (setq |c| (QCAR |a|)) 'T))
             (|coafOrDnf| |c| |b|))
         (|coafOrDnf| (CAR |a|) (|orDnf| (CDR |a|) |b|)))))))

;andDnf(a,b) ==                  -- and: (dnf, dnf) -> dnf
;  a = 'true => b
;  b = 'true => a
;  a = 'false or b = 'false => 'false
;  null a => 'false  --null list means false
;  a is [c] => coafAndDnf(c,b)
;  x := coafAndDnf(first a,b)
;  y := andDnf(rest a,b)
;  x = 'false => y
;  y = 'false => x
;  ordUnion(x,y)

(DEFUN |andDnf| (|a| |b|)
  (PROG (|c| |x| |y|)
    (RETURN
      (COND
        ((BOOT-EQUAL |a| '|true|) |b|)
        ((BOOT-EQUAL |b| '|true|) |a|)
        ((OR (BOOT-EQUAL |a| '|false|) (BOOT-EQUAL |b| '|false|))
         '|false|)
        ((NULL |a|) '|false|)
        ((AND (CONSP |a|) (EQ (QCDR |a|) NIL)
              (PROGN (setq |c| (QCAR |a|)) 'T))
         (|coafAndDnf| |c| |b|))
        ('T (setq |x| (|coafAndDnf| (CAR |a|) |b|))
         (setq |y| (|andDnf| (CDR |a|) |b|))
         (COND
           ((BOOT-EQUAL |x| '|false|) |y|)
           ((BOOT-EQUAL |y| '|false|) |x|)
           ('T (|ordUnion| |x| |y|))))))))

;notDnf l ==                     -- not: dnf  ->  dnf
;  l = 'true => 'false
;  l = 'false => 'true
;  null l =>     'true --null list means false
;  l is [x] => notCoaf x
;  andDnf(notCoaf first l,notDnf rest l)

(DEFUN |notDnf| (|l|)
  (PROG (|x|)
    (RETURN
      (COND
        ((BOOT-EQUAL |l| '|true|) '|false|)
        ((BOOT-EQUAL |l| '|false|) '|true|)
        ((NULL |l|) '|true|)
        ((AND (CONSP |l|) (EQ (QCDR |l|) NIL)
              (PROGN (setq |x| (QCAR |l|)) 'T))
         (|notCoaf| |x|))
        ('T (|andDnf| (|notCoaf| (CAR |l|)) (|notDnf| (CDR |l|))))))))

;coafOrDnf(a,l) ==               -- or:  (coaf, dnf) -> dnf
;  a = 'true or l = 'true => 'true
;  a = 'false => l
;  MEMBER(a,l) => l
;  y := notCoaf a
;  x := ordIntersection(y,l)
;  null x => orDel(a,l)
;  x = l => 'true
;  x = y => ordSetDiff(l,x)
;  ordUnion(notDnf ordSetDiff(y,x),l)

(DEFUN |coafOrDnf| (|a| |l|)
  (PROG (|y| |x|)
    (RETURN
      (COND
        ((OR (BOOT-EQUAL |a| '|true|) (BOOT-EQUAL |l| '|true|))
         '|true|)
        ((BOOT-EQUAL |a| '|false|) |l|)
        ((|member| |a| |l|) |l|)
        ('T (setq |y| (|notCoaf| |a|))
         (setq |x| (|ordIntersection| |y| |l|))
         (COND
           ((NULL |x|) (|orDel| |a| |l|))
           ((BOOT-EQUAL |x| |l|) '|true|)
           ((BOOT-EQUAL |x| |y|) (|ordSetDiff| |l| |x|))
           ('T (|ordUnion| (|notDnf| (|ordSetDiff| |y| |x|)) |l|))))))))

;coafAndDnf(a,b) ==              --and: (coaf, dnf) -> dnf
;  a = 'true => b
;  a = 'false => 'false
;  [c,:r] := b
;  null r => coafAndCoaf(a,c)
;  x := coafAndCoaf(a,c)      --dnf
;  y := coafAndDnf(a,r)       --dnf
;  x = 'false => y
;  y = 'false => x
;  ordUnion(x,y)

(DEFUN |coafAndDnf| (|a| |b|)
  (PROG (|c| |r| |x| |y|)
    (RETURN
      (COND
        ((BOOT-EQUAL |a| '|true|) |b|)
        ((BOOT-EQUAL |a| '|false|) '|false|)
        ('T (setq |c| (CAR |b|)) (setq |r| (CDR |b|))
         (COND
           ((NULL |r|) (|coafAndCoaf| |a| |c|))
           ('T (setq |x| (|coafAndCoaf| |a| |c|))
            (setq |y| (|coafAndDnf| |a| |r|))
            (COND
              ((BOOT-EQUAL |x| '|false|) |y|)
              ((BOOT-EQUAL |y| '|false|) |x|)
              ('T (|ordUnion| |x| |y|))))))))))

;coafAndCoaf([a,b],[p,q]) ==                  --and: (coaf,coaf) -> dnf
;  ordIntersection(a,q) or ordIntersection(b,p) => 'false
;  [[ordUnion(a,p),ordUnion(b,q)]]

(DEFUN |coafAndCoaf| (G166321 G166330)
  (PROG (|p| |q| |a| |b|)
    (RETURN
      (PROGN
        (setq |p| (CAR G166330))
        (setq |q| (CADR G166330))
        (setq |a| (CAR G166321))
        (setq |b| (CADR G166321))
        (COND
          ((OR (|ordIntersection| |a| |q|) (|ordIntersection| |b| |p|))
           '|false|)
          ('T
           (CONS (CONS (|ordUnion| |a| |p|)
                       (CONS (|ordUnion| |b| |q|) NIL))
                 NIL)))))))

;notCoaf [a,b] == [:[[nil,[x]] for x in a],:[[[x],nil] for x in b]]

(DEFUN |notCoaf| (G166350)
  (PROG (|a| |b|)
    (RETURN
      (SEQ (PROGN
             (setq |a| (CAR G166350))
             (setq |b| (CADR G166350))
             (APPEND (PROG (G166363)
                       (setq G166363 NIL)
                       (RETURN
                         (DO ((G166368 |a| (CDR G166368))
                              (|x| NIL))
                             ((OR (ATOM G166368)
                                  (PROGN
                                    (SETQ |x| (CAR G166368))
                                    NIL))
                              (NREVERSE0 G166363))
                           (SEQ (EXIT (SETQ G166363
                                       (CONS
                                        (CONS NIL
                                         (CONS (CONS |x| NIL) NIL))
                                        G166363)))))))
                     (PROG (G166378)
                       (setq G166378 NIL)
                       (RETURN
                         (DO ((G166383 |b| (CDR G166383))
                              (|x| NIL))
                             ((OR (ATOM G166383)
                                  (PROGN
                                    (SETQ |x| (CAR G166383))
                                    NIL))
                              (NREVERSE0 G166378))
                           (SEQ (EXIT (SETQ G166378
                                       (CONS
                                        (CONS (CONS |x| NIL)
                                         (CONS NIL NIL))
                                        G166378)))))))))))))

;list1 l ==
;  l isnt [h,:t] => nil
;  null h => list1 t
;  [[h,nil,nil],:list1 t]

(DEFUN |list1| (|l|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((NULL (AND (CONSP |l|)
                    (PROGN
                      (setq |h| (QCAR |l|))
                      (setq |t| (QCDR |l|))
                      'T)))
         NIL)
        ((NULL |h|) (|list1| |t|))
        ('T (CONS (CONS |h| (CONS NIL (CONS NIL NIL))) (|list1| |t|)))))))

;list2 l ==
;  l isnt [h,:t] => nil
;  null h => list2 t
;  [[nil,h,nil],:list2 t]

(DEFUN |list2| (|l|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((NULL (AND (CONSP |l|)
                    (PROGN
                      (setq |h| (QCAR |l|))
                      (setq |t| (QCDR |l|))
                      'T)))
         NIL)
        ((NULL |h|) (|list2| |t|))
        ('T (CONS (CONS NIL (CONS |h| (CONS NIL NIL))) (|list2| |t|)))))))

;list3 l ==
;  l isnt [h,:t] => nil
;  null h => list3 t
;  [[nil,nil,h],:list3 t]

(DEFUN |list3| (|l|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((NULL (AND (CONSP |l|)
                    (PROGN
                      (setq |h| (QCAR |l|))
                      (setq |t| (QCDR |l|))
                      'T)))
         NIL)
        ((NULL |h|) (|list3| |t|))
        ('T (CONS (CONS NIL (CONS NIL (CONS |h| NIL))) (|list3| |t|)))))))

;orDel(a,l) ==
;  l is [h,:t] =>
;    a = h => t
;    ?ORDER(a,h) => [a,:l]
;    [h,:orDel(a,t)]
;  [a]

(DEFUN |orDel| (|a| |l|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((AND (CONSP |l|)
              (PROGN
                (setq |h| (QCAR |l|))
                (setq |t| (QCDR |l|))
                'T))
         (COND
           ((BOOT-EQUAL |a| |h|) |t|)
           ((?ORDER |a| |h|) (CONS |a| |l|))
           ('T (CONS |h| (|orDel| |a| |t|)))))
        ('T (CONS |a| NIL))))))

;ordList l ==
;  l is [h,:t] and t => orDel(h,ordList t)
;  l

(DEFUN |ordList| (|l|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((AND (CONSP |l|)
              (PROGN
                (setq |h| (QCAR |l|))
                (setq |t| (QCDR |l|))
                'T)
              |t|)
         (|orDel| |h| (|ordList| |t|)))
        ('T |l|)))))

;ordUnion(a,b) ==
;  a isnt [c,:r] => b
;  b isnt [d,:s] => a
;  c=d => [c,:ordUnion(r,s)]
;  ?ORDER(a,b) => [c,:ordUnion(r,b)]
;  [d,:ordUnion(s,a)]

(DEFUN |ordUnion| (|a| |b|)
  (PROG (|c| |r| |d| |s|)
    (RETURN
      (COND
        ((NULL (AND (CONSP |a|)
                    (PROGN
                      (setq |c| (QCAR |a|))
                      (setq |r| (QCDR |a|))
                      'T)))
         |b|)
        ((NULL (AND (CONSP |b|)
                    (PROGN
                      (setq |d| (QCAR |b|))
                      (setq |s| (QCDR |b|))
                      'T)))
         |a|)
        ((BOOT-EQUAL |c| |d|) (CONS |c| (|ordUnion| |r| |s|)))
        ((?ORDER |a| |b|) (CONS |c| (|ordUnion| |r| |b|)))
        ('T (CONS |d| (|ordUnion| |s| |a|)))))))

;ordIntersection(a,b) ==
;  a isnt [h,:t] => nil
;  MEMBER(h,b) => [h,:ordIntersection(t,b)]
;  ordIntersection(t,b)

(DEFUN |ordIntersection| (|a| |b|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((NULL (AND (CONSP |a|)
                    (PROGN
                      (setq |h| (QCAR |a|))
                      (setq |t| (QCDR |a|))
                      'T)))
         NIL)
        ((|member| |h| |b|) (CONS |h| (|ordIntersection| |t| |b|)))
        ('T (|ordIntersection| |t| |b|))))))

;ordSetDiff(a,b) ==
;  b isnt [h,:t] => a
;  MEMBER(h,a) => ordSetDiff(DELETE(h,a),t)
;  ordSetDiff(a,t)

(DEFUN |ordSetDiff| (|a| |b|)
  (PROG (|h| |t|)
    (RETURN
      (COND
        ((NULL (AND (CONSP |b|)
                    (PROGN
                      (setq |h| (QCAR |b|))
                      (setq |t| (QCDR |b|))
                      'T)))
         |a|)
        ((|member| |h| |a|) (|ordSetDiff| (|delete| |h| |a|) |t|))
        ('T (|ordSetDiff| |a| |t|))))))

;-------------
;testPredList u ==
;  for x in u repeat
;    y := simpBool x
;    x = y => nil
;    pp x
;    pp '"==========>"
;    pp y

(DEFUN |testPredList| (|u|)
  (PROG (|y|)
    (RETURN
      (SEQ (DO ((G166480 |u| (CDR G166480)) (|x| NIL))
               ((OR (ATOM G166480)
                    (PROGN (SETQ |x| (CAR G166480)) NIL))
                NIL)
             (SEQ (EXIT (PROGN
                          (setq |y| (|simpBool| |x|))
                          (COND
                            ((BOOT-EQUAL |x| |y|) NIL)
                            ('T (|pp| |x|)
                             (|pp| "==========>")
                             (|pp| |y|)))))))))))

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
