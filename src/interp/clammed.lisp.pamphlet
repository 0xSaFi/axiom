\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp clammed.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}

(in-package "BOOT")

;--% Functions on $clamList
;-- These files are read in by the system so that they can be cached
;-- properly.  Otherwise, must read in compiled versions and then
;-- recompile these, resulting in wasted BPI space.
;canCoerceFrom(mr,m) ==
;  -- bind flag for recording/reporting instantiations
;  -- (see recordInstantiation)
;  $insideCanCoerceFrom: local := [mr,m]
;  canCoerceFrom0(mr,m)

(DEFUN |canCoerceFrom| (&REST G166069 &AUX G166064)
  (DSETQ G166064 G166069)
  (PROG ()
    (RETURN
      (PROG (G166065)
        (RETURN
          (COND
            ((SETQ G166065 (HGET |canCoerceFrom;AL| G166064))
             (|CDRwithIncrement| G166065))
            ('T
             (CDR (HPUT |canCoerceFrom;AL| G166064
                        (CONS 1
                              (APPLY #'|canCoerceFrom;|
                                     G166064)))))))))))

(DEFUN |canCoerceFrom;| (|mr| |m|)
  (PROG (|$insideCanCoerceFrom|)
    (DECLARE (SPECIAL |$insideCanCoerceFrom|))
    (RETURN
      (PROGN
        (setq |$insideCanCoerceFrom| (CONS |mr| (CONS |m| NIL)))
        (|canCoerceFrom0| |mr| |m|)))))

(PUT '|canCoerceFrom| '|cacheInfo|
     '(|canCoerceFrom| |canCoerceFrom;AL| |hash-tableWithCounts|
          (SETQ |canCoerceFrom;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |canCoerceFrom;AL|)))

(SETQ |canCoerceFrom;AL| (MAKE-HASHTABLE (QUOTE UEQUAL))) 

(SETQ |canCoerceFrom;AL| (MAKE-HASHTABLE 'UEQUAL))

;canCoerce(t1, t2) ==
;  val := canCoerce1(t1, t2) => val
;  t1 is ['Variable, :.] =>
;    newMode := getMinimalVarMode(t1, nil)
;    canCoerce1(t1, newMode) and canCoerce1(newMode, t2)
;  nil

(DEFUN |canCoerce| (&REST G166082 &AUX G166077)
  (DSETQ G166077 G166082)
  (PROG ()
    (RETURN
      (PROG (G166078)
        (RETURN
          (COND
            ((SETQ G166078 (HGET |canCoerce;AL| G166077))
             (|CDRwithIncrement| G166078))
            ('T
             (CDR (HPUT |canCoerce;AL| G166077
                        (CONS 1
                              (APPLY #'|canCoerce;|
                                     G166077)))))))))))

(DEFUN |canCoerce;| (|t1| |t2|)
  (PROG (|val| |newMode|)
    (RETURN
      (COND
        ((setq |val| (|canCoerce1| |t1| |t2|)) |val|)
        ((AND (CONSP |t1|) (EQ (QCAR |t1|) '|Variable|))
         (setq |newMode| (|getMinimalVarMode| |t1| NIL))
         (AND (|canCoerce1| |t1| |newMode|)
              (|canCoerce1| |newMode| |t2|)))
        ('T NIL)))))

(PUT '|canCoerce| '|cacheInfo|
     '(|canCoerce| |canCoerce;AL| |hash-tableWithCounts|
          (SETQ |canCoerce;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |canCoerce;AL|)))

(SETQ |canCoerce;AL| (MAKE-HASHTABLE 'UEQUAL))

;coerceConvertMmSelection(funName,m1,m2) ==
;  -- calls selectMms with $Coerce=NIL and tests for required
;  -- target type. funName is either 'coerce or 'convert.
;  $declaredMode : local:= NIL
;  $reportBottomUpFlag : local:= NIL
;  l := selectMms1(funName,m2,[m1],[m1],NIL)
;  mmS := [x for x in l | x is [sig,:.] and hasCorrectTarget(m2,sig) and
;      sig is [dc,targ,oarg] and isEqualOrSubDomain(m1,oarg)]
;  mmS and CAR mmS

(DEFUN |coerceConvertMmSelection| (&REST G166148 &AUX G166143)
  (DSETQ G166143 G166148)
  (PROG ()
    (RETURN
      (PROG (G166144)
        (RETURN
          (COND
            ((SETQ G166144
                   (HGET |coerceConvertMmSelection;AL| G166143))
             (|CDRwithIncrement| G166144))
            ('T
             (CDR (HPUT |coerceConvertMmSelection;AL| G166143
                        (CONS 1
                              (APPLY #'|coerceConvertMmSelection;|
                                     G166143)))))))))))

(DEFUN |coerceConvertMmSelection;| (|funName| |m1| |m2|)
  (PROG (|$declaredMode| |$reportBottomUpFlag| |l| |sig| |dc| |ISTMP#1|
            |targ| |ISTMP#2| |oarg| |mmS|)
    (DECLARE (SPECIAL |$declaredMode| |$reportBottomUpFlag|))
    (RETURN
      (SEQ (PROGN
             (setq |$declaredMode| NIL)
             (setq |$reportBottomUpFlag| NIL)
             (setq |l|
                      (|selectMms1| |funName| |m2| (CONS |m1| NIL)
                          (CONS |m1| NIL) NIL))
             (setq |mmS|
                      (PROG (G166113)
                        (setq G166113 NIL)
                        (RETURN
                          (DO ((G166119 |l| (CDR G166119))
                               (|x| NIL))
                              ((OR (ATOM G166119)
                                   (PROGN
                                     (SETQ |x| (CAR G166119))
                                     NIL))
                               (NREVERSE0 G166113))
                            (SEQ (EXIT (COND
                                         ((AND (CONSP |x|)
                                           (PROGN
                                             (setq |sig| (QCAR |x|))
                                             'T)
                                           (|hasCorrectTarget| |m2|
                                            |sig|)
                                           (CONSP |sig|)
                                           (PROGN
                                             (setq |dc|
                                              (QCAR |sig|))
                                             (setq |ISTMP#1|
                                              (QCDR |sig|))
                                             (AND (CONSP |ISTMP#1|)
                                              (PROGN
                                                (setq |targ|
                                                 (QCAR |ISTMP#1|))
                                                (setq |ISTMP#2|
                                                 (QCDR |ISTMP#1|))
                                                (AND (CONSP |ISTMP#2|)
                                                 (EQ (QCDR |ISTMP#2|)
                                                  NIL)
                                                 (PROGN
                                                   (setq |oarg|
                                                    (QCAR |ISTMP#2|))
                                                   'T)))))
                                           (|isEqualOrSubDomain| |m1|
                                            |oarg|))
                                          (SETQ G166113
                                           (CONS |x| G166113))))))))))
             (AND |mmS| (CAR |mmS|)))))))

(PUT '|coerceConvertMmSelection| '|cacheInfo|
     '(|coerceConvertMmSelection| |coerceConvertMmSelection;AL|
          |hash-tableWithCounts|
          (SETQ |coerceConvertMmSelection;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |coerceConvertMmSelection;AL|)))

(SETQ |coerceConvertMmSelection;AL| (MAKE-HASHTABLE 'UEQUAL))

;hasFileProperty(p,id,abbrev) == hasFilePropertyNoCache(p,id,abbrev)

(DEFUN |hasFileProperty| (&REST G166157 &AUX G166152)
  (DSETQ G166152 G166157)
  (PROG ()
    (RETURN
      (PROG (G166153)
        (RETURN
          (COND
            ((SETQ G166153 (HGET |hasFileProperty;AL| G166152))
             (|CDRwithIncrement| G166153))
            ('T
             (CDR (HPUT |hasFileProperty;AL| G166152
                        (CONS 1
                              (APPLY #'|hasFileProperty;|
                                     G166152)))))))))))

(DEFUN |hasFileProperty;| (|p| |id| |abbrev|)
  (|hasFilePropertyNoCache| |p| |id| |abbrev|))

(PUT '|hasFileProperty| '|cacheInfo|
     '(|hasFileProperty| |hasFileProperty;AL| |hash-tableWithCounts|
          (SETQ |hasFileProperty;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |hasFileProperty;AL|)))

(SETQ |hasFileProperty;AL| (MAKE-HASHTABLE 'UEQUAL))

;isValidType form ==
;  -- returns true IFF form is a type whose arguments satisfy the
;  --  predicate of the type constructor
;  -- Note that some forms are said to be invalid because they would
;  -- cause problems with the interpreter. Thus things like P P I
;  -- are not valid.
;  STRINGP form => true
;  IDENTP  form => false
;  form in '((Mode) (Domain) (SubDomain (Domain))) => true
;  form is ['Record,:selectors] =>
;    and/[isValidType type for [:.,type] in selectors]
;  form is ['Enumeration,:args] =>
;    null (and/[IDENTP x for x in args]) => false
;    ((# args) = (# REMDUP args)) => true
;    false
;  form is ['Mapping,:mapargs] =>
;    null mapargs => NIL
;    and/[isValidType type for type in mapargs]
;  form is ['Union,:args] =>
;    -- check for a tagged union
;    args and first args is [":",:.] =>
;      and/[isValidType type for [:.,type] in args]
;    null (and/[isValidType arg for arg in args]) => NIL
;    ((# args) = (# REMDUP args)) => true
;    sayKeyedMsg("S2IR0005",[form])
;    NIL
;  badDoubles := CONS($QuotientField, '(Gaussian Complex Polynomial Expression))
;  form is [T1, [T2, :.]] and T1 = T2 and member(T1, badDoubles) => NIL
;  form is [=$QuotientField,D] and not isPartialMode(D) and
;    ofCategory(D,'(Field)) => NIL
;  form is ['UnivariatePolynomial, x, ['UnivariatePolynomial, y, .]] and x=y =>
;    NIL
;  form = '(Complex (AlgebraicNumber)) => NIL
;  form is ['Expression, ['Kernel, . ]] => NIL
;  form is [op,:argl] =>
;    null constructor? op => nil
;    cosig := GETDATABASE(op, 'COSIG)
;    cosig and null rest cosig => -- niladic constructor
;        null argl => true
;        false
;    null (sig := getConstructorSignature form) => nil
;    [.,:cl] := sig
;    -- following line is needed to deal with mutable domains
;    if # cl ^= # argl and GENSYMP last argl then argl:= DROP(-1,argl)
;    # cl ^= # argl => nil
;    cl:= replaceSharps(cl,form)
;    and/[isValid for x in argl for c in cl] where isValid ==
;      categoryForm?(c) =>
;        evalCategory(x,MSUBSTQ(x,'_$,c)) and isValidType x
;      not GETDATABASE(opOf x,'CONSTRUCTORKIND) = 'domain

(DEFUN |isValidType| (G166397)
  (PROG ()
    (RETURN
      (PROG (G166398)
        (RETURN
          (COND
            ((SETQ G166398 (HGET |isValidType;AL| G166397))
             (|CDRwithIncrement| G166398))
            ('T
             (CDR (HPUT |isValidType;AL| G166397
                        (CONS 1 (|isValidType;| G166397)))))))))))

(DEFUN |isValidType;| (|form|)
  (PROG (|selectors| |mapargs| |args| |LETTMP#1| |type| |badDoubles| T1
            T2 D |x| |ISTMP#4| |y| |ISTMP#5| |ISTMP#1| |ISTMP#2|
            |ISTMP#3| |op| |cosig| |sig| |argl| |cl|)
    (DECLARE (SPECIAL |$QuotientField|))
    (RETURN
      (SEQ (COND
             ((STRINGP |form|) 'T)
             ((IDENTP |form|) NIL)
             ((|member| |form|
                  '((|Mode|) (|Domain|) (|SubDomain| (|Domain|))))
              'T)
             ((AND (CONSP |form|) (EQ (QCAR |form|) '|Record|)
                   (PROGN (setq |selectors| (QCDR |form|)) 'T))
              (PROG (G166262)
                (setq G166262 'T)
                (RETURN
                  (DO ((G166269 NIL (NULL G166262))
                       (G166270 |selectors| (CDR G166270))
                       (G166158 NIL))
                      ((OR G166269 (ATOM G166270)
                           (PROGN
                             (SETQ G166158 (CAR G166270))
                             NIL)
                           (PROGN
                             (PROGN
                               (setq |LETTMP#1| (REVERSE G166158))
                               (setq |type| (CAR |LETTMP#1|))
                               G166158)
                             NIL))
                       G166262)
                    (SEQ (EXIT (SETQ G166262
                                     (AND G166262
                                      (|isValidType| |type|)))))))))
             ((AND (CONSP |form|) (EQ (QCAR |form|) '|Enumeration|)
                   (PROGN (setq |args| (QCDR |form|)) 'T))
              (COND
                ((NULL (PROG (G166278)
                         (setq G166278 'T)
                         (RETURN
                           (DO ((G166284 NIL (NULL G166278))
                                (G166285 |args| (CDR G166285))
                                (|x| NIL))
                               ((OR G166284 (ATOM G166285)
                                    (PROGN
                                      (SETQ |x| (CAR G166285))
                                      NIL))
                                G166278)
                             (SEQ (EXIT (SETQ G166278
                                         (AND G166278 (IDENTP |x|)))))))))
                 NIL)
                ((BOOT-EQUAL (|#| |args|) (|#| (REMDUP |args|))) 'T)
                ('T NIL)))
             ((AND (CONSP |form|) (EQ (QCAR |form|) '|Mapping|)
                   (PROGN (setq |mapargs| (QCDR |form|)) 'T))
              (COND
                ((NULL |mapargs|) NIL)
                ('T
                 (PROG (G166292)
                   (setq G166292 'T)
                   (RETURN
                     (DO ((G166298 NIL (NULL G166292))
                          (G166299 |mapargs| (CDR G166299))
                          (|type| NIL))
                         ((OR G166298 (ATOM G166299)
                              (PROGN
                                (SETQ |type| (CAR G166299))
                                NIL))
                          G166292)
                       (SEQ (EXIT (SETQ G166292
                                        (AND G166292
                                         (|isValidType| |type|)))))))))))
             ((AND (CONSP |form|) (EQ (QCAR |form|) '|Union|)
                   (PROGN (setq |args| (QCDR |form|)) 'T))
              (COND
                ((AND |args|
                      (PROGN
                        (setq |ISTMP#1| (CAR |args|))
                        (AND (CONSP |ISTMP#1|)
                             (EQ (QCAR |ISTMP#1|) '|:|))))
                 (PROG (G166306)
                   (setq G166306 'T)
                   (RETURN
                     (DO ((G166313 NIL (NULL G166306))
                          (G166314 |args| (CDR G166314))
                          (G166166 NIL))
                         ((OR G166313 (ATOM G166314)
                              (PROGN
                                (SETQ G166166 (CAR G166314))
                                NIL)
                              (PROGN
                                (PROGN
                                  (setq |LETTMP#1|
                                           (REVERSE G166166))
                                  (setq |type| (CAR |LETTMP#1|))
                                  G166166)
                                NIL))
                          G166306)
                       (SEQ (EXIT (SETQ G166306
                                        (AND G166306
                                         (|isValidType| |type|)))))))))
                ((NULL (PROG (G166322)
                         (setq G166322 'T)
                         (RETURN
                           (DO ((G166328 NIL (NULL G166322))
                                (G166329 |args| (CDR G166329))
                                (|arg| NIL))
                               ((OR G166328 (ATOM G166329)
                                    (PROGN
                                      (SETQ |arg| (CAR G166329))
                                      NIL))
                                G166322)
                             (SEQ (EXIT (SETQ G166322
                                         (AND G166322
                                          (|isValidType| |arg|)))))))))
                 NIL)
                ((BOOT-EQUAL (|#| |args|) (|#| (REMDUP |args|))) 'T)
                ('T
                 (|sayKeyedMsg|
                  (format nil
                   "The type %1p is not valid because unions cannot include ~
                    the same type more than once.")
                   (cons |form| nil)) nil)))
             ('T
              (setq |badDoubles|
                       (CONS |$QuotientField|
                             '(|Gaussian| |Complex| |Polynomial|
                                  |Expression|)))
              (COND
                ((AND (CONSP |form|)
                      (PROGN
                        (setq T1 (QCAR |form|))
                        (setq |ISTMP#1| (QCDR |form|))
                        (AND (CONSP |ISTMP#1|)
                             (EQ (QCDR |ISTMP#1|) NIL)
                             (PROGN
                               (setq |ISTMP#2| (QCAR |ISTMP#1|))
                               (AND (CONSP |ISTMP#2|)
                                    (PROGN
                                      (setq T2 (QCAR |ISTMP#2|))
                                      'T)))))
                      (BOOT-EQUAL T1 T2) (|member| T1 |badDoubles|))
                 NIL)
                ((AND (CONSP |form|)
                      (EQUAL (QCAR |form|) |$QuotientField|)
                      (PROGN
                        (setq |ISTMP#1| (QCDR |form|))
                        (AND (CONSP |ISTMP#1|)
                             (EQ (QCDR |ISTMP#1|) NIL)
                             (PROGN (setq D (QCAR |ISTMP#1|)) 'T)))
                      (NULL (|isPartialMode| D))
                      (|ofCategory| D '(|Field|)))
                 NIL)
                ((AND (CONSP |form|)
                      (EQ (QCAR |form|) '|UnivariatePolynomial|)
                      (PROGN
                        (setq |ISTMP#1| (QCDR |form|))
                        (AND (CONSP |ISTMP#1|)
                             (PROGN
                               (setq |x| (QCAR |ISTMP#1|))
                               (setq |ISTMP#2| (QCDR |ISTMP#1|))
                               (AND (CONSP |ISTMP#2|)
                                    (EQ (QCDR |ISTMP#2|) NIL)
                                    (PROGN
                                      (setq |ISTMP#3|
                                       (QCAR |ISTMP#2|))
                                      (AND (CONSP |ISTMP#3|)
                                       (EQ (QCAR |ISTMP#3|)
                                        '|UnivariatePolynomial|)
                                       (PROGN
                                         (setq |ISTMP#4|
                                          (QCDR |ISTMP#3|))
                                         (AND (CONSP |ISTMP#4|)
                                          (PROGN
                                            (setq |y|
                                             (QCAR |ISTMP#4|))
                                            (setq |ISTMP#5|
                                             (QCDR |ISTMP#4|))
                                            (AND (CONSP |ISTMP#5|)
                                             (EQ (QCDR |ISTMP#5|) NIL)))))))))))
                      (BOOT-EQUAL |x| |y|))
                 NIL)
                ((BOOT-EQUAL |form| '(|Complex| (|AlgebraicNumber|)))
                 NIL)
                ((AND (CONSP |form|) (EQ (QCAR |form|) '|Expression|)
                      (PROGN
                        (setq |ISTMP#1| (QCDR |form|))
                        (AND (CONSP |ISTMP#1|)
                             (EQ (QCDR |ISTMP#1|) NIL)
                             (PROGN
                               (setq |ISTMP#2| (QCAR |ISTMP#1|))
                               (AND (CONSP |ISTMP#2|)
                                    (EQ (QCAR |ISTMP#2|) '|Kernel|)
                                    (PROGN
                                      (setq |ISTMP#3|
                                       (QCDR |ISTMP#2|))
                                      (AND (CONSP |ISTMP#3|)
                                       (EQ (QCDR |ISTMP#3|) NIL))))))))
                 NIL)
                ((AND (CONSP |form|)
                      (PROGN
                        (setq |op| (QCAR |form|))
                        (setq |argl| (QCDR |form|))
                        'T))
                 (COND
                   ((NULL (|constructor?| |op|)) NIL)
                   ('T (setq |cosig| (GETDATABASE |op| 'COSIG))
                    (COND
                      ((AND |cosig| (NULL (CDR |cosig|)))
                       (COND ((NULL |argl|) 'T) ('T NIL)))
                      ((NULL (setq |sig|
                                      (|getConstructorSignature|
                                       |form|)))
                       NIL)
                      ('T (setq |cl| (CDR |sig|))
                       (COND
                         ((AND (NEQUAL (|#| |cl|) (|#| |argl|))
                               (GENSYMP (|last| |argl|)))
                          (setq |argl|
                                   (DROP (- 1) |argl|))))
                       (COND
                         ((NEQUAL (|#| |cl|) (|#| |argl|)) NIL)
                         ('T
                          (setq |cl| (|replaceSharps| |cl| |form|))
                          (PROG (G166336)
                            (setq G166336 'T)
                            (RETURN
                              (DO ((G166343 NIL (NULL G166336))
                                   (G166344 |argl| (CDR G166344))
                                   (|x| NIL)
                                   (G166345 |cl| (CDR G166345))
                                   (|c| NIL))
                                  ((OR G166343 (ATOM G166344)
                                    (PROGN
                                      (SETQ |x| (CAR G166344))
                                      NIL)
                                    (ATOM G166345)
                                    (PROGN
                                      (SETQ |c| (CAR G166345))
                                      NIL))
                                   G166336)
                                (SEQ (EXIT
                                      (SETQ G166336
                                       (AND G166336
                                        (COND
                                          ((|categoryForm?| |c|)
                                           (AND
                                            (|evalCategory| |x|
                                             (MSUBSTQ |x| '$ |c|))
                                            (|isValidType| |x|)))
                                          ('T
                                           (NULL
                                            (BOOT-EQUAL
                                             (GETDATABASE (|opOf| |x|)
                                              'CONSTRUCTORKIND)
                                             '|domain|)))))))))))))))))))))))))

(PUT '|isValidType| '|cacheInfo|
     '(|isValidType| |isValidType;AL| |hash-tableWithCounts|
          (SETQ |isValidType;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |isValidType;AL|)))

(SETQ |isValidType;AL| (MAKE-HASHTABLE 'UEQUAL))

;selectMms1(op,tar,args1,args2,$Coerce) ==
;    -- for new compiler/old world compatibility, sometimes have to look
;    -- for operations given two names.
;    -- NEW COMPILER COMPATIBILITY ON
;    op = "^" or op = "**" =>
;        APPEND(selectMms2("**",tar,args1,args2,$Coerce),
;               selectMms2("^",tar,args1,args2,$Coerce))
;    -- NEW COMPILER COMPATIBILITY OFF
;    selectMms2(op,tar,args1,args2,$Coerce)

(DEFUN |selectMms1| (&REST G166411 &AUX G166406)
  (DSETQ G166406 G166411)
  (PROG ()
    (RETURN
      (PROG (G166407)
        (RETURN
          (COND
            ((SETQ G166407 (HGET |selectMms1;AL| G166406))
             (|CDRwithIncrement| G166407))
            ('T
             (CDR (HPUT |selectMms1;AL| G166406
                        (CONS 1
                              (APPLY #'|selectMms1;|
                                     G166406)))))))))))

(DEFUN |selectMms1;| (|op| |tar| |args1| |args2| |$Coerce|)
  (DECLARE (SPECIAL |$Coerce|))
  (COND
    ((OR (BOOT-EQUAL |op| '^) (BOOT-EQUAL |op| '**))
     (APPEND (|selectMms2| '** |tar| |args1| |args2| |$Coerce|)
             (|selectMms2| '^ |tar| |args1| |args2| |$Coerce|)))
    ('T (|selectMms2| |op| |tar| |args1| |args2| |$Coerce|))))

(PUT '|selectMms1| '|cacheInfo|
     '(|selectMms1| |selectMms1;AL| |hash-tableWithCounts|
          (SETQ |selectMms1;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |selectMms1;AL|)))

(SETQ |selectMms1;AL| (MAKE-HASHTABLE 'UEQUAL))

;resolveTT(t1,t2) ==
;  -- resolves two types
;  -- this symmetric resolve looks for a type t to which both t1 and t2
;  -- can be coerced
;  -- if resolveTT fails, the result will be NIL
;  startTimingProcess 'resolve
;  t1 := eqType t1
;  t2 := eqType t2
;  null (t := resolveTT1(t1,t2)) =>
;    stopTimingProcess 'resolve
;    nil
;  isValidType (t := eqType t) =>
;    stopTimingProcess 'resolve
;    t
;  stopTimingProcess 'resolve
;  nil

(DEFUN |resolveTT| (&REST G166428 &AUX G166423)
  (DSETQ G166423 G166428)
  (PROG ()
    (RETURN
      (PROG (G166424)
        (RETURN
          (COND
            ((SETQ G166424 (HGET |resolveTT;AL| G166423))
             (|CDRwithIncrement| G166424))
            ('T
             (CDR (HPUT |resolveTT;AL| G166423
                        (CONS 1
                              (APPLY #'|resolveTT;|
                                     G166423)))))))))))

(DEFUN |resolveTT;| (|t1| |t2|)
  (PROG (|t|)
    (RETURN
      (PROGN
        (|startTimingProcess| '|resolve|)
        (COND
          ((NULL (setq |t| (|resolveTT1| |t1| |t2|)))
           (|stopTimingProcess| '|resolve|) NIL)
          ((|isValidType| |t|)
           (|stopTimingProcess| '|resolve|) |t|)
          ('T (|stopTimingProcess| '|resolve|) NIL))))))

(PUT '|resolveTT| '|cacheInfo|
     '(|resolveTT| |resolveTT;AL| |hash-tableWithCounts|
          (SETQ |resolveTT;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |resolveTT;AL|)))

(SETQ |resolveTT;AL| (MAKE-HASHTABLE 'UEQUAL))

;isLegitimateMode(t,hasPolyMode,polyVarList) ==
;  -- returns true IFF t is a valid type.  i.e. if t has no repeated
;  --  variables, or two levels of Polynomial
;  null t        => true    -- a terminating condition with underDomainOf
;  t = $EmptyMode => true
;  STRINGP t     => true
;  ATOM t => false
;  badDoubles := CONS($QuotientField, '(Gaussian Complex Polynomial Expression))
;  t is [T1, [T2, :.]] and T1 = T2 and member(T1, badDoubles) => NIL
;  t is [=$QuotientField,D] and not isPartialMode(D) and
;    ofCategory(D,'(Field)) => NIL
;  t = '(Complex (AlgebraicNumber)) => NIL
;  t := equiType t
;  vl := isPolynomialMode t =>
;    if vl^='all then
;      var:= or/[(x in polyVarList => x;nil) for x in vl] => return false
;      listOfDuplicates vl => return false
;      polyVarList:= union(vl,polyVarList)
;    hasPolyMode => false
;    con := CAR t
;    poly? := (con = 'Polynomial or con = 'Expression)
;    isLegitimateMode(underDomainOf t,poly?,polyVarList)
;  constructor? first t =>
;    isLegitimateMode(underDomainOf t,hasPolyMode,polyVarList) => t
;  t is ['Mapping,:ml] =>
;    null ml => NIL
;    -- first arg is target, which can be Void
;    null isLegitimateMode(first ml,nil,nil) => NIL
;    for m in rest ml repeat
;      m = $Void =>
;        return NIL
;      null isLegitimateMode(m,nil,nil) => return NIL
;    true
;  t is ['Union,:ml] =>
;    -- check for tagged union
;    ml and first ml is [":",:.] => isLegitimateRecordOrTaggedUnion ml
;    null (and/[isLegitimateMode(m,nil,nil) for m in ml]) => NIL
;    ((# ml) = (# REMDUP ml)) => true
;    NIL
;  t is ['Record,:r] => isLegitimateRecordOrTaggedUnion r
;  t is ['Enumeration,:r] =>
;    null (and/[IDENTP x for x in r]) => false
;    ((# r) = (# REMDUP r)) => true
;    false
;  false

(DEFUN |isLegitimateMode| (&REST G166540 &AUX G166535)
  (DSETQ G166535 G166540)
  (PROG ()
    (RETURN
      (PROG (G166536)
        (RETURN
          (COND
            ((SETQ G166536 (HGET |isLegitimateMode;AL| G166535))
             (|CDRwithIncrement| G166536))
            ('T
             (CDR (HPUT |isLegitimateMode;AL| G166535
                        (CONS 1
                              (APPLY #'|isLegitimateMode;|
                                     G166535)))))))))))

(DEFUN |isLegitimateMode;| (|t| |hasPolyMode| |polyVarList|)
  (PROG (|badDoubles| T1 |ISTMP#2| T2 D |vl| |var| |con| |poly?| |ml|
            |ISTMP#1| |r|)
    (DECLARE (SPECIAL |$Void| |$QuotientField| |$EmptyMode|))
    (RETURN
      (SEQ (COND
             ((NULL |t|) 'T)
             ((BOOT-EQUAL |t| |$EmptyMode|) 'T)
             ((STRINGP |t|) 'T)
             ((ATOM |t|) NIL)
             ('T
              (setq |badDoubles|
                       (CONS |$QuotientField|
                             '(|Gaussian| |Complex| |Polynomial|
                                  |Expression|)))
              (COND
                ((AND (CONSP |t|)
                      (PROGN
                        (setq T1 (QCAR |t|))
                        (setq |ISTMP#1| (QCDR |t|))
                        (AND (CONSP |ISTMP#1|)
                             (EQ (QCDR |ISTMP#1|) NIL)
                             (PROGN
                               (setq |ISTMP#2| (QCAR |ISTMP#1|))
                               (AND (CONSP |ISTMP#2|)
                                    (PROGN
                                      (setq T2 (QCAR |ISTMP#2|))
                                      'T)))))
                      (BOOT-EQUAL T1 T2) (|member| T1 |badDoubles|))
                 NIL)
                ((AND (CONSP |t|) (EQUAL (QCAR |t|) |$QuotientField|)
                      (PROGN
                        (setq |ISTMP#1| (QCDR |t|))
                        (AND (CONSP |ISTMP#1|)
                             (EQ (QCDR |ISTMP#1|) NIL)
                             (PROGN (setq D (QCAR |ISTMP#1|)) 'T)))
                      (NULL (|isPartialMode| D))
                      (|ofCategory| D '(|Field|)))
                 NIL)
                ((BOOT-EQUAL |t| '(|Complex| (|AlgebraicNumber|))) NIL)
                ('T 
                 (SEQ (COND
                        ((setq |vl| (|isPolynomialMode| |t|))
                         (PROGN
                           (COND
                             ((NEQUAL |vl| '|all|)
                              (COND
                                ((setq |var|
                                          (PROG (G166460)
                                            (setq G166460 NIL)
                                            (RETURN
                                              (DO
                                               ((G166466 NIL
                                                 G166460)
                                                (G166467 |vl|
                                                 (CDR G166467))
                                                (|x| NIL))
                                               ((OR G166466
                                                 (ATOM G166467)
                                                 (PROGN
                                                   (SETQ |x|
                                                    (CAR G166467))
                                                   NIL))
                                                G166460)
                                                (SEQ
                                                 (EXIT
                                                  (SETQ G166460
                                                   (OR G166460
                                                    (COND
                                                      ((|member| |x|
                                                        |polyVarList|)
                                                       |x|)
                                                      ('T NIL))))))))))
                                 (RETURN NIL))
                                ((|listOfDuplicates| |vl|)
                                 (RETURN NIL))
                                ('T
                                 (setq |polyVarList|
                                          (|union| |vl| |polyVarList|))))))
                           (COND
                             (|hasPolyMode| NIL)
                             ('T (setq |con| (CAR |t|))
                              (setq |poly?|
                                       (OR
                                        (BOOT-EQUAL |con|
                                         '|Polynomial|)
                                        (BOOT-EQUAL |con|
                                         '|Expression|)))
                              (|isLegitimateMode| (|underDomainOf| |t|)
                                  |poly?| |polyVarList|)))))
                        ((|constructor?| (CAR |t|))
                         (COND
                           ((|isLegitimateMode| (|underDomainOf| |t|)
                                |hasPolyMode| |polyVarList|)
                            (EXIT |t|))))
                        ((AND (CONSP |t|) (EQ (QCAR |t|) '|Mapping|)
                              (PROGN (setq |ml| (QCDR |t|)) 'T))
                         (COND
                           ((NULL |ml|) NIL)
                           ((NULL (|isLegitimateMode| (CAR |ml|) NIL
                                      NIL))
                            NIL)
                           ('T
                            (DO ((G166477 (CDR |ml|) (CDR G166477))
                                 (|m| NIL))
                                ((OR (ATOM G166477)
                                     (PROGN
                                       (SETQ |m| (CAR G166477))
                                       NIL))
                                 NIL)
                              (SEQ (EXIT
                                    (COND
                                      ((BOOT-EQUAL |m| |$Void|)
                                       (RETURN NIL))
                                      ((NULL
                                        (|isLegitimateMode| |m| NIL
                                         NIL))
                                       (RETURN NIL))))))
                            'T)))
                        ((AND (CONSP |t|) (EQ (QCAR |t|) '|Union|)
                              (PROGN (setq |ml| (QCDR |t|)) 'T))
                         (COND
                           ((AND |ml|
                                 (PROGN
                                   (setq |ISTMP#1| (CAR |ml|))
                                   (AND (CONSP |ISTMP#1|)
                                    (EQ (QCAR |ISTMP#1|) '|:|))))
                            (|isLegitimateRecordOrTaggedUnion| |ml|))
                           ((NULL (PROG (G166483)
                                    (setq G166483 'T)
                                    (RETURN
                                      (DO
                                       ((G166489 NIL
                                         (NULL G166483))
                                        (G166490 |ml|
                                         (CDR G166490))
                                        (|m| NIL))
                                       ((OR G166489 (ATOM G166490)
                                         (PROGN
                                           (SETQ |m| (CAR G166490))
                                           NIL))
                                        G166483)
                                        (SEQ
                                         (EXIT
                                          (SETQ G166483
                                           (AND G166483
                                            (|isLegitimateMode| |m| NIL
                                             NIL)))))))))
                            NIL)
                           ((BOOT-EQUAL (|#| |ml|) (|#| (REMDUP |ml|)))
                            'T)
                           ('T NIL)))
                        ((AND (CONSP |t|) (EQ (QCAR |t|) '|Record|)
                              (PROGN (setq |r| (QCDR |t|)) 'T))
                         (|isLegitimateRecordOrTaggedUnion| |r|))
                        ((AND (CONSP |t|)
                              (EQ (QCAR |t|) '|Enumeration|)
                              (PROGN (setq |r| (QCDR |t|)) 'T))
                         (COND
                           ((NULL (PROG (G166497)
                                    (setq G166497 'T)
                                    (RETURN
                                      (DO
                                       ((G166503 NIL
                                         (NULL G166497))
                                        (G166504 |r| (CDR G166504))
                                        (|x| NIL))
                                       ((OR G166503 (ATOM G166504)
                                         (PROGN
                                           (SETQ |x| (CAR G166504))
                                           NIL))
                                        G166497)
                                        (SEQ
                                         (EXIT
                                          (SETQ G166497
                                           (AND G166497 (IDENTP |x|)))))))))
                            NIL)
                           ((BOOT-EQUAL (|#| |r|) (|#| (REMDUP |r|)))
                            'T)
                           ('T NIL)))
                        ('T NIL)))))))))))

(PUT '|isLegitimateMode| '|cacheInfo|
     '(|isLegitimateMode| |isLegitimateMode;AL| |hash-tableWithCounts|
          (SETQ |isLegitimateMode;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |isLegitimateMode;AL|)))

(SETQ |isLegitimateMode;AL| (MAKE-HASHTABLE 'UEQUAL))

;underDomainOf t ==
;  t = $RationalNumber => $Integer
;  not CONSP t => NIL
;  d := deconstructT t
;  1 = #d => NIL
;  u := getUnderModeOf(t) => u
;  last d

(DEFUN |underDomainOf| (G166547)
  (PROG ()
    (RETURN
      (PROG (G166548)
        (RETURN
          (COND
            ((SETQ G166548 (HGET |underDomainOf;AL| G166547))
             (|CDRwithIncrement| G166548))
            ('T
             (CDR (HPUT |underDomainOf;AL| G166547
                        (CONS 1 (|underDomainOf;| G166547)))))))))))

(DEFUN |underDomainOf;| (|t|)
  (PROG (|d| |u|)
    (DECLARE (SPECIAL |$RationalNumber| |$Integer|))
    (RETURN
      (COND
        ((BOOT-EQUAL |t| |$RationalNumber|) |$Integer|)
        ((NULL (CONSP |t|)) NIL)
        ('T (setq |d| (|deconstructT| |t|))
         (COND
           ((EQL 1 (|#| |d|)) NIL)
           ((setq |u| (|getUnderModeOf| |t|)) |u|)
           ('T (|last| |d|))))))))

(PUT '|underDomainOf| '|cacheInfo|
     '(|underDomainOf| |underDomainOf;AL| |hash-tableWithCounts|
          (SETQ |underDomainOf;AL| (MAKE-HASHTABLE 'UEQUAL))
          (|hashCount| |underDomainOf;AL|)))

(SETQ |underDomainOf;AL| (MAKE-HASHTABLE 'UEQUAL))

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
