\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp htcheck.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
<<*>>=
(IN-PACKAGE "BOOT" )

;$primitiveHtCommands := '(
;  ("\ContinueButton"     . 1)
;  ("\andexample"         . 1)
;  ("\autobutt" .    0)
;  ("\autobuttons".  0)
;  ("\begin"  .      1)
;  ("\beginscroll".  0)
;  ("\bound"  .      1)
;  ("\fbox"    .      1)
;  ("\centerline" .      1)
;  ("\downlink" .    2)
;  ("\em"     .      0)
;  ("\end"    .      1)
;  ("\endscroll"  .  0)
;  ("\example"            . 1)
;  ("\free"   .      1)
;  ("\graphpaste" .  1)
;  ("\helppage" .    1)
;  ("\htbmdir"            . 0)
;  ("\htbmfile"   .  1)
;  ("\indent" .      1)
;  ("\inputbitmap"        . 1)
;  ("\inputstring" . 3)
;  ("\item"   .      0)
;  ("\keyword"            . 1)
;  ("\link"               . 2)
;  ("\lispdownlink"       . 2)
;  ("\lispmemolink"       . 2)
;  ("\lispwindowlink"     . 2)
;  ("\menudownlink"       . 2)
;  ("\menuitemstyle"      . 1)
;  ("\menulink"           . 2)
;  ("\menulispdownlink"   . 2)
;  ("\menulispmemolink"   . 2)
;  ("\menulispwindowlink" . 2)
;  ("\menumemolink"       . 2)
;  ("\menuwindowlink"     . 2)
;  ("\newline" .     0)
;  ("\radioboxes" .  3)
;  ("\space"  .      1)
;  ("\spadcommand" . 1)
;  ("\stringvalue" . 1)
;  ("\tab"    .      1)
;  ("\table"              . 1)
;  ("\vspace" .      1)
;  ("\windowlink"         . 2))

(SPADLET |$primitiveHtCommands|
         '(("\\ContinueButton" . 1) ("\\andexample" . 1)
           ("\\autobutt" . 0) ("\\autobuttons" . 0) ("\\begin" . 1)
           ("\\beginscroll" . 0) ("\\bound" . 1) ("\\fbox" . 1)
           ("\\centerline" . 1) ("\\downlink" . 2) ("\\em" . 0)
           ("\\end" . 1) ("\\endscroll" . 0) ("\\example" . 1)
           ("\\free" . 1) ("\\graphpaste" . 1) ("\\helppage" . 1)
           ("\\htbmdir" . 0) ("\\htbmfile" . 1) ("\\indent" . 1)
           ("\\inputbitmap" . 1) ("\\inputstring" . 3) ("\\item" . 0)
           ("\\keyword" . 1) ("\\link" . 2) ("\\lispdownlink" . 2)
           ("\\lispmemolink" . 2) ("\\lispwindowlink" . 2)
           ("\\menudownlink" . 2) ("\\menuitemstyle" . 1)
           ("\\menulink" . 2) ("\\menulispdownlink" . 2)
           ("\\menulispmemolink" . 2) ("\\menulispwindowlink" . 2)
           ("\\menumemolink" . 2) ("\\menuwindowlink" . 2)
           ("\\newline" . 0) ("\\radioboxes" . 3) ("\\space" . 1)
           ("\\spadcommand" . 1) ("\\stringvalue" . 1) ("\\tab" . 1)
           ("\\table" . 1) ("\\vspace" . 1) ("\\windowlink" . 2)))

;buildHtMacroTable() ==
;  $htMacroTable := MAKE_-HASHTABLE 'UEQUAL
;  fn := CONCAT(getEnv '"AXIOM", '"/doc/util.ht")
;  if PROBE_-FILE(fn) then
;    instream := MAKE_-INSTREAM fn
;    while not EOFP instream repeat
;      line := READLINE instream
;      getHtMacroItem line is [string,:numOfArgs] =>
;        HPUT($htMacroTable,string,numOfArgs)
;    for [s,:n] in $primitiveHtCommands repeat HPUT($htMacroTable,s,n)
;  else
;    sayBrightly '"Warning: macro table not found"
;  $htMacroTable

(DEFUN |buildHtMacroTable| ()
  (PROG (|fn| |instream| |line| |ISTMP#1| |string| |numOfArgs| |s| |n|)
  (declare (special |$htMacroTable| |$primitiveHtCommands|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |$htMacroTable| (MAKE-HASHTABLE 'UEQUAL))
             (SPADLET |fn|
                      (CONCAT (|getEnv| "AXIOM")
                              "/doc/util.ht"))
             (COND
               ((PROBE-FILE |fn|)
                (SPADLET |instream| (MAKE-INSTREAM |fn|))
                (DO () ((NULL (NULL (EOFP |instream|))) NIL)
                  (SEQ (EXIT (PROGN
                               (SPADLET |line| (READLINE |instream|))
                               (COND
                                 ((PROGN
                                    (SPADLET |ISTMP#1|
                                     (|getHtMacroItem| |line|))
                                    (AND (PAIRP |ISTMP#1|)
                                     (PROGN
                                       (SPADLET |string|
                                        (QCAR |ISTMP#1|))
                                       (SPADLET |numOfArgs|
                                        (QCDR |ISTMP#1|))
                                       'T)))
                                  (HPUT |$htMacroTable| |string|
                                        |numOfArgs|)))))))
                (DO ((G166089 |$primitiveHtCommands| (CDR G166089))
                     (G166066 NIL))
                    ((OR (ATOM G166089)
                         (PROGN (SETQ G166066 (CAR G166089)) NIL)
                         (PROGN
                           (PROGN
                             (SPADLET |s| (CAR G166066))
                             (SPADLET |n| (CDR G166066))
                             G166066)
                           NIL))
                     NIL)
                  (SEQ (EXIT (HPUT |$htMacroTable| |s| |n|)))))
               ('T
                (|sayBrightly|
                    "Warning: macro table not found")))
             |$htMacroTable|)))))

;READLINE(:s) ==
;  s => read_-line(first s)
;  read_-line(_*STANDARD_-INPUT_*)

(DEFUN READLINE (&REST t1 &AUX |s|)
 (DSETQ |s| t1)
 (COND 
  (|s| (|read-line| (CAR |s|)))
  ((QUOTE T) (|read-line| *STANDARD-INPUT*)))) 

;getHtMacroItem line ==
;  null stringPrefix?('"\newcommand{",line) => nil
;  k := charPosition(char '_},line,11)
;  command := SUBSTRING(line,12,k - 12)
;  numOfArgs :=
;    m := #line
;    i := charPosition(char '_[,line,k)
;    i = m => 0
;    j := charPosition(char '_],line,i + 1)
;    digitString := SUBSTRING(line,i + 1,j - i - 1)
;    and/[DIGITP digitString.i for i in 0..MAXINDEX digitString]
;      => PARSE_-INTEGER digitString
;    return nil
;  [command,:numOfArgs]

(DEFUN |getHtMacroItem| (|line|)
  (PROG (|k| |command| |m| |i| |j| |digitString| |numOfArgs|)
    (RETURN
      (SEQ (COND
             ((NULL (|stringPrefix?| "\\newcommand{"
                        |line|))
              NIL)
             ('T (SPADLET |k| (|charPosition| (|char| '}) |line| 11))
              (SPADLET |command|
                       (SUBSTRING |line| 12 (SPADDIFFERENCE |k| 12)))
              (SPADLET |numOfArgs|
                       (PROGN
                         (SPADLET |m| (|#| |line|))
                         (SPADLET |i|
                                  (|charPosition| (|char| '[) |line|
                                      |k|))
                         (COND
                           ((BOOT-EQUAL |i| |m|) 0)
                           ('T
                            (SPADLET |j|
                                     (|charPosition| (|char| ']) |line|
                                      (PLUS |i| 1)))
                            (SPADLET |digitString|
                                     (SUBSTRING |line| (PLUS |i| 1)
                                      (SPADDIFFERENCE
                                       (SPADDIFFERENCE |j| |i|) 1)))
                            (COND
                              ((PROG (G166110)
                                 (SPADLET G166110 'T)
                                 (RETURN
                                   (DO
                                    ((G166116 NIL (NULL G166110))
                                     (G166117
                                      (MAXINDEX |digitString|))
                                     (|i| 0 (QSADD1 |i|)))
                                    ((OR G166116
                                      (QSGREATERP |i| G166117))
                                     G166110)
                                     (SEQ
                                      (EXIT
                                       (SETQ G166110
                                        (AND G166110
                                         (DIGITP
                                          (ELT |digitString| |i|)))))))))
                               (PARSE-INTEGER |digitString|))
                              ('T (RETURN NIL)))))))
              (CONS |command| |numOfArgs|)))))))

;spadSysChoose(tree,form) ==     --tree is ((word . tree) ..)
;  null form => true
;  null tree => false
;  lookupOn :=
;    form is [key,arg] => key
;    form
;  newTree := LASSOC(lookupOn,tree) => spadSysBranch(newTree,IFCAR IFCDR form)
;  false

(DEFUN |spadSysChoose| (|tree| |form|)
  (PROG (|key| |ISTMP#1| |arg| |lookupOn| |newTree|)
    (RETURN
      (COND
        ((NULL |form|) 'T)
        ((NULL |tree|) NIL)
        ('T
         (SPADLET |lookupOn|
                  (COND
                    ((AND (PAIRP |form|)
                          (PROGN
                            (SPADLET |key| (QCAR |form|))
                            (SPADLET |ISTMP#1| (QCDR |form|))
                            (AND (PAIRP |ISTMP#1|)
                                 (EQ (QCDR |ISTMP#1|) NIL)
                                 (PROGN
                                   (SPADLET |arg| (QCAR |ISTMP#1|))
                                   'T))))
                     |key|)
                    ('T |form|)))
         (COND
           ((SPADLET |newTree| (LASSOC |lookupOn| |tree|))
            (|spadSysBranch| |newTree| (IFCAR (IFCDR |form|))))
           ('T NIL)))))))

;spadSysBranch(tree,arg) ==  --tree is (msg kind TREEorSomethingElse ...)
;  null arg => true
;  kind := tree.2
;  kind = 'TREE => spadSysChoose(tree.4,arg)
;  kind = 'LITERALS => MEMBER(arg,tree.4)
;  kind = 'INTEGER  => INTEGERP arg
;  kind = 'FUNCTION => atom arg
;  systemError '"unknown tree branch"

(DEFUN |spadSysBranch| (|tree| |arg|)
  (PROG (|kind|)
    (RETURN
      (COND
        ((NULL |arg|) 'T)
        ('T (SPADLET |kind| (ELT |tree| 2))
         (COND
           ((BOOT-EQUAL |kind| 'TREE)
            (|spadSysChoose| (ELT |tree| 4) |arg|))
           ((BOOT-EQUAL |kind| 'LITERALS)
            (|member| |arg| (ELT |tree| 4)))
           ((BOOT-EQUAL |kind| 'INTEGER) (INTEGERP |arg|))
           ((BOOT-EQUAL |kind| 'FUNCTION) (ATOM |arg|))
           ('T (|systemError| "unknown tree branch"))))))))

;buildHtMacroTable()

(|buildHtMacroTable|) 

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
