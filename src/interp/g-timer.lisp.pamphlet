\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp g-timer.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}

(IN-PACKAGE "BOOT" )

;--% Code instrumentation facilities
;--  These functions can be used with arbitrary lists of
;--  named stats (listofnames) grouped in classes (listofclasses)
;--  and with measurement types (property, classproperty).
;
;printNamedStatsByProperty(listofnames, property) ==
;  total := +/[GET(name,property) for [name,:.] in listofnames]
;  for [name,:.] in listofnames repeat
;    n := GET(name, property)
;    strname := princ-to-string name
;    strval  := princ-to-string n
;    sayBrightly concat(bright strname,
;      fillerSpaces(70-#strname-#strval,'"."),bright strval)
;  sayBrightly bright fillerSpaces(72,'"-")
;  sayBrightly concat(bright '"Total",
;    fillerSpaces(65-# princ-to-string total,'"."),bright princ-to-string total)

(DEFUN |printNamedStatsByProperty| (|listofnames| |property|)
  (PROG (|total| |name| |n| |strname| |strval|)
    (RETURN
      (SEQ (PROGN
             (setq |total|
                      (PROG (G166065)
                        (setq G166065 0)
                        (RETURN
                          (DO ((G166071 |listofnames|
                                   (CDR G166071))
                               (G166057 NIL))
                              ((OR (ATOM G166071)
                                   (PROGN
                                     (SETQ G166057 (CAR G166071))
                                     NIL)
                                   (PROGN
                                     (PROGN
                                       (setq |name| (CAR G166057))
                                       G166057)
                                     NIL))
                               G166065)
                            (SEQ (EXIT (SETQ G166065
                                        (+ G166065
                                         (GETL |name| |property|)))))))))
             (DO ((G166086 |listofnames| (CDR G166086))
                  (G166061 NIL))
                 ((OR (ATOM G166086)
                      (PROGN (SETQ G166061 (CAR G166086)) NIL)
                      (PROGN
                        (PROGN
                          (setq |name| (CAR G166061))
                          G166061)
                        NIL))
                  NIL)
               (SEQ (EXIT (PROGN
                            (setq |n| (GETL |name| |property|))
                            (setq |strname| (princ-to-string |name|))
                            (setq |strval| (princ-to-string |n|))
                            (|sayBrightly|
                                (|concat| (|bright| |strname|)
                                    (|fillerSpaces|
                                     (SPADDIFFERENCE
                                      (SPADDIFFERENCE 70
                                       (|#| |strname|))
                                      (|#| |strval|))
                                     ".")
                                    (|bright| |strval|)))))))
             (|sayBrightly|
                 (|bright| (|fillerSpaces| 72 "-")))
             (|sayBrightly|
                 (|concat| (|bright| "Total")
                     (|fillerSpaces|
                         (SPADDIFFERENCE 65
                             (|#| (princ-to-string |total|)))
                         ".")
                     (|bright| (princ-to-string |total|)))))))))

;makeLongStatStringByProperty _
; (listofnames, listofclasses, property, classproperty, units, flag) ==
;  total := 0
;  str := '""
;  otherStatTotal := GET('other, property)
;  for [name,class,:ab] in listofnames repeat
;    name = 'other => 'iterate
;    cl := CAR LASSOC(class,listofclasses)
;    n := GET( name, property)
;    PUT(cl,classproperty, n + GET(cl,classproperty))
;    total := total + n
;    if n >= 0.01
;      then timestr := normalizeStatAndStringify n
;      else
;        timestr := '""
;        otherStatTotal := otherStatTotal + n
;    str := makeStatString(str,timestr,ab,flag)
;  otherStatTotal := otherStatTotal
;  PUT('other, property, otherStatTotal)
;  if otherStatTotal > 0 then
;    str := makeStatString(str,normalizeStatAndStringify otherStatTotal,'O,flag)
;    total := total + otherStatTotal
;    cl := CAR LASSOC('other,listofnames)
;    cl := CAR LASSOC(cl,listofclasses)
;    PUT(cl,classproperty, otherStatTotal + GET(cl,classproperty))
;  if flag ^= 'long then
;    total := 0
;    str := '""
;    for [class,name,:ab] in listofclasses repeat
;      n := GET(name, classproperty)
;      n = 0.0 => 'iterate
;      total := total + n
;      timestr := normalizeStatAndStringify n
;      str := makeStatString(str,timestr,ab,flag)
;  total := STRCONC(normalizeStatAndStringify total,'" ", units)
;  str = '"" =>  total
;  STRCONC(str, '" = ", total)

(DEFUN |makeLongStatStringByProperty|
       (|listofnames| |listofclasses| |property| |classproperty|
           |units| |flag|)
  (PROG (|otherStatTotal| |cl| |class| |name| |ab| |n| |timestr| |str|
            |total|)
    (RETURN
      (SEQ (PROGN
             (setq |total| 0)
             (setq |str| "")
             (setq |otherStatTotal| (GETL '|other| |property|))
             (DO ((G166123 |listofnames| (CDR G166123))
                  (G166105 NIL))
                 ((OR (ATOM G166123)
                      (PROGN (SETQ G166105 (CAR G166123)) NIL)
                      (PROGN
                        (PROGN
                          (setq |name| (CAR G166105))
                          (setq |class| (CADR G166105))
                          (setq |ab| (CDDR G166105))
                          G166105)
                        NIL))
                  NIL)
               (SEQ (EXIT (COND
                            ((BOOT-EQUAL |name| '|other|) '|iterate|)
                            ('T
                             (setq |cl|
                                      (CAR
                                       (LASSOC |class| |listofclasses|)))
                             (setq |n| (GETL |name| |property|))
                             (PUT |cl| |classproperty|
                                  (+ |n|
                                        (GETL |cl| |classproperty|)))
                             (setq |total| (+ |total| |n|))
                             (COND
                               ((>= |n| 0.01)
                                (setq |timestr|
                                         (|normalizeStatAndStringify|
                                          |n|)))
                               ('T (setq |timestr| "")
                                (setq |otherStatTotal|
                                         (+ |otherStatTotal| |n|))))
                             (setq |str|
                                      (|makeStatString| |str| |timestr|
                                       |ab| |flag|)))))))
             (setq |otherStatTotal| |otherStatTotal|)
             (PUT '|other| |property| |otherStatTotal|)
             (COND
               ((> |otherStatTotal| 0)
                (setq |str|
                         (|makeStatString| |str|
                             (|normalizeStatAndStringify|
                                 |otherStatTotal|)
                             'O |flag|))
                (setq |total| (+ |total| |otherStatTotal|))
                (setq |cl| (CAR (LASSOC '|other| |listofnames|)))
                (setq |cl| (CAR (LASSOC |cl| |listofclasses|)))
                (PUT |cl| |classproperty|
                     (+ |otherStatTotal|
                           (GETL |cl| |classproperty|)))))
             (COND
               ((NEQUAL |flag| '|long|) (setq |total| 0)
                (setq |str| "")
                (DO ((G166136 |listofclasses| (CDR G166136))
                     (G166112 NIL))
                    ((OR (ATOM G166136)
                         (PROGN (SETQ G166112 (CAR G166136)) NIL)
                         (PROGN
                           (PROGN
                             (setq |class| (CAR G166112))
                             (setq |name| (CADR G166112))
                             (setq |ab| (CDDR G166112))
                             G166112)
                           NIL))
                     NIL)
                  (SEQ (EXIT (PROGN
                               (setq |n|
                                        (GETL |name| |classproperty|))
                               (COND
                                 ((BOOT-EQUAL |n| 0.0) '|iterate|)
                                 ('T
                                  (setq |total| (+ |total| |n|))
                                  (setq |timestr|
                                           (|normalizeStatAndStringify|
                                            |n|))
                                  (setq |str|
                                           (|makeStatString| |str|
                                            |timestr| |ab| |flag|))))))))))
             (setq |total|
                      (STRCONC (|normalizeStatAndStringify| |total|)
                               " " |units|))
             (COND
               ((BOOT-EQUAL |str| "") |total|)
               ('T (STRCONC |str| " = " |total|))))))))

;normalizeStatAndStringify t ==
;  RNUMP t =>
;      t := roundStat t
;      t = 0.0 => '"0"
;      FORMAT(nil,'"~,2F",t)
;  INTP t =>
;      K := 1024
;      M := K*K
;      t > 9*M => CONCAT(princ-to-string((t + 512*K)/M), '"M")
;      t > 9*K => CONCAT(princ-to-string((t + 512)/K),   '"K")
;      princ-to-string t
;  princ-to-string t

(DEFUN |normalizeStatAndStringify| (|t|)
  (PROG (K M)
    (RETURN
      (COND
        ((FLOATP |t|) (setq |t| (|roundStat| |t|))
         (COND
           ((BOOT-EQUAL |t| 0.0) "0")
           ('T (FORMAT NIL "~,2F" |t|))))
        ((integerp |t|) (setq K 1024) (setq M (TIMES K K))
         (COND
           ((> |t| (TIMES 9 M))
            (CONCAT (princ-to-string (QUOTIENT (+ |t| (TIMES 512 K)) M))
                    "M"))
           ((> |t| (TIMES 9 K))
            (CONCAT (princ-to-string (QUOTIENT (+ |t| 512) K))
                    "K"))
           ('T (princ-to-string |t|))))
        ('T (princ-to-string |t|))))))

;significantStat t ==
;   RNUMP t => (t > 0.01)
;   INTP  t => (t > 100)
;   true

(DEFUN |significantStat| (|t|)
  (COND ((FLOATP |t|) (> |t| 0.01)) ((integerp |t|) (> |t| 100)) ('T 'T)))

;roundStat t ==
;  not RNUMP t => t
;  (FIX (0.5 + t * 1000.0)) / 1000.0

(DEFUN |roundStat| (|t|)
  (COND
    ((NULL (FLOATP |t|)) |t|)
    ('T (QUOTIENT (truncate (+ 0.5 (TIMES |t| 1000.0))) 1000.0))))

;makeStatString(oldstr,time,abb,flag) ==
;  time = '"" => oldstr
;  opening := (flag = 'long => '"("; '" (")
;  oldstr = '"" => STRCONC(time,opening,abb,'")")
;  STRCONC(oldstr,'" + ",time,opening,abb,'")")

(DEFUN |makeStatString| (|oldstr| |time| |abb| |flag|)
  (PROG (|opening|)
    (RETURN
      (COND
        ((BOOT-EQUAL |time| "") |oldstr|)
        ('T
         (setq |opening|
                  (COND
                    ((BOOT-EQUAL |flag| '|long|) "(")
                    ('T " (")))
         (COND
           ((BOOT-EQUAL |oldstr| "")
            (STRCONC |time| |opening| |abb| ")"))
           ('T
            (STRCONC |oldstr| " + " |time| |opening| |abb|
                     ")"))))))))

;peekTimedName() == IFCAR $timedNameStack

(DEFUN |peekTimedName| ()
  (DECLARE (SPECIAL |$timedNameStack|))
  (IFCAR |$timedNameStack|))

;popTimedName() ==
;  name := IFCAR $timedNameStack
;  $timedNameStack := IFCDR $timedNameStack
;  name

(DEFUN |popTimedName| ()
  (PROG (|name|)
    (DECLARE (SPECIAL |$timedNameStack|))
    (RETURN
      (PROGN
        (setq |name| (IFCAR |$timedNameStack|))
        (setq |$timedNameStack| (IFCDR |$timedNameStack|))
        |name|))))

;pushTimedName name ==
;  PUSH(name,$timedNameStack)

(DEFUN |pushTimedName| (|name|)
  (DECLARE (SPECIAL |$timedNameStack|))
  (PUSH |name| |$timedNameStack|))

;--currentlyTimedName() == CAR $timedNameStack
;
;startTimingProcess name ==
;  updateTimedName peekTimedName()
;  pushTimedName name
;  if EQ(name, 'load) then          statRecordLoadEvent()

(DEFUN |startTimingProcess| (|name|)
  (PROGN
    (|updateTimedName| (|peekTimedName|))
    (|pushTimedName| |name|)
    (COND ((EQ |name| '|load|) (|statRecordLoadEvent|)) ('T NIL))))

;stopTimingProcess name ==
;  (name ^= peekTimedName()) and null $InteractiveMode =>
;    keyedSystemError("S2GL0015",[name,peekTimedName()])
;  updateTimedName peekTimedName()
;  popTimedName()

(DEFUN |stopTimingProcess| (|name|)
  (DECLARE (SPECIAL |$InteractiveMode|))
  (COND
    ((AND (NEQUAL |name| (|peekTimedName|)) (NULL |$InteractiveMode|))
     (|keyedSystemError|
      "Internal timings are not balanced: timing classes are %1 and %2"
      (cons |name| (cons (|peekTimedName|) NIL))))
    ('T (|updateTimedName| (|peekTimedName|)) (|popTimedName|))))

;--% Instrumentation specific to the interpreter
(SETANDFILEQ |$oldElapsedSpace| 0) 
(SETANDFILEQ |$oldElapsedGCTime| 0.0) 
(SETANDFILEQ |$oldElapsedTime| 0.0) 
(SETANDFILEQ |$gcTimeTotal| 0.0) 

;
;-- $timedNameStack is used to hold the names of sections of the
;-- code being timed.
;
(SETANDFILEQ |$timedNameStack| '(|other|))

;SETANDFILEQ($interpreterTimedNames,'(
;-- name         class abbrev
;  (algebra        2 .   B) _
;  (analysis       1 .   A) _
;  (coercion       1 .   C) _
;  (compilation    3 .   T) _
;  (debug          3 .   D) _
;  (evaluation     2 .   E) _
;  (gc             4 .   G) _
;  (history        3 .   H) _
;  (instantiation  3 .   I) _
;  (load           3 .   L) _
;  (modemaps       1 .   M) _
;  (optimization   3 .   Z) _
;  (querycoerce    1 .   Q) _
;  (other          3 .   O) _
;  (diskread       3 .   K) _
;  (print          3 .   P) _
;  (resolve        1 .   R) _
;  ))

(SETANDFILEQ |$interpreterTimedNames|
    '((|algebra| 2 . B) (|analysis| 1 . A) (|coercion| 1 . C)
      (|compilation| 3 . T) (|debug| 3 . D) (|evaluation| 2 . E)
      (|gc| 4 . G) (|history| 3 . H) (|instantiation| 3 . I)
      (|load| 3 . L) (|modemaps| 1 . M) (|optimization| 3 . Z)
      (|querycoerce| 1 . Q) (|other| 3 . O) (|diskread| 3 . K)
      (|print| 3 . P) (|resolve| 1 . R)))

;SETANDFILEQ($interpreterTimedClasses, '(
;-- number class name    short name
;  ( 1    interpreter     .  IN) _
;  ( 2    evaluation      .  EV) _
;  ( 3    other           .  OT) _
;  ( 4    reclaim         .  GC) _
;  ))

(SETANDFILEQ |$interpreterTimedClasses|
    '((1 |interpreter| . IN) (2 |evaluation| . EV) (3 |other| . OT)
      (4 |reclaim| . GC)))

;initializeTimedNames(listofnames,listofclasses) ==
;  for [name,:.] in listofnames repeat
;    PUT(name, 'TimeTotal, 0.0)
;    PUT(name, 'SpaceTotal,  0)
;  for [.,name,:.] in listofclasses repeat
;    PUT( name, 'ClassTimeTotal, 0.0)
;    PUT( name, 'ClassSpaceTotal,  0)
;  $timedNameStack := '(other)
;  computeElapsedTime()
;  PUT('gc, 'TimeTotal, 0.0)
;  PUT('gc, 'SpaceTotal,  0)
;  NIL

(DEFUN |initializeTimedNames| (|listofnames| |listofclasses|)
  (PROG (|name|)
    (DECLARE (SPECIAL |$timedNameStack|))
    (RETURN
      (SEQ (PROGN
             (DO ((G166232 |listofnames| (CDR G166232))
                  (G166218 NIL))
                 ((OR (ATOM G166232)
                      (PROGN (SETQ G166218 (CAR G166232)) NIL)
                      (PROGN
                        (PROGN
                          (setq |name| (CAR G166218))
                          G166218)
                        NIL))
                  NIL)
               (SEQ (EXIT (PROGN
                            (PUT |name| '|TimeTotal| 0.0)
                            (PUT |name| '|SpaceTotal| 0)))))
             (DO ((G166245 |listofclasses| (CDR G166245))
                  (G166222 NIL))
                 ((OR (ATOM G166245)
                      (PROGN (SETQ G166222 (CAR G166245)) NIL)
                      (PROGN
                        (PROGN
                          (setq |name| (CADR G166222))
                          G166222)
                        NIL))
                  NIL)
               (SEQ (EXIT (PROGN
                            (PUT |name| '|ClassTimeTotal| 0.0)
                            (PUT |name| '|ClassSpaceTotal| 0)))))
             (setq |$timedNameStack| '(|other|))
             (|computeElapsedTime|)
             (PUT '|gc| '|TimeTotal| 0.0)
             (PUT '|gc| '|SpaceTotal| 0)
             NIL)))))

;updateTimedName name ==
;  count := (GET(name,'TimeTotal) or 0) + computeElapsedTime()
;  PUT(name,'TimeTotal, count)

(DEFUN |updateTimedName| (|name|)
  (PROG (|count|)
    (RETURN
      (PROGN
        (setq |count|
                 (+ (OR (GETL |name| '|TimeTotal|) 0)
                       (|computeElapsedTime|)))
        (PUT |name| '|TimeTotal| |count|)))))

;printNamedStats listofnames ==
;  printNamedStatsByProperty(listofnames, 'TimeTotal)
;  sayBrightly '" "
;  sayBrightly '"Space (in bytes):"
;  printNamedStatsByProperty(listofnames, 'SpaceTotal)

(DEFUN |printNamedStats| (|listofnames|)
  (PROGN
    (|printNamedStatsByProperty| |listofnames| '|TimeTotal|)
    (|sayBrightly| " ")
    (|sayBrightly| "Space (in bytes):")
    (|printNamedStatsByProperty| |listofnames| '|SpaceTotal|)))

;makeLongTimeString(listofnames,listofclasses) ==
;  makeLongStatStringByProperty(listofnames, listofclasses,  _
;                               'TimeTotal, 'ClassTimeTotal, _
;                               '"sec", $printTimeIfTrue)

(DEFUN |makeLongTimeString| (|listofnames| |listofclasses|)
  (DECLARE (SPECIAL |$printTimeIfTrue|))
  (|makeLongStatStringByProperty| |listofnames| |listofclasses|
      '|TimeTotal| '|ClassTimeTotal| "sec"
      |$printTimeIfTrue|))

;makeLongSpaceString(listofnames,listofclasses) ==
;  makeLongStatStringByProperty(listofnames, listofclasses,    _
;                               'SpaceTotal, 'ClassSpaceTotal, _
;                               '"bytes", $printStorageIfTrue)

(DEFUN |makeLongSpaceString| (|listofnames| |listofclasses|)
  (DECLARE (SPECIAL |$printStorageIfTrue|))
  (|makeLongStatStringByProperty| |listofnames| |listofclasses|
      '|SpaceTotal| '|ClassSpaceTotal| "bytes"
      |$printStorageIfTrue|))

;computeElapsedTime() ==
;  -- in total time lists, CAR is VIRTCPU and CADR is TOTCPU
;  currentTime:= elapsedUserTime()
;  currentGCTime:= elapsedGcTime()
;  gcDelta := currentGCTime - $oldElapsedGCTime
;  elapsedSeconds:=
;     1.*(currentTime-$oldElapsedTime-gcDelta)/$timerTicksPerSecond
;  PUT('gc, 'TimeTotal,GET('gc,'TimeTotal) +
;                   1.*gcDelta/$timerTicksPerSecond)
;  $oldElapsedTime := elapsedUserTime()
;  $oldElapsedGCTime := elapsedGcTime()
;  elapsedSeconds

(DEFUN |computeElapsedTime| ()
  (PROG (|currentTime| |currentGCTime| |gcDelta| |elapsedSeconds|)
    (DECLARE (SPECIAL |$oldElapsedGCTime| |$oldElapsedTime|
                      |$timerTicksPerSecond|))
    (RETURN
      (PROGN
        (setq |currentTime| (|elapsedUserTime|))
        (setq |currentGCTime| (|elapsedGcTime|))
        (setq |gcDelta|
                 (SPADDIFFERENCE |currentGCTime| |$oldElapsedGCTime|))
        (setq |elapsedSeconds|
                    (QUOTIENT
                        (TIMES 1.0
                               (SPADDIFFERENCE
                                   (SPADDIFFERENCE |currentTime|
                                    |$oldElapsedTime|)
                                   |gcDelta|))
                        |$timerTicksPerSecond|))
        (PUT '|gc| '|TimeTotal|
             (+ (GETL '|gc| '|TimeTotal|)
                   (QUOTIENT (TIMES 1.0 |gcDelta|)
                       |$timerTicksPerSecond|)))
        (setq |$oldElapsedTime| (|elapsedUserTime|))
        (setq |$oldElapsedGCTime| (|elapsedGcTime|))
        |elapsedSeconds|))))

;computeElapsedSpace() ==
;  currentElapsedSpace := HEAPELAPSED()
;  elapsedBytes := currentElapsedSpace - $oldElapsedSpace
;  $oldElapsedSpace := currentElapsedSpace
;  elapsedBytes

(DEFUN |computeElapsedSpace| ()
  (PROG (|currentElapsedSpace| |elapsedBytes|)
    (DECLARE (SPECIAL |$oldElapsedSpace|))
    (RETURN
      (PROGN
        (setq |currentElapsedSpace| (HEAPELAPSED))
        (setq |elapsedBytes|
                 (SPADDIFFERENCE |currentElapsedSpace|
                     |$oldElapsedSpace|))
        (setq |$oldElapsedSpace| |currentElapsedSpace|)
        |elapsedBytes|))))

;timedAlgebraEvaluation(code) ==
;  startTimingProcess 'algebra
;  r := eval code
;  stopTimingProcess 'algebra
;  r

(DEFUN |timedAlgebraEvaluation| (|code|)
  (PROG (|r|)
    (RETURN
      (PROGN
        (|startTimingProcess| '|algebra|)
        (setq |r| (|eval| |code|))
        (|stopTimingProcess| '|algebra|)
        |r|))))

;timedOptimization(code) ==
;  startTimingProcess 'optimization
;  $getDomainCode : local := NIL
;  r := lispize code
;  if $reportOptimization then
;    sayBrightlyI bright '"Optimized LISP code:"
;    pp r
;  stopTimingProcess 'optimization
;  r

(DEFUN |timedOptimization| (|code|)
  (PROG (|$getDomainCode| |r|)
    (DECLARE (SPECIAL |$getDomainCode| |$reportOptimization|))
    (RETURN
      (PROGN
        (|startTimingProcess| '|optimization|)
        (setq |$getDomainCode| NIL)
        (setq |r| (|lispize| |code|))
        (COND
          (|$reportOptimization|
              (|sayBrightlyI| (|bright| "Optimized LISP code:"))
              (|pp| |r|)))
        (|stopTimingProcess| '|optimization|)
        |r|))))

;timedEVALFUN(code) ==
;  startTimingProcess 'evaluation
;  r := timedEvaluate code
;  stopTimingProcess 'evaluation
;  r

(DEFUN |timedEVALFUN| (|code|)
  (PROG (|r|)
    (RETURN
      (PROGN
        (|startTimingProcess| '|evaluation|)
        (setq |r| (|timedEvaluate| |code|))
        (|stopTimingProcess| '|evaluation|)
        |r|))))

;timedEvaluate code ==
;  code is ["LIST",:a] and #a > 200 =>
;    "append"/[eval ["LIST",:x] for x in splitIntoBlocksOf200 a]
;  eval code

(DEFUN |timedEvaluate| (|code|)
  (PROG (|a|)
    (RETURN
      (SEQ (COND
             ((AND (CONSP |code|) (EQ (QCAR |code|) 'LIST)
                   (PROGN (setq |a| (QCDR |code|)) 'T)
                   (> (|#| |a|) 200))
              (PROG (G166311)
                (setq G166311 NIL)
                (RETURN
                  (DO ((G166316 (|splitIntoBlocksOf200| |a|)
                           (CDR G166316))
                       (|x| NIL))
                      ((OR (ATOM G166316)
                           (PROGN (SETQ |x| (CAR G166316)) NIL))
                       G166311)
                    (SEQ (EXIT (SETQ G166311
                                     (APPEND G166311
                                      (|eval| (CONS 'LIST |x|))))))))))
             ('T (|eval| |code|)))))))

;displayHeapStatsIfWanted() ==
;   $printStorageIfTrue => sayBrightly OLDHEAPSTATS()

(DEFUN |displayHeapStatsIfWanted| ()
  (DECLARE (SPECIAL |$printStorageIfTrue|))
  (SEQ (COND
         (|$printStorageIfTrue| (EXIT (|sayBrightly| (OLDHEAPSTATS)))))))

;--EVALANDFILEACTQ(
;--  PUTGCEXIT function displayHeapStatsIfWanted )
;
;--% stubs for the stats summary fns
;statRecordInstantiationEvent() == nil

(DEFUN |statRecordInstantiationEvent| () NIL) 

;statRecordLoadEvent()          == nil

(DEFUN |statRecordLoadEvent| () NIL) 

;
;statisticsSummary()  == '"No statistics available."

(DEFUN |statisticsSummary| () "No statistics available.")

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
