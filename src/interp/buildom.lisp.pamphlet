\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp buildom.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}
(IN-PACKAGE "BOOT" )

;SETANDFILEQ($noCategoryDomains, '(Domain Mode SubDomain))

(SETANDFILEQ |$noCategoryDomains| '(|Domain| |Mode| |SubDomain|))

;SETANDFILEQ($nonLisplibDomains,
;  APPEND($Primitives,$noCategoryDomains))

(SETANDFILEQ |$nonLisplibDomains|
    (APPEND |$Primitives| |$noCategoryDomains|))

;--% Record
;--  Want to eventually have the elts and setelts.
;--  Record is a macro in BUILDOM LISP. It takes out the colons.

;isRecord type == type is ['Record,:.]

(DEFUN |isRecord| (|type|)
  (AND (CONSP |type|) (EQ (QCAR |type|) '|Record|)))

;RecordInner args ==
;  -- this is old and should be removed wherever it occurs
;  if $evalDomain then
;    sayBrightly '"-->> Whoops! RecordInner called from this code."
;  Record0 VEC2LIST args

(DEFUN |RecordInner| (|args|)
  (declare (special |$evalDomain|))
  (PROGN
    (COND
      (|$evalDomain|
          (|sayBrightly|
                  "-->> Whoops! RecordInner called from this code.")))
    (|Record0| (VEC2LIST |args|))))

;Record0 args ==
;    dom := GETREFV 10
;    -- JHD added an extra slot to cache EQUAL methods
;    dom.0 := ['Record, :[['_:, CAR a, devaluate CDR a] for a in args]]
;    dom.1 :=
;           [function lookupInTable,dom,
;               [['_=,[[['Boolean],'_$,'_$],:12]],
;                 ['coerce,[[$Expression,'_$],:14]]]]
;    dom.2 := NIL
;    dom.3 := ['RecordCategory,:QCDR dom.0]
;    dom.4 :=
;          [[ '(SetCategory) ],[ '(SetCategory) ]]
;    dom.5 := [CDR a for a in args]
;    dom.6 := [function RecordEqual, :dom]
;    dom.7 := [function RecordPrint, :dom]
;    dom.8 := [function Undef, :dom]
;  -- following is cache for equality functions
;    dom.9 := if (n:= LENGTH args) <= 2
;              then [NIL,:NIL]
;              else GETREFV n
;    dom

(DEFUN |Record0| (|args|)
  (PROG (|dom| |n|)
  (declare (special |$Expression|))
    (RETURN
      (SEQ (PROGN
             (setq |dom| (make-array 10))
             (SETELT |dom| 0
                     (CONS '|Record|
                           (PROG (G166069)
                             (setq G166069 NIL)
                             (RETURN
                               (DO ((G166074 |args| (CDR G166074))
                                    (|a| NIL))
                                   ((OR (ATOM G166074)
                                     (PROGN
                                       (SETQ |a| (CAR G166074))
                                       NIL))
                                    (NREVERSE0 G166069))
                                 (SEQ (EXIT
                                       (SETQ G166069
                                        (CONS
                                         (CONS '|:|
                                          (CONS (CAR |a|)
                                           (CONS
                                            (|devaluate| (CDR |a|))
                                            NIL)))
                                         G166069)))))))))
             (SETELT |dom| 1
                     (CONS #'|lookupInTable|
                           (CONS |dom|
                                 (CONS (CONS
                                        (CONS '=
                                         (CONS
                                          (CONS
                                           (CONS (CONS '|Boolean| NIL)
                                            (CONS '$ (CONS '$ NIL)))
                                           12)
                                          NIL))
                                        (CONS
                                         (CONS '|coerce|
                                          (CONS
                                           (CONS
                                            (CONS |$Expression|
                                             (CONS '$ NIL))
                                            14)
                                           NIL))
                                         NIL))
                                       NIL))))
             (SETELT |dom| 2 NIL)
             (SETELT |dom| 3
                     (CONS '|RecordCategory| (QCDR (ELT |dom| 0))))
             (SETELT |dom| 4
                     (CONS (CONS '(|SetCategory|) NIL)
                           (CONS (CONS '(|SetCategory|) NIL) NIL)))
             (SETELT |dom| 5
                     (PROG (G166084)
                       (setq G166084 NIL)
                       (RETURN
                         (DO ((G166089 |args| (CDR G166089))
                              (|a| NIL))
                             ((OR (ATOM G166089)
                                  (PROGN
                                    (SETQ |a| (CAR G166089))
                                    NIL))
                              (NREVERSE0 G166084))
                           (SEQ (EXIT (SETQ G166084
                                       (CONS (CDR |a|) G166084))))))))
             (SETELT |dom| 6 (CONS #'|RecordEqual| |dom|))
             (SETELT |dom| 7 (CONS #'|RecordPrint| |dom|))
             (SETELT |dom| 8 (CONS #'|Undef| |dom|))
             (SETELT |dom| 9
                     (COND
                       ((<= (setq |n| (LENGTH |args|)) 2)
                        (CONS NIL NIL))
                       ('T (make-array |n|))))
             |dom|)))))

;RecordEqual(x,y,dom) ==
;  CONSP x =>
;    b:=
;       SPADCALL(CAR x, CAR y, CAR(dom.9) or
;                           CAR RPLACA(dom.9,findEqualFun(dom.5.0)))
;    NULL rest(dom.5) => b
;    b and
;       SPADCALL(CDR x, CDR y, CDR (dom.9) or
;                           CDR RPLACD(dom.9,findEqualFun(dom.5.1)))
;  VECP x =>
;    equalfuns := dom.9
;    and/[SPADCALL(x.i,y.i,equalfuns.i or (equalfuns.i:=findEqualFun(fdom)))
;         for i in 0.. for fdom in dom.5]
;  error '"Bug: Silly record representation"

(DEFUN |RecordEqual| (|x| |y| |dom|)
  (PROG (|b| |equalfuns|)
    (RETURN
      (SEQ (COND
             ((CONSP |x|)
              (setq |b|
                       (SPADCALL (CAR |x|) (CAR |y|)
                           (OR (CAR (ELT |dom| 9))
                               (CAR (RPLACA (ELT |dom| 9)
                                     (|findEqualFun|
                                      (ELT (ELT |dom| 5) 0)))))))
              (COND
                ((NULL (CDR (ELT |dom| 5))) |b|)
                ('T
                 (AND |b|
                      (SPADCALL (CDR |x|) (CDR |y|)
                          (OR (CDR (ELT |dom| 9))
                              (CDR (RPLACD (ELT |dom| 9)
                                    (|findEqualFun|
                                     (ELT (ELT |dom| 5) 1))))))))))
             ((VECP |x|) (setq |equalfuns| (ELT |dom| 9))
              (PROG (G166105)
                (setq G166105 'T)
                (RETURN
                  (DO ((G166112 NIL (NULL G166105))
                       (|i| 0 (QSADD1 |i|))
                       (G166113 (ELT |dom| 5) (CDR G166113))
                       (|fdom| NIL))
                      ((OR G166112 (ATOM G166113)
                           (PROGN (SETQ |fdom| (CAR G166113)) NIL))
                       G166105)
                    (SEQ (EXIT (SETQ G166105
                                     (AND G166105
                                      (SPADCALL (ELT |x| |i|)
                                       (ELT |y| |i|)
                                       (OR (ELT |equalfuns| |i|)
                                        (SETELT |equalfuns| |i|
                                         (|findEqualFun| |fdom|))))))))))))
             ('T
              (|error| "Bug: Silly record representation")))))))


;RecordPrint(x,dom) == coerceRe2E(x,dom.3)

(DEFUN |RecordPrint| (|x| |dom|) (|coerceRe2E| |x| (ELT |dom| 3)))

;coerceVal2E(x,m) ==
;   objValUnwrap coerceByFunction(objNewWrap(x,m),$Expression)

(DEFUN |coerceVal2E| (|x| |m|)
  (declare (special |$Expression|))
  (|objValUnwrap|
      (|coerceByFunction| (mkObjWrap |x| |m|) |$Expression|)))

;findEqualFun(dom) ==
;  compiledLookup('_=,[$Boolean,'$,'$],dom)

(DEFUN |findEqualFun| (|dom|)
  (declare (special |$Boolean|))
  (|compiledLookup| '= (CONS |$Boolean| (CONS '$ (CONS '$ NIL))) |dom|))

;coerceRe2E(x,source) ==
;  n := # CDR source
;  n = 1 =>
;    ['construct,
;     ['_=, source.1.1, coerceVal2E(CAR x,source.1.2)] ]
;  n = 2 =>
;    ['construct,
;     ['_=, source.1.1, coerceVal2E(CAR x,source.1.2)], _
;     ['_=, source.2.1, coerceVal2E(CDR x,source.2.2)] ]
;  VECP x =>
;    ['construct,
;     :[['_=,tag,coerceVal2E(x.i, fdom)]
;       for i in 0.. for [.,tag,fdom] in rest source]]
;  error '"Bug: ridiculous record representation"

(DEFUN |coerceRe2E| (|x| |source|)
  (PROG (|n| |tag| |fdom|)
    (RETURN
      (SEQ (PROGN
             (setq |n| (|#| (CDR |source|)))
             (COND
               ((EQL |n| 1)
                (CONS '|construct|
                      (CONS (CONS '=
                                  (CONS (ELT (ELT |source| 1) 1)
                                        (CONS
                                         (|coerceVal2E| (CAR |x|)
                                          (ELT (ELT |source| 1) 2))
                                         NIL)))
                            NIL)))
               ((EQL |n| 2)
                (CONS '|construct|
                      (CONS (CONS '=
                                  (CONS (ELT (ELT |source| 1) 1)
                                        (CONS
                                         (|coerceVal2E| (CAR |x|)
                                          (ELT (ELT |source| 1) 2))
                                         NIL)))
                            (CONS (CONS '=
                                        (CONS (ELT (ELT |source| 2) 1)
                                         (CONS
                                          (|coerceVal2E| (CDR |x|)
                                           (ELT (ELT |source| 2) 2))
                                          NIL)))
                                  NIL))))
               ((VECP |x|)
                (CONS '|construct|
                      (PROG (G166146)
                        (setq G166146 NIL)
                        (RETURN
                          (DO ((|i| 0 (QSADD1 |i|))
                               (G166153 (CDR |source|)
                                   (CDR G166153))
                               (G166135 NIL))
                              ((OR (ATOM G166153)
                                   (PROGN
                                     (SETQ G166135 (CAR G166153))
                                     NIL)
                                   (PROGN
                                     (PROGN
                                       (setq |tag| (CADR G166135))
                                       (setq |fdom|
                                        (CADDR G166135))
                                       G166135)
                                     NIL))
                               (NREVERSE0 G166146))
                            (SEQ (EXIT (SETQ G166146
                                        (CONS
                                         (CONS '=
                                          (CONS |tag|
                                           (CONS
                                            (|coerceVal2E|
                                             (ELT |x| |i|) |fdom|)
                                            NIL)))
                                         G166146)))))))))
               ('T
                (|error| "Bug: ridiculous record representation"))))))))

;--% Union
;--  Want to eventually have the coerce to and from branch types.
;Union(:args) ==
;    dom := GETREFV 9
;    dom.0 := ['Union, :[(if a is ['_:,tag,domval]
;                         then ['_:,tag,devaluate domval]
;                          else devaluate a) for a in args]]
;    dom.1 :=
;            [function lookupInTable,dom,
;               [['_=,[[['Boolean],'_$,'_$],:12]],
;                 ['coerce,[[$Expression,'_$],:14]]]]
;    dom.2 := NIL
;    dom.3 :=
;      '(SetCategory)
;    dom.4 :=
;          [[ '(SetCategory) ],[ '(SetCategory) ]]
;    dom.5 := args
;    dom.6 := [function UnionEqual, :dom]
;    dom.7 := [function UnionPrint, :dom]
;    dom.8 := [function Undef, :dom]
;    dom

(DEFUN |Union| (&REST G166222 &AUX |args|)
  (DSETQ |args| G166222)
  (PROG (|dom| |ISTMP#1| |tag| |ISTMP#2| |domval|)
  (declare (special |$Expression|))
    (RETURN
      (SEQ (PROGN
             (setq |dom| (make-array 9))
             (SETELT |dom| 0
                     (CONS '|Union|
                           (PROG (G166195)
                             (setq G166195 NIL)
                             (RETURN
                               (DO ((G166207 |args| (CDR G166207))
                                    (|a| NIL))
                                   ((OR (ATOM G166207)
                                     (PROGN
                                       (SETQ |a| (CAR G166207))
                                       NIL))
                                    (NREVERSE0 G166195))
                                 (SEQ (EXIT
                                       (SETQ G166195
                                        (CONS
                                         (COND
                                           ((AND (CONSP |a|)
                                             (EQ (QCAR |a|) '|:|)
                                             (PROGN
                                               (setq |ISTMP#1|
                                                (QCDR |a|))
                                               (AND (CONSP |ISTMP#1|)
                                                (PROGN
                                                  (setq |tag|
                                                   (QCAR |ISTMP#1|))
                                                  (setq |ISTMP#2|
                                                   (QCDR |ISTMP#1|))
                                                  (AND
                                                   (CONSP |ISTMP#2|)
                                                   (EQ (QCDR |ISTMP#2|)
                                                    NIL)
                                                   (PROGN
                                                     (setq |domval|
                                                      (QCAR |ISTMP#2|))
                                                     'T))))))
                                            (CONS '|:|
                                             (CONS |tag|
                                              (CONS
                                               (|devaluate| |domval|)
                                               NIL))))
                                           ('T (|devaluate| |a|)))
                                         G166195)))))))))
             (SETELT |dom| 1
                     (CONS #'|lookupInTable|
                           (CONS |dom|
                                 (CONS (CONS
                                        (CONS '=
                                         (CONS
                                          (CONS
                                           (CONS (CONS '|Boolean| NIL)
                                            (CONS '$ (CONS '$ NIL)))
                                           12)
                                          NIL))
                                        (CONS
                                         (CONS '|coerce|
                                          (CONS
                                           (CONS
                                            (CONS |$Expression|
                                             (CONS '$ NIL))
                                            14)
                                           NIL))
                                         NIL))
                                       NIL))))
             (SETELT |dom| 2 NIL)
             (SETELT |dom| 3 '(|SetCategory|))
             (SETELT |dom| 4
                     (CONS (CONS '(|SetCategory|) NIL)
                           (CONS (CONS '(|SetCategory|) NIL) NIL)))
             (SETELT |dom| 5 |args|)
             (SETELT |dom| 6 (CONS #'|UnionEqual| |dom|))
             (SETELT |dom| 7 (CONS #'|UnionPrint| |dom|))
             (SETELT |dom| 8 (CONS #'|Undef| |dom|))
             |dom|)))))

;UnionEqual(x, y, dom) ==
;  ['Union,:branches] := dom.0
;  branches := orderUnionEntries branches
;  predlist := mkPredList branches
;  same := false
;  for b in stripUnionTags branches for p in predlist while not same repeat
;    typeFun := ['LAMBDA, '(_#1), p]
;    FUNCALL(typeFun,x) and FUNCALL(typeFun,y) =>
;      STRINGP b => same := (x = y)
;      if p is ['EQCAR, :.] then (x := rest x; y := rest y)
;      same := SPADCALL(x, y, findEqualFun(evalDomain b))
;  same

(DEFUN |UnionEqual| (|x| |y| |dom|)
  (PROG (|LETTMP#1| |branches| |predlist| |typeFun| |same|)
    (RETURN
      (SEQ (PROGN
             (setq |LETTMP#1| (ELT |dom| 0))
             (setq |branches| (CDR |LETTMP#1|))
             (setq |branches| (|orderUnionEntries| |branches|))
             (setq |predlist| (|mkPredList| |branches|))
             (setq |same| NIL)
             (DO ((G166239 (|stripUnionTags| |branches|)
                      (CDR G166239))
                  (|b| NIL) (G166240 |predlist| (CDR G166240))
                  (|p| NIL))
                 ((OR (ATOM G166239)
                      (PROGN (SETQ |b| (CAR G166239)) NIL)
                      (ATOM G166240)
                      (PROGN (SETQ |p| (CAR G166240)) NIL)
                      (NULL (NULL |same|)))
                  NIL)
               (SEQ (EXIT (PROGN
                            (setq |typeFun|
                                     (CONS 'LAMBDA
                                      (CONS '(|#1|) (CONS |p| NIL))))
                            (COND
                              ((AND (FUNCALL |typeFun| |x|)
                                    (FUNCALL |typeFun| |y|))
                               (COND
                                 ((STRINGP |b|)
                                  (setq |same| (BOOT-EQUAL |x| |y|)))
                                 ('T
                                  (COND
                                    ((AND (CONSP |p|)
                                      (EQ (QCAR |p|) 'EQCAR))
                                     (setq |x| (CDR |x|))
                                     (setq |y| (CDR |y|))))
                                  (setq |same|
                                           (SPADCALL |x| |y|
                                            (|findEqualFun|
                                             (|evalDomain| |b|))))))))))))
             |same|)))))


;UnionPrint(x, dom) == coerceUn2E(x, dom.0)

(DEFUN |UnionPrint| (|x| |dom|) (|coerceUn2E| |x| (ELT |dom| 0)))

;coerceUn2E(x,source) ==
;  ['Union,:branches] := source
;  branches := orderUnionEntries branches
;  predlist := mkPredList branches
;  byGeorge := byJane := GENSYM()
;  for b in stripUnionTags branches for p in predlist  repeat
;    typeFun := ['LAMBDA, '(_#1), p]
;    if FUNCALL(typeFun,x) then return
;      if p is ['EQCAR, :.] then x := rest x
;--    STRINGP b => return x  -- to catch "failed" etc.
;      STRINGP b => byGeorge := x  -- to catch "failed" etc.
;      byGeorge := coerceVal2E(x,b)
;  byGeorge = byJane =>
;    error '"Union bug: Cannot find appropriate branch for coerce to E"
;  byGeorge

(DEFUN |coerceUn2E| (|x| |source|)
  (PROG (|branches| |predlist| |byJane| |typeFun| |byGeorge|)
    (RETURN
      (SEQ (PROGN
             (setq |branches| (CDR |source|))
             (setq |branches| (|orderUnionEntries| |branches|))
             (setq |predlist| (|mkPredList| |branches|))
             (setq |byGeorge| (setq |byJane| (GENSYM)))
             (DO ((G166279 (|stripUnionTags| |branches|)
                      (CDR G166279))
                  (|b| NIL) (G166280 |predlist| (CDR G166280))
                  (|p| NIL))
                 ((OR (ATOM G166279)
                      (PROGN (SETQ |b| (CAR G166279)) NIL)
                      (ATOM G166280)
                      (PROGN (SETQ |p| (CAR G166280)) NIL))
                  NIL)
               (SEQ (EXIT (PROGN
                            (setq |typeFun|
                                     (CONS 'LAMBDA
                                      (CONS '(|#1|) (CONS |p| NIL))))
                            (COND
                              ((FUNCALL |typeFun| |x|)
                               (RETURN
                                 (PROGN
                                   (COND
                                     ((AND (CONSP |p|)
                                       (EQ (QCAR |p|) 'EQCAR))
                                      (setq |x| (CDR |x|))))
                                   (COND
                                     ((STRINGP |b|)
                                      (setq |byGeorge| |x|))
                                     ('T
                                      (setq |byGeorge|
                                       (|coerceVal2E| |x| |b|)))))))
                              ('T NIL))))))
             (COND
               ((BOOT-EQUAL |byGeorge| |byJane|)
         (|error| "Union bug: Cannot find appropriate branch for coerce to E"))
               ('T |byGeorge|)))))))


;--% Mapping
;--  Want to eventually have elt: ($, args) -> target
;Mapping(:args) ==
;    dom := GETREFV 9
;    dom.0 := ['Mapping, :[devaluate a for a in args]]
;    dom.1 :=
;            [function lookupInTable,dom,
;               [['_=,[[['Boolean],'_$,'_$],:12]],
;                 ['coerce,[[$Expression,'_$],:14]]]]
;    dom.2 := NIL
;    dom.3 :=
;      '(SetCategory)
;    dom.4 :=
;          [[ '(SetCategory) ],[ '(SetCategory) ]]
;    dom.5 := args
;    dom.6 := [function MappingEqual, :dom]
;    dom.7 := [function MappingPrint, :dom]
;    dom.8 := [function Undef, :dom]
;    dom

(DEFUN |Mapping| (&REST G166322 &AUX |args|)
  (DSETQ |args| G166322)
  (PROG (|dom|)
  (declare (special |$Expression|))
    (RETURN
      (SEQ (PROGN
             (setq |dom| (make-array 9))
             (SETELT |dom| 0
                     (CONS '|Mapping|
                           (PROG (G166306)
                             (setq G166306 NIL)
                             (RETURN
                               (DO ((G166311 |args| (CDR G166311))
                                    (|a| NIL))
                                   ((OR (ATOM G166311)
                                     (PROGN
                                       (SETQ |a| (CAR G166311))
                                       NIL))
                                    (NREVERSE0 G166306))
                                 (SEQ (EXIT
                                       (SETQ G166306
                                        (CONS (|devaluate| |a|)
                                         G166306)))))))))
             (SETELT |dom| 1
                     (CONS #'|lookupInTable|
                           (CONS |dom|
                                 (CONS (CONS
                                        (CONS '=
                                         (CONS
                                          (CONS
                                           (CONS (CONS '|Boolean| NIL)
                                            (CONS '$ (CONS '$ NIL)))
                                           12)
                                          NIL))
                                        (CONS
                                         (CONS '|coerce|
                                          (CONS
                                           (CONS
                                            (CONS |$Expression|
                                             (CONS '$ NIL))
                                            14)
                                           NIL))
                                         NIL))
                                       NIL))))
             (SETELT |dom| 2 NIL)
             (SETELT |dom| 3 '(|SetCategory|))
             (SETELT |dom| 4
                     (CONS (CONS '(|SetCategory|) NIL)
                           (CONS (CONS '(|SetCategory|) NIL) NIL)))
             (SETELT |dom| 5 |args|)
             (SETELT |dom| 6 (CONS #'|MappingEqual| |dom|))
             (SETELT |dom| 7 (CONS #'|MappingPrint| |dom|))
             (SETELT |dom| 8 (CONS #'|Undef| |dom|))
             |dom|)))))

;MappingEqual(x, y, dom) == EQ(x,y)

(DEFUN |MappingEqual| (|x| |y| |dom|)
 (declare (ignore |dom|))
 (EQ |x| |y|))

;MappingPrint(x, dom) == coerceMap2E(x)

(DEFUN |MappingPrint| (|x| |dom|)
 (declare (ignore |dom|))
 (|coerceMap2E| |x|))

;coerceMap2E(x) ==
;  -- nrlib domain
;  ARRAYP CDR x => ['theMap, BPINAME CAR x,
;    if $testingSystem then 0 else REMAINDER(HASHEQ CDR x, 1000)]
;  -- aldor
;  ['theMap, BPINAME CAR x  ]

(DEFUN |coerceMap2E| (|x|)
  (declare (special |$testingSystem|))
  (COND
    ((ARRAYP (CDR |x|))
     (CONS '|theMap|
           (CONS (BPINAME (CAR |x|))
                 (CONS (COND
                         (|$testingSystem| 0)
                         ('T (REMAINDER (SXHASH (CDR |x|)) 1000)))
                       NIL))))
    ('T (CONS '|theMap| (CONS (BPINAME (CAR |x|)) NIL)))))

;--% Enumeration
;Enumeration(:"args") ==
;    dom := GETREFV 9
;    -- JHD added an extra slot to cache EQUAL methods
;    dom.0 := ['Enumeration, :args]
;    dom.1 :=
;           [function lookupInTable,dom,
;               [['_=,[[['Boolean],'_$,'_$],:12]],
;                 ['coerce,[[$Expression,'_$],:14], [['_$, $Symbol], :16]]
;                         ]]
;    dom.2 := NIL
;    dom.3 := ['EnumerationCategory,:QCDR dom.0]
;    dom.4 :=
;          [[ '(SetCategory) ],[ '(SetCategory) ]]
;    dom.5 := args
;    dom.6 := [function EnumEqual, :dom]
;    dom.7 := [function EnumPrint, :dom]
;    dom.8 := [function createEnum, :dom]
;    dom

(DEFUN |Enumeration,LAM| (&REST G166339 &AUX |args|)
  (DSETQ |args| G166339)
  (PROG (|dom|)
  (declare (special |$Symbol| |$Expression|))
    (RETURN
      (PROGN
        (setq |dom| (make-array 9))
        (SETELT |dom| 0 (CONS '|Enumeration| |args|))
        (SETELT |dom| 1
                (CONS #'|lookupInTable|
                      (CONS |dom|
                            (CONS (CONS (CONS '=
                                         (CONS
                                          (CONS
                                           (CONS (CONS '|Boolean| NIL)
                                            (CONS '$ (CONS '$ NIL)))
                                           12)
                                          NIL))
                                        (CONS
                                         (CONS '|coerce|
                                          (CONS
                                           (CONS
                                            (CONS |$Expression|
                                             (CONS '$ NIL))
                                            14)
                                           (CONS
                                            (CONS
                                             (CONS '$
                                              (CONS |$Symbol| NIL))
                                             16)
                                            NIL)))
                                         NIL))
                                  NIL))))
        (SETELT |dom| 2 NIL)
        (SETELT |dom| 3
                (CONS '|EnumerationCategory| (QCDR (ELT |dom| 0))))
        (SETELT |dom| 4
                (CONS (CONS '(|SetCategory|) NIL)
                      (CONS (CONS '(|SetCategory|) NIL) NIL)))
        (SETELT |dom| 5 |args|)
        (SETELT |dom| 6 (CONS #'|EnumEqual| |dom|))
        (SETELT |dom| 7 (CONS #'|EnumPrint| |dom|))
        (SETELT |dom| 8 (CONS #'|createEnum| |dom|))
        |dom|))))

(DEFMACRO |Enumeration| (&WHOLE G166340 &REST G166341 &AUX G166338)
  (DSETQ G166338 G166340)
  (CONS '|Enumeration,LAM| (WRAP (CDR G166338) 'QUOTE)))

;EnumEqual(e1,e2,dom) == e1=e2

(DEFUN |EnumEqual| (|e1| |e2| |dom|)
 (declare (special |dom|))
 (BOOT-EQUAL |e1| |e2|))

;EnumPrint(enum, dom) == dom.5.enum

(DEFUN |EnumPrint| (|enum| |dom|) (ELT (ELT |dom| 5) |enum|))

;createEnum(sym, dom) ==
;  args := dom.5
;  val := -1
;  for v in args for i in 0.. repeat
;     sym=v => return(val:=i)
;  val<0 => error ["Cannot coerce",sym,"to",["Enumeration",:args]]
;  val

(DEFUN |createEnum| (|sym| |dom|)
  (PROG (|args| |val|)
    (RETURN
      (SEQ (PROGN
             (setq |args| (ELT |dom| 5))
             (setq |val| (SPADDIFFERENCE 1))
             (SEQ (DO ((G166353 |args| (CDR G166353)) (|v| NIL)
                       (|i| 0 (QSADD1 |i|)))
                      ((OR (ATOM G166353)
                           (PROGN (SETQ |v| (CAR G166353)) NIL))
                       NIL)
                    (SEQ (EXIT (COND
                                 ((BOOT-EQUAL |sym| |v|)
                                  (EXIT (RETURN (setq |val| |i|))))))))
                  (COND
                    ((MINUSP |val|)
                     (|error| (CONS '|Cannot coerce|
                                    (CONS |sym|
                                     (CONS '|to|
                                      (CONS
                                       (CONS '|Enumeration| |args|)
                                       NIL))))))
                    ('T |val|))))))))

;--% INSTANTIATORS

;RecordCategory(:"x") == constructorCategory ['Record,:x]

(DEFUN |RecordCategory,LAM| (&REST G166369 &AUX |x|)
  (DSETQ |x| G166369)
  (|constructorCategory| (CONS '|Record| |x|)))

(DEFMACRO |RecordCategory| (&WHOLE G166370 &REST G166371 &AUX G166368)
  (DSETQ G166368 G166370)
  (CONS '|RecordCategory,LAM| (WRAP (CDR G166368) 'QUOTE)))

;EnumerationCategory(:"x") == constructorCategory ["Enumeration",:x]

(DEFUN |EnumerationCategory,LAM| (&REST G166376 &AUX |x|)
  (DSETQ |x| G166376)
  (|constructorCategory| (CONS '|Enumeration| |x|)))

(DEFMACRO |EnumerationCategory| (&WHOLE G166377 &REST G166378 &AUX G166375)
  (DSETQ G166375 G166377)
  (CONS '|EnumerationCategory,LAM|
        (WRAP (CDR G166375) 'QUOTE)))

;UnionCategory(:"x") == constructorCategory ["Union",:x]

(DEFUN |UnionCategory,LAM| (&REST G166383 &AUX |x|)
  (DSETQ |x| G166383)
  (|constructorCategory| (CONS '|Union| |x|)))

(DEFMACRO |UnionCategory| (&WHOLE G166384 &REST G166385 &AUX G166382)
  (DSETQ G166382 G166384)
  (CONS '|UnionCategory,LAM| (WRAP (CDR G166382) 'QUOTE)))

;--ListCategory(:"x") == constructorCategory ("List",:x)
;--VectorCategory(:"x") == constructorCategory ("Vector",:x)
;          --above two now defined in SPAD code.
;constructorCategory (title is [op,:.]) ==
;  constructorFunction:= GET(op,"makeFunctionList") or
;              systemErrorHere '"constructorCategory"
;  [funlist,.]:= FUNCALL(constructorFunction,"$",title,$CategoryFrame)
;  oplist:= [[[a,b],true,c] for [a,b,c] in funlist]
;  cat:=
;    JoinInner([SetCategory(),mkCategory('domain,oplist,nil,nil,nil)],
;      $EmptyEnvironment)
;  cat.(0):= title
;  cat

(DEFUN |constructorCategory| (|title|)
  (PROG (|op| |constructorFunction| |LETTMP#1| |funlist| |a| |b| |c|
              |oplist| |cat|)
  (declare (special |$EmptyEnvironment| |$CategoryFrame|))
    (RETURN
      (SEQ (PROGN
             (setq |op| (CAR |title|))
             (setq |constructorFunction|
                      (OR (GETL |op| '|makeFunctionList|)
                          (|systemErrorHere| "constructorCategory")))
             (setq |LETTMP#1|
                      (FUNCALL |constructorFunction| '$ |title|
                               |$CategoryFrame|))
             (setq |funlist| (CAR |LETTMP#1|))
             (setq |oplist|
                      (PROG (G166415)
                        (setq G166415 NIL)
                        (RETURN
                          (DO ((G166421 |funlist| (CDR G166421))
                               (G166391 NIL))
                              ((OR (ATOM G166421)
                                   (PROGN
                                     (SETQ G166391 (CAR G166421))
                                     NIL)
                                   (PROGN
                                     (PROGN
                                       (setq |a| (CAR G166391))
                                       (setq |b| (CADR G166391))
                                       (setq |c| (CADDR G166391))
                                       G166391)
                                     NIL))
                               (NREVERSE0 G166415))
                            (SEQ (EXIT (SETQ G166415
                                        (CONS
                                         (CONS
                                          (CONS |a| (CONS |b| NIL))
                                          (CONS 'T (CONS |c| NIL)))
                                         G166415))))))))
             (setq |cat|
                      (|JoinInner|
                          (CONS (|SetCategory|)
                                (CONS (|mkCategory| '|domain| |oplist|
                                       NIL NIL NIL)
                                      NIL))
                          |$EmptyEnvironment|))
             (SETELT |cat| 0 |title|)
             |cat|)))))

;--mkMappingFunList(nam,mapForm,e) == [[],e]
;mkMappingFunList(nam,mapForm,e) ==
;  dc := GENSYM()
;  sigFunAlist:=
;    [['_=,[['Boolean],nam ,nam],['ELT,dc,6]],
;       ['coerce,[$Expression,nam],['ELT,dc,7]]]
;  [substitute(nam,dc,substitute("$",'Rep,sigFunAlist)),e]

(DEFUN |mkMappingFunList| (|nam| |mapForm| |e|)
  (declare (ignore |mapForm|))
  (PROG (|dc| |sigFunAlist|)
  (declare (special |$Expression|))
    (RETURN
      (PROGN
        (setq |dc| (GENSYM))
        (setq |sigFunAlist|
                 (CONS (CONS '=
                             (CONS (CONS (CONS '|Boolean| NIL)
                                    (CONS |nam| (CONS |nam| NIL)))
                                   (CONS
                                    (CONS 'ELT
                                     (CONS |dc| (CONS 6 NIL)))
                                    NIL)))
                       (CONS (CONS '|coerce|
                                   (CONS
                                    (CONS |$Expression|
                                     (CONS |nam| NIL))
                                    (CONS
                                     (CONS 'ELT
                                      (CONS |dc| (CONS 7 NIL)))
                                     NIL)))
                             NIL)))
        (CONS (MSUBST |nam| |dc| (MSUBST '$ '|Rep| |sigFunAlist|))
              (CONS |e| NIL))))))

;mkRecordFunList(nam,['Record,:Alist],e) ==
;  len:= #Alist
;--  for (.,a,.) in Alist do
;--    if getmode(a,e) then MOAN("Symbol: ",a,
;--        " must not be both a variable and literal")
;--    e:= put(a,"isLiteral","true",e)
;  dc := GENSYM()
;  sigFunAlist:=
;     --:((a,(A,nam),('XLAM,("$1","$2"),('RECORDELT,"$1",i,len)))
;     --       for i in 0..,(.,a,A) in Alist),
;    [['construct,[nam,:[A for [.,a,A] in Alist]],'mkRecord],
;      ['_=,[['Boolean],nam ,nam],['ELT,dc,6]],
;       ['coerce,[$Expression,nam],['ELT,dc,7]],:
;        [['elt,[A,nam,PNAME a],['XLAM,["$1","$2"],['RECORDELT,"$1",i,len]]]
;            for i in 0.. for [.,a,A] in Alist],:
;          [['setelt,[A,nam,PNAME a,A],['XLAM,["$1","$2","$3"],
;            ['SETRECORDELT,"$1",i, len,"$3"]]]
;              for i in 0.. for [.,a,A] in Alist],:
;                [['copy,[nam,nam],['XLAM,["$1"],['RECORDCOPY,
;                  "$1",len]]]]]
;  [substitute(nam,dc,substitute("$",'Rep,sigFunAlist)),e]

(DEFUN |mkRecordFunList| (|nam| G166460 |e|)
  (PROG (|Alist| |len| |dc| |a| A |sigFunAlist|)
  (declare (special |$Expression|))
    (RETURN
      (SEQ (PROGN
             (setq |Alist| (CDR G166460))
             (setq |len| (|#| |Alist|))
             (setq |dc| (GENSYM))
             (setq |sigFunAlist|
                      (CONS (CONS '|construct|
                                  (CONS (CONS |nam|
                                         (PROG (G166481)
                                           (setq G166481 NIL)
                                           (RETURN
                                             (DO
                                              ((G166487 |Alist|
                                                (CDR G166487))
                                               (G166447 NIL))
                                              ((OR (ATOM G166487)
                                                (PROGN
                                                  (SETQ G166447
                                                   (CAR G166487))
                                                  NIL)
                                                (PROGN
                                                  (PROGN
                                                    (setq |a|
                                                     (CADR G166447))
                                                    (setq A
                                                     (CADDR G166447))
                                                    G166447)
                                                  NIL))
                                               (NREVERSE0 G166481))
                                               (SEQ
                                                (EXIT
                                                 (SETQ G166481
                                                  (CONS A G166481))))))))
                                        (CONS '|mkRecord| NIL)))
                            (CONS (CONS '=
                                        (CONS
                                         (CONS (CONS '|Boolean| NIL)
                                          (CONS |nam| (CONS |nam| NIL)))
                                         (CONS
                                          (CONS 'ELT
                                           (CONS |dc| (CONS 6 NIL)))
                                          NIL)))
                                  (CONS (CONS '|coerce|
                                         (CONS
                                          (CONS |$Expression|
                                           (CONS |nam| NIL))
                                          (CONS
                                           (CONS 'ELT
                                            (CONS |dc| (CONS 7 NIL)))
                                           NIL)))
                                        (APPEND
                                         (PROG (G166500)
                                           (setq G166500 NIL)
                                           (RETURN
                                             (DO
                                              ((|i| 0 (QSADD1 |i|))
                                               (G166507 |Alist|
                                                (CDR G166507))
                                               (G166451 NIL))
                                              ((OR (ATOM G166507)
                                                (PROGN
                                                  (SETQ G166451
                                                   (CAR G166507))
                                                  NIL)
                                                (PROGN
                                                  (PROGN
                                                    (setq |a|
                                                     (CADR G166451))
                                                    (setq A
                                                     (CADDR G166451))
                                                    G166451)
                                                  NIL))
                                               (NREVERSE0 G166500))
                                               (SEQ
                                                (EXIT
                                                 (SETQ G166500
                                                  (CONS
                                                   (CONS '|elt|
                                                    (CONS
                                                     (CONS A
                                                      (CONS |nam|
                                                       (CONS
                                                        (PNAME |a|)
                                                        NIL)))
                                                     (CONS
                                                      (CONS 'XLAM
                                                       (CONS
                                                        (CONS '$1
                                                         (CONS '$2 NIL))
                                                        (CONS
                                                         (CONS
                                                          'RECORDELT
                                                          (CONS '$1
                                                           (CONS |i|
                                                            (CONS |len|
                                                             NIL))))
                                                         NIL)))
                                                      NIL)))
                                                   G166500)))))))
                                         (APPEND
                                          (PROG (G166520)
                                            (setq G166520 NIL)
                                            (RETURN
                                              (DO
                                               ((|i| 0 (QSADD1 |i|))
                                                (G166527 |Alist|
                                                 (CDR G166527))
                                                (G166455 NIL))
                                               ((OR (ATOM G166527)
                                                 (PROGN
                                                   (SETQ G166455
                                                    (CAR G166527))
                                                   NIL)
                                                 (PROGN
                                                   (PROGN
                                                     (setq |a|
                                                      (CADR G166455))
                                                     (setq A
                                                      (CADDR G166455))
                                                     G166455)
                                                   NIL))
                                                (NREVERSE0 G166520))
                                                (SEQ
                                                 (EXIT
                                                  (SETQ G166520
                                                   (CONS
                                                    (CONS '|setelt|
                                                     (CONS
                                                      (CONS A
                                                       (CONS |nam|
                                                        (CONS
                                                         (PNAME |a|)
                                                         (CONS A NIL))))
                                                      (CONS
                                                       (CONS 'XLAM
                                                        (CONS
                                                         (CONS '$1
                                                          (CONS '$2
                                                           (CONS '$3
                                                            NIL)))
                                                         (CONS
                                                          (CONS
                                                           'SETRECORDELT
                                                           (CONS '$1
                                                            (CONS |i|
                                                             (CONS
                                                              |len|
                                                              (CONS '$3
                                                               NIL)))))
                                                          NIL)))
                                                       NIL)))
                                                    G166520)))))))
                                          (CONS
                                           (CONS '|copy|
                                            (CONS
                                             (CONS |nam|
                                              (CONS |nam| NIL))
                                             (CONS
                                              (CONS 'XLAM
                                               (CONS (CONS '$1 NIL)
                                                (CONS
                                                 (CONS 'RECORDCOPY
                                                  (CONS '$1
                                                   (CONS |len| NIL)))
                                                 NIL)))
                                              NIL)))
                                           NIL)))))))
             (CONS (MSUBST |nam| |dc| (MSUBST '$ '|Rep| |sigFunAlist|))
                   (CONS |e| NIL)))))))

;mkNewUnionFunList(name,form is ['Union,:listOfEntries],e) ==
;  dc := name
;  if name = 'Rep then name := '$
;  --2. create coercions from subtypes to subUnion
;  cList:=
;    [['_=,[['Boolean],name ,name],['ELT,dc,6]],
;     ['coerce,[$Expression,name],['ELT,dc,7]],:
;       ("append"/
;        [[['construct,[name,type],['XLAM,["#1"],['CONS,i,"#1"]]],
;          ['elt,[type,name,tag],cdownFun],
;            ['case,['(Boolean),name,tag],
;               ['XLAM,["#1"],['QEQCAR,"#1",i]]]]
;                 for [.,tag,type] in listOfEntries for i in 0..])] where
;                   cdownFun() ==
;                    gg:=GENSYM()
;                    $InteractiveMode =>
;                      ['XLAM,["#1"],['PROG1,['QCDR,"#1"],
;                        ['check_-union,['QEQCAR,"#1",i],type,"#1"]]]
;                    ['XLAM,["#1"],['PROG2,['LET,gg,"#1"],['QCDR,gg],
;                      ['check_-union,['QEQCAR,gg,i],type,gg]]]
;  [cList,e]

(DEFUN |mkNewUnionFunList| (|name| |form| |e|)
  (PROG (|listOfEntries| |dc| |tag| |type| |gg| |cList|)
  (declare (special |$InteractiveMode| |$Expression|))
    (RETURN
      (SEQ (PROGN
             (setq |listOfEntries| (CDR |form|))
             (setq |dc| |name|)
             (COND ((BOOT-EQUAL |name| '|Rep|) (setq |name| '$)))
             (setq |cList|
                      (CONS (CONS '=
                                  (CONS (CONS (CONS '|Boolean| NIL)
                                         (CONS |name|
                                          (CONS |name| NIL)))
                                        (CONS
                                         (CONS 'ELT
                                          (CONS |dc| (CONS 6 NIL)))
                                         NIL)))
                            (CONS (CONS '|coerce|
                                        (CONS
                                         (CONS |$Expression|
                                          (CONS |name| NIL))
                                         (CONS
                                          (CONS 'ELT
                                           (CONS |dc| (CONS 7 NIL)))
                                          NIL)))
                                  (PROG (G166569)
                                    (setq G166569 NIL)
                                    (RETURN
                                      (DO
                                       ((G166578 |listOfEntries|
                                         (CDR G166578))
                                        (G166551 NIL)
                                        (|i| 0 (QSADD1 |i|)))
                                       ((OR (ATOM G166578)
                                         (PROGN
                                           (SETQ G166551
                                            (CAR G166578))
                                           NIL)
                                         (PROGN
                                           (PROGN
                                             (setq |tag|
                                              (CADR G166551))
                                             (setq |type|
                                              (CADDR G166551))
                                             G166551)
                                           NIL))
                                        G166569)
                                        (SEQ
                                         (EXIT
                                          (SETQ G166569
                                           (APPEND G166569
                                            (CONS
                                             (CONS '|construct|
                                              (CONS
                                               (CONS |name|
                                                (CONS |type| NIL))
                                               (CONS
                                                (CONS 'XLAM
                                                 (CONS (CONS '|#1| NIL)
                                                  (CONS
                                                   (CONS 'CONS
                                                    (CONS |i|
                                                     (CONS '|#1| NIL)))
                                                   NIL)))
                                                NIL)))
                                             (CONS
                                              (CONS '|elt|
                                               (CONS
                                                (CONS |type|
                                                 (CONS |name|
                                                  (CONS |tag| NIL)))
                                                (CONS
                                                 (PROGN
                                                   (setq |gg|
                                                    (GENSYM))
                                                   (COND
                                                     (|$InteractiveMode|
                                                      (CONS 'XLAM
                                                       (CONS
                                                        (CONS '|#1|
                                                         NIL)
                                                        (CONS
                                                         (CONS 'PROG1
                                                          (CONS
                                                           (CONS 'QCDR
                                                            (CONS '|#1|
                                                             NIL))
                                                           (CONS
                                                            (CONS
                                                             '|check-union|
                                                             (CONS
                                                              (CONS
                                                               'QEQCAR
                                                               (CONS
                                                                '|#1|
                                                                (CONS
                                                                 |i|
                                                                 NIL)))
                                                              (CONS
                                                               |type|
                                                               (CONS
                                                                '|#1|
                                                                NIL))))
                                                            NIL)))
                                                         NIL))))
                                                     ('T
                                                      (CONS 'XLAM
                                                       (CONS
                                                        (CONS '|#1|
                                                         NIL)
                                                        (CONS
                                                         (CONS 'PROG2
                                                          (CONS
                                                           (CONS 'LET
                                                            (CONS |gg|
                                                             (CONS
                                                              '|#1|
                                                              NIL)))
                                                           (CONS
                                                            (CONS 'QCDR
                                                             (CONS |gg|
                                                              NIL))
                                                            (CONS
                                                             (CONS
                                                              '|check-union|
                                                              (CONS
                                                               (CONS
                                                                'QEQCAR
                                                                (CONS
                                                                 |gg|
                                                                 (CONS
                                                                  |i|
                                                                  NIL)))
                                                               (CONS
                                                                |type|
                                                                (CONS
                                                                 |gg|
                                                                 NIL))))
                                                             NIL))))
                                                         NIL))))))
                                                 NIL)))
                                              (CONS
                                               (CONS '|case|
                                                (CONS
                                                 (CONS '(|Boolean|)
                                                  (CONS |name|
                                                   (CONS |tag| NIL)))
                                                 (CONS
                                                  (CONS 'XLAM
                                                   (CONS
                                                    (CONS '|#1| NIL)
                                                    (CONS
                                                     (CONS 'QEQCAR
                                                      (CONS '|#1|
                                                       (CONS |i| NIL)))
                                                     NIL)))
                                                  NIL)))
                                               NIL)))))))))))))
             (CONS |cList| (CONS |e| NIL)))))))

;mkEnumerationFunList(nam,['Enumeration,:SL],e) ==
;  len:= #SL
;  dc := nam
;  cList :=
;    [nil,
;      ['_=,[['Boolean],nam ,nam],['ELT,dc,6]],
;        ['_^_=,[['Boolean],nam ,nam],['ELT,dc,7]],
;          ['coerce,[nam, ['Symbol]], ['ELT, dc, 8]],
;            ['coerce,[['OutputForm],nam],['ELT,dc, 9]]]
;  [substitute(nam, dc, cList),e]

(DEFUN |mkEnumerationFunList| (|nam| G166597 |e|)
  (PROG (SL |len| |dc| |cList|)
    (RETURN
      (PROGN
        (setq SL (CDR G166597))
        (setq |len| (|#| SL))
        (setq |dc| |nam|)
        (setq |cList|
                 (CONS NIL
                       (CONS (CONS '=
                                   (CONS
                                    (CONS (CONS '|Boolean| NIL)
                                     (CONS |nam| (CONS |nam| NIL)))
                                    (CONS
                                     (CONS 'ELT
                                      (CONS |dc| (CONS 6 NIL)))
                                     NIL)))
                             (CONS (CONS '^=
                                    (CONS
                                     (CONS (CONS '|Boolean| NIL)
                                      (CONS |nam| (CONS |nam| NIL)))
                                     (CONS
                                      (CONS 'ELT
                                       (CONS |dc| (CONS 7 NIL)))
                                      NIL)))
                                   (CONS
                                    (CONS '|coerce|
                                     (CONS
                                      (CONS |nam|
                                       (CONS (CONS '|Symbol| NIL) NIL))
                                      (CONS
                                       (CONS 'ELT
                                        (CONS |dc| (CONS 8 NIL)))
                                       NIL)))
                                    (CONS
                                     (CONS '|coerce|
                                      (CONS
                                       (CONS (CONS '|OutputForm| NIL)
                                        (CONS |nam| NIL))
                                       (CONS
                                        (CONS 'ELT
                                         (CONS |dc| (CONS 9 NIL)))
                                        NIL)))
                                     NIL))))))
        (CONS (MSUBST |nam| |dc| |cList|) (CONS |e| NIL))))))

;mkUnionFunList(op,form is ['Union,:listOfEntries],e) ==
;  first listOfEntries is [":",.,.] => mkNewUnionFunList(op,form,e)
;     -- following call to order is a bug, but needs massive recomp to fix
;  listOfEntries:= orderUnionEntries listOfEntries
;  --1. create representations of subtypes
;  predList:= mkPredList listOfEntries
;  g:=GENSYM()
;  --2. create coercions from subtypes to subUnion
;  cList:=
;   [['_=,[['Boolean],g ,g],['ELT,op,6]],
;    ['coerce,[$Expression,g],['ELT,op,7]],:
;     ("append"/
;      [[['autoCoerce,[g,t],upFun],
;        ['coerce,[t,g],cdownFun],
;        ['autoCoerce,[t,g],downFun], --this should be removed eventually
;        ['case,['(Boolean),g,t],typeFun]]
;          for p in predList for t in listOfEntries])] where
;             upFun() ==
;               p is ['EQCAR,x,n] => ['XLAM,["#1"],['CONS,n,"#1"]]
;               ['XLAM,["#1"],"#1"]
;             cdownFun() ==
;               gg:=GENSYM()
;               if p is ['EQCAR,x,n] then
;                  ref:=['QCDR,gg]
;                  q:= ['QEQCAR, gg, n]
;               else
;                  ref:=gg
;                  q:= substitute(gg,"#1",p)
;               ['XLAM,["#1"],['PROG2,['LET,gg,"#1"],ref,
;                    ['check_-union,q,t,gg]]]
;             downFun() ==
;                p is ['EQCAR,x,.] =>
;                  ['XLAM,["#1"],['QCDR,"#1"]]
;                ['XLAM,["#1"],"#1"]
;             typeFun() ==
;                p is ['EQCAR,x,n] =>
;                  ['XLAM,["#1"],['QEQCAR,x,n]]
;                ['XLAM,["#1"],p]
;  op:=
;    op='Rep => '$
;    op
;  cList:= substitute(op,g,cList)
;  [cList,e]

(DEFUN |mkUnionFunList| (|op| |form| |e|)
  (PROG (|ISTMP#3| |listOfEntries| |predList| |g| |gg| |ref| |q|
            |ISTMP#1| |x| |ISTMP#2| |n| |cList|)
  (declare (special |$Expression|))
    (RETURN
      (SEQ (PROGN
             (setq |listOfEntries| (CDR |form|))
             (COND
               ((PROGN
                  (setq |ISTMP#1| (CAR |listOfEntries|))
                  (AND (CONSP |ISTMP#1|) (EQ (QCAR |ISTMP#1|) '|:|)
                       (PROGN
                         (setq |ISTMP#2| (QCDR |ISTMP#1|))
                         (AND (CONSP |ISTMP#2|)
                              (PROGN
                                (setq |ISTMP#3| (QCDR |ISTMP#2|))
                                (AND (CONSP |ISTMP#3|)
                                     (EQ (QCDR |ISTMP#3|) NIL)))))))
                (|mkNewUnionFunList| |op| |form| |e|))
               ('T
                (setq |listOfEntries|
                         (|orderUnionEntries| |listOfEntries|))
                (setq |predList| (|mkPredList| |listOfEntries|))
                (setq |g| (GENSYM))
                (setq |cList|
                         (CONS (CONS '=
                                     (CONS
                                      (CONS (CONS '|Boolean| NIL)
                                       (CONS |g| (CONS |g| NIL)))
                                      (CONS
                                       (CONS 'ELT
                                        (CONS |op| (CONS 6 NIL)))
                                       NIL)))
                               (CONS (CONS '|coerce|
                                      (CONS
                                       (CONS |$Expression|
                                        (CONS |g| NIL))
                                       (CONS
                                        (CONS 'ELT
                                         (CONS |op| (CONS 7 NIL)))
                                        NIL)))
                                     (PROG (G166754)
                                       (setq G166754 NIL)
                                       (RETURN
                                         (DO
                                          ((G166789 |predList|
                                            (CDR G166789))
                                           (|p| NIL)
                                           (G166790 |listOfEntries|
                                            (CDR G166790))
                                           (|t| NIL))
                                          ((OR (ATOM G166789)
                                            (PROGN
                                              (SETQ |p|
                                               (CAR G166789))
                                              NIL)
                                            (ATOM G166790)
                                            (PROGN
                                              (SETQ |t|
                                               (CAR G166790))
                                              NIL))
                                           G166754)
                                           (SEQ
                                            (EXIT
                                             (SETQ G166754
                                              (APPEND G166754
                                               (CONS
                                                (CONS '|autoCoerce|
                                                 (CONS
                                                  (CONS |g|
                                                   (CONS |t| NIL))
                                                  (CONS
                                                   (COND
                                                     ((AND (CONSP |p|)
                                                       (EQ (QCAR |p|)
                                                        'EQCAR)
                                                       (PROGN
                                                         (setq
                                                          |ISTMP#1|
                                                          (QCDR |p|))
                                                         (AND
                                                          (CONSP
                                                           |ISTMP#1|)
                                                          (PROGN
                                                            (setq
                                                             |x|
                                                             (QCAR
                                                              |ISTMP#1|))
                                                            (setq
                                                             |ISTMP#2|
                                                             (QCDR
                                                              |ISTMP#1|))
                                                            (AND
                                                             (CONSP
                                                              |ISTMP#2|)
                                                             (EQ
                                                              (QCDR
                                                               |ISTMP#2|)
                                                              NIL)
                                                             (PROGN
                                                               (setq
                                                                |n|
                                                                (QCAR
                                                                 |ISTMP#2|))
                                                               'T))))))
                                                      (CONS 'XLAM
                                                       (CONS
                                                        (CONS '|#1|
                                                         NIL)
                                                        (CONS
                                                         (CONS 'CONS
                                                          (CONS |n|
                                                           (CONS '|#1|
                                                            NIL)))
                                                         NIL))))
                                                     ('T
                                                      (CONS 'XLAM
                                                       (CONS
                                                        (CONS '|#1|
                                                         NIL)
                                                        (CONS '|#1|
                                                         NIL)))))
                                                   NIL)))
                                                (CONS
                                                 (CONS '|coerce|
                                                  (CONS
                                                   (CONS |t|
                                                    (CONS |g| NIL))
                                                   (CONS
                                                    (PROGN
                                                      (setq |gg|
                                                       (GENSYM))
                                                      (COND
                                                        ((AND
                                                          (CONSP |p|)
                                                          (EQ
                                                           (QCAR |p|)
                                                           'EQCAR)
                                                          (PROGN
                                                            (setq
                                                             |ISTMP#1|
                                                             (QCDR |p|))
                                                            (AND
                                                             (CONSP
                                                              |ISTMP#1|)
                                                             (PROGN
                                                               (setq
                                                                |x|
                                                                (QCAR
                                                                 |ISTMP#1|))
                                                               (setq
                                                                |ISTMP#2|
                                                                (QCDR
                                                                 |ISTMP#1|))
                                                               (AND
                                                                (CONSP
                                                                 |ISTMP#2|)
                                                                (EQ
                                                                 (QCDR
                                                                  |ISTMP#2|)
                                                                 NIL)
                                                                (PROGN
                                                                  (setq
                                                                   |n|
                                                                   (QCAR
                                                                    |ISTMP#2|))
                                                                  'T))))))
                                                         (setq |ref|
                                                          (CONS 'QCDR
                                                           (CONS |gg|
                                                            NIL)))
                                                         (setq |q|
                                                          (CONS 'QEQCAR
                                                           (CONS |gg|
                                                            (CONS |n|
                                                             NIL)))))
                                                        ('T
                                                         (setq |ref|
                                                          |gg|)
                                                         (setq |q|
                                                          (MSUBST |gg|
                                                           '|#1| |p|))))
                                                      (CONS 'XLAM
                                                       (CONS
                                                        (CONS '|#1|
                                                         NIL)
                                                        (CONS
                                                         (CONS 'PROG2
                                                          (CONS
                                                           (CONS 'LET
                                                            (CONS |gg|
                                                             (CONS
                                                              '|#1|
                                                              NIL)))
                                                           (CONS |ref|
                                                            (CONS
                                                             (CONS
                                                              '|check-union|
                                                              (CONS |q|
                                                               (CONS
                                                                |t|
                                                                (CONS
                                                                 |gg|
                                                                 NIL))))
                                                             NIL))))
                                                         NIL))))
                                                    NIL)))
                                                 (CONS
                                                  (CONS '|autoCoerce|
                                                   (CONS
                                                    (CONS |t|
                                                     (CONS |g| NIL))
                                                    (CONS
                                                     (COND
                                                       ((AND
                                                         (CONSP |p|)
                                                         (EQ (QCAR |p|)
                                                          'EQCAR)
                                                         (PROGN
                                                           (setq
                                                            |ISTMP#1|
                                                            (QCDR |p|))
                                                           (AND
                                                            (CONSP
                                                             |ISTMP#1|)
                                                            (PROGN
                                                              (setq
                                                               |x|
                                                               (QCAR
                                                                |ISTMP#1|))
                                                              (setq
                                                               |ISTMP#2|
                                                               (QCDR
                                                                |ISTMP#1|))
                                                              (AND
                                                               (CONSP
                                                                |ISTMP#2|)
                                                               (EQ
                                                                (QCDR
                                                                 |ISTMP#2|)
                                                                NIL))))))
                                                        (CONS 'XLAM
                                                         (CONS
                                                          (CONS '|#1|
                                                           NIL)
                                                          (CONS
                                                           (CONS 'QCDR
                                                            (CONS '|#1|
                                                             NIL))
                                                           NIL))))
                                                       ('T
                                                        (CONS 'XLAM
                                                         (CONS
                                                          (CONS '|#1|
                                                           NIL)
                                                          (CONS '|#1|
                                                           NIL)))))
                                                     NIL)))
                                                  (CONS
                                                   (CONS '|case|
                                                    (CONS
                                                     (CONS '(|Boolean|)
                                                      (CONS |g|
                                                       (CONS |t| NIL)))
                                                     (CONS
                                                      (COND
                                                        ((AND
                                                          (CONSP |p|)
                                                          (EQ
                                                           (QCAR |p|)
                                                           'EQCAR)
                                                          (PROGN
                                                            (setq
                                                             |ISTMP#1|
                                                             (QCDR |p|))
                                                            (AND
                                                             (CONSP
                                                              |ISTMP#1|)
                                                             (PROGN
                                                               (setq
                                                                |x|
                                                                (QCAR
                                                                 |ISTMP#1|))
                                                               (setq
                                                                |ISTMP#2|
                                                                (QCDR
                                                                 |ISTMP#1|))
                                                               (AND
                                                                (CONSP
                                                                 |ISTMP#2|)
                                                                (EQ
                                                                 (QCDR
                                                                  |ISTMP#2|)
                                                                 NIL)
                                                                (PROGN
                                                                  (setq
                                                                   |n|
                                                                   (QCAR
                                                                    |ISTMP#2|))
                                                                  'T))))))
                                                         (CONS 'XLAM
                                                          (CONS
                                                           (CONS '|#1|
                                                            NIL)
                                                           (CONS
                                                            (CONS
                                                             'QEQCAR
                                                             (CONS |x|
                                                              (CONS |n|
                                                               NIL)))
                                                            NIL))))
                                                        ('T
                                                         (CONS 'XLAM
                                                          (CONS
                                                           (CONS '|#1|
                                                            NIL)
                                                           (CONS |p|
                                                            NIL)))))
                                                      NIL)))
                                                   NIL))))))))))))))
                (setq |op|
                         (COND
                           ((BOOT-EQUAL |op| '|Rep|) '$)
                           ('T |op|)))
                (setq |cList| (MSUBST |op| |g| |cList|))
                (CONS |cList| (CONS |e| NIL)))))))))


\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
