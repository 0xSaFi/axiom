\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp define.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}
(IN-PACKAGE "BOOT" )


;canCacheLocalDomain(dom,elt)==
;   dom is [op,'_$,n] and MEMQ(op,'(ELT QREFELT)) => nil
;   domargsglobal(dom) =>
;        $functorLocalParameters:= [:$functorLocalParameters,dom]
;        PUSH([dom,GENVAR(),[elt,$selector,$funcLocLen]],$usedDomList)
;        $selcount:= $selcount+1
;        $funcLocLen:= $funcLocLen+1
;   nil
;  where
;     domargsglobal(dom) ==
;       dom='_$ => true
;       IDENTP dom => MEMQ(dom,$functorLocalParameters)
;       ATOM dom => true
;       and/[domargsglobal(arg) for arg in rest dom]

(DEFUN |canCacheLocalDomain,domargsglobal| (|dom|)
  (PROG ()
  (declare (special |$functorLocalParameters|))
    (RETURN
      (SEQ (IF (BOOT-EQUAL |dom| '$) (EXIT 'T))
           (IF (IDENTP |dom|)
               (EXIT (member |dom| |$functorLocalParameters|)))
           (IF (ATOM |dom|) (EXIT 'T))
           (EXIT (PROG (G168996)
                   (SPADLET G168996 'T)
                   (RETURN
                     (DO ((G169002 NIL (NULL G168996))
                          (G169003 (CDR |dom|) (CDR G169003))
                          (|arg| NIL))
                         ((OR G169002 (ATOM G169003)
                              (PROGN (SETQ |arg| (CAR G169003)) NIL))
                          G168996)
                       (SEQ (EXIT (SETQ G168996
                                        (AND G168996
                                         (|canCacheLocalDomain,domargsglobal|
                                          |arg|)))))))))))))

(DEFUN |canCacheLocalDomain| (|dom| |elt|)
  (PROG (|op| |ISTMP#1| |ISTMP#2| |n|)
  (declare (special |$funcLocLen| |$selcount| |$usedDomList| |$selector|
                    |$functorLocalParameters|))
    (RETURN
      (COND
        ((AND (PAIRP |dom|)
              (PROGN
                (SPADLET |op| (QCAR |dom|))
                (SPADLET |ISTMP#1| (QCDR |dom|))
                (AND (PAIRP |ISTMP#1|) (EQ (QCAR |ISTMP#1|) '$)
                     (PROGN
                       (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                       (AND (PAIRP |ISTMP#2|) (EQ (QCDR |ISTMP#2|) NIL)
                            (PROGN (SPADLET |n| (QCAR |ISTMP#2|)) 'T)))))
              (member |op| '(ELT QREFELT)))
         NIL)
        ((|canCacheLocalDomain,domargsglobal| |dom|)
         (SPADLET |$functorLocalParameters|
                  (APPEND |$functorLocalParameters| (CONS |dom| NIL)))
         (PUSH (CONS |dom|
                     (CONS (GENVAR)
                           (CONS (CONS |elt|
                                       (CONS |$selector|
                                        (CONS |$funcLocLen| NIL)))
                                 NIL)))
               |$usedDomList|)
         (SPADLET |$selcount| (PLUS |$selcount| 1))
         (SPADLET |$funcLocLen| (PLUS |$funcLocLen| 1)))
        ('T NIL)))))

;listInitialSegment(u,v) ==
;  null u => true
;  null v => nil
;  first u=first v and listInitialSegment(rest u,rest v)

(DEFUN |listInitialSegment| (|u| |v|)
  (COND
    ((NULL |u|) 'T)
    ((NULL |v|) NIL)
    ('T
     (AND (BOOT-EQUAL (CAR |u|) (CAR |v|))
          (|listInitialSegment| (CDR |u|) (CDR |v|))))))


;--% PROCESS FUNCTOR CODE
;
;processFunctor(form,signature,data,localParList,e) ==
;  form is ["CategoryDefaults"] =>
;    error "CategoryDefaults is a reserved name"
;  buildFunctor(form,signature,data,localParList,e)

(DEFUN |processFunctor| (|form| |signature| |data| |localParList| |e|)
  (COND
    ((AND (PAIRP |form|) (EQ (QCDR |form|) NIL)
          (EQ (QCAR |form|) '|CategoryDefaults|))
     (|error| '|CategoryDefaults is a reserved name|))
    ('T (|buildFunctor| |form| |signature| |data| |localParList| |e|))))

;isMacro(x,e) ==
;  x is ['DEF,[op,:args],signature,specialCases,body] and
;    null get(op,'modemap,e) and null args and null get(op,'mode,e)
;      and signature is [nil] => body

(DEFUN |isMacro| (|x| |e|)
  (PROG (|ISTMP#1| |ISTMP#2| |op| |args| |ISTMP#3| |signature|
            |ISTMP#4| |specialCases| |ISTMP#5| |body|)
    (RETURN
      (SEQ (COND
             ((AND (PAIRP |x|) (EQ (QCAR |x|) 'DEF)
                   (PROGN
                     (SPADLET |ISTMP#1| (QCDR |x|))
                     (AND (PAIRP |ISTMP#1|)
                          (PROGN
                            (SPADLET |ISTMP#2| (QCAR |ISTMP#1|))
                            (AND (PAIRP |ISTMP#2|)
                                 (PROGN
                                   (SPADLET |op| (QCAR |ISTMP#2|))
                                   (SPADLET |args| (QCDR |ISTMP#2|))
                                   'T)))
                          (PROGN
                            (SPADLET |ISTMP#3| (QCDR |ISTMP#1|))
                            (AND (PAIRP |ISTMP#3|)
                                 (PROGN
                                   (SPADLET |signature|
                                    (QCAR |ISTMP#3|))
                                   (SPADLET |ISTMP#4| (QCDR |ISTMP#3|))
                                   (AND (PAIRP |ISTMP#4|)
                                    (PROGN
                                      (SPADLET |specialCases|
                                       (QCAR |ISTMP#4|))
                                      (SPADLET |ISTMP#5|
                                       (QCDR |ISTMP#4|))
                                      (AND (PAIRP |ISTMP#5|)
                                       (EQ (QCDR |ISTMP#5|) NIL)
                                       (PROGN
                                         (SPADLET |body|
                                          (QCAR |ISTMP#5|))
                                         'T)))))))))
                   (NULL (|get| |op| '|modemap| |e|)) (NULL |args|)
                   (NULL (|get| |op| '|mode| |e|)) (PAIRP |signature|)
                   (EQ (QCDR |signature|) NIL)
                   (NULL (QCAR |signature|)))
              (EXIT |body|)))))))

;doItIf(item is [.,p,x,y],$predl,$e) ==
;  olde:= $e
;  [p',.,$e]:= comp(p,$Boolean,$e) or userError ['"not a Boolean:",p]
;  oldFLP:=$functorLocalParameters
;  if x^="noBranch" then
;    compSingleCapsuleItem(x,$predl,getSuccessEnvironment(p,$e))
;    x':=localExtras(oldFLP)
;          where localExtras(oldFLP) ==
;            EQ(oldFLP,$functorLocalParameters) => NIL
;            flp1:=$functorLocalParameters
;            oldFLP':=oldFLP
;            n:=0
;            while oldFLP' repeat
;              oldFLP':=CDR oldFLP'
;              flp1:=CDR flp1
;              n:=n+1
;            -- Now we have to add code to compile all the elements
;            -- of functorLocalParameters that were added during the
;            -- conditional compilation
;            nils:=ans:=[]
;            for u in flp1 repeat -- is =u form always an ATOM?
;              if ATOM u or (or/[v is [.,=u,:.] for v in $getDomainCode])
;                then
;                  nils:=[u,:nils]
;                else
;                  gv := GENSYM()
;                  ans:=[['LET,gv,u],:ans]
;                  nils:=[gv,:nils]
;              n:=n+1
;            $functorLocalParameters:=[:oldFLP,:NREVERSE nils]
;            NREVERSE ans
;  oldFLP:=$functorLocalParameters
;  if y^="noBranch" then
;    compSingleCapsuleItem(y,$predl,getInverseEnvironment(p,olde))
;    y':=localExtras(oldFLP)
;  RPLACA(item,"COND")
;  RPLACD(item,[[p',x,:x'],['(QUOTE T),y,:y']])

(DEFUN |doItIf,localExtras| (|oldFLP|)
  (PROG (|oldFLP'| |flp1| |ISTMP#1| |gv| |ans| |nils| |n|)
  (declare (special |$functorLocalParameters| |$getDomainCode|))
    (RETURN
      (SEQ (IF (EQ |oldFLP| |$functorLocalParameters|) (EXIT NIL))
           (SPADLET |flp1| |$functorLocalParameters|)
           (SPADLET |oldFLP'| |oldFLP|) (SPADLET |n| 0)
           (DO () ((NULL |oldFLP'|) NIL)
             (SEQ (SPADLET |oldFLP'| (CDR |oldFLP'|))
                  (SPADLET |flp1| (CDR |flp1|))
                  (EXIT (SPADLET |n| (PLUS |n| 1)))))
           (SPADLET |nils| (SPADLET |ans| NIL))
           (DO ((G170185 |flp1| (CDR G170185)) (|u| NIL))
               ((OR (ATOM G170185)
                    (PROGN (SETQ |u| (CAR G170185)) NIL))
                NIL)
             (SEQ (IF (OR (ATOM |u|)
                          (PROG (G170191)
                            (SPADLET G170191 NIL)
                            (RETURN
                              (DO ((G170199 NIL G170191)
                                   (G170200 |$getDomainCode|
                                    (CDR G170200))
                                   (|v| NIL))
                                  ((OR G170199 (ATOM G170200)
                                    (PROGN
                                      (SETQ |v| (CAR G170200))
                                      NIL))
                                   G170191)
                                (SEQ (EXIT
                                      (SETQ G170191
                                       (OR G170191
                                        (AND (PAIRP |v|)
                                         (PROGN
                                           (SPADLET |ISTMP#1|
                                            (QCDR |v|))
                                           (AND (PAIRP |ISTMP#1|)
                                            (EQUAL (QCAR |ISTMP#1|)
                                             |u|))))))))))))
                      (SPADLET |nils| (CONS |u| |nils|))
                      (SEQ (SPADLET |gv| (GENSYM))
                           (SPADLET |ans|
                                    (CONS
                                     (CONS 'LET
                                      (CONS |gv| (CONS |u| NIL)))
                                     |ans|))
                           (EXIT (SPADLET |nils| (CONS |gv| |nils|)))))
                  (EXIT (SPADLET |n| (PLUS |n| 1)))))
           (SPADLET |$functorLocalParameters|
                    (APPEND |oldFLP| (NREVERSE |nils|)))
           (EXIT (NREVERSE |ans|))))))

(DEFUN |doItIf| (|item| |$predl| |$e|)
  (DECLARE (SPECIAL |$predl| |$e|))
  (PROG (|p| |x| |y| |olde| |LETTMP#1| |p'| |x'| |oldFLP| |y'|)
  (declare (special |$functorLocalParameters|))
    (RETURN
      (PROGN
        (SPADLET |p| (CADR |item|))
        (SPADLET |x| (CADDR |item|))
        (SPADLET |y| (CADDDR |item|))
        (SPADLET |olde| |$e|)
        (SPADLET |LETTMP#1|
                 (OR (|comp| |p| |$Boolean| |$e|)
                     (|userError|
                         (CONS "not a Boolean:"
                               (CONS |p| NIL)))))
        (SPADLET |p'| (CAR |LETTMP#1|))
        (SPADLET |$e| (CADDR |LETTMP#1|))
        (SPADLET |oldFLP| |$functorLocalParameters|)
        (COND
          ((NEQUAL |x| '|noBranch|)
           (|compSingleCapsuleItem| |x| |$predl|
               (|getSuccessEnvironment| |p| |$e|))
           (SPADLET |x'| (|doItIf,localExtras| |oldFLP|))))
        (SPADLET |oldFLP| |$functorLocalParameters|)
        (COND
          ((NEQUAL |y| '|noBranch|)
           (|compSingleCapsuleItem| |y| |$predl|
               (|getInverseEnvironment| |p| |olde|))
           (SPADLET |y'| (|doItIf,localExtras| |oldFLP|))))
        (RPLACA |item| 'COND)
        (RPLACD |item|
                (CONS (CONS |p'| (CONS |x| |x'|))
                      (CONS (CONS ''T (CONS |y| |y'|)) NIL)))))))

;--compSingleCapsuleIf(x,predl,e,$functorLocalParameters) ==
;--  compSingleCapsuleItem(x,predl,e)
;
;--% CATEGORY AND DOMAIN FUNCTIONS
;compContained(["CONTAINED",a,b],m,e) ==
;  [a,ma,e]:= comp(a,$EmptyMode,e) or return nil
;  [b,mb,e]:= comp(b,$EmptyMode,e) or return nil
;  isCategoryForm(ma,e) and isCategoryForm(mb,e) =>
;    (T:= [["CONTAINED",a,b],$Boolean,e]; convert(T,m))
;  nil

(DEFUN |compContained| (G170279 |m| |e|)
  (PROG (|a| |ma| |LETTMP#1| |b| |mb| T$)
  (declare (special |$Boolean| |$EmptyMode|))
    (RETURN
      (PROGN
        (COND ((EQ (CAR G170279) 'CONTAINED) (CAR G170279)))
        (SPADLET |a| (CADR G170279))
        (SPADLET |b| (CADDR G170279))
        (SPADLET |LETTMP#1|
                 (OR (|comp| |a| |$EmptyMode| |e|) (RETURN NIL)))
        (SPADLET |a| (CAR |LETTMP#1|))
        (SPADLET |ma| (CADR |LETTMP#1|))
        (SPADLET |e| (CADDR |LETTMP#1|))
        (SPADLET |LETTMP#1|
                 (OR (|comp| |b| |$EmptyMode| |e|) (RETURN NIL)))
        (SPADLET |b| (CAR |LETTMP#1|))
        (SPADLET |mb| (CADR |LETTMP#1|))
        (SPADLET |e| (CADDR |LETTMP#1|))
        (COND
          ((AND (|isCategoryForm| |ma| |e|)
                (|isCategoryForm| |mb| |e|))
           (SPADLET T$
                    (CONS (CONS 'CONTAINED (CONS |a| (CONS |b| NIL)))
                          (CONS |$Boolean| (CONS |e| NIL))))
           (|convert| T$ |m|))
          ('T NIL))))))

;quotifyCategoryArgument x == MKQ x

;(DEFUN |quotifyCategoryArgument| (|x|) (MKQ |x|))

;makeCategoryForm(c,e) ==
;  not isCategoryForm(c,e) => nil
;  [x,m,e]:= compOrCroak(c,$EmptyMode,e)
;  [x,e]

(DEFUN |makeCategoryForm| (|c| |e|)
  (PROG (|LETTMP#1| |x| |m|)
  (declare (special |$EmptyMode|))
    (RETURN
      (COND
        ((NULL (|isCategoryForm| |c| |e|)) NIL)
        ('T (SPADLET |LETTMP#1| (|compOrCroak| |c| |$EmptyMode| |e|))
         (SPADLET |x| (CAR |LETTMP#1|)) (SPADLET |m| (CADR |LETTMP#1|))
         (SPADLET |e| (CADDR |LETTMP#1|)) (CONS |x| (CONS |e| NIL)))))))

;compCategory(x,m,e) ==
;  $TOP__LEVEL: local:= true
;  (m:= resolve(m,["Category"]))=["Category"] and x is ['CATEGORY,
;    domainOrPackage,:l] =>
;      $sigList: local := nil
;      $atList: local := nil
;      $sigList:= $atList:= nil
;      for x in l repeat compCategoryItem(x,nil)
;      rep:= mkExplicitCategoryFunction(domainOrPackage,$sigList,$atList)
;    --if inside compDefineCategory, provide for category argument substitution
;      [rep,m,e]
;  systemErrorHere '"compCategory"

(DEFUN |compCategory| (|x| |m| |e|)
  (PROG ($TOP_LEVEL |$sigList| |$atList| |ISTMP#1| |domainOrPackage|
            |l| |rep|)
    (DECLARE (SPECIAL $TOP_LEVEL |$sigList| |$atList|))
    (RETURN
      (SEQ (PROGN
             (SPADLET $TOP_LEVEL 'T)
             (COND
               ((AND (BOOT-EQUAL
                         (SPADLET |m|
                                  (|resolve| |m|
                                      (CONS '|Category| NIL)))
                         (CONS '|Category| NIL))
                     (PAIRP |x|) (EQ (QCAR |x|) 'CATEGORY)
                     (PROGN
                       (SPADLET |ISTMP#1| (QCDR |x|))
                       (AND (PAIRP |ISTMP#1|)
                            (PROGN
                              (SPADLET |domainOrPackage|
                                       (QCAR |ISTMP#1|))
                              (SPADLET |l| (QCDR |ISTMP#1|))
                              'T))))
                (SPADLET |$sigList| NIL) (SPADLET |$atList| NIL)
                (SPADLET |$sigList| (SPADLET |$atList| NIL))
                (DO ((G170487 |l| (CDR G170487)) (|x| NIL))
                    ((OR (ATOM G170487)
                         (PROGN (SETQ |x| (CAR G170487)) NIL))
                     NIL)
                  (SEQ (EXIT (|compCategoryItem| |x| NIL))))
                (SPADLET |rep|
                         (|mkExplicitCategoryFunction|
                             |domainOrPackage| |$sigList| |$atList|))
                (CONS |rep| (CONS |m| (CONS |e| NIL))))
               ('T (|systemErrorHere| "compCategory"))))))))

;mkExplicitCategoryFunction(domainOrPackage,sigList,atList) ==
;  body:=
;    ["mkCategory",MKQ domainOrPackage,['LIST,:REVERSE sigList],['LIST,:
;      REVERSE atList],MKQ domList,nil] where
;        domList() ==
;          ("UNION"/[fn sig for ["QUOTE",[[.,sig,:.],:.]] in sigList]) where
;            fn sig == [D for D in sig | mustInstantiate D]
;  parameters:=
;    REMDUP
;      ("append"/
;        [[x for x in sig | IDENTP x and x^='_$]
;          for ["QUOTE",[[.,sig,:.],:.]] in sigList])
;  wrapDomainSub(parameters,body)

(DEFUN |mkExplicitCategoryFunction,fn| (|sig|)
  (PROG ()
    (RETURN
      (SEQ (PROG (G170517)
             (SPADLET G170517 NIL)
             (RETURN
               (DO ((G170523 |sig| (CDR G170523)) (D NIL))
                   ((OR (ATOM G170523)
                        (PROGN (SETQ D (CAR G170523)) NIL))
                    (NREVERSE0 G170517))
                 (SEQ (EXIT (COND
                              ((|mustInstantiate| D)
                               (SETQ G170517 (CONS D G170517)))))))))))))

(DEFUN |mkExplicitCategoryFunction|
       (|domainOrPackage| |sigList| |atList|)
  (PROG (|body| |sig| |parameters|)
    (RETURN
      (SEQ (PROGN
             (SPADLET |body|
                      (CONS '|mkCategory|
                            (CONS (MKQ |domainOrPackage|)
                                  (CONS (CONS 'LIST
                                         (REVERSE |sigList|))
                                        (CONS
                                         (CONS 'LIST
                                          (REVERSE |atList|))
                                         (CONS
                                          (MKQ
                                           (PROG (G170546)
                                             (SPADLET G170546 NIL)
                                             (RETURN
                                               (DO
                                                ((G170552 |sigList|
                                                  (CDR G170552))
                                                 (G170533 NIL))
                                                ((OR (ATOM G170552)
                                                  (PROGN
                                                    (SETQ G170533
                                                     (CAR G170552))
                                                    NIL)
                                                  (PROGN
                                                    (PROGN
                                                      (SPADLET |sig|
                                                       (CAR
                                                        (CDAADR
                                                         G170533)))
                                                      G170533)
                                                    NIL))
                                                 G170546)
                                                 (SEQ
                                                  (EXIT
                                                   (SETQ G170546
                                                    (|union| G170546
                                                     (|mkExplicitCategoryFunction,fn|
                                                      |sig|)))))))))
                                          (CONS NIL NIL)))))))
             (SPADLET |parameters|
                      (REMDUP (PROG (G170559)
                                (SPADLET G170559 NIL)
                                (RETURN
                                  (DO ((G170565 |sigList|
                                        (CDR G170565))
                                       (G170542 NIL))
                                      ((OR (ATOM G170565)
                                        (PROGN
                                          (SETQ G170542
                                           (CAR G170565))
                                          NIL)
                                        (PROGN
                                          (PROGN
                                            (SPADLET |sig|
                                             (CAR (CDAADR G170542)))
                                            G170542)
                                          NIL))
                                       G170559)
                                    (SEQ
                                     (EXIT
                                      (SETQ G170559
                                       (APPEND G170559
                                        (PROG (G170577)
                                          (SPADLET G170577 NIL)
                                          (RETURN
                                            (DO
                                             ((G170583 |sig|
                                               (CDR G170583))
                                              (|x| NIL))
                                             ((OR (ATOM G170583)
                                               (PROGN
                                                 (SETQ |x|
                                                  (CAR G170583))
                                                 NIL))
                                              (NREVERSE0 G170577))
                                              (SEQ
                                               (EXIT
                                                (COND
                                                  ((AND (IDENTP |x|)
                                                    (NEQUAL |x| '$))
                                                   (SETQ G170577
                                                    (CONS |x|
                                                    G170577))))))))))))))))))
             (|wrapDomainSub| |parameters| |body|))))))

;wrapDomainSub(parameters,x) ==
;   ["DomainSubstitutionMacro",parameters,x]

(DEFUN |wrapDomainSub| (|parameters| |x|)
  (CONS '|DomainSubstitutionMacro| (CONS |parameters| (CONS |x| NIL))))

;mustInstantiate D ==
; D is [fn,:.] and ^(member(fn,$DummyFunctorNames) or GET(fn,"makeFunctionList"))

(DEFUN |mustInstantiate| (D)
  (PROG (|fn|)
  (declare (special |$DummyFunctorNames|))
    (RETURN
      (AND (PAIRP D) (PROGN (SPADLET |fn| (QCAR D)) 'T)
           (NULL (OR (member |fn| |$DummyFunctorNames|)
                     (GETL |fn| '|makeFunctionList|)))))))

;DomainSubstitutionFunction(parameters,body) ==
;  --see definition of DomainSubstitutionMacro in SPAD LISP
;  if parameters then
;    (body:= Subst(parameters,body)) where
;      Subst(parameters,body) ==
;        ATOM body =>
;          MEMQ(body,parameters) => MKQ body
;          body
;        MEMBER(body,parameters) =>
;          g:=GENSYM()
;          $extraParms:=PUSH([g,:body],$extraParms)
;           --Used in SetVector12 to generate a substitution list
;           --bound in buildFunctor
;           --For categories, bound and used in compDefineCategory
;          MKQ g
;        first body="QUOTE" => body
;        PAIRP $definition and
;            isFunctor first body and
;              first body ^= first $definition
;          =>  ['QUOTE,optimize body]
;        [Subst(parameters,u) for u in body]
;  not (body is ["Join",:.]) => body
;  atom $definition => body
;  null rest $definition => body
;           --should not bother if it will only be called once
;  name:= INTERN STRCONC(KAR $definition,";CAT")
;  SETANDFILE(name,nil)
;  body:= ["COND",[name],['(QUOTE T),['SETQ,name,body]]]
;  body

(DEFUN |DomainSubstitutionFunction,Subst| (|parameters| |body|)
  (PROG (|g|)
  (declare (special |$definition| |$extraParms|))
    (RETURN
      (SEQ (IF (ATOM |body|)
               (EXIT (SEQ (IF (member |body| |parameters|)
                              (EXIT (MKQ |body|)))
                          (EXIT |body|))))
           (IF (|member| |body| |parameters|)
               (EXIT (SEQ (SPADLET |g| (GENSYM))
                          (SPADLET |$extraParms|
                                   (PUSH (CONS |g| |body|)
                                    |$extraParms|))
                          (EXIT (MKQ |g|)))))
           (IF (BOOT-EQUAL (CAR |body|) 'QUOTE) (EXIT |body|))
           (IF (AND (AND (PAIRP |$definition|)
                         (|isFunctor| (CAR |body|)))
                    (NEQUAL (CAR |body|) (CAR |$definition|)))
               (EXIT (CONS 'QUOTE (CONS (|optimize| |body|) NIL))))
           (EXIT (PROG (G170613)
                   (SPADLET G170613 NIL)
                   (RETURN
                     (DO ((G170618 |body| (CDR G170618)) (|u| NIL))
                         ((OR (ATOM G170618)
                              (PROGN (SETQ |u| (CAR G170618)) NIL))
                          (NREVERSE0 G170613))
                       (SEQ (EXIT (SETQ G170613
                                        (CONS
                                         (|DomainSubstitutionFunction,Subst|
                                          |parameters| |u|)
                                         G170613))))))))))))

(DEFUN |DomainSubstitutionFunction| (|parameters| |body|)
  (PROG (|name|)
  (declare (special |$definition|))
    (RETURN
      (PROGN
        (COND
          (|parameters|
              (SPADLET |body|
                       (|DomainSubstitutionFunction,Subst| |parameters|
                           |body|))))
        (COND
          ((NULL (AND (PAIRP |body|) (EQ (QCAR |body|) '|Join|)))
           |body|)
          ((ATOM |$definition|) |body|)
          ((NULL (CDR |$definition|)) |body|)
          ('T
           (SPADLET |name|
                    (INTERN (STRCONC (KAR |$definition|) '|;CAT|)))
           (SETANDFILE |name| NIL)
           (SPADLET |body|
                    (CONS 'COND
                          (CONS (CONS |name| NIL)
                                (CONS (CONS ''T
                                       (CONS
                                        (CONS 'SETQ
                                         (CONS |name|
                                          (CONS |body| NIL)))
                                        NIL))
                                      NIL))))
           |body|))))))

;compCategoryItem(x,predl) ==
;  x is nil => nil
;  --1. if x is a conditional expression, recurse; otherwise, form the predicate
;  x is ["COND",[p,e]] =>
;    predl':= [p,:predl]
;    e is ["PROGN",:l] => for y in l repeat compCategoryItem(y,predl')
;    compCategoryItem(e,predl')
;  x is ["IF",a,b,c] =>
;    predl':= [a,:predl]
;    if b^="noBranch" then
;      b is ["PROGN",:l] => for y in l repeat compCategoryItem(y,predl')
;      compCategoryItem(b,predl')
;    c="noBranch" => nil
;    predl':= [["not",a],:predl]
;    c is ["PROGN",:l] => for y in l repeat compCategoryItem(y,predl')
;    compCategoryItem(c,predl')
;  pred:= (predl => MKPF(predl,"AND"); true)
;
;  --2. if attribute, push it and return
;  x is ["ATTRIBUTE",y] => PUSH(MKQ [y,pred],$atList)
;
;  --3. it may be a list, with PROGN as the CAR, and some information as the CDR
;  x is ["PROGN",:l] => for u in l repeat compCategoryItem(u,predl)
;
;-- 4. otherwise, x gives a signature for a
;--    single operator name or a list of names; if a list of names,
;--    recurse
;  ["SIGNATURE",op,:sig]:= x
;  null atom op =>
;    for y in op repeat compCategoryItem(["SIGNATURE",y,:sig],predl)
;
;  --4. branch on a single type or a signature %with source and target
;  PUSH(MKQ [rest x,pred],$sigList)
;

(DEFUN |compCategoryItem| (|x| |predl|)
  (PROG (|p| |e| |a| |ISTMP#2| |b| |ISTMP#3| |c| |predl'| |pred|
             |ISTMP#1| |y| |l| |op| |sig|)
  (declare (special |$sigList| |$atList|))
    (RETURN
      (SEQ (COND
             ((NULL |x|) NIL)
             ((AND (PAIRP |x|) (EQ (QCAR |x|) 'COND)
                   (PROGN
                     (SPADLET |ISTMP#1| (QCDR |x|))
                     (AND (PAIRP |ISTMP#1|) (EQ (QCDR |ISTMP#1|) NIL)
                          (PROGN
                            (SPADLET |ISTMP#2| (QCAR |ISTMP#1|))
                            (AND (PAIRP |ISTMP#2|)
                                 (PROGN
                                   (SPADLET |p| (QCAR |ISTMP#2|))
                                   (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                                   (AND (PAIRP |ISTMP#3|)
                                    (EQ (QCDR |ISTMP#3|) NIL)
                                    (PROGN
                                      (SPADLET |e| (QCAR |ISTMP#3|))
                                      'T))))))))
              (SPADLET |predl'| (CONS |p| |predl|))
              (COND
                ((AND (PAIRP |e|) (EQ (QCAR |e|) 'PROGN)
                      (PROGN (SPADLET |l| (QCDR |e|)) 'T))
                 (DO ((G170713 |l| (CDR G170713)) (|y| NIL))
                     ((OR (ATOM G170713)
                          (PROGN (SETQ |y| (CAR G170713)) NIL))
                      NIL)
                   (SEQ (EXIT (|compCategoryItem| |y| |predl'|)))))
                ('T (|compCategoryItem| |e| |predl'|))))
             ((AND (PAIRP |x|) (EQ (QCAR |x|) 'IF)
                   (PROGN
                     (SPADLET |ISTMP#1| (QCDR |x|))
                     (AND (PAIRP |ISTMP#1|)
                          (PROGN
                            (SPADLET |a| (QCAR |ISTMP#1|))
                            (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                            (AND (PAIRP |ISTMP#2|)
                                 (PROGN
                                   (SPADLET |b| (QCAR |ISTMP#2|))
                                   (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                                   (AND (PAIRP |ISTMP#3|)
                                    (EQ (QCDR |ISTMP#3|) NIL)
                                    (PROGN
                                      (SPADLET |c| (QCAR |ISTMP#3|))
                                      'T))))))))
              (SPADLET |predl'| (CONS |a| |predl|))
              (COND
                ((NEQUAL |b| '|noBranch|)
                 (COND
                   ((AND (PAIRP |b|) (EQ (QCAR |b|) 'PROGN)
                         (PROGN (SPADLET |l| (QCDR |b|)) 'T))
                    (DO ((G170722 |l| (CDR G170722)) (|y| NIL))
                        ((OR (ATOM G170722)
                             (PROGN (SETQ |y| (CAR G170722)) NIL))
                         NIL)
                      (SEQ (EXIT (|compCategoryItem| |y| |predl'|)))))
                   ('T (|compCategoryItem| |b| |predl'|)))))
              (COND
                ((BOOT-EQUAL |c| '|noBranch|) NIL)
                ('T
                 (SPADLET |predl'|
                          (CONS (CONS '|not| (CONS |a| NIL)) |predl|))
                 (COND
                   ((AND (PAIRP |c|) (EQ (QCAR |c|) 'PROGN)
                         (PROGN (SPADLET |l| (QCDR |c|)) 'T))
                    (DO ((G170731 |l| (CDR G170731)) (|y| NIL))
                        ((OR (ATOM G170731)
                             (PROGN (SETQ |y| (CAR G170731)) NIL))
                         NIL)
                      (SEQ (EXIT (|compCategoryItem| |y| |predl'|)))))
                   ('T (|compCategoryItem| |c| |predl'|))))))
             ('T
              (SPADLET |pred|
                       (COND (|predl| (MKPF |predl| 'AND)) ('T 'T)))
              (COND
                ((AND (PAIRP |x|) (EQ (QCAR |x|) 'ATTRIBUTE)
                      (PROGN
                        (SPADLET |ISTMP#1| (QCDR |x|))
                        (AND (PAIRP |ISTMP#1|)
                             (EQ (QCDR |ISTMP#1|) NIL)
                             (PROGN (SPADLET |y| (QCAR |ISTMP#1|)) 'T))))
                 (PUSH (MKQ (CONS |y| (CONS |pred| NIL))) |$atList|))
                ((AND (PAIRP |x|) (EQ (QCAR |x|) 'PROGN)
                      (PROGN (SPADLET |l| (QCDR |x|)) 'T))
                 (DO ((G170740 |l| (CDR G170740)) (|u| NIL))
                     ((OR (ATOM G170740)
                          (PROGN (SETQ |u| (CAR G170740)) NIL))
                      NIL)
                   (SEQ (EXIT (|compCategoryItem| |u| |predl|)))))
                ('T (COND ((EQ (CAR |x|) 'SIGNATURE) (CAR |x|)))
                 (SPADLET |op| (CADR |x|)) (SPADLET |sig| (CDDR |x|))
                 (COND
                   ((NULL (ATOM |op|))
                    (DO ((G170749 |op| (CDR G170749)) (|y| NIL))
                        ((OR (ATOM G170749)
                             (PROGN (SETQ |y| (CAR G170749)) NIL))
                         NIL)
                      (SEQ (EXIT (|compCategoryItem|
                                     (CONS 'SIGNATURE (CONS |y| |sig|))
                                     |predl|)))))
                   ('T
                    (PUSH (MKQ (CONS (CDR |x|) (CONS |pred| NIL)))
                          |$sigList|)))))))))))

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
