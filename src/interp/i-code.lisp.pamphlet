\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp i-code.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}
(IN-PACKAGE "BOOT" )

;--% Interpreter Code Generation Routines
;--Modified by JHD 9/9/93 to fix a problem with coerces inside
;--interpreter functions being used as mappings. They were being
;--handled with $useCoerceOrCroak being NIL, and therefore internal
;--coercions were not correctly handled. Fix: remove dependence
;--on $useCoerceOrCroak, and test explicitly for Mapping types.
;--% COERCE
;intCodeGenCOERCE(triple,t2) ==
;  -- NOTE: returns a triple
;  t1 := objMode triple
;  t1 = $EmptyMode => NIL
;  t1 = t2 => triple
;  val := objVal triple
;  -- if request is for a coerce to t2 from a coerce from
;  -- to to t1, and t1 = Void or canCoerce(t0,t2), then optimize
;  (val is ['coerceOrCroak,trip,t1', .]) and
;    (t0 := objCodeMode trip) and ([.,val0] := objCodeVal trip) and
;      ( (t1 = $Void) or canCoerceFrom(removeQuote t0,t2) ) =>
;         -- just generate code for coercion, don't coerce constants
;         -- might be too big
;         intCodeGenCOERCE(objNew(val0, removeQuote t0), t2)
;  val is ['THROW,label,code] =>
;    if label is ['QUOTE, l] then label := l
;    null($compilingMap) or (label ^= mapCatchName($mapName)) =>
;      objNew(['THROW,label,wrapped2Quote objVal
;        intCodeGenCOERCE(objNew(code,t1),t2)],t2)
;    -- we have a return statement. just send it back as is
;    objNew(val,t2)
;  val is ['PROGN,:code,lastCode] =>
;    objNew(['PROGN,:code,wrapped2Quote objVal
;      intCodeGenCOERCE(objNew(lastCode,t1),t2)],t2)
;  val is ['COND,:conds] =>
;    objNew(['COND,
;      :[[p,wrapped2Quote objVal intCodeGenCOERCE(objNew(v,t1),t2)]
;        for [p,v] in conds]],t2)
;  -- specially handle subdomain
;  absolutelyCanCoerceByCheating(t1,t2) => objNew(val,t2)
;  -- specially handle coerce to Any
;  t2 = '(Any) => objNew(['CONS,MKQ t1,val],t2)
;  -- optimize coerces from Any
;  (t1 = '(Any)) and (val is [ ='CONS,t1',val']) =>
;    intCodeGenCOERCE(objNew(val',removeQuote t1'),t2)
;  -- specially handle coerce from Equation to Boolean
;  (t1 is ['Equation,:.]) and (t2 = $Boolean) =>
;    coerceByFunction(triple,t2)
;  -- next is hack for if-then-elses
;  (t1 = '$NoValueMode) and (val is ['COND,pred]) =>
;    code :=
;      ['COND,pred,
;        [MKQ true,['throwKeyedMsg,MKQ "S2IM0016",MKQ $mapName]]]
;    objNew(code,t2)
;  -- optimize coerces to Expression
;  t2 = $OutputForm =>
;    coerceByFunction(triple,t2)
;  isSubDomain(t1, $Integer) =>
;    intCodeGenCOERCE(objNew(val, $Integer), t2)
;  -- generate code
;  -- 1. See if the coercion will go through (absolutely)
;  --    Must be careful about variables or else things like
;  --    P I --> P[x] P I might not have the x in the original polynomial
;  --    put in the correct place
;  (not containsVariables(t2)) and canCoerceByFunction(t1,t2) =>
;    -- try coerceByFunction
;    (not canCoerceByMap(t1,t2)) and
;      (code := coerceByFunction(triple,t2)) => code
;    intCodeGenCoerce1(val,t1,t2)
;  -- 2. Set up a failure point otherwise
;  intCodeGenCoerce1(val,t1,t2)

(defun |intCodeGenCOERCE| (triple t2)
  (prog (t1 val trip tmp3 t0 let1 val0 z label
              lastCode conds p v t1q tmp2 valq
              tmp1 pred code)
    (declare (special |$Integer| |$OutputForm| |$mapName|
                      |$NoValueMode| |$Boolean| |$compilingMap| |$Void|
                      |$EmptyMode|))
    (return
      (seq (progn
             (setq t1 (|objMode| triple))
             (cond
               ((boot-equal t1 |$EmptyMode|) nil)
               ((boot-equal t1 t2) triple)
               (t (setq val (|objVal| triple))
                (cond
                  ((and (consp val)
                        (eq (qcar val) '|coerceOrCroak|)
                        (progn
                          (setq tmp1 (qcdr val))
                          (and (consp tmp1)
                               (progn
                                 (setq trip (qcar tmp1))
                                 (setq tmp2 (qcdr tmp1))
                                 (and (consp tmp2)
                                      (progn
                                        (setq t1q
                                         (qcar tmp2))
                                        (setq tmp3
                                         (qcdr tmp2))
                                        (and (consp tmp3)
                                         (eq (qcdr tmp3) nil)))))))
                        (setq t0 (|objCodeMode| trip))
                        (progn
                          (setq let1 (|objCodeVal| trip))
                          (setq val0 (CADR let1))
                          let1)
                        (or (boot-equal t1 |$Void|)
                            (|canCoerceFrom| (|removeQuote| t0) t2)))
                   (|intCodeGenCOERCE|
                       (mkObj val0 (|removeQuote| t0)) t2))
                  ((and (consp val) (eq (qcar val) 'throw)
                        (PROGN
                          (setq tmp1 (qcdr val))
                          (and (consp tmp1)
                               (progn
                                 (setq label (qcar tmp1))
                                 (setq tmp2 (qcdr tmp1))
                                 (and (consp tmp2)
                                      (eq (qcdr tmp2) nil)
                                      (progn
                                        (setq code
                                         (qcar tmp2))
                                        t))))))
                   (cond
                     ((and (consp label) (eq (qcar label) 'QUOTE)
                           (progn
                             (setq tmp1 (qcdr label))
                             (and (consp tmp1)
                                  (eq (qcdr tmp1) nil)
                                  (progn
                                    (setq z (qcar tmp1))
                                    t))))
                      (setq label z)))
                   (cond
                     ((or (null |$compilingMap|)
                          (nequal label (|mapCatchName| |$mapName|)))
                      (mkObj
                          (cons 'throw
                                (cons label
                                      (cons
                                       (|wrapped2Quote|
                                        (|objVal|
                                         (|intCodeGenCOERCE|
                                          (mkObj code t1) t2)))
                                       nil)))
                          t2))
                     (t (mkObj val t2))))
                  ((and (consp val) (eq (qcar val) 'progn)
                        (progn
                          (setq tmp1 (qcdr val))
                          (and (consp tmp1)
                               (progn
                                 (setq tmp2
                                          (reverse tmp1))
                                 t)
                               (consp tmp2)
                               (progn
                                 (setq lastCode (qcar tmp2))
                                 (setq code (qcdr tmp2))
                                 t)
                               (progn
                                 (setq code (nreverse code))
                                 t))))
                   (mkObj
                       (cons 'progn
                             (append code
                                     (cons
                                      (|wrapped2Quote|
                                       (|objVal|
                                        (|intCodeGenCOERCE|
                                         (mkObj lastCode t1)
                                         t2)))
                                      nil)))
                       t2))
                  ((and (consp val) (eq (qcar val) 'cond)
                        (progn (setq conds (qcdr val)) t))
                   (mkObj
                       (cons 'cond
                             (prog (g1)
                               (setq g1 nil)
                               (return
                                 (do ((g2 conds (cdr g2)) (g3 nil))
                                     ((or (atom g2)
                                       (progn
                                         (setq g3
                                          (car g2))
                                         nil)
                                       (progn
                                         (progn
                                           (setq p
                                            (car g3))
                                           (setq v
                                            (cadr g3))
                                           g3)
                                         nil))
                                      (nreverse0 g1))
                                   (seq
                                    (exit
                                     (setq g1
                                      (cons
                                       (cons p
                                        (cons
                                         (|wrapped2Quote|
                                          (|objVal|
                                           (|intCodeGenCOERCE|
                                            (mkObj v t1) t2)))
                                         nil))
                                       g1))))))))
                       t2))
                  ((|absolutelyCanCoerceByCheating| t1 t2)
                   (mkObj val t2))
                  ((boot-equal t2 '(|Any|))
                   (mkObj
                       (cons 'cons (cons (mkq t1) (cons val nil)))
                       t2))
                  ((and (boot-equal t1 '(|Any|)) (consp val)
                        (equal (qcar val) 'cons)
                        (progn
                          (setq tmp1 (qcdr val))
                          (and (consp tmp1)
                               (progn
                                 (setq t1q (qcar tmp1))
                                 (setq tmp2 (qcdr tmp1))
                                 (and (consp tmp2)
                                      (eq (qcdr tmp2) nil)
                                      (progn
                                        (setq valq
                                         (qcar tmp2))
                                        t))))))
                   (|intCodeGenCOERCE|
                       (mkObj valq (|removeQuote| t1q)) t2))
                  ((and (consp t1) (eq (qcar t1) '|Equation|)
                        (boot-equal t2 |$Boolean|))
                   (|coerceByFunction| triple t2))
                  ((and (boot-equal t1 '|$NoValueMode|) (consp val)
                        (eq (qcar val) 'cond)
                        (progn
                          (setq tmp1 (qcdr val))
                          (and (consp tmp1)
                               (eq (qcdr tmp1) nil)
                               (progn
                                 (setq pred (qcar tmp1))
                                 t))))
                   (setq code
                            (cons 'cond
                                  (cons pred
                                        (cons
                                         (cons (mkq t)
                                          (cons
                                           (cons '|throwKeyedMsg|
                                            (cons (mkq 
      (format nil 
       "The user-defined function %1p has branched to an undefined branch in ~
        conditional processing."))
                                             (cons (mkq |$mapName|)
                                              nil)))
                                           nil))
                                         nil))))
                   (mkObj code t2))
                  ((boot-equal t2 |$OutputForm|)
                   (|coerceByFunction| triple t2))
                  ((|isSubDomain| t1 |$Integer|)
                   (|intCodeGenCOERCE| (mkObj val |$Integer|)
                       t2))
                  ((and (null (|containsVariables| t2))
                        (|canCoerceByFunction| t1 t2))
                   (cond
                     ((and (null (|canCoerceByMap| t1 t2))
                           (setq code
                                    (|coerceByFunction| triple t2)))
                      code)
                     (t (|intCodeGenCoerce1| val t1 t2))))
                  (t (|intCodeGenCoerce1| val t1 t2))))))))))

;intCodeGenCoerce1(val,t1,t2) ==
;  -- Internal function to previous one
;  -- designed to ensure that we don't use coerceOrCroak on mappings
;--(t2 is ['Mapping,:.]) => THROW('coerceOrCroaker, 'croaked)
;  objNew(['coerceOrCroak,mkObjCode(['wrap,val],t1),
;        MKQ t2, MKQ $mapName],t2)

(defun |intCodeGenCoerce1| (val t1 t2)
  (declare (special |$mapName|))
  (mkObj
      (cons '|coerceOrCroak|
            (cons (mkObjCode (cons '|wrap| (cons val nil)) t1)
                  (cons (mkq t2) (cons (mkq |$mapName|) nil))))
      t2))

;--% Map components
;wrapMapBodyWithCatch body ==
;  -- places a CATCH around the map body
;  -- note that we will someday have to fix up the catch identifier
;  -- to use the generated internal map name
;  $mapThrowCount = 0 => body
;  if body is ['failCheck,['coerceOrFail,trip,targ,mapn]]
;    then
;      trip is ['LIST,v,m,e] =>
;        ['failCheck,['coerceOrFail,
;          ['LIST,['CATCH,MKQ mapCatchName $mapName, v],m,e],targ,mapn]]
;      keyedSystemError("S2GE0016",['"wrapMapBodyWithCatch",
;        '"bad CATCH for in function form"])
;    else ['CATCH,MKQ mapCatchName $mapName,body]

(defun |wrapMapBodyWithCatch| (body)
  (prog (trip tmp4 targ tmp5 mapn tmp1 v tmp2 m tmp3 e)
    (declare (special |$mapName| |$mapThrowCount|))
    (return
      (cond
        ((eql |$mapThrowCount| 0) body)
        ((and (consp body) (eq (qcar body) '|failCheck|)
              (progn
                (setq tmp1 (qcdr body))
                (and (consp tmp1) (eq (qcdr tmp1) nil)
                     (progn
                       (setq tmp2 (qcar tmp1))
                       (and (consp tmp2)
                            (eq (qcar tmp2) '|coerceOrFail|)
                            (progn
                              (setq tmp3 (qcdr tmp2))
                              (and (consp tmp3)
                                   (progn
                                     (setq trip (qcar tmp3))
                                     (setq tmp4 (qcdr tmp3))
                                     (and (consp tmp4)
                                      (progn
                                        (setq targ (qcar tmp4))
                                        (setq tmp5 (qcdr tmp4))
                                        (and (consp tmp5)
                                         (eq (qcdr tmp5) nil)
                                         (progn
                                           (setq mapn (qcar tmp5))
                                           t))))))))))))
         (cond
           ((and (consp trip) (eq (qcar trip) 'list)
                 (progn
                   (setq tmp1 (qcdr trip))
                   (and (consp tmp1)
                        (progn
                          (setq v (qcar tmp1))
                          (setq tmp2 (qcdr tmp1))
                          (and (consp tmp2)
                               (progn
                                 (setq m (qcar tmp2))
                                 (setq tmp3 (qcdr tmp2))
                                 (and (consp tmp3)
                                      (eq (qcdr tmp3) nil)
                                      (progn
                                        (setq e (qcar tmp3))
                                        t))))))))
            (cons '|failCheck|
                  (cons (cons '|coerceOrFail|
                              (cons (cons 'list
                                     (cons
                                      (cons 'catch
                                       (cons
                                        (mkq
                                         (|mapCatchName| |$mapName|))
                                        (cons v nil)))
                                      (cons m (cons e nil))))
                                    (cons targ (cons mapn nil))))
                        nil)))
           (t
            (|keyedSystemError| 
             "Unexpected error or improper call to system function %1: %2"
                (cons "wrapMapBodyWithCatch"
                      (cons "bad CATCH for in function form" nil))))))
        (t
         (cons 'catch
               (cons (mkq (|mapCatchName| |$mapName|))
                     (cons body nil))))))))

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
