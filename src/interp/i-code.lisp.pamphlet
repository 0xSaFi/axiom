\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp i-code.lisp}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
<<*>>=
(IN-PACKAGE "BOOT" )

;--% Interpreter Code Generation Routines
;--Modified by JHD 9/9/93 to fix a problem with coerces inside
;--interpreter functions being used as mappings. They were being
;--handled with $useCoerceOrCroak being NIL, and therefore internal
;--coercions were not correctly handled. Fix: remove dependence
;--on $useCoerceOrCroak, and test explicitly for Mapping types.
;--% COERCE
;intCodeGenCOERCE(triple,t2) ==
;  -- NOTE: returns a triple
;  t1 := objMode triple
;  t1 = $EmptyMode => NIL
;  t1 = t2 => triple
;  val := objVal triple
;  -- if request is for a coerce to t2 from a coerce from
;  -- to to t1, and t1 = Void or canCoerce(t0,t2), then optimize
;  (val is ['coerceOrCroak,trip,t1', .]) and
;    (t0 := objCodeMode trip) and ([.,val0] := objCodeVal trip) and
;      ( (t1 = $Void) or canCoerceFrom(removeQuote t0,t2) ) =>
;         -- just generate code for coercion, don't coerce constants
;         -- might be too big
;         intCodeGenCOERCE(objNew(val0, removeQuote t0), t2)
;  val is ['THROW,label,code] =>
;    if label is ['QUOTE, l] then label := l
;    null($compilingMap) or (label ^= mapCatchName($mapName)) =>
;      objNew(['THROW,label,wrapped2Quote objVal
;        intCodeGenCOERCE(objNew(code,t1),t2)],t2)
;    -- we have a return statement. just send it back as is
;    objNew(val,t2)
;  val is ['PROGN,:code,lastCode] =>
;    objNew(['PROGN,:code,wrapped2Quote objVal
;      intCodeGenCOERCE(objNew(lastCode,t1),t2)],t2)
;  val is ['COND,:conds] =>
;    objNew(['COND,
;      :[[p,wrapped2Quote objVal intCodeGenCOERCE(objNew(v,t1),t2)]
;        for [p,v] in conds]],t2)
;  -- specially handle subdomain
;  absolutelyCanCoerceByCheating(t1,t2) => objNew(val,t2)
;  -- specially handle coerce to Any
;  t2 = '(Any) => objNew(['CONS,MKQ t1,val],t2)
;  -- optimize coerces from Any
;  (t1 = '(Any)) and (val is [ ='CONS,t1',val']) =>
;    intCodeGenCOERCE(objNew(val',removeQuote t1'),t2)
;  -- specially handle coerce from Equation to Boolean
;  (t1 is ['Equation,:.]) and (t2 = $Boolean) =>
;    coerceByFunction(triple,t2)
;  -- next is hack for if-then-elses
;  (t1 = '$NoValueMode) and (val is ['COND,pred]) =>
;    code :=
;      ['COND,pred,
;        [MKQ true,['throwKeyedMsg,MKQ "S2IM0016",MKQ $mapName]]]
;    objNew(code,t2)
;  -- optimize coerces to Expression
;  t2 = $OutputForm =>
;    coerceByFunction(triple,t2)
;  isSubDomain(t1, $Integer) =>
;    intCodeGenCOERCE(objNew(val, $Integer), t2)
;  -- generate code
;  -- 1. See if the coercion will go through (absolutely)
;  --    Must be careful about variables or else things like
;  --    P I --> P[x] P I might not have the x in the original polynomial
;  --    put in the correct place
;  (not containsVariables(t2)) and canCoerceByFunction(t1,t2) =>
;    -- try coerceByFunction
;    (not canCoerceByMap(t1,t2)) and
;      (code := coerceByFunction(triple,t2)) => code
;    intCodeGenCoerce1(val,t1,t2)
;  -- 2. Set up a failure point otherwise
;  intCodeGenCoerce1(val,t1,t2)

(DEFUN |intCodeGenCOERCE| (|triple| |t2|)
  (PROG (|t1| |val| |trip| |ISTMP#3| |t0| |LETTMP#1| |val0| |l| |label|
              |lastCode| |conds| |p| |v| |t1'| |ISTMP#2| |val'|
              |ISTMP#1| |pred| |code|)
    (DECLARE (SPECIAL |$Integer| |$OutputForm| |$mapName|
                      |$NoValueMode| |$Boolean| |$compilingMap| |$Void|
                      |$EmptyMode|))
    (RETURN
      (SEQ (PROGN
             (SPADLET |t1| (|objMode| |triple|))
             (COND
               ((BOOT-EQUAL |t1| |$EmptyMode|) NIL)
               ((BOOT-EQUAL |t1| |t2|) |triple|)
               ('T (SPADLET |val| (|objVal| |triple|))
                (COND
                  ((AND (PAIRP |val|)
                        (EQ (QCAR |val|) '|coerceOrCroak|)
                        (PROGN
                          (SPADLET |ISTMP#1| (QCDR |val|))
                          (AND (PAIRP |ISTMP#1|)
                               (PROGN
                                 (SPADLET |trip| (QCAR |ISTMP#1|))
                                 (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                                 (AND (PAIRP |ISTMP#2|)
                                      (PROGN
                                        (SPADLET |t1'|
                                         (QCAR |ISTMP#2|))
                                        (SPADLET |ISTMP#3|
                                         (QCDR |ISTMP#2|))
                                        (AND (PAIRP |ISTMP#3|)
                                         (EQ (QCDR |ISTMP#3|) NIL)))))))
                        (SPADLET |t0| (|objCodeMode| |trip|))
                        (PROGN
                          (SPADLET |LETTMP#1| (|objCodeVal| |trip|))
                          (SPADLET |val0| (CADR |LETTMP#1|))
                          |LETTMP#1|)
                        (OR (BOOT-EQUAL |t1| |$Void|)
                            (|canCoerceFrom| (|removeQuote| |t0|) |t2|)))
                   (|intCodeGenCOERCE|
                       (|objNew| |val0| (|removeQuote| |t0|)) |t2|))
                  ((AND (PAIRP |val|) (EQ (QCAR |val|) 'THROW)
                        (PROGN
                          (SPADLET |ISTMP#1| (QCDR |val|))
                          (AND (PAIRP |ISTMP#1|)
                               (PROGN
                                 (SPADLET |label| (QCAR |ISTMP#1|))
                                 (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                                 (AND (PAIRP |ISTMP#2|)
                                      (EQ (QCDR |ISTMP#2|) NIL)
                                      (PROGN
                                        (SPADLET |code|
                                         (QCAR |ISTMP#2|))
                                        'T))))))
                   (COND
                     ((AND (PAIRP |label|) (EQ (QCAR |label|) 'QUOTE)
                           (PROGN
                             (SPADLET |ISTMP#1| (QCDR |label|))
                             (AND (PAIRP |ISTMP#1|)
                                  (EQ (QCDR |ISTMP#1|) NIL)
                                  (PROGN
                                    (SPADLET |l| (QCAR |ISTMP#1|))
                                    'T))))
                      (SPADLET |label| |l|)))
                   (COND
                     ((OR (NULL |$compilingMap|)
                          (NEQUAL |label| (|mapCatchName| |$mapName|)))
                      (|objNew|
                          (CONS 'THROW
                                (CONS |label|
                                      (CONS
                                       (|wrapped2Quote|
                                        (|objVal|
                                         (|intCodeGenCOERCE|
                                          (|objNew| |code| |t1|) |t2|)))
                                       NIL)))
                          |t2|))
                     ('T (|objNew| |val| |t2|))))
                  ((AND (PAIRP |val|) (EQ (QCAR |val|) 'PROGN)
                        (PROGN
                          (SPADLET |ISTMP#1| (QCDR |val|))
                          (AND (PAIRP |ISTMP#1|)
                               (PROGN
                                 (SPADLET |ISTMP#2|
                                          (REVERSE |ISTMP#1|))
                                 'T)
                               (PAIRP |ISTMP#2|)
                               (PROGN
                                 (SPADLET |lastCode| (QCAR |ISTMP#2|))
                                 (SPADLET |code| (QCDR |ISTMP#2|))
                                 'T)
                               (PROGN
                                 (SPADLET |code| (NREVERSE |code|))
                                 'T))))
                   (|objNew|
                       (CONS 'PROGN
                             (APPEND |code|
                                     (CONS
                                      (|wrapped2Quote|
                                       (|objVal|
                                        (|intCodeGenCOERCE|
                                         (|objNew| |lastCode| |t1|)
                                         |t2|)))
                                      NIL)))
                       |t2|))
                  ((AND (PAIRP |val|) (EQ (QCAR |val|) 'COND)
                        (PROGN (SPADLET |conds| (QCDR |val|)) 'T))
                   (|objNew|
                       (CONS 'COND
                             (PROG (G166151)
                               (SPADLET G166151 NIL)
                               (RETURN
                                 (DO ((G166157 |conds|
                                       (CDR G166157))
                                      (G166119 NIL))
                                     ((OR (ATOM G166157)
                                       (PROGN
                                         (SETQ G166119
                                          (CAR G166157))
                                         NIL)
                                       (PROGN
                                         (PROGN
                                           (SPADLET |p|
                                            (CAR G166119))
                                           (SPADLET |v|
                                            (CADR G166119))
                                           G166119)
                                         NIL))
                                      (NREVERSE0 G166151))
                                   (SEQ
                                    (EXIT
                                     (SETQ G166151
                                      (CONS
                                       (CONS |p|
                                        (CONS
                                         (|wrapped2Quote|
                                          (|objVal|
                                           (|intCodeGenCOERCE|
                                            (|objNew| |v| |t1|) |t2|)))
                                         NIL))
                                       G166151))))))))
                       |t2|))
                  ((|absolutelyCanCoerceByCheating| |t1| |t2|)
                   (|objNew| |val| |t2|))
                  ((BOOT-EQUAL |t2| '(|Any|))
                   (|objNew|
                       (CONS 'CONS (CONS (MKQ |t1|) (CONS |val| NIL)))
                       |t2|))
                  ((AND (BOOT-EQUAL |t1| '(|Any|)) (PAIRP |val|)
                        (EQUAL (QCAR |val|) 'CONS)
                        (PROGN
                          (SPADLET |ISTMP#1| (QCDR |val|))
                          (AND (PAIRP |ISTMP#1|)
                               (PROGN
                                 (SPADLET |t1'| (QCAR |ISTMP#1|))
                                 (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                                 (AND (PAIRP |ISTMP#2|)
                                      (EQ (QCDR |ISTMP#2|) NIL)
                                      (PROGN
                                        (SPADLET |val'|
                                         (QCAR |ISTMP#2|))
                                        'T))))))
                   (|intCodeGenCOERCE|
                       (|objNew| |val'| (|removeQuote| |t1'|)) |t2|))
                  ((AND (PAIRP |t1|) (EQ (QCAR |t1|) '|Equation|)
                        (BOOT-EQUAL |t2| |$Boolean|))
                   (|coerceByFunction| |triple| |t2|))
                  ((AND (BOOT-EQUAL |t1| '|$NoValueMode|) (PAIRP |val|)
                        (EQ (QCAR |val|) 'COND)
                        (PROGN
                          (SPADLET |ISTMP#1| (QCDR |val|))
                          (AND (PAIRP |ISTMP#1|)
                               (EQ (QCDR |ISTMP#1|) NIL)
                               (PROGN
                                 (SPADLET |pred| (QCAR |ISTMP#1|))
                                 'T))))
                   (SPADLET |code|
                            (CONS 'COND
                                  (CONS |pred|
                                        (CONS
                                         (CONS (MKQ 'T)
                                          (CONS
                                           (CONS '|throwKeyedMsg|
                                            (CONS (MKQ 'S2IM0016)
                                             (CONS (MKQ |$mapName|)
                                              NIL)))
                                           NIL))
                                         NIL))))
                   (|objNew| |code| |t2|))
                  ((BOOT-EQUAL |t2| |$OutputForm|)
                   (|coerceByFunction| |triple| |t2|))
                  ((|isSubDomain| |t1| |$Integer|)
                   (|intCodeGenCOERCE| (|objNew| |val| |$Integer|)
                       |t2|))
                  ((AND (NULL (|containsVariables| |t2|))
                        (|canCoerceByFunction| |t1| |t2|))
                   (COND
                     ((AND (NULL (|canCoerceByMap| |t1| |t2|))
                           (SPADLET |code|
                                    (|coerceByFunction| |triple| |t2|)))
                      |code|)
                     ('T (|intCodeGenCoerce1| |val| |t1| |t2|))))
                  ('T (|intCodeGenCoerce1| |val| |t1| |t2|))))))))))

;intCodeGenCoerce1(val,t1,t2) ==
;  -- Internal function to previous one
;  -- designed to ensure that we don't use coerceOrCroak on mappings
;--(t2 is ['Mapping,:.]) => THROW('coerceOrCroaker, 'croaked)
;  objNew(['coerceOrCroak,mkObjCode(['wrap,val],t1),
;        MKQ t2, MKQ $mapName],t2)

(DEFUN |intCodeGenCoerce1| (|val| |t1| |t2|)
  (DECLARE (SPECIAL |$mapName|))
  (|objNew|
      (CONS '|coerceOrCroak|
            (CONS (|mkObjCode| (CONS '|wrap| (CONS |val| NIL)) |t1|)
                  (CONS (MKQ |t2|) (CONS (MKQ |$mapName|) NIL))))
      |t2|))

;--% Map components
;wrapMapBodyWithCatch body ==
;  -- places a CATCH around the map body
;  -- note that we will someday have to fix up the catch identifier
;  -- to use the generated internal map name
;  $mapThrowCount = 0 => body
;  if body is ['failCheck,['coerceOrFail,trip,targ,mapn]]
;    then
;      trip is ['LIST,v,m,e] =>
;        ['failCheck,['coerceOrFail,
;          ['LIST,['CATCH,MKQ mapCatchName $mapName, v],m,e],targ,mapn]]
;      keyedSystemError("S2GE0016",['"wrapMapBodyWithCatch",
;        '"bad CATCH for in function form"])
;    else ['CATCH,MKQ mapCatchName $mapName,body]

(DEFUN |wrapMapBodyWithCatch| (|body|)
  (PROG (|trip| |ISTMP#4| |targ| |ISTMP#5| |mapn| |ISTMP#1| |v|
                |ISTMP#2| |m| |ISTMP#3| |e|)
    (DECLARE (SPECIAL |$mapName| |$mapThrowCount|))
    (RETURN
      (COND
        ((EQL |$mapThrowCount| 0) |body|)
        ((AND (PAIRP |body|) (EQ (QCAR |body|) '|failCheck|)
              (PROGN
                (SPADLET |ISTMP#1| (QCDR |body|))
                (AND (PAIRP |ISTMP#1|) (EQ (QCDR |ISTMP#1|) NIL)
                     (PROGN
                       (SPADLET |ISTMP#2| (QCAR |ISTMP#1|))
                       (AND (PAIRP |ISTMP#2|)
                            (EQ (QCAR |ISTMP#2|) '|coerceOrFail|)
                            (PROGN
                              (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                              (AND (PAIRP |ISTMP#3|)
                                   (PROGN
                                     (SPADLET |trip| (QCAR |ISTMP#3|))
                                     (SPADLET |ISTMP#4|
                                      (QCDR |ISTMP#3|))
                                     (AND (PAIRP |ISTMP#4|)
                                      (PROGN
                                        (SPADLET |targ|
                                         (QCAR |ISTMP#4|))
                                        (SPADLET |ISTMP#5|
                                         (QCDR |ISTMP#4|))
                                        (AND (PAIRP |ISTMP#5|)
                                         (EQ (QCDR |ISTMP#5|) NIL)
                                         (PROGN
                                           (SPADLET |mapn|
                                            (QCAR |ISTMP#5|))
                                           'T))))))))))))
         (COND
           ((AND (PAIRP |trip|) (EQ (QCAR |trip|) 'LIST)
                 (PROGN
                   (SPADLET |ISTMP#1| (QCDR |trip|))
                   (AND (PAIRP |ISTMP#1|)
                        (PROGN
                          (SPADLET |v| (QCAR |ISTMP#1|))
                          (SPADLET |ISTMP#2| (QCDR |ISTMP#1|))
                          (AND (PAIRP |ISTMP#2|)
                               (PROGN
                                 (SPADLET |m| (QCAR |ISTMP#2|))
                                 (SPADLET |ISTMP#3| (QCDR |ISTMP#2|))
                                 (AND (PAIRP |ISTMP#3|)
                                      (EQ (QCDR |ISTMP#3|) NIL)
                                      (PROGN
                                        (SPADLET |e| (QCAR |ISTMP#3|))
                                        'T))))))))
            (CONS '|failCheck|
                  (CONS (CONS '|coerceOrFail|
                              (CONS (CONS 'LIST
                                     (CONS
                                      (CONS 'CATCH
                                       (CONS
                                        (MKQ
                                         (|mapCatchName| |$mapName|))
                                        (CONS |v| NIL)))
                                      (CONS |m| (CONS |e| NIL))))
                                    (CONS |targ| (CONS |mapn| NIL))))
                        NIL)))
           ('T
            (|keyedSystemError| 'S2GE0016
                (CONS "wrapMapBodyWithCatch"
                      (CONS "bad CATCH for in function form" NIL))))))
        ('T
         (CONS 'CATCH
               (CONS (MKQ (|mapCatchName| |$mapName|))
                     (CONS |body| NIL))))))))

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
