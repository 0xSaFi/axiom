\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp depsys.lisp}
\author{Lars Ericson, Barry Trager, Martial Schor, Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents

<<*>>=


;      VM LISP EMULATION PACKAGE
;      Lars Ericson, Barry Trager, Martial Schor, tim daly, LVMCL, et al
;      IBM Thomas J. Watson Research Center
;      Summer, 1986
;  see /spad/daly.changes

; This emulation package version is written for Symbolics Common Lisp.
; Emulation commentary refers to LISP/VM, IBM Program Number 5798-DQZ,
; as described in the LISP/VM User's Guide, document SH20-6477-1.
; Main comment section headings refer to sections in the User's Guide.

; If you are using this, you are probably in Common Lisp, yes?

(in-package "VMLISP")

(export '(MAKE-HASHTABLE HGET HKEYS HCOUNT HPUT HPUT* HREM HCLEAR HREMPROP
          HASHEQ HASHUEQUAL HASHCVEC HASHID HASHTABLEP CVEC UEQUAL ID HPUTPROP
	  HASHTABLE-CLASS))

#-:common-lisp 
 (setq *features* (adjoin :common-lisp *features*))

;; DEFVARS

(defvar *embedded-functions* nil)

(defvar *comp370-apply* nil "function (name def) for comp370 to apply")

(defvar *fileactq-apply* nil "function to apply in fileactq")

(defvar *lam-name* nil "name to be used by lam macro if non-nil")

(defvar macerrorcount 0  "Put some documentation in here someday")

(defvar *read-place-holder* (make-symbol "%.EOF")
   "default value returned by read and read-line at end-of-file")

;; DEFMACROS


(defmacro absval (x)
 `(abs ,x))

#-:CCL
(defmacro add1 (x)
 `(1+ ,x))

(defmacro assemble (&rest ignore) 
 (declare (ignore ignore))
  nil)

(defmacro applx (&rest args)
 `(apply ,@args))

#-(or LispM Lucid :CCL)
(defmacro assq (a b)
 `(assoc ,a ,b :test #'eq))

#+:CCL
(defmacro assq (a b) `(atsoc ,a ,b))

#-:CCL
(defmacro bintp (n)
 `(typep ,n 'bignum))
#+:CCL
(defun bintp (n) (and (integerp n) (not (fixp n))))

(defmacro |char| (x)
  (if (and (consp x) (eq (car x) 'quote)) (character (cadr x))
    `(character ,x)))

(defmacro closedfn (form)
 `(function ,form))

(defmacro |copyList| (x) 
 `(copy-list ,x))

(defmacro create-sbc (x) x)  ;a no-op for common lisp

(defmacro cvecp (x)
 `(stringp ,x))

(defmacro dcq (&rest args)
 (cons 'setqp args))

#-Lucid
(defmacro define-macro (f v)
 `(setf (macro-function ,f) (macro-function ,v)))

#-:CCL
(defmacro difference (&rest args)
 `(- ,@args))

(defmacro dsetq (&whole form pattern exp)
 (dodsetq form pattern exp))

(defmacro ecq (&rest args)
 (cons 'eqq args))

#-:CCL
(defmacro eqcar (x y)
 (let ((test
        (cond
         ((equable y) 'eq)
	 ((integerp y) 'i=)
	 ('eql))))
  (if (atom x)
   `(and (consp ,x) (,test (qcar ,x) ,y))
    (let ((xx (gensym)))
     `(let ((,xx ,x))
       (and (consp ,xx) (,test (qcar ,xx) ,y)))))))

(defmacro eqq (pattern exp)
 `(,(ecqexp pattern nil) ,exp))

(defmacro |equal| (x y)
 `(equalp ,x ,y))

(defmacro evalandfileactq (name &optional (form name))
 `(eval-when (eval load) ,form))  

(defmacro exit (&rest value)
 `(return-from seq ,@value))

(defmacro fetchchar (x i)
 `(char ,x ,i))

#-:CCL  ;; fixp in ccl tests for fixnum
(defmacro fixp (x)
 `(integerp ,x))

#-:CCL
(defmacro greaterp (&rest args)
 `(> ,@args))

(defmacro i= (x y) ;; integer equality
  (if (typep y 'fixnum)
      (let ((gx (gensym)))
	`(let ((,gx ,x))
	   (and (typep ,gx 'fixnum) (eql (the fixnum ,gx) ,y))))
    (let ((gx (gensym)) (gy (gensym)))
      `(let ((,gx ,x) (,gy ,y))
	 (cond ((and (typep ,gx 'fixnum) (typep ,gy 'fixnum))
		(eql (the fixnum ,gx) (the fixnum ,gy)))
	       ((eql (the integer ,gx) (the integer,gy))))))))

(defmacro |idChar?| (x)
 `(or (alphanumericp ,x) (member ,x '(#\? #\% #\' #\!) :test #'char=)))
 
(defmacro ifcar (x)
  (if (atom x)
      `(and (consp ,x) (qcar ,x))
    (let ((xx (gensym)))
      `(let ((,xx ,x))
	 (and (consp ,xx) (qcar ,xx))))))

(defmacro ifcdr (x)
  (if (atom x)
      `(and (consp ,x) (qcdr ,x))
    (let ((xx (gensym)))
      `(let ((,xx ,x))
	 (and (consp ,xx) (qcdr ,xx))))))

(defmacro intp (x)
 `(integerp ,x))

(defmacro lam (&rest body)
 (list 'quote (*lam (copy-tree body))))

(defmacro lastnode (l)
 `(last ,l))

(defmacro lastpair (l)
 `(last ,l))

#-:CCL
(defmacro lessp (&rest args)
 `(< ,@args))

(defmacro lintp (n)
 `(typep ,n 'bignum))

(defmacro makestring (a) a)

(defmacro mapelt (f vec)
 `(map 'vector ,f ,vec))

(defmacro maxindex (x)
 `(the fixnum (1- (the fixnum (length ,x)))))

#-(or LispM Lucid :CCL)
(defmacro memq (a b)
 `(member ,a ,b :test #'eq))

#-:CCL
(defmacro minus (x)
 `(- ,x))

(defmacro mrp (x)
 `(special-form-p ,x))

(defmacro namederrset (id iexp &rest item)
 (declare (ignore item))
  `(catch ,id ,iexp))

(defmacro ne (a b) `(not (equal ,a ,b)))

;;; This may need adjustment in CCL where NEQ means (NOT (EQUAL ..)))
#-:CCL
(defmacro neq (a b) `(not (eq ,a ,b)))

#-:CCL
(defmacro nreverse0 (x)
  (if (atom x)
      `(if (atom ,x) ,x (nreverse ,x))
    (let ((xx (gensym)))
      `(let ((,xx ,x))
	 (if (atom ,xx) ,xx (nreverse ,xx))))))

(defmacro nump (n)
 `(numberp ,n))

(defmacro |opOf| (x) ;(if (atom x) x (qcar x))
  (if (atom x)
      `(if (consp ,x) (qcar ,x) ,x)
    (let ((xx (gensym)))
      `(let ((,xx ,x))
	 (if (consp ,xx) (qcar ,xx) ,xx)))))

(defmacro oraddtempdefs (filearg)
 `(eval-when (compile) (load ,filearg)))

(defmacro pairp (x)
 `(consp ,x)) 

#-:CCL
(defmacro plus (&rest args)
 `(+ ,@ args))

; (defmacro qassq (a b)
;  `(assoc ,a ,b :test #'eq))
(defmacro qassq (a b) `(assq ,a ,b))

#-:CCL
(defmacro qcar (x)
 `(car (the cons ,x)))
#-:CCL
(defmacro qcdr (x)
 `(cdr (the cons ,x)))

#-:CCL
(defmacro qcaar (x)
 `(car (the cons (car (the cons ,x)))))
#-:CCL
(defmacro qcadr (x)
 `(car (the cons (cdr (the cons ,x)))))
#-:CCL
(defmacro qcdar (x)
 `(cdr (the cons (car (the cons ,x)))))
#-:CCL
(defmacro qcddr (x)
 `(cdr (the cons (cdr (the cons ,x)))))

(defmacro qcaaar (x)
 `(car (the cons (car (the cons (car (the cons ,x)))))))
(defmacro qcaadr (x)
 `(car (the cons (car (the cons (cdr (the cons ,x)))))))
(defmacro qcadar (x)
 `(car (the cons (cdr (the cons (car (the cons ,x)))))))
(defmacro qcaddr (x)
 `(car (the cons (cdr (the cons (cdr (the cons ,x)))))))
(defmacro qcdaar (x)
 `(cdr (the cons (car (the cons (car (the cons ,x)))))))
(defmacro qcdadr (x)
 `(cdr (the cons (car (the cons (cdr (the cons ,x)))))))
(defmacro qcddar (x)
 `(cdr (the cons (cdr (the cons (car (the cons ,x)))))))
(defmacro qcdddr (x)
 `(cdr (the cons (cdr (the cons (cdr (the cons ,x)))))))

(defmacro qcaaaar (x)
 `(car (the cons (car (the cons (car (the cons (car (the cons ,x)))))))))
(defmacro qcaaadr (x)
 `(car (the cons (car (the cons (car (the cons (cdr (the cons ,x)))))))))
(defmacro qcaadar (x)
 `(car (the cons (car (the cons (cdr (the cons (car (the cons ,x)))))))))
(defmacro qcaaddr (x)
 `(car (the cons (car (the cons (cdr (the cons (cdr (the cons ,x)))))))))
(defmacro qcadaar (x)
 `(car (the cons (cdr (the cons (car (the cons (car (the cons ,x)))))))))
(defmacro qcadadr (x)
 `(car (the cons (cdr (the cons (car (the cons (cdr (the cons ,x)))))))))
(defmacro qcaddar (x)
 `(car (the cons (cdr (the cons (cdr (the cons (car (the cons ,x)))))))))
(defmacro qcadddr (x)
 `(car (the cons (cdr (the cons (cdr (the cons (cdr (the cons ,x)))))))))
(defmacro qcdaaar (x)
 `(cdr (the cons (car (the cons (car (the cons (car (the cons ,x)))))))))
(defmacro qcdaadr (x)
 `(cdr (the cons (car (the cons (car (the cons (cdr (the cons ,x)))))))))
(defmacro qcdadar (x)
 `(cdr (the cons (car (the cons (cdr (the cons (car (the cons ,x)))))))))
(defmacro qcdaddr (x)
 `(cdr (the cons (car (the cons (cdr (the cons (cdr (the cons ,x)))))))))
(defmacro qcddaar (x)
 `(cdr (the cons (cdr (the cons (car (the cons (car (the cons ,x)))))))))
(defmacro qcddadr (x)
 `(cdr (the cons (cdr (the cons (car (the cons (cdr (the cons ,x)))))))))
(defmacro qcdddar (x)
 `(cdr (the cons (cdr (the cons (cdr (the cons (car (the cons ,x)))))))))
(defmacro qcddddr (x)
 `(cdr (the cons (cdr (the cons (cdr (the cons (cdr (the cons ,x)))))))))

(defmacro qcsize (x)
 `(the fixnum (length (the simple-string ,x))))

(defmacro qeqq (pattern exp)
 `(,(ecqexp pattern 1) ,exp))

(defmacro qlength (a)
 `(length ,a))

; (defmacro qmemq (a b)
; `(member ,a ,b :test #'eq))
(defmacro qmemq (a b) `(memq ,a ,b))

(defmacro qrefelt (vec ind)
 `(svref ,vec ,ind))

(defmacro qrplaca (a b)
 `(rplaca (the cons ,a) ,b))

(defmacro qrplacd (a b)
 `(rplacd (the cons ,a) ,b))

(defmacro qrplq (&whole form pattern exp)
 (if (or (consp pattern) (simple-vector-p pattern))
  `(,(rcqexp pattern) ,exp)
   (macro-invalidargs 'qrplq form "form must be updateable.")))

(defmacro qsadd1 (x)
 `(the fixnum (1+ (the fixnum ,x))))

(defmacro qsdec1 (x)
 `(the fixnum (1- (the fixnum ,x))))

(defmacro qsdifference (x y)
 `(the fixnum (- (the fixnum ,x) (the fixnum ,y))))

(defmacro qsetq (&whole form pattern exp)
 (declare (ignore form))
  `(,(dcqexp pattern '=) ,exp))

(defmacro qsetrefv (vec ind val)
 `(setf (svref ,vec (the fixnum ,ind)) ,val))

(defmacro qsetvelt (vec ind val)
 `(setf (svref ,vec (the fixnum ,ind)) ,val))

(defmacro qsetvelt-1 (vec ind val)
 `(setf (svref ,vec (the fixnum (1- (the fixnum ,ind)))) ,val))

(defmacro qsgreaterp (a b)
 `(> (the fixnum ,a) (the fixnum ,b)))

(defmacro qsinc1 (x)
 `(the fixnum (1+ (the fixnum ,x))))

(defmacro qsleftshift (a b)
 `(the fixnum (ash (the fixnum ,a) (the fixnum ,b))))

(defmacro qslessp (a b)
 `(< (the fixnum ,a) (the fixnum ,b)))

(defmacro qsmax (x y)
 `(the fixnum (max (the fixnum ,x) (the fixnum ,y))))

(defmacro qsmin (x y)
 `(the fixnum (min (the fixnum ,x) (the fixnum ,y))))

(defmacro qsminus (x)
 `(the fixnum (minus (the fixnum ,x))))

(defmacro qsminusp (x)
 `(minusp (the fixnum ,x)))

(defmacro qsoddp (x)
 `(oddp (the fixnum ,x)))

(defmacro qsabsval (x)
  `(the fixnum (abs (the fixnum ,x))))

(defmacro qsplus (x y)
 `(the fixnum (+ (the fixnum ,x) (the fixnum ,y))))

(defmacro qssub1 (x)
 `(the fixnum (1- (the fixnum ,x))))

(defmacro qstimes (x y)
 `(the fixnum (* (the fixnum ,x) (the fixnum ,y))))

(defmacro qstringlength (x)
 `(the fixnum (length (the simple-string ,x))))

(defmacro qszerop (x)
 `(zerop (the fixnum ,x)))

(defmacro qvelt (vec ind)
 `(svref ,vec (the fixnum ,ind)))

(defmacro qvelt-1 (vec ind)
 `(svref ,vec (the fixnum (1- (the fixnum ,ind)))))

(defmacro qvmaxindex (x)
 `(the fixnum (1- (the fixnum (length (the simple-vector ,x))))))

(defmacro qvsize (x)
 `(the fixnum (length (the simple-vector ,x))))

; #-:CCL
; (defmacro refvecp (v)
;  `(typep ,v '(vector t)))
; #+:CCL
; (defun refvecp (v) (and (vectorp v) (not (stringp v))))
(defmacro refvecp (v) `(simple-vector-p ,v))

(defmacro resetq (a b)
 `(prog1 ,a (setq ,a ,b)))

(defmacro rnump (n)
 `(floatp ,n))

(defmacro rplq (&whole form exp pattern)
 (if (or (consp pattern) (simple-vector-p pattern))
  `(,(rcqexp pattern) ,exp)
   (macro-invalidargs 'rplq form "form must be updateable.")))

(defmacro rvecp (v)
 `(typep ,v '(vector float)))

(defmacro setandfileq (id item)
 `(eval-when (eval load) 
   (setq ,id ,item)
   (lam\,fileactq ',id (list 'setq ',id (list 'quote ,id)))))

#-:CCL
(defmacro setelt (vec ind val)
 `(setf (elt ,vec ,ind) ,val))

(defmacro setqp (&whole form pattern exp)
 (declare (ignore form))
  `(,(dcqexp pattern '=) ,exp))

(defmacro seq (&rest form)
  (let* ((body (reverse form))
         (val `(return-from seq ,(pop body))))
    (nsubstitute '(progn) nil body) ;don't treat NIL as a label
    `(block seq (tagbody ,@(nreverse body) ,val))))

(defmacro sfp (x)
 `(special-form-p ,x))

(defmacro |shoeConsole| (line)
 `(write-line ,line *terminal-io*))

(defmacro |shoeInputFile| (filespec)
 `(open ,filespec :direction :input :if-does-not-exist nil))

(defmacro |shoeread-line| (st)
 `(read-line ,st nil nil))

#-:CCL
(defmacro sintp (n)
 `(typep ,n 'fixnum))
#+:CCL
(defmacro sintp (n)
  `(fixp ,n))

#-:CCL
(defmacro smintp (n)
 `(typep ,n 'fixnum))
#+:CCL
(defmacro smintp (n)
  `(fixp ,n))

(defmacro |startsId?| (x)
 `(or (alpha-char-p ,x) (member ,x '(#\? #\% #\!) :test #'char=)))

(defmacro stringlength (x)
 `(length (the string ,x)))

(defmacro subrp (x)
 `(compiled-function-p ,x))

#-:CCL
(defmacro sub1 (x)
 `(1- ,x))

(defmacro throw-protect (exp1 exp2)
 `(unwind-protect ,exp1 ,exp2))

#-:CCL
(defmacro times (&rest args)
 `(* ,@args))

(defmacro vec-setelt (vec ind val)
 `(setf (svref ,vec ,ind) ,val))

; #-:CCL
; (defmacro vecp (v)
;  `(typep ,v '(vector t)))
; #+:CCL
; (defun vecp (v) (and (vectorp v) (not (stringp v))))
(defmacro vecp (v) `(simple-vector-p ,v))

#-:CCL
(defmacro zero? (x)
  `(and (typep ,x 'fixnum) (zerop (the fixnum ,x))))
#+:CCL
(defmacro zero? (x) `(zerop ,x))

;; defuns

#-(or :CCL (and :Lucid (not :rios)))
(defun define-function (f v)
 (setf (symbol-function f) v))
#+:CCL
(defun define-function (f v)
 (setf (symbol-function f) v)
 (setf (get f 's:newname) v))

(define-function 'tempus-fugit #'get-internal-run-time)

(defun $TOTAL-ELAPSED-TIME ()
   (list (get-internal-run-time) (get-internal-real-time)))

#-(OR IBCL KCL :CMULISP :CCL)
(defun $TOTAL-GC-TIME () (list 0 0))

#+:CCL
(defun $TOTAL-GC-TIME () (list (gctime) (gctime)))

#+IBCL
(defun $TOTAL-GC-TIME (&aux (gcruntime (system:gbc-time-report)))
  (list gcruntime gcruntime))

#+KCL
(defun $TOTAL-GC-TIME (&aux (gcruntime (system:gbc-time)))
  (if (minusp gcruntime)
      (setq gcruntime (system:gbc-time 0)))
  (list gcruntime gcruntime))

;;; note: this requires the 11/9/89 gc patch in code/lisp/daly/misc.lisp
#+:cmulisp
(defun $TOTAL-GC-TIME ()
 (declare (special ext::*gc-runtime* ext::*gc-walltime*))
 (list ext::*gc-runtime* ext::*gc-walltime*))

; 7.0 Macros

; 7.2 Creating Macro Expressions

; 5.2 Functions

; 5.2.2 Lambda Expressions

(defun *LAM (body)
  (cond  ((NOT (ISQUOTEDP (first BODY))) (cons 'LAMBDA BODY))
         ((LET* ((BV (DEQUOTE (first BODY)))
                 (CONTROL (QUOTESOF (first BODY)))
                 (BODY (cdr BODY))
                 (ARGS (GENSYM))
                 (INNER-FUNC (or *lam-name* (gentemp))))
            (COMP370 (LIST INNER-FUNC `(LAMBDA ,BV . ,BODY)))
            `(MLAMBDA ,ARGS
                      (CONS (QUOTE ,INNER-FUNC)
                            (WRAP (cdr ,ARGS) ',CONTROL)))))))

(defun WRAP (LIST-OF-ITEMS WRAPPER)
 (prog nil
  (COND ((OR (NOT (PAIRP LIST-OF-ITEMS)) (not WRAPPER))
         (RETURN LIST-OF-ITEMS))
        ((NOT (consp WRAPPER))
         (SETQ WRAPPER (LOTSOF WRAPPER))))
  (RETURN
    (CONS (if (first WRAPPER)
              `(,(first WRAPPER) ,(first LIST-OF-ITEMS))
              (first LIST-OF-ITEMS))
          (WRAP (cdr LIST-OF-ITEMS) (cdr WRAPPER))))))

(defun ISQUOTEDP (bv)
  (COND ((NOT (consp BV)) NIL)
        ((EQ (first BV) 'QUOTE))
        ((AND (consp (first BV)) (EQ (QCAAR BV) 'QUOTE)))
        ((ISQUOTEDP (cdr BV)))))

(defun QUOTESOF (BV)
  (COND ((NOT (consp BV)) NIL)
      ((EQ (first BV) 'QUOTE) 'QUOTE)
      ((CONS (COND ((NOT (consp (first BV))) nil)
                   ((EQ (QCAAR BV) 'QUOTE) 'QUOTE)
                   (T NIL))
             (QUOTESOF (cdr BV))))))

(defun DEQUOTE (BV)
  (COND ((NOT (consp BV)) BV)
        ((EQ 'QUOTE (first BV)) (second BV))
        ((CONS (if (EQ 'QUOTE (IFCAR (CAR BV))) (CADAR BV) (first BV))
               (DEQUOTE (cdr BV))))))

(defun lotsof (&rest items)
  (setq items (copy-list items))
  (nconc items items))

; 7.4 Using Macros

; Beats me how to simulate macro expansion "in the environment of sd"...:

(defun MDEF (arg item &optional sd)
 (declare (ignore sd))
  (macroexpand `(,arg ,item)))

(define-function 'MDEFX #'MDEF)

; 8.0 Operator Definition and Transformation

; 8.1 Definition and Transformation Operations

(defun COMP370 (fnlist)
  (cond ((atom (car fnlist)) (list (COMPILE1 fnlist)))
        (t (MAPCAR #'(lambda (x) (COMPILE1 x)) fnlist))))

#+:CCL (proclaim '(special *vars* *decl*)) ;; declare not handled right

(defun COMPILE1 (fn)
  (let* (nargs
         (fname (car fn))
         (lamda (cadr fn))
         (ltype (car lamda))
         *vars* *decl* args
         (body (cddr lamda)))
    (declare (special *vars* *decl*))
    (if (eq ltype 'LAM)
        (let ((*lam-name* (intern (concat fname "\,LAM"))))
          (setq lamda (eval lamda) ltype (car lamda) body (cddr lamda))))
    (let ((dectest (car body)))
      (if (and (eqcar dectest 'declare) (eqcar (cadr dectest) 'special))
	  (setq *decl* (cdr (cadr dectest)) body (cdr body))))
    (setq args (remove-fluids (cadr lamda)))
    (cond ((and (eq ltype 'lambda) (simple-arglist args)) (setq nargs args))
          (t (setq nargs (gensym))
     #+LispM (setq body `((dsetq ,args (copy-list ,nargs)) ,@body))
     #-LispM (setq body `((dsetq ,args  ,nargs) ,@body))
             (cond ((eq ltype 'lambda) (setq nargs `(&rest ,nargs &aux ,@*vars*)))
                   ((eq ltype 'mlambda)
                    (setq nargs `(&whole ,nargs &rest ,(gensym) &aux ,@*vars*)))
                   (t (error "bad function type")))))
    (cond (*decl* (setq body (cons `(declare (special ,@ *decl*)) body))))
    (setq body
          (cond ((eq ltype 'lambda) `(defun ,fname ,nargs . ,body))
                ((eq ltype 'mlambda) `(defmacro ,fname ,nargs . ,body))))
    (if *COMP370-APPLY* (funcall *COMP370-APPLY* fname body))

    body))

(defun simple-arglist (arglist)
  (or (null arglist)
      (and (consp arglist) (null (cdr (last arglist)))
           (every #'symbolp arglist))))

(defun remove-fluids (arglist &aux f v) ;updates specials *decl* and *vars*
  (declare (special *decl* *vars*))
   (cond ((null arglist) arglist)
         ((symbolp arglist) (push arglist *vars*) arglist)
                ;if atom but not symbol, ignore value
         ((atom arglist) (push (setq arglist (gentemp)) *vars*) arglist)
         ((and (setq f (car arglist))
               (eq f 'fluid)
               (listp (cdr arglist))
               (setq v (cadr arglist))
               (identp v)
               (null (cddr arglist)))
          (push v *decl*)
          (push v *vars*)
          v)
         (t (cons (remove-fluids (car arglist))
                  (remove-fluids (cdr arglist))))))

(define-function 'KOMPILE #'COMP370)

; 9.4 Vectors and Bpis

(defun IVECP (x) (and (vectorp x) (subtypep (array-element-type x) 'integer)))

(defun mbpip (item) (and (symbolp item) ;cannot know a compiled macro in CLISP
                         (compiled-function-p (macro-function item))))

(defun FBPIP (item) (or (compiled-function-p item)
			(and (symbolp item) (fboundp item)
			     (not (macro-function item))
			     (compiled-function-p (symbol-function item)))))

; 9.5 Identifiers

#-:CCL
(defun gensymp (x) (and (symbolp x) (null (symbol-package x))))

(defun digitp (x)
  (or (and (symbolp x) (digitp (symbol-name x)))
      (and (characterp x) (digit-char-p x))
      (and (stringp x) (= (length x) 1) (digit-char-p (char x 0)))))

(defun dig2fix (x)
  (if (symbolp x)
    (digit-char-p (char (symbol-name x) 0))
    (digit-char-p x)))

#-:CCL
(defun LN (x) (LOG x))
#-:CCL
(defun LOG2 (x) (LOG x 2.0))
(defun |log| (x) (LOG x 10.0))

; 9.13 Streams

#+Lucid
(defun IS-CONSOLE (stream)
    (and (streamp stream)
         (or (not (consp (pathname-directory stream)))
             (equal (qcar (pathname-directory stream)) "dev")
	     (null (pathname-name stream) ))))

#+KCL
(defun IS-CONSOLE (stream)
  (and (streamp stream) (output-stream-p stream)
       (eq (system:fp-output-stream stream)
           (system:fp-output-stream *terminal-io*))))

#-(OR Lucid KCL :CCL)
(defun IS-CONSOLE (stream) (EQ stream *terminal-io*))

; 10.0 Control Structures

; 10.8.4 Auxiliary Operators

(defun nilfn (&rest ignore)
 (declare (ignore ignore)) 
 ())

; 11.0 Operations on Identifiers

; 11.1 Creation

(defun upcase (l)
  (cond ((stringp l) (string-upcase l))
        ((identp l) (intern (string-upcase (symbol-name l))))
        ((characterp l) (char-upcase l))
        ((atom l) l)
        (t (mapcar #'upcase l))))

(define-function 'U-CASE #'upcase)
(define-function 'LC2UC #'upcase)

(defun downcase (l)
  (cond ((stringp l) (string-downcase l))
        ((identp l) (intern (string-downcase (symbol-name l))))
        ((characterp l) (char-downcase L))
        ((atom l) l)
        (t (mapcar #'downcase l))))

(define-function 'L-CASE #'downcase)

; 11.2 Accessing

;; note it is important that PNAME returns nil not an error for non-symbols
(defun pname (x)
  (cond ((symbolp x) (symbol-name x))
	((characterp x) (string x))
	(t nil)))

;; property lists in vmlisp are alists
(defun PROPLIST (x)
  (if (symbolp x)
#-:CCL
   (plist2alist (symbol-plist x))
#+:CCL
   (plist2alist (plist x))
    nil))

(defun plist2alist (x)
  (if (null x) 
      nil
      (cons (cons (first x) (second x)) (plist2alist (cddr x)))))

#-:CCL
(defun put (sym ind val) (setf (get sym ind) val))

(define-function 'MAKEPROP #'put)

; 12.0 Operations on Numbers

@
\section{The digits-by-radix function} 
The purpose of the following function is to calculate the number of
digits in the radix $B$ expansion of an arbitrary Lisp integer $n$.
The width of an integer can be determined rapidly when the radix is a
power of two, otherwise an approach based on successive divisions is
used.

We have a subfunction called ``power-of-two-width''.
When the radix $B$ is of the form $2^b$, $b$ bits are needed to
represent one radix $B$ digit. The radix $B$ width of $n$ is obtained
by dividing the width of the binary representation of $n$ by $b$, and
incrementing the result when the remainder is non-zero.

We have a subfunction called ``digits-by-radix''.
When the radix is not a power of two, we choose a power $p$ of the
radix $B$ and use $B^p$ as a divisor.  Each division counts as $p$
digits in the radix $B$ expansion.  The power, bound to the variable
[[digits]] below, is chosen so that $B^p <$
\texttt{most-positive-long-float}. This allows use of [[log]] to
compute $p$ without concern for floating point overflow.  Once a
quotient is produced which is smaller than the divisor, we complete
the calculation by repeated divisions using the radix itself.

@
<<*>>=
(defun digits-by-radix (n &optional (radix 10))
  (flet (
   (power-of-two-width (n radix)
    (let ((bits (integer-length n))
          (radix-bits (1- (integer-length radix))))
      (multiple-value-bind (quo rem) (floor bits radix-bits)
        (if (zerop rem) quo (1+ quo)))))
   (iterative-width (n radix)
     (multiple-value-bind (q width)
         (let* ((target (if (< n most-positive-long-float)
                            (values n)
                            (values most-positive-long-float)))
                (digits (let ((d (floor (log target radix))))
                          (if (zerop d) 1 d)))
                (div (expt radix digits)))
           (loop for q = n then (floor q div)
                 until (< q div) sum digits into width
                 finally (return (values q width))))
       (+ width (loop for r = q then (floor r radix)
                      until (zerop r) count t))))
      )
    (assert (>= radix 2) (radix) 
            "Bad radix ~D < 2 given to DIGITS-BY-RADIX." radix)
    (setq n (abs n))
    (cond
      ((zerop n) (values 1))
      ((zerop (logand radix (1- radix))) (power-of-two-width n radix))
      (t (iterative-width n radix)))))


; 12.1 Conversion

(define-function 'FIX #'truncate)
(define-function 'INT2RNUM #'float)

; 12.2 Predicates

;(define-function 'lessp #'<)

;(define-function 'greaterp #'>)


;(define-function 'fixp #'integerp)

; 12.3 Computation

;(define-function 'add1 #'1+)
;(define-function 'sub1 #'1-)
;(define-function 'plus #'+)
;(define-function 'times #'*)
;(define-function 'difference #'-)
;(define-function 'minus #'-)
;(define-function 'absval #'abs)

#-:CCL
(defun QUOTIENT (x y)
  (cond ((or (floatp x) (floatp y)) (lisp:/ x y))
        (t (truncate x y))))
#+:CCL
(defun QUOTIENT (x y)
  (cond ((or (floatp x) (floatp y)) (/ x y))
        (t (truncate x y))))

(define-function 'vm/ #'quotient)

#-:CCL
(defun REMAINDER (x y)
  (if (and (integerp x) (integerp y))
      (rem x y)
      (- x (* y (QUOTIENT x y)))))

#-:CCL
(defun DIVIDE (x y)
  (if (and (integerp x) (integerp y))
      (multiple-value-list (truncate x y))
      (list (QUOTIENT x y) (REMAINDER x y))))

(defun QSQUOTIENT (a b) (the fixnum (truncate (the fixnum a) (the fixnum b))))

(defun QSREMAINDER (a b) (the fixnum (rem (the fixnum a) (the fixnum b))))

; 13.3 Updating


(defun RPLPAIR (pair1 pair2)
  (RPLACA pair1 (CAR pair2))
  (RPLACD pair1 (CDR pair2)) pair1)

(defun RPLNODE (pair1 ca2 cd2)
 (RPLACA pair1 ca2) 
 (RPLACD pair1 cd2) pair1)

; 14.0 Operations on Lists

; 14.1 Creation

(defun VEC2LIST (vec) (coerce vec 'list))

(defun |remove| (list item &optional (count 1))
  (if (integerp count)
      (remove item list :count count :test #'equalp)
      (remove item list :test #'equalp)))

(defun REMOVEQ (list item &optional (count 1))
  (if (integerp count)
      (remove item list :count count :test #'eq)
      (remove item list :test #'eq)))

; 14.2 Accessing

(defun |last| (x) (car (lastpair x)))

; 14.3 Searching

(DEFUN |assoc| (X Y)
  "Return the pair associated with key X in association list Y."
  ; ignores non-nil list terminators
  ; ignores non-pair a-list entries
  (cond ((symbolp X)
	 (PROG NIL
	       A  (COND ((ATOM Y) (RETURN NIL))
			((NOT (consp (CAR Y))) )
			((EQ (CAAR Y) X) (RETURN (CAR Y))) )
	       (SETQ Y (CDR Y))
	       (GO A)))
	((or (numberp x) (characterp x))
	 (PROG NIL
	       A  (COND ((ATOM Y) (RETURN NIL))
			((NOT (consp (CAR Y))) )
			((EQL (CAAR Y) X) (RETURN (CAR Y))) )
	       (SETQ Y (CDR Y))
	       (GO A)))
	(t
	 (PROG NIL
	       A  (COND ((ATOM Y) (RETURN NIL))
			((NOT (consp (CAR Y))) )
			((EQUAL (CAAR Y) X) (RETURN (CAR Y))) )
	       (SETQ Y (CDR Y))
	       (GO A)))))
; 14.5 Updating

(defun NREMOVE (list item &optional (count 1))
  (if (integerp count)
      (delete item list :count count :test #'equal)
      (delete item list :test #'equal)))

(defun NREMOVEQ (list item &optional (count 1))
  (if (integerp count)
      (delete item list :count count )
      (delete item list )))

(defun EFFACE (item list) (delete item list :count 1 :test #'equal))

(defun NCONC2 (x y) (NCONC x y)) ;NCONC with exactly two arguments

; 14.6 Miscellaneous

(defun QSORT (l)
 (declare (special sortgreaterp))
  (NREVERSE (sort (copy-seq l) SORTGREATERP)))

(defun SORTBY (keyfn l)
 (declare (special sortgreaterp))
  (nreverse (sort (copy-seq l) SORTGREATERP :key keyfn)))

; 16.0 Operations on Vectors

; 16.1 Creation

(defun MAKE-VEC (n) (make-array n))

(define-function 'GETREFV #'make-array)

@
Waldek Hebisch points out that, in the expression:
\begin{verbatim}
  reduce(+,[1.0/i for i in 1..20000])
\end{verbatim}
a significant amount of the time is spent in this function.
A special case was added to significantly reduce the execution time.
This was a problem in GCL as of 2.6.8pre and may be fixed in future
releases. If it is fixed then the original definition, which was
\begin{verbatim}
(defun LIST2VEC (list) (coerce list 'vector))
\end{verbatim}
can be restored.
<<*>>=
(defun LIST2VEC (list)
 (if (consp list)
  (let* ((len (length list))
         (vec (make-array len)))
    (dotimes (i len)
     (setf (aref vec i) (pop list)))
    vec)
  (coerce list 'vector)))

(define-function 'LIST2REFVEC #'LIST2VEC)

; 16.2 Accessing


;(define-function 'FETCHCHAR #'char)

;; Oddly, LENGTH is more efficient than LIST-LENGTH in CCL, since the former
;; is compiled and the latter is byte-coded!
(defun size (l) 
  (cond ((vectorp l) (length l))
#+:CCL  ((stringp l) (length l)) ;; Until ACN fixes his lisp -> C translator.
#-:CCL  ((consp l)   (list-length l))
#+:CCL  ((consp l)   (length l))
	(t           0)))

(define-function 'MOVEVEC #'replace)

; 17.0 Operations on Character and Bit Vectors

(defun charp (a) (or (characterp a)
                     (and (identp a) (= (length (symbol-name a)) 1))))

(defun NUM2CHAR (n) (code-char n))

(defun CHAR2NUM (c) (char-code (character c)))

(defun CGREATERP (s1 s2) (string> (string s1) (string s2)))

(define-function 'STRGREATERP #'CGREATERP)

; 17.1 Creation

(define-function 'strconc #'concat)

(defun make-cvec (sint) (make-array sint :fill-pointer 0 :element-type 'string-char))

(define-function 'getstr #'make-cvec)

(defun make-full-cvec (sint &optional (char #\space))
  (make-string sint :initial-element (character char)))

(define-function 'getfullstr #'make-full-cvec)

; 17.2 Accessing

(defun QENUM (cvec ind) (char-code (char cvec ind)))

(defun QESET (cvec ind charnum)
  (setf (char cvec ind) (code-char charnum)))

(defun string2id-n (cvec sint)
  (if (< sint 1)
      nil
      (let ((start (position-if-not #'(lambda (x) (char= x #\Space)) cvec)))
        (if start
            (let ((end (or (position #\Space cvec :start start) (length cvec))))
              (if (= sint 1)
                  (intern (subseq cvec start end))
                  (string2id-n (subseq cvec end) (1- sint))))
            0))))

(defun substring (cvec start length)
  (setq cvec (string cvec))
  (if length (subseq cvec start (+ start length)) (subseq cvec start)))

; 17.3 Searching

;;- (defun strpos (what in start dontcare)
;;-    (setq what (string what) in (string in))
;;-    (if dontcare (progn (setq dontcare (character dontcare))
;;- 		       (search what in :start2 start
;;- 			       :test #'(lambda (x y) (or (eql x dontcare)
;;- 							 (eql x y)))))
;;-                 (search what in :start2 start)))

(defun strpos (what in start dontcare)
   (setq what (string what) in (string in))
   (if dontcare (progn (setq dontcare (character dontcare))
		       (search what in :start2 start
			       :test #'(lambda (x y) (or (eql x dontcare)
							 (eql x y)))))
                (if (= start 0)
                   (search what in)
                   (search what in :start2 start))
   ))

; In the following, table should be a string:

(defun strposl (table cvec sint item)
  (setq cvec (string cvec))
  (if (not item)
      (position table cvec :test #'(lambda (x y) (position y x)) :start sint)
      (position table cvec :test-not #'(lambda (x y) (position y x)) :start sint)))

; 17.4 Updating operators

(defun suffix (id cvec)
  "Suffixes the first char of the symbol or char ID to the string CVEC,
    changing CVEC."
  (unless (characterp id) (setq id (elt (string id) 0)))
  (cond ((array-has-fill-pointer-p cvec)
	 (vector-push-extend id cvec)
	 cvec)
	((adjustable-array-p cvec)
	 (let ((l (length cvec)))
	   (adjust-array cvec (1+ l))
	   (setf (elt cvec l) id)
	   cvec))
	(t (concat cvec id))))

(defun setsize (vector size) (adjust-array vector size))

(define-function 'changelength #'setsize)

(defun trimstring (x) x)

;;-- (defun rplacstr (cvec1 start1 length1 cvec2
;;--                        &optional (start2 0) (length2 nil)
;;--                        &aux end1 end2)
;;--   (setq cvec2 (string cvec2))
;;--   (if (null start1) (setq start1 0))
;;--   (if (null start2) (setq start2 0))
;;--   (if (null length1) (setq length1 (- (length cvec1) start1)))
;;--   (if (null length2) (setq length2 (- (length cvec2) start2)))
;;--   (if (numberp length1) (setq end1 (+ start1 length1)))
;;--   (if (numberp length2) (setq end2 (+ start2 length2)))
;;--   (if (/= length1 length2)
;;--       (concatenate 'string (subseq cvec1 0 start1)
;;--                            (subseq cvec2 start2 end2)
;;--                            (subseq cvec1 end1))
;;--       (replace cvec1 cvec2 :start1 start1 :end1 end1
;;--              :start2 start2 :end2 end2)))

; The following version has been provided to avoid reliance on the
; Common Lisp concatenate and replace functions. These built-in Lisp
; functions would probably end up doing the character-by-character
; copying shown here, but would also need to cope with generic sorts
; of sequences and unwarranted keyword generality

(defun rplacstr (cvec1 start1 length1 cvec2
                       &optional start2 length2
                       &aux end1 end2)
  (setq cvec2 (string cvec2))
  (if (null start1) (setq start1 0))
  (if (null start2) (setq start2 0))
  (if (null length1) (setq length1 (- (length cvec1) start1)))
  (if (null length2) (setq length2 (- (length cvec2) start2)))
  (setq end1 (+ start1 length1))
  (setq end2 (+ start2 length2))
  (if (= length1 length2)
      (do ()
          ((= start1 end1) cvec1)
          (setf (aref cvec1 start1) (aref cvec2 start2))
          (setq start1 (1+ start1))
          (setq start2 (1+ start2)))
      (let* ((l1 (length cvec1))
#+:CCL       (r (lisp::make-simple-string (- (+ l1 length2) length1)))
#-:CCL       (r (lisp::make-string (- (+ l1 length2) length1)))
             (i 0))
         (do ((j 0 (1+ j)))
             ((= j start1))
             (setf (aref r i) (aref cvec1 j))
             (setq i (1+ i)))
         (do ((j start2 (1+ j)))
             ((= j end2))
             (setf (aref r i) (aref cvec2 j))
             (setq i (1+ i)))
         (do ((j end1 (1+ j)))
             ((= j l1))
             (setf (aref r i) (aref cvec1 j))
             (setq i (1+ i)))
         r)
  ))

; 19.0 Operations on Arbitrary Objects

; 19.1 Creating

(defun MSUBST (new old tree) (subst new old tree :test #'equal))
; note subst isn't guaranteed to copy
(defun |nsubst| (new old tree) (nsubst new old tree :test #'equal))
(define-function 'MSUBSTQ #'subst) ;default test is eql
(define-function 'SUBSTQ #'SUBST) ;default test is eql subst is not guaranteed to copy

(defun copy (x) (copy-tree x)) ; not right since should descend vectors

(defun eqsubstlist (new old list) (sublis (mapcar #'cons old new) list))

; Gen code for SETQP expr

(eval-when (compile load eval)
 (defun DCQEXP (FORM EQTAG)
  (PROG (SV pvl avl CODE)
        (declare (special pvl avl))
        (setq SV (GENSYM))
        (setq CODE (DCQGENEXP SV FORM EQTAG NIL))
        (RETURN
          `(LAMBDA (,sv)
             (PROG ,pvl
                   ,@code
                   (RETURN 'true)
                BAD (RETURN NIL) ) ))))
)
; Generate Expr code for DCQ
(eval-when (compile load eval)
 (defun DCQGENEXP (SV FORM EQTAG QFLAG)
  (PROG (D A I L C W)
        (declare (special pvl avl))
    (COND ((EQ FORM SV) (RETURN NIL))
          ((IDENTP FORM) (RETURN `((setq ,form ,sv)) ))
          ((simple-vector-p FORM)
           (RETURN (SEQ
             (setq L (length FORM))
             (IF (EQ L 0)
                 (RETURN (COND ((NULL QFLAG)
                                `((cond ((not (simple-vector-p ,sv)) (go bad))))))))
             (setq I (1- L))
         LP  (setq A (elt FORM I))
             (COND ((AND (NULL W) (OR (consp A) (simple-vector-p A)))
                    (COND ((consp AVL) (setq W (car (RESETQ AVL (cdr AVL)))))
                          ((setq PVL (CONS (setq W (GENSYM)) PVL))))))
             (setq C (NCONC (COND ((IDENTP A) `((setq ,a (ELT ,sv ,i))))
                                  ((OR (consp A) (simple-vector-p A))
                                   `((setq ,w (ELT ,sv ,i))
                                     ,@(dcqgenexp w a eqtag qflag))))
                            C))
             (if (EQ I 0) (GO RET))
             (setq I (1- I))
             (GO LP)
         RET (if W (setq AVL (CONS W AVL)))
             (COND ((NULL QFLAG)
                    `((COND ((OR (NOT (simple-vector-p ,sv)) (< (length ,sv) ,l))
                             (GO BAD)))
                      ,@c))
                   ('T C)))))
          ((NOT (consp FORM)) (RETURN NIL))
          ((AND EQTAG (EQ (car FORM) EQTAG))
           (RETURN
             (COND
               ((OR (NOT (EQ 3 (LENGTH FORM))) (NOT (IDENTP (car (setq FORM (cdr FORM))))))
                (MACRO-INVALIDARGS 'DCQ\/QDCQ FORM (MAKESTRING "invalid pattern.")))
               (`((setq ,(car form) ,sv)  ,@(DCQGENEXP SV (CADR FORM) EQTAG QFLAG)))))))
    (setq A (car FORM))
    (setq D (cdr FORM))
    (setq C (COND ((IDENTP A) `((setq ,a (CAR ,sv))))
                  ((OR (consp A) (simple-vector-p A))
                   (COND ((AND (NULL D) (IDENTP SV)) )
                         ((COND ((consp AVL) (setq W (car (RESETQ AVL (cdr AVL)))))
                                ((setq PVL (CONS (setq W (GENSYM)) PVL)) ) ) ) )
                   (COND ((AND (consp A) EQTAG (EQ (car A) EQTAG))
                          (DCQGENEXP (LIST 'CAR SV) A EQTAG QFLAG) )
                         (`((setq ,(or w sv) (CAR ,sv))
                            ,@(DCQGENEXP (OR W SV) A EQTAG QFLAG)))))))
    (setq C (NCONC C (COND ((IDENTP D) `((setq ,d (CDR ,sv))))
                           ((OR (consp D) (simple-vector-p D))
                            (COND
                              ((OR W (IDENTP SV)) )
                              ((COND ((consp AVL)
                                      (setq W (car (RESETQ AVL (cdr AVL)))) )
                                     ((setq PVL (CONS (setq W (GENSYM)) PVL)) ) ) ) )
                            (COND ((AND (consp D) EQTAG (EQ (car D) EQTAG))
                                   (DCQGENEXP (LIST 'CDR SV) D EQTAG QFLAG) )
                                  (`((setq ,(or w sv) (CDR ,sv))
                                     ,@(DCQGENEXP (OR W SV) D EQTAG QFLAG))))))))
    (COND (W (setq AVL (CONS W AVL))))
    (RETURN (COND ((NULL QFLAG) `((COND ((ATOM ,sv) (GO BAD))) ,@c)) (C)))))
)


; 19.3 Searching

; Generate code for EQQ

(eval-when (compile load eval)
 (defun ECQEXP (FORM QFLAG)
  (PROG (SV PVL CODE)
        (declare (special pvl))
        (setq SV (GENSYM))
        (setq CODE (ECQGENEXP SV FORM QFLAG))
        (RETURN
              `(LAMBDA (,sv)
                 (PROG ,pvl
                       ,@code
                       (RETURN 'true)
                    BAD (RETURN NIL) ) ))))
)

; Generate code for EQQ innards

(eval-when (compile load eval)
 (defun ECQGENEXP (SV FORM QFLAG)
  (PROG (D A I L C W)
        (declare (special pvl))
        (COND
          ((EQ FORM SV) (RETURN NIL))
          ((OR
              (IDENTP FORM)
              (NUMP FORM)
              (AND (consp FORM) (EQ (qcar FORM) 'QUOTE)))
           (RETURN
             `((COND ((NOT (EQ ,form ,sv)) (GO BAD))) )))
          ((simple-vector-p FORM)
           (RETURN (SEQ
              (setq L (length FORM))
              (if (EQ L 0)
                  (RETURN
                    (COND ((NULL QFLAG)
                           `((COND ((NOT (simple-vector-p ,sv)) (GO BAD))) )))
                    ))
              (setq I (1- L))
           LP (setq A (elt FORM I))
              (if (AND (NULL W) (OR (consp A) (simple-vector-p A)))
                  (push (setq W (GENSYM)) PVL))
              (setq C
                    (NCONC
                      (COND
                        ( (OR
                            (IDENTP A)
                            (NUMP A)
                            (AND (consp A) (EQ (qcar A) 'QUOTE)))
                         `((COND ( (NOT (EQ ,a (ELT ,sv ,i)))
                                  (GO BAD) ) ) ) )
                        ( (OR (consp A) (simple-vector-p A))
                         `((setq ,w (ELT ,sv ,i))
                           ,@(ECQGENEXP W A QFLAG))))
                      C) )
              (if (EQ I 0) (GO RET) )
              (setq I (1- I))
              (GO LP)
           RET
              (COND
                ( (NULL QFLAG)
                 `((COND ( (OR
                             (NOT (simple-vector-p ,sv))
                             (< (length ,sv) ,l))
                          (GO BAD) ) )
                   ,@c))
                ( 'T C ) )) ))
          ( (NOT (consp FORM))
           (RETURN NIL) ) )
        (setq A (car FORM))
        (setq D (cdr FORM))
        (if (OR (consp A) (simple-vector-p A) (consp D) (simple-vector-p D))
           (setq PVL (CONS (setq W (GENSYM)) PVL)))
        (setq C
              (COND
                ( (OR (IDENTP A) (NUMP A) (AND (consp A) (EQ (car A) 'QUOTE)))
                 `((COND ((NOT (EQ ,a (CAR ,sv))) (GO BAD))) ))
                ( (OR (consp A) (simple-vector-p A))
                 `((setq ,w (CAR ,sv))
                   ,@(ECQGENEXP W A QFLAG)))))
        (setq C
              (NCONC
                C
                (COND
                  ( (OR (IDENTP D) (NUMP D) (AND (consp D)
                                                 (EQ (car D) 'QUOTE)))
                   `((COND ((NOT (EQ ,d (CDR ,sv))) (GO BAD))) ))
                  ( (OR (consp D) (simple-vector-p D))
                   `((setq ,sv (CDR ,sv))
                     ,@(ECQGENEXP SV D QFLAG))))))
        (RETURN
          (COND
            ( (NULL QFLAG)
             `((COND ( (ATOM ,sv)
                      (GO BAD) ) )
               ,@c))
            ( 'T
             C ) )) ) )
)

; 19.4 Updating

; Generate code for RPLQ exprs

(eval-when (compile load eval)
 (defun RCQEXP (FORM)
    (PROG (SV PVL CODE)
          (declare (special pvl))
      (setq SV (GENSYM))
      (setq CODE (RCQGENEXP SV FORM NIL))
      (RETURN
        `(LAMBDA (,sv)
              (PROG ,pvl
                ,@code
                (RETURN 'true)
            BAD (RETURN NIL) ) ))))
)

; Generate code for RPLQ expr innards

(eval-when (compile load eval)
 (defun RCQGENEXP (SV FORM QFLAG)
    (PROG (D A I L C W)
          (declare (special pvl))
      (COND
        ( (EQ FORM SV)
          (RETURN NIL) )
        ( (simple-vector-p FORM)
         (RETURN (SEQ
            (setq L (length FORM))
            (if (EQ L 0) (RETURN NIL))
            (setq I (1- L))
        LP  (setq A (elt FORM I))
            (COND
              ( (AND
                  (NULL W)
                  (OR (AND (consp A) (NOT (EQ (car A) 'QUOTE)))
                           (simple-vector-p A)))
                (setq PVL (CONS (setq W (GENSYM)) PVL)) ) )
            (setq C
              (NCONC
                (COND
                  ( (OR
                      (IDENTP A)
                      (NUMP A)
                      (AND (consp A) (EQ (car A) 'QUOTE)))
                    `((SETELT ,sv ,i ,a)))
                  ( (OR (consp A) (simple-vector-p A))
                    `((setq ,w (ELT ,sv ,i))
                      ,@(RCQGENEXP W A QFLAG))))
                C) )
            (COND
              ( (EQ I 0)
                (GO RET) ) )
            (setq I (1- I))
            (GO LP)
        RET (RETURN
              (COND
                ( (NULL QFLAG)
                  `((COND ( (OR
                              (NOT (simple-vector-p ,sv))
                              (< (length ,sv) ,l))
                            (GO BAD) ) )
                    ,@c))
                ( 'T
                  C ) )) )))
        ( (NOT (consp FORM))
          (RETURN NIL) ) )
      (setq A (car FORM))
      (setq D (cdr FORM))
      (cond
        ( (or (and (consp A) (NOT (EQ (car A) 'QUOTE))) (simple-vector-p A))
          (setq PVL (CONS (setq W (GENSYM)) PVL)) ) )
      (setq C
        (COND
          ( (OR (IDENTP A) (NUMP A) (AND (consp A) (EQ (car A) 'QUOTE)))
            `((rplaca ,sv ,a)))
          ( (OR (consp A) (simple-vector-p A))
            `((setq ,w (CAR ,sv))
              ,@(RCQGENEXP W A QFLAG)))))
      (setq C
        (NCONC
          C
          (COND
            ( (OR (IDENTP D) (NUMP D) (AND (consp D) (EQ (car D) 'QUOTE)))
              `((RPLACD ,sv ,d)))
            ( (OR (consp D) (simple-vector-p D))
              `((setq ,sv (CDR ,sv))
                ,@(RCQGENEXP SV D QFLAG))))))
      (RETURN
        (COND
          ( (NULL QFLAG)
            `((COND ( (ATOM ,sv)
                      (GO BAD) ) )
              ,@c))
          ( 'T
            C ) )) ) )
)

; 22.0 Internal and External Forms

; 23.0 Reading


(define-function 'next #'read-char)

; 24.0 Printing

@
\section{The StringImage Fix}
In GCL 2.5 there is a bug in the write-to-string function.
It should respect *print-escape* but it does not. That is,
\begin{verbatim}

In GCL 2.4.1:
(setq *print-escape* nil)
(write-to-string '|a|) ==> "a"

In GCL 2.5:
(setq *print-escape* nil)
(write-to-string '|a|) ==> "|a|"

\end{verbatim}
The form2LispString function uses stringimage and fails.
The princ-to-string function assumes *print-escape* is nil
and works properly.

<<*>>=
;(define-function 'prin2cvec #'write-to-string)
(define-function 'prin2cvec #'princ-to-string)
;(define-function 'stringimage #'write-to-string)
(define-function 'stringimage #'princ-to-string)
(define-function 'printexp #'princ)
(define-function 'prin0  #'prin1)

(defun |F,PRINT-ONE| (form &optional (stream *standard-output*))
 (declare (ignore stream))
    (let ((*print-level* 4) (*print-length* 4))
       (prin1 form) (terpri)))

(defun prettyprint (x &optional (stream *standard-output*))
  (prettyprin0 x stream) (terpri stream))

(defun prettyprin0 (x &optional (stream *standard-output*))
  (let ((*print-pretty* t) (*print-array* t))
    (prin1 x stream)))

(defun vmprint (x &optional (stream *standard-output*))
  (prin1 x stream) (terpri stream))

(defun tab (sint &optional (stream t))
  (format stream "~vT" sint))

; 27.0 Stream I/O


; 27.1 Creation

; 28.0 Key addressed I/O


; 46.0 Call tracing


(defun EMBEDDED () (mapcar #'car *embedded-functions*))

(defun EMBED (CURRENT-BINDING NEW-DEFINITION)
  (PROG
#+:CCL (OP BV BODY OLD-DEF *COMP)
#-:CCL (OP BV BODY OLD-DEF)
      (COND
        ( (NOT (IDENTP CURRENT-BINDING))
          (SETQ CURRENT-BINDING
                (error (format nil "invalid argument ~s to EMBED" CURRENT-BINDING))) ) )
      (SETQ OLD-DEF (symbol-function CURRENT-BINDING))
      (SETQ NEW-DEFINITION
        (SETF (symbol-function CURRENT-BINDING)
          (COND
            ( (NOT (consp NEW-DEFINITION))
              NEW-DEFINITION )
            ( (AND
                (DCQ (OP BV . BODY) NEW-DEFINITION)
                (OR (EQ OP 'LAMBDA) (EQ OP 'MLAMBDA)))
              (COND
                ( (NOT (MEMQ CURRENT-BINDING (FLAT-BV-LIST BV)))
                 `(,OP ,BV ((LAMBDA (,CURRENT-BINDING) . ,BODY) ',OLD-DEF))
                   )
                ( 'T
                  NEW-DEFINITION ) ) )
            ( 'T
              `((LAMBDA (,CURRENT-BINDING) ,NEW-DEFINITION) ',OLD-DEF)))
            ) )
#+:CCL (IF (CONSP NEW-DEFINITION) (SETQ NEW-DEFINITION (CDR NEW-DEFINITION)))
      (push (LIST CURRENT-BINDING NEW-DEFINITION OLD-DEF) *embedded-functions*)
      (RETURN CURRENT-BINDING) ) )

(defun UNEMBED (CURRENT-BINDING)
    (PROG
#+:CCL  (TMP E-LIST CUR-DEF *COMP)
#-:CCL  (TMP E-LIST CUR-DEF)
      (SETQ E-LIST *embedded-functions*)
      (SETQ CUR-DEF (symbol-function CURRENT-BINDING))
#+:CCL (IF (CONSP CUR-DEF) (SETQ CUR-DEF (CDR CUR-DEF)))
      (COND
        ( (NOT (consp E-LIST))
          NIL )
        ( (ECQ ((CURRENT-BINDING CUR-DEF)) E-LIST)
          (SETF (symbol-function CURRENT-BINDING) (QCADDAR E-LIST))
          (SETQ *embedded-functions* (QCDR E-LIST))
          (RETURN CURRENT-BINDING) )
        ( 'T
          (SEQ
            (SETQ TMP E-LIST)
        LP  (COND
              ( (NOT (consp (QCDR TMP)))
                (EXIT NIL) )
              ( (NULL (ECQ ((CURRENT-BINDING CUR-DEF)) (QCDR TMP)))
                (SETQ TMP (QCDR TMP))
                (GO LP) )
              ( 'T
                (SETF (symbol-function  CURRENT-BINDING) (QCAR (QCDDADR TMP)))
                (RPLACD TMP (QCDDR TMP))
                (RETURN CURRENT-BINDING) ) ) ) ) )
      (RETURN NIL) ))

(defun FLAT-BV-LIST (BV-LIST)
  (PROG (TMP1)
      (RETURN
        (COND
          ( (VARP BV-LIST)
            (LIST BV-LIST) )
          ( (REFVECP BV-LIST)
            (FLAT-BV-LIST (VEC2LIST (MAPELT #'FLAT-BV-LIST BV-LIST))) )
          ( (NOT (consp BV-LIST))
            NIL )
          ( (EQ '= (SETQ TMP1 (QCAR BV-LIST)))
            (FLAT-BV-LIST (QCDR BV-LIST)) )
          ( (VARP TMP1)
            (CONS TMP1 (FLAT-BV-LIST (QCDR BV-LIST))) )
          ( (AND (NOT (consp TMP1)) (NOT (REFVECP TMP1)))
            (FLAT-BV-LIST (QCDR BV-LIST)) )
          ( 'T
            (NCONC (FLAT-BV-LIST TMP1) (FLAT-BV-LIST (QCDR BV-LIST))) ) )) ))

(defun VARP (TEST-ITEM)
    (COND
      ( (IDENTP TEST-ITEM)
        TEST-ITEM )
      ( (AND
          (consp TEST-ITEM)
          (OR (EQ (QCAR TEST-ITEM) 'FLUID) (EQ (QCAR TEST-ITEM) 'LEX))
          (consp (QCDR TEST-ITEM))
          (IDENTP (QCADR TEST-ITEM)))
        TEST-ITEM )
      ( 'T
        NIL ) ) )

; 48.0 Miscellaneous CMS Interactions

(defun CurrentTime ()
  (multiple-value-bind (sec min hour day month year) (get-decoded-time)
    (format nil "~2,'0D/~2,'0D/~2,'0D~2,'0D:~2,'0D:~2,'0D"
	    month day (rem year 100) hour min sec)))

(defun $screensize () '(24 80))          ; You tell me!!

; 97.0 Stuff In The Manual But Wierdly Documented

(defun EBCDIC (x) (int-char x))

;; This isn't really compatible but is as close as you can get in common lisp
;; In place of ((one-of 1 2 3) l)  you should use
;;   (funcall (one-of 1 2 3) l)

(defun doDSETQ (form pattern exp)
  (let (PVL AVL)
    (declare (special PVL AVL))
    (COND ((IDENTP PATTERN)
           (LIST 'SETQ PATTERN EXP))
          ((AND (NOT (consp PATTERN)) (NOT (simple-vector-p PATTERN)))
           (MACRO-INVALIDARGS 'DSETQ FORM "constant target."))
          ((let* ((SV (GENSYM))
                  (E-PART (DCQGENEXP (LIST 'IDENTITY SV) PATTERN '= NIL)))
             (setq e-part
                   `(LAMBDA (,sv)
                      (PROG ,pvl
                            ,@e-part
                            (RETURN ,sv)
                         BAD (RETURN (SETQERROR ,sv)))))
             `(,e-part ,exp))))))

(defun SETQERROR (&rest FORM) (error (format nil "in destructuring ~S" FORM)))




(defun MACRO-INVALIDARGS (NAME FORM MESSAGE)
    (setq MACERRORCOUNT  (+ 1 (eval 'MACERRORCOUNT)))
    (error (format nil 
                   "invalid arguments to macro ~S with invalid argument ~S, ~S"
                   name form message)))

(defun MACRO-MISSINGARGS (NAME ignore N)
  (declare (ignore ignore))
  (setq MACERRORCOUNT (+ 1 (eval 'MACERRORCOUNT)))
  (error (concatenate 'string (symbol-name NAME) " requires "
                       (if (minusp N) "at least " "exactly ")
                       (setq N (abs N))
                       (case N (0 "no") (1 "one") (2 "two") (3 "three")
                             (4 "four") (5 "five") (6 "six")
                             (t (princ-to-string N)))
                       (if (eq n 1) " argument," " arguments,"))))

(defun MACERR (MESSAGE &rest ignore)
  (declare (ignore ignore))
      (setq MACERRORCOUNT (+ 1 (eval 'MACERRORCOUNT)))
      (error
        (LIST "in the expression:" MESSAGE))
      ())

#+Lucid
(defun numberofargs (x)
  (setq x (system::arglist x))
  (let ((nx (- (length x) (length (memq '&aux x)))))
    (if (memq '&rest x) (setq nx (- (1- nx))))
    (if (memq '&optional x) (setq nx (- (1- (abs nx)))))
    nx))

; 98.0 Stuff Not In The VMLisp Manual That We Like

; A version of GET that works with lists

; (defun getl (sym key )
;   (cond ((consp sym) (cdr (assoc key sym :test #'eq)))
;         ((symbolp sym) (get sym key))))
(defun getl (sym key )
  (cond ((consp sym) (cdr (assq key sym)))
        ((symbolp sym) (get sym key))))

; The following should actually position the cursor at the sint'th line of the screen:

(defun $showline (cvec sint) (terpri) sint (princ cvec))

; 99.0 Ancient Stuff We Decided To Keep

(defun LAM\,EVALANDFILEACTQ (name &optional (form name))
    (LAM\,FILEACTQ name form) (eval form))

(defun LAM\,FILEACTQ (name form)
       (if *FILEACTQ-APPLY* (FUNCALL *FILEACTQ-APPLY* name form)))

(defun CALLBELOW (&rest junk) junk) ; to invoke system dependent code?

(define-function 'EVA1 #'eval) ;EVA1 and VMLISP EVAL make lexicals visible
(define-function 'EVALFUN #'eval) ;EVALFUN drops lexicals before evaluating
(define-function 'EVA1FUN #'EVALFUN)

(defun PLACEP (item) (eq item *read-place-holder*))
(defun VMREAD (&optional (st *standard-input*) (eofval *read-place-holder*))
  (read st nil eofval))
(defun |read-line| (st &optional (eofval *read-place-holder*))
  (read-line st nil eofval))

(defun STATEP (item)
 (declare (ignore item))
   nil) ;no state objects
(defun FUNARGP (item)
 (declare (ignore item))
  nil) ;can't tell closures from other functions
(defun PAPPP (item)
 (declare (ignore item))
  nil) ;no partial application objects

#+Lucid
(defun gcmsg (x)
   (prog1 (not system::*gc-silence*) (setq system::*gc-silence* (not x))))
#+(OR IBCL KCL)
(defun gcmsg (x)
   (prog1 system:*gbc-message* (setq system:*gbc-message* x)))
#+:cmulisp
(defun gcmsg (x)
   (prog1 ext:*gc-verbose* (setq ext:*gc-verbose* x)))
#+:allegro
(defun gcmsg (x))

#+Lucid
(defun reclaim () (system:gc))
#+:cmulisp
(defun reclaim () (ext:gc))
#+(OR IBCL KCL)
(defun reclaim () (gbc t))
#+:allegro
(defun reclaim () (excl::gc t))
#+:CCL
(defun reclaim () (gc))

#+Lucid
(defun BPINAME (func)
  (if (functionp func)
      (if (symbolp func) func
	(let ((name (svref func 0)))
	  (if (and (consp name) (eq (car name) 'SYSTEM::NAMED-LAMBDA))
	      (cadr name)
	    name)) )))

#+(OR IBCL KCL)
(defun BPINAME (func)
  (if (functionp func)
      (cond ((symbolp func) func)
	    ((and (consp func) (eq (car func) 'LAMBDA-BLOCK))
	      (cadr func))
	    ((compiled-function-p func)
	     (system:compiled-function-name func))
	    ('t func))))
#+:cmulisp
(defun BPINAME (func)
 (when (functionp func)
  (cond
    ((symbolp func) func)
    ((and (consp func) (eq (car func) 'lambda)) (second (third func)))
    ((compiled-function-p func)
      (system::%primitive header-ref func system::%function-name-slot))
    ('else func))))
#+:allegro
(defun bpiname (func)
 func)
#+:CCL
(defun bpiname (x)
   (if (symbolp x)
     (intern (symbol-name (symbol-function x)) "BOOT")
    nil))

(defun LISTOFQUOTES (bpi)
 (declare (ignore bpi))
  ())

#+Lucid
(defun LISTOFFREES (bpi)
  (if (compiled-function-p bpi)
      (let ((end (- (lucid::procedure-length bpi) 2)))
	(do ((i 3 (1+ i))
	     (ans nil))
	    ((> i end) ans)
	    (let ((locexp (svref bpi i)))
	      (if (symbolp locexp) (push locexp ans)))))))

#-Lucid
(defun LISTOFFREES (bpi)
 (declare (ignore bpi))
 ())

  
#+(and :Lucid (not :ibm/370))
(defun OBEY (S)
  (system::run-aix-program (make-absolute-filename "/lib/obey")
		       :arguments	(list "-c" S)))
#+:cmulisp
(defun OBEY (S)
   (ext:run-program (make-absolute-filename "/lib/obey")
		    (list "-c" S) :input t :output t))
#+(OR IBCL KCL :CCL)
(defun OBEY (S) (SYSTEM S))

#+:allegro
(defun OBEY (S) (excl::run-shell-command s))

(defun RE-ENABLE-INT (number-of-handler) number-of-handler)

(defun equable (x) ;;def needed to prevent recursion in def of eqcar
  (or (null x) (and (consp x) (eq (car x) 'quote) (symbolp (cadr x)))))


(defun QUOREM (i j r) ; never used, refed in parini.boot
  (multiple-value-bind (x y) (truncate i j)
   (rplaca (the cons r) x) (rplacd (the cons r) y)))

(defun MAKE-BVEC (n)
 (make-array (list n) :element-type 'bit :initial-element 0))

(DEFUN LEXGREATERP (COMPERAND-1 COMPERAND-2)
    ;;  "Order of types: pair NIL vec ivec/rvec cvec ident num fbpi mbpi other"
    (COND
      ((EQ COMPERAND-1 COMPERAND-2) NIL)
      ((consp COMPERAND-1)
        (COND
          ( (consp COMPERAND-2)
            (COND
              ( (EQUAL (qcar COMPERAND-1) (qcar COMPERAND-2))
                (LEXGREATERP (qcdr COMPERAND-1) (qcdr COMPERAND-2)) )
              ( (LEXGREATERP (qcar COMPERAND-1) (qcar COMPERAND-2)) ) ) )
          ('else t)))
      ((consp COMPERAND-2) NIL)
      ((NULL COMPERAND-1) 'T )
      ((NULL COMPERAND-2) NIL)
      ((VECP COMPERAND-1)
        (COND
          ((VECP COMPERAND-2) (LEXVGREATERP COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((VECP COMPERAND-2) NIL)
      ((OR (IVECP COMPERAND-1) (RVECP COMPERAND-1))
        (COND
          ( (OR (IVECP COMPERAND-2) (RVECP COMPERAND-2))
            (LEXVGREATERP COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((OR (IVECP COMPERAND-2) (RVECP COMPERAND-2)) NIL )
      ((stringp COMPERAND-1)
        (COND
          ((stringp COMPERAND-2)
            (STRING-GREATERP COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((stringp COMPERAND-2) NIL)
      ((symbolp COMPERAND-1)
        (COND
          ((symbolp COMPERAND-2)
            (STRING-GREATERP (symbol-name COMPERAND-1) (symbol-name COMPERAND-2)) )
          ('else t)))
      ((symbolp COMPERAND-2) NIL )
      ((numberp COMPERAND-1)
        (COND
          ( (numberp COMPERAND-2)
            (> COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((numberp COMPERAND-2) NIL)
      ((CHARACTERP COMPERAND-1)
	(COND 
          ((CHARACTERP COMPERAND-2)
	    (CHAR-GREATERP COMPERAND-1 COMPERAND-2) )
	  ('else t)))
      ((CHARACTERP COMPERAND-2)	NIL )
      ((FBPIP COMPERAND-1)
        (COND
          ((FBPIP COMPERAND-2)
            (LEXGREATERP (BPINAME COMPERAND-1) (BPINAME COMPERAND-2)) )
          ('else t)))
      ((FBPIP COMPERAND-2) NIL)
      ((MBPIP COMPERAND-1)
        (COND
          ((MBPIP COMPERAND-2)
            (LEXGREATERP (BPINAME COMPERAND-1) (BPINAME COMPERAND-2)) )
          ('else t)))
      ((MBPIP COMPERAND-2)
        NIL )
      ((> (SXHASH COMPERAND-1) (SXHASH COMPERAND-2)))))

(DEFUN LEXVGREATERP (VECTOR-COMPERAND-1 VECTOR-COMPERAND-2)
  (declare (simple-vector vector-comperand-1 vector-comperand-2))
    (PROG (L1 L2 I T1 T2)
     (declare (fixnum i l1 l2) )
      (SETQ I -1)
      (SETQ L1 (length VECTOR-COMPERAND-1))
      (SETQ L2 (length VECTOR-COMPERAND-2))
  LP  (setq i (1+ i))
      (COND
        ((EQL L1 I) (RETURN NIL))
        ((EQL L2 I) (RETURN 'T)))
      (COND
        ((EQUAL
            (SETQ T1 (svref VECTOR-COMPERAND-1 I))
            (SETQ T2 (svref VECTOR-COMPERAND-2 I)))
          (GO LP)))
      (RETURN (LEXGREATERP T1 T2)) ) )


(DEFUN GGREATERP (COMPERAND-1 COMPERAND-2)
    ;;  "Order of types: pair NIL vec ivec/rvec cvec ident num fbpi mbpi other"
    (COND
      ((EQ COMPERAND-1 COMPERAND-2) NIL)
      ((symbolp COMPERAND-1)
        (COND
          ((symbolp COMPERAND-2)
            (CGREATERP (symbol-name COMPERAND-1) (symbol-name COMPERAND-2)) )
          ('else t)))
      ((symbolp COMPERAND-2) NIL )
      ((consp COMPERAND-1)
        (COND
          ( (consp COMPERAND-2)
            (COND
              ( (EQUAL (qcar COMPERAND-1) (qcar COMPERAND-2))
                (GGREATERP (qcdr COMPERAND-1) (qcdr COMPERAND-2)) )
              ( (GGREATERP (qcar COMPERAND-1) (qcar COMPERAND-2)) ) ) )
          ('else t)))
      ((consp COMPERAND-2) NIL)
      ((NULL COMPERAND-1) 'T )
      ((NULL COMPERAND-2) NIL)
      ((VECP COMPERAND-1)
        (COND
          ((VECP COMPERAND-2) (VGREATERP COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((VECP COMPERAND-2) NIL)
      ((OR (IVECP COMPERAND-1) (RVECP COMPERAND-1))
        (COND
          ( (OR (IVECP COMPERAND-2) (RVECP COMPERAND-2))
            (VGREATERP COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((OR (IVECP COMPERAND-2) (RVECP COMPERAND-2)) NIL )
      ((stringp COMPERAND-1)
        (COND
          ((stringp COMPERAND-2)
            (CGREATERP COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((stringp COMPERAND-2) NIL)
      ((numberp COMPERAND-1)
        (COND
          ( (numberp COMPERAND-2)
            (> COMPERAND-1 COMPERAND-2) )
          ('else t)))
      ((numberp COMPERAND-2) NIL)
      ((CHARACTERP COMPERAND-1)
	(COND 
          ((CHARACTERP COMPERAND-2)
	    (CHAR> COMPERAND-1 COMPERAND-2) )
	  ('else t)))
      ((CHARACTERP COMPERAND-2)	NIL )
      ((FBPIP COMPERAND-1)
        (COND
          ((FBPIP COMPERAND-2)
            (GGREATERP (BPINAME COMPERAND-1) (BPINAME COMPERAND-2)) )
          ('else t)))
      ((FBPIP COMPERAND-2) NIL)
      ((MBPIP COMPERAND-1)
        (COND
          ((MBPIP COMPERAND-2)
            (GGREATERP (BPINAME COMPERAND-1) (BPINAME COMPERAND-2)) )
          ('else t)))
      ((MBPIP COMPERAND-2)
        NIL )
      ((> (SXHASH COMPERAND-1) (SXHASH COMPERAND-2)))))

(DEFUN VGREATERP (VECTOR-COMPERAND-1 VECTOR-COMPERAND-2)
  (declare (simple-vector vector-comperand-1 vector-comperand-2))
    (PROG (L1 L2 I T1 T2)
     (declare (fixnum i l1 l2) )
      (SETQ I -1)
      (SETQ L1 (length VECTOR-COMPERAND-1))
      (SETQ L2 (length VECTOR-COMPERAND-2))
  LP  (setq i (1+ i))
      (COND
        ((EQL L1 I) (RETURN NIL))
        ((EQL L2 I) (RETURN 'T)))
      (COND
        ((EQUAL
            (SETQ T1 (svref VECTOR-COMPERAND-1 I))
            (SETQ T2 (svref VECTOR-COMPERAND-2 I)))
          (GO LP)))
      (RETURN (GGREATERP T1 T2)) ) )

(defvar SORTGREATERP #'GGREATERP "default sorting predicate")

;17.0 Operations on Hashtables
;17.1 Creation

(defun MAKE-HASHTABLE (id1 &optional (id2 nil))
 (declare (ignore id2))
   (let ((test (case id1
		     ((EQ ID) #'eq)
		     (CVEC #'equal)
		     (EQL #'eql)
		     #+Lucid ((UEQUAL EQUALP) #'EQUALP)
		     #-Lucid ((UEQUAL EQUAL) #'equal)
		     (otherwise (error "bad arg to make-hashtable")))))     
      (make-hash-table :test test)))

;17.2 Accessing

(defmacro HGET (table key &rest default)
   `(gethash ,key ,table ,@default))

(defun HKEYS (table)
   (let (keys)
      (maphash
        #'(lambda (key val) (declare (ignore val)) (push key keys)) table)
        keys))

#+Lucid
(define-function 'HASHTABLE-CLASS #'system::hash-table-test)

@
The static declaration causes a problem as of GCL-2.6.8pre.
Camm issued a fix. This used to read:
\begin{verbatim}
#+AKCL
(clines "static int mem_value(x ,i)object x;int i; { return ((short *)x)[i];}")
\end{verbatim}
<<*>>=
#+AKCL
(clines "int mem_value(x ,i)object x;int i; { return ((short *)x)[i];}")

#+AKCL
(defentry memory-value-short(object int) (int "mem_value"))

;(memory-value-short  (make-hash-table :test 'equal) 12) is 0,1,or 2
;depending on whether the test is eq,eql or equal.
#+AKCL
(defun HASHTABLE-CLASS (table)
  (case (memory-value-short table 12)
	(0 'EQ)
	(1 'EQL)
	(2 'EQUAL)
	(t "error unknown hash table class")))

#+:CCL
(defun HASHTABLE-CLASS (table)
  (case (hashtable-flavour table)
	(0 'EQ)
	(1 'EQL)
	(2 'EQUAL)
	(t (format nil "error unknown hash table class ~a" (hashtable-flavour table)))))

(define-function 'HCOUNT #'hash-table-count)

;17.4 Searching and Updating

(defun HPUT (table key value) (setf (gethash key table) value))

(defun HPUT* (table alist)
  (mapc #'(lambda (pair) (hput table (car pair) (cdr pair))) alist))

(defmacro HREM (table key) `(remhash ,key ,table))

(defun HREMPROP (table key property)
  (let ((plist (gethash key table)))
    (if plist (setf (gethash key table)
                    (delete property plist :test #'equal :key #'car)))))

;17.5 Updating

(define-function 'HCLEAR #'clrhash)

;17.6 Miscellaneous

(define-function 'HASHTABLEP #'hash-table-p)

(define-function 'HASHEQ #'sxhash)

(define-function 'HASHUEQUAL #'sxhash)

(define-function 'HASHCVEC #'sxhash)

(define-function 'HASHID #'sxhash)


(in-package 'boot)

#+(or :cmu :akcl :gcl)
(defun manexp (u)
  (multiple-value-bind (f e s) 
    (decode-float u)
    (cons (* s f) e)))

#+:(or :cmu :akcl :gcl)
(defun acot (a)
  (if (> a 0.0)
    (if (> a 1.0)
       (atan (/ 1.0 a))
       (- (/ pi 2.0) (atan a)))
    (if (< a -1.0)
       (- pi (atan (/ -1.0 a)))
       (+ (/ pi 2.0) (atan (- a))))))

#+:(or :cmu :akcl :gcl)
(defun cot (a)
  (if (or (> a 1000.0) (< a -1000.0))
    (/ (cos a) (sin a))
    (/ 1.0 (tan a))))

(defun sec (x) (/ 1 (cos x)))
(defun csc (x) (/ 1 (sin x)))
(defun acsc (x) (asin (/ 1 x)))
(defun asec (x) (acos (/ 1 x)))
(defun csch (x) (/ 1 (sinh x)))
(defun coth (x) (* (cosh x) (csch x)))
(defun sech (x) (/ 1 (cosh x)))
(defun acsch (x) (asinh (/ 1 x)))
(defun acoth (x) (atanh (/ 1 x)))
(defun asech (x) (acosh (/ 1 x)))


;;--------------------> NEW DEFINITION (see unlisp.lisp.pamphlet)
(defun |AlistAssocQ| (key l)
  (assoc key l :test #'eq) )

;;--------------------> NEW DEFINITION (see unlisp.lisp.pamphlet)
(defun |ListMember?| (ob l)
  (member ob l :test #'equal) )

; rewrite nnPP for csl, which does not support flet
(defvar *npPParg* nil "rewrite flets, using global scoping")
(defun npPPff () (and (funcall *npPParg*) (|npPush| (list (|npPop1|)))))
(defun npPPf () (|npSemiListing| (function npPPff)))
(defun npPPg () 
 (and (|npListAndRecover| (function npPPf)))
 (|npPush| (|pfAppend| (|npPop1|))))
(defun |npPP| (|f|)
 (declare (special *npPParg*))
  (setq *npPParg* |f|)
  (or (|npParened| (function npPPf))
    (and  (|npPileBracketed| (function npPPg))
          (|npPush| (|pfEnSequence| (|npPop1|))))
       (funcall |f|)))

(defvar *npPCff* nil "rewrite flets, using global scoping")
(defun npPCff () (and (funcall *npPCff*) (|npPush| (list (|npPop1|)))))
(defun npPCg () 
 (and (|npListAndRecover| (function npPCff)))
 (|npPush| (|pfAppend| (|npPop1|))))
(defun |npPC| (|f|)
  (or
    (and (|npPileBracketed| (function npPCg))
         (|npPush| (|pfEnSequence| (|npPop1|))))
    (funcall |f|)))

(defun |stringLE1| (x y)
  (string<= x y :start1 1 :start2 2))

(defun |sortCarString| (lines)
  (sort lines #'string<= :key #'car))

(defun |insertString| (s1 s2 i1)
   (replace s2 s1 :start1 i1 :end1 (1+ i1) :end2 (size s1))) 

; NAME:	   Boot Package
; PURPOSE: Provide forward references to Boot Code for functions to be at
;	   defined at the boot level, but which must be accessible
;	   not defined at lower levels.

(in-package "BOOT")

(defmacro def-boot-fun (f args where)
  `(compiler-let nil
     (defun ,f ,args ,where (print (list ',f . ,args)))
     (export '(,f) "BOOT")))

(defmacro def-boot-var (p where)
  `(compiler-let nil
     (defparameter ,p nil ,where)
     (export '(,p) "BOOT")))

(defmacro def-boot-val (p val where)
  `(compiler-let nil
     (defparameter ,p ,val ,where)
     (export '(,p) "BOOT")))

(def-boot-fun |updateSourceFiles| (x) "temp def")
#-:CCL
(def-boot-val |$timerTicksPerSecond| INTERNAL-TIME-UNITS-PER-SECOND
    "for TEMPUS-FUGIT and $TOTAL-ELAPSED-TIME")
(def-boot-val $boxString
  (concatenate 'string (list (code-char #x1d) (code-char #xe2)))
  "this string of 2 chars displays as a box")
(def-boot-val |$quadSymbol| $boxString "displays an APL quad")
(def-boot-val |$quadSym| '|$quadSym| "unbound symbol referenced in format.boot")
(def-boot-val $escapeString  (string (code-char 27))
   "string for single escape character")
(def-boot-val $boldString (concatenate 'string $escapeString "[12m")
  "switch into bold font")
(def-boot-val $normalString (concatenate 'string $escapeString "[0;10m")
  "switch back into normal font")
(def-boot-val $reverseVideoString (concatenate 'string $escapeString "[7m")
  "switch into reverse video")
(def-boot-val $underlineString (concatenate 'string $escapeString "[4m")
  "switch into underline mode")
(def-boot-val $COMPILE t  "checked in COMP-2 to skip compilation")
(def-boot-var |$abbreviationTable|		    "???")
(def-boot-val |$algebraList|
	'(|QuotientField| |Polynomial|
	  |UnivariatePoly|
	  |MultivariatePolynomial|
	  |DistributedMultivariatePolynomial|
	  |HomogeneousDistributedMultivariatePolynomial|
	  |Gaussian| |SquareMatrix|
	  |RectangularMatrix|)			"???")
(def-boot-val |$BasicDomains|
	  '(|Integer| |Float| |Symbol|
	    |Boolean| |String|)			"???")
(def-boot-val |$BasicPredicates|
	  '(FIXP STRINGP FLOATP)		"???")
(def-boot-val |$BFtag| '-BF-	   "big float marker")
(def-boot-val |$BigFloat| '(|Float|)		    "???")
(def-boot-val |$BigFloatOpt| '(|BigFloat| . OPT)    "???")
(def-boot-val |$Boolean| '(|Boolean|)		    "???")
(def-boot-val |$BooleanOpt| '(|Boolean| . OPT)	    "???")
(def-boot-val |$bootStrapMode| ()  "if T compCapsule skips body")
(def-boot-fun |bootUnionPrint| (x s tt)		    "Interpreter>Coerce.boot")
(def-boot-fun |break| (msg)			    "Interpreter>Trace.boot")
(def-boot-fun |breaklet| (fn vars)		    "Interpreter>Trace.boot")
(def-boot-var |$brightenCommentsFlag|		    "???")
(def-boot-var |$brightenCommentsIfTrue|		    "???")
(def-boot-val |$BreakMode| '|query|		    "error.boot")
(def-boot-var |$cacheAlist|			    "Interpreter>System.boot")
(def-boot-val |$cacheCount| 0			    "???")
(def-boot-val |$Category| '(|Category|)		    "???")
;  modemap:==  ( <map> (p e) (p e) ... (p e) )
;  modemaplist:= ( modemap ... )

(def-boot-val |$CategoryFrame|
	  '((((|Category| . ((|modemap| (((|Category|) (|Category|)) (T *)))))
	      (|Join| . ((|modemap|
      (((|Category|) (|Category|) (|Category|) (|Category|)) (T *))
      (((|Category|) (|Category|) (|List| |Category|)) (|Category|)) (T *))
	)))))
	"Compiler>CUtil.boot")
(def-boot-val |$CategoryNames|
	'(|Category| |CATEGORY| |RecordCategory| |Join|
	  |StringCategory| |SubsetCategory| |UnionCategory|)
	"???")
(def-boot-val |$clamList|
	  '((|getModemapsFromDatabase| |hash| UEQUAL |count|)
	    (|getOperationAlistFromLisplib| |hash| UEQUAL |count|)
	    (|getFileProperty| |hash| UEQUAL |count|)
	    (|canCoerceFrom| |hash| UEQUAL |count|)
	    (|selectMms1| |hash| UEQUAL |count|)
	    (|coerceMmSelection| |hash| UEQUAL |count|)
	    (|isValidType| |hash| UEQUAL |count|))
						"Interpreter>Clammed.boot")
(def-boot-val |$CommonDomains|
	 '(|Record| |Union| |List| |Vector|
	   |String| |Float| |Integer|
	   |NonNegativeInteger| |Expression|
	   |NonPositiveInteger|
	   |PositiveInteger| |SmallInteger|
	   |Boolean|) "???")

(def-boot-var |$compCount|			    "???")
(def-boot-var |$compileMapFlag|			    "Interpreter>SetVars.boot")
(def-boot-var |$compUniquelyIfTrue|		    "Compiler>Compiler.boot")
(def-boot-val |$consistencyCheck| nil		    "Interpreter>Consis.boot")
(def-boot-val |$ConstructorCache| (MAKE-HASHTABLE 'ID)	"???")
(def-boot-var |$constructorsNotInDatabase|	    "Interpreter>Database.boot")
(def-boot-var |$createUpdateFiles|		    "Interpreter>SetVarT.boot")
(def-boot-var |$croakIfTrue|			    "See moan in U.")
(def-boot-var |$currentFunction|		    "???")
(def-boot-val |$currentLine|	""          "current input line for history")
(def-boot-val $delay 0				    "???")
(def-boot-var $Directory			    "???")
(def-boot-var $DISPLAY				    "???")
(def-boot-val |$Domain| '(|Domain|)		    "???")
(def-boot-var |$DomainFrame|			    "???")
(def-boot-val |$DomainNames|
	'(|Integer| |Float| |Symbol| |Boolean|
	  |String| |Expression|
	  |Mapping| |SubDomain| |List| |Union|
	  |Record| |Vector|)			"???")
(def-boot-val |$DomainsInScope| '(NIL)		    "???")
(def-boot-val |$domainTraceNameAssoc| ()    "association list of trace domains")
(def-boot-val |$DomainVariableList|
  '($1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11
       $12 $13 $14 $15)				"???")
(def-boot-val |$DoubleQuote| "\""                   "???")
(def-boot-val |$DummyFunctorNames|
	  '(|Boolean| |Mapping|)		"???")
(def-boot-var |$eltIfNil|			    "SpecialFunctions>PSpad.boot")
(def-boot-val |$EmptyEnvironment| '((NIL))	    "???")
(def-boot-val |$EmptyList| ()			    "???")
@
\verb|$EmptyMode| is a contant whose value is \verb|$EmptyMode|.
It is used by isPartialMode (in i-funsel.boot) to
decide if a modemap is partially constructed. If the \verb|$EmptyMode|
constant occurs anywhere in the modemap structure at any depth
then the modemap is still incomplete. To find this constant the
isPartialMode function calls CONTAINED \verb|$EmptyMode| Y
which will walk the structure $Y$ looking for this constant.
<<*>>=
(def-boot-val |$EmptyMode| '|$EmptyMode|    "compiler constant")
(def-boot-val |$EM| |$EmptyMode|		    "???")
(def-boot-val |$EmptyString| ""                     "???")
(def-boot-val |$EmptyVector| '#()		     "???")
(def-boot-val |$Expression| '(|Expression|)	    "???")
(def-boot-val |$ExpressionOpt|
	  '(|Expression| . OPT)			"???")
(def-boot-var |$evalDomain|			    "???")
(def-boot-val |$Exit| '(Exit)	      "compiler constant")
(def-boot-var |$exitMode|			    "???")
(def-boot-var |$exitModeStack|			    "???")
(def-boot-val |$failure| (GENSYM)	    "Symbol denoting a failed operation.")
(def-boot-val |$false| NIL			    "???")
(def-boot-val |$Float| '(|Float|)		    "???")
(def-boot-val |$FloatOpt| '(|Float| . OPT)	    "???")
(def-boot-val |$FontTable| '(|FontTable|)	    "???")
(def-boot-var |$forceDatabaseUpdate|		    "See load function.")
(def-boot-var |$form|				    "???")
(def-boot-val |$FormalMapVariableList|
  '(\#1 \#2 \#3 \#4 \#5 \#6 \#7 \#8 \#9
    \#10 \#11 \#12 \#13 \#14 \#15)		"???")
(def-boot-val |$FormalMapVariableList2|
  '(\#\#1 \#\#2 \#\#3 \#\#4 \#\#5 \#\#6 \#\#7 \#\#8 \#\#9
    \#\#10 \#\#11 \#\#12 \#\#13 \#\#14 \#\#15)		    "???")
(def-boot-var |$fromSpadTrace|			    "Interpreter>Trace.boot")
(def-boot-var $function				    "Interpreter>System.boot")
(def-boot-var $FunName				    "???")
(def-boot-var $FunName_Tail			    "???")
(def-boot-val |$ConstructorNames|
	'(|SubDomain| |List| |Union| |Record| |Vector|)
	"Used in isFunctor test, and compDefine.")
(def-boot-val |$gauss01| '(|gauss| 0 1)		    "???")
(def-boot-var |$genFVar|			    "???")
(def-boot-val |$genSDVar| 0	    "counter for genSomeVariable" )
(def-boot-val |$hasCategoryTable| (MAKE-HASHTABLE 'UEQUAL) "???")
(def-boot-var |$hasYield|			    "???")
(def-boot-var |$ignoreCommentsIfTrue|		    "???")
(def-boot-var |$Index|				    "???")
(def-boot-val |$InitialDomainsInScope|
	  '((|Boolean|) |$EmptyMode| |$NoValueMode|)
	  "???")
(def-boot-val |$InitialModemapFrame| '((NIL))	    "???")
(def-boot-var |$inLispVM|			    "Interpreter>Eval.boot")
(def-boot-var |$insideCapsuleFunctionIfTrue|	    "???")
(def-boot-var |$insideCategoryIfTrue|		    "???")
(def-boot-var |$insideCoerceInteractiveHardIfTrue|  "???")
(def-boot-val |$insideCompTypeOf| NIL  "checked in comp3")
(def-boot-val |$insideConstructIfTrue| NIL "checked in parse.boot")
(def-boot-var |$insideExpressionIfTrue|		    "???")
(def-boot-var |$insideFunctorIfTrue|		    "???")
(def-boot-var |$insideWhereIfTrue|		    "???")
(def-boot-val |$instantRecord| (MAKE-HASHTABLE 'ID) "???")
(def-boot-val |$Integer| '(|Integer|)		    "???")
(def-boot-val |$IntegerOpt| '(|Integer| . OPT)	    "???")
(def-boot-val |$InteractiveFrame| '((NIL))	    "top level environment")
(def-boot-var |$InteractiveMode|		    "Interactive>System.boot")
(def-boot-val |$InteractiveModemapFrame| '((NIL))   "???")
(def-boot-var |$InteractiveTimingStatsIfTrue|	    "???")
(def-boot-var |$LastCxArg|			    "???")
(def-boot-val $lastprefix "S-"                      "???")
(def-boot-val |$lastUntraced| NIL      "Used for )restore option of )trace.")
(def-boot-var |$leaveLevelStack|		    "???")
(def-boot-var |$leaveMode|			    "???")
(def-boot-val |$leftPren| "("                       "For use in SAY expressions.")
(def-boot-val |$letAssoc| NIL	    "Used for trace of assignments in SPAD code.")
(def-boot-var |$libFile|			    "Compiler>LispLib.boot")
(def-boot-var $LINENUMBER			    "???")
(def-boot-var $linestack			    "???")
(def-boot-val |$Lisp| '(|Lisp|)			    "???")
(def-boot-val $LISPLIB nil		    "whether to produce a lisplib or not")
(def-boot-var |$lisplibDependentCategories|	    "Compiler>LispLib.boot")
(def-boot-var |$lisplibDomainDependents|	    "Compiler>LispLib.boot")
(def-boot-var |$lisplibForm|			    "Compiler>LispLib.boot")
(def-boot-var |$lisplibKind|			    "Compiler>LispLib.boot")
(def-boot-var |$lisplibModemapAlist|		    "Compiler>LispLib.boot")
(def-boot-var |$lisplibModemap|			    "Compiler>LispLib.boot")
(def-boot-var |$lisplibOperationAlist|		    "Compiler>LispLib.boot")
(def-boot-var |$lisplibSignatureAlist|		    "Compiler>LispLib.boot")
(def-boot-var |$lisplibVariableAlist|		    "Compiler>LispLib.boot")
(def-boot-var |$lisp2lispRenameAssoc|		    "???")
(def-boot-val |$LocalFrame| '((NIL))		    "???")
(def-boot-var |$mapSubNameAlist|		    "Interpreter>Trace.boot")
(def-boot-var |$mathTrace|			    "Interpreter>Trace.boot")
(def-boot-var |$mathTraceList|		    "Controls mathprint output for )trace.")
(def-boot-var $maxlinenumber			    "???")
(def-boot-val |$Mode| '(Mode)	   "compiler constant")
(def-boot-var |$ModemapFrame|			    "???")
(def-boot-val |$ModeVariableList|
  '(&1 &2 &3 &4 &5 &6 &7 &8 &9 &10 &11
       &12 &13 &14 &15)				"???")
(def-boot-var |$mostRecentOpAlist|		    "???")
(def-boot-var $NBOOT				    "???")
(def-boot-val |$NegativeIntegerOpt| '(|NegativeInteger| . OPT) "???")
(def-boot-val |$NegativeInteger| '(|NegativeInteger|) "???")
(def-boot-val |$NETail| (CONS |$EmptyEnvironment| NIL) "???")
(def-boot-var $NEWLINSTACK			    "???")
(def-boot-var |$noEnv|				    "???")
(def-boot-val |$NonMentionableDomainNames| '($ |Rep| |Mapping|) "???")
(def-boot-val |$NonNegativeIntegerOpt| '(|NonNegativeInteger| . OPT) "???")
(def-boot-val |$NonNegativeInteger| '(|NonNegativeInteger|) "???")
(def-boot-val |$NonPositiveIntegerOpt| '(|NonPositiveInteger| . OPT) "???")
(def-boot-val |$NonPositiveInteger| '(|NonPositiveInteger|) "???")
(def-boot-var |$noParseCommands|		    "???")
(def-boot-val |$NoValueMode| '|$NoValueMode|   "compiler literal")
(def-boot-val |$NoValue| '|$NoValue|   "compiler literal")
(def-boot-val $num_of_meta_errors 0		    "Number of errors seen so far")
(def-boot-var $OLDLINE				    "Used to output command lines.")
(def-boot-val |$oldTime| 0			    "???")
(def-boot-val |$One| '(|One|)			    "???")
(def-boot-val |$OneCoef| '(1 1 . 1)		    "???")
(def-boot-val |$operationNameList| NIL		 "op names for apropos")
(def-boot-var |$opFilter|			    "Used to /s a function")
(def-boot-var |OptionList|			    "???")
(def-boot-val |$optionAlist| nil       "info for trace boot")
(def-boot-var |$OutsideStringIfTrue|		    "???")
(def-boot-val |$PatternVariableList|
  '(*1 *2 *3 *4 *5 *6 *7 *8 *9 *10 *11
       *12 *13 *14 *15)				"???")
(def-boot-var |$PolyMode|			    "???")
(def-boot-val |$Polvar| '(WRAPPED . ((1 . 1)))	    "???")
(def-boot-var |$polyDefaultAssoc|		    "???")
(def-boot-val |$PolyDomains|
	'(|Polynomial| |MultivariatePolynomial|
	  |UnivariatePoly|
	  |DistributedMultivariatePolynomial|
	  |HomogeneousDistributedMultivariatePolynomial|)
	"???")
(def-boot-val |$PositiveIntegerOpt| '(|PositiveInteger| . OPT) "???")
(def-boot-val |$PositiveInteger| '(|PositiveInteger|) "???")
(def-boot-var |$postStack|			    "???")
(def-boot-var |$prefix|				    "???")
(def-boot-val |$PrettyPrint| nil "if t generated code is prettyprinted")
(def-boot-var |$previousTime|			    "???")
(def-boot-val |$PrimitiveDomainNames| nil
"Used in mkCategory to avoid generating vector slot
for primitive domains.	Also used by putInLocalDomainReferences and optCal.")
(def-boot-val |$optimizableDomainNames|
      '(|FactoredForm| |List| |Vector|
	|Integer| |NonNegativeInteger| |PositiveInteger|
	|SmallInteger| |String| |Boolean| |Symbol| |BooleanFunctions|)
   "used in optCall to decide which domains can be optimized")
(def-boot-val |$PrintBox| '(|PrintBox|)		    "???")
(def-boot-var |$PrintCompilerMessagesIfTrue|	    "???")
(def-boot-val |$printConStats| nil  "display constructor cache totals")
(def-boot-val |$printLoadMsgs|	't	    "Interpreter>SetVarT.boot")
(def-boot-var |$PrintOnly|			    "Compiler>LispLib.boot")
(def-boot-val |$UserSynonyms| ()    "list of user defined synonyms")
(def-boot-val |$SystemSynonyms| () "list of system defined synonyms")
(def-boot-val |$QuickCode| NIL	    "Controls generation of QREFELT, etc.")
(def-boot-val |$QuickLet| NIL	    "Set to T for no LET tracing.")
(def-boot-var |$QuietIfNil|			    "???")
(def-boot-val |$RationalNumberOpt| '(|RationalNumber| . OPT) "???")
(def-boot-val |$RationalNumber| '(|RationalNumber|) "???")
(def-boot-var |$readingFile|			    "???")
(def-boot-val |$report3| nil	 "addMap report info")
(def-boot-var |$reportBottomUpFlag|		    "Interpreter>SetVarT.boot")
(def-boot-var |$reportCoerce|			    "???")
(def-boot-var |$reportCoerceIfTrue|		    "???")
(def-boot-var |$reportCompilation|		    "???")
(def-boot-var |$reportExitModeStack|		    "???")
(def-boot-var |$reportFlag|			    "Interpreter>SetVars.boot")
(def-boot-val |$reportSpadTrace| ()    "report list of traced functions")
(def-boot-var |$resolveFlag|			    "Interpreter>SetVars.boot")
(def-boot-var |$returnMode|			    "???")
(def-boot-val |$rightPren| ")"                      "???")
(def-boot-var |$scanModeFlag|			    "???")
(def-boot-var |$semanticErrorStack|		    "???")
(def-boot-val |$SetFunctions| nil  "checked in SetFunctionSlots")
(def-boot-val |$SideEffectFreeFunctionList|
  '(|null| |case| |Zero| |One| \: \:\: |has| |Mapping|
    |elt| = \> \>= \< \<= MEMBER |is| |isnt| ATOM
    $= $\> $\>= $\< $\<= $^= $MEMBER)		"???")
(def-boot-var |$slamFlag|			    "Interpreter>SetVars.boot")
(def-boot-val |$SmallInteger| '(|SmallInteger|)	    "???")
(def-boot-val |$SmallIntegerOpt| '(|SmallInteger| . OPT) "???")
(def-boot-val |$sourceFileTypes|
	  '(SPAD BOOT LISP LISP370 META)
	  "Interpreter>System.boot")
(def-boot-val $SPAD nil				    "Is this Spad code?")
(def-boot-var $SPAD_ERRORS			    "???")
(def-boot-val |$spadLibFT| 'LISPLIB		    "???")
(def-boot-var |$spadOpList|			    "???")
(def-boot-var |$spadSystemDisks|		    "Interpreter>Database.boot")
(def-boot-val |$SpecialDomainNames|
  '(|add| |CAPSULE| |SubDomain| |List| |Union| |Record| |Vector|)
  "Used in isDomainForm, addEmptyCapsuleIfnecessary.")
(def-boot-var |$streamAlist|			    "???")
(def-boot-val |$streamCount| 0			    "???")
(def-boot-var |$streamIndexing|			    "???")
(def-boot-val |$StreamIndex| 0			    "???")
(def-boot-val |$StringCategory| '(|StringCategory|) "???")
(def-boot-val |$StringOpt| '(|String| . OPT)	    "???")
(def-boot-val |$String| '(|String|)		    "???")
(def-boot-var |$suffix|				    "???")
(def-boot-val |$Symbol| '(|Symbol|)		    "???")
(def-boot-val |$SymbolOpt| '(|Symbol| . OPT)	    "???")
(def-boot-val |$systemCreation| (currenttime)	    "???")
(def-boot-val |$systemLastChanged|
	  |$systemCreation|			"???")
(def-boot-val |$tempCategoryTable| (MAKE-HASHTABLE 'UEQUAL) "???")
(def-boot-val |$ThrowAwayMode| '|$ThrowAwayMode|    "interp constant")
(def-boot-val |$timerOn| t			    "???")
(def-boot-var |$topOp|				   "See displayPreCompilationErrors")
(def-boot-var |$tokenCommands|			    "???")
(def-boot-var $TOKSTACK				    "???")
(def-boot-val $TOP_LEVEL t			    "???")
(def-boot-var $top_stack			    "???")
(def-boot-var |$tracedModemap|			    "Interpreter>Trace.boot")
(def-boot-val |$traceDomains| t			     "enables domain tracing")
(def-boot-val |$TraceFlag| t			    "???")
(def-boot-var |$tracedSpadModemap|		    "Interpreter>Trace.boot")
(def-boot-var |$traceletFunctions|		    "???")
(def-boot-var |$traceNoisely|			    "Interpreter>Trace.boot")
(def-boot-var |$TranslateOnly|			    "???")
(def-boot-var |$tripleCache|			    "Compiler>Compiler.boot")
(def-boot-val |$true| ''T			    "???")
(def-boot-var $Type				    "???")
(def-boot-val |$underDomainAlist|
	'((|DistributedMultivariatePolynomial| . 2)
	  (|FactoredForm| . 1)
	  (|FactoredRing| . 1)
	  (|Gaussian| . 1)
	  (|List| . 1)
	  (|Matrix| . 1)
	  (|MultivariatePolynomial| . 2)
	  (|HomogeneousDistributedMultivariatePolynomial| . 2)
	  (|Polynomial| . 1)
	  (|QuotientField| . 1)
	  (|RectangularMatrix| . 3)
	  (|SquareMatrix| . 2)
	  (|UnivariatePoly| . 2)
	  (|Vector| . 1)
	  (|VVectorSpace| . 2))			"???")

(def-boot-val |$updateCatTableIfTrue| T	   "update category table on load")
(def-boot-var |$updateIfTrue|
	  "Should SPAD databases be updated&squeezed?")
(def-boot-val |$useBFasDefault| T
	  "Determines whether to use BF as default floating point type.")
(def-boot-val |$useDCQnotLET| () "checked in DEF-LET for use of DCQ")
(def-boot-fun BUMPCOMPERRORCOUNT ()		    "errorSupervisor1")
(def-boot-var |$VariableCount|			    "???")
(def-boot-val |$Void| '(|Void|) "compiler constant")
(def-boot-var |$warningStack|			    "???")
(def-boot-val |$whereList| () "referenced in format boot formDecl2String")
(def-boot-var |$xCount|				    "???")
(def-boot-var |$xeditIsConsole|			    "???")
(def-boot-var |$xyCurrent|			    "???")
(def-boot-var |$xyInitial|			    "???")
(def-boot-var |$xyMax|				    "???")
(def-boot-var |$xyMin|				    "???")
(def-boot-var |$xyStack|			    "???")
(def-boot-val |$Zero| '(|Zero|)			    "???")

(def-boot-val |$domainsWithUnderDomains|
	  (mapcar #'car |$underDomainAlist|)	"???")
(def-boot-val |$inputPromptType| '|step|  "checked in MKPROMPT")
(def-boot-val |$IOindex| 0		   "step counter")

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
