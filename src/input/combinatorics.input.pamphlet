\documentclass[fleqn]{article}
\usepackage{amsmath}
\usepackage{axiom}
\newcommand*{\bl}{\hspace*{\baselineskip}}
\newcommand*{\hl}{\hspace*{0.5\baselineskip}}

\title{Combinatorics}
\author{Alasdair McAndrew}
\date{November 2015}

\begin{document}
\maketitle

Axiom currently contains a little combinatorial functionality.  The
source file \texttt{combfunc.spad} contains a few functions for
dealing with factorials, and permuations themselves and permutation
groups are provided by \texttt{perm.spad} and \texttt{permgrp.spad}.

However, there seems to be no functionality for listing permutations.
This is the beginning of attempting to address that lack.

We have written a few functions (in the Interactive Language) as a
proof of concept.  They can be rewritten into a spad file later.

The functions include methods for listing subsets, permutations and
derangements, and set partitions;

\subsection*{Subsets}
\label{sec:subsets}

\begin{chunk}{powerSet}
powerSet(S:Set Any):Set Set Any==
++ This produces the power set (set of all subsets) of a given set, using a 
++ simple recursive algorithm.
  card:=cardinality(S)
  if card=1 then
     return(set [set[],S])
  else
     x:=members(S).card
     S1:=remove(x,S)
     S1P:=powerSet(S1)
     S1Px:Set Set Any:=set [union(set[x],s) for s in members(S1P)]
     return(union(S1P,S1Px))

\end{chunk}
\begin{description}
  \item\texttt{powerSet} Given a set, produces its power set: the set of all
    subsets.  For example:
\begin{chunk}{input}
--S 1 of 21
S := set[4,14,46,5]
--R 
--R
--R   (24)  {4,5,14,46}
--R                                                   Type: Set(PositiveInteger)
--E 1

\end{chunk}

\begin{chunk}{input}
--S 2 of 21
powerSet(S)
--R 
--R   Compiling function powerSet with type Set(Any) -> Set(Set(Any)) 
--R
--R   (25)
--R   {{}, {4}, {5}, {5,4}, {14}, {14,4}, {14,5}, {14,5,4}, {46}, {46,4}, {46,5},
--R    {46,5,4}, {46,14}, {46,14,4}, {46,14,5}, {46,14,5,4}}
--R                                                          Type: Set(Set(Any))
--E 2

\end{chunk}

There is no restriction on the elements of the set:

\begin{chunk}{input}
--S 3 of 21
S:=set["A",2.5,vector[1,2,3]]
--R 
--R
--R   (26)  {"A",2.5,[1,2,3]}
--R                                                               Type: Set(Any)
--E 3

\end{chunk}

\begin{chunk}{input}
--S 4 of 21
powerSet(S)
--R 
--R
--R   (27)
--R   {{}, {"A"}, {2.5}, {2.5,"A"}, {[1,2,3]}, {[1,2,3],"A"}, {[1,2,3],2.5},
--R    {[1,2,3],2.5,"A"}}
--R                                                          Type: Set(Set(Any))
--E 4

\end{chunk}

\begin{chunk}{choose}
choose(S:Set ANY, n:NNI):Set Set Any==
++ choose(S,n) produces all subsets of S with cardinality n.  Again, a simple
++ recursive algorithm is used
  card:=cardinality(S)
  if n=0 then
    return(set[set[]])
  if card=n then
    return(set[S])
  else
    x:=members(S).1
    S1:=remove(x,S)
    S1P:=choose(S1,n-1)
    S1Px:Set Set Any:=set [union(set[x],s) for s in members(S1P)]
    return(union(choose(S1,n),S1Px))

\end{chunk}

\item \texttt{choose} 
The function \texttt{choose(S,n)} lists all subsets of $S$
containing $n$ elements.  There is no restriction on elements of $S$:

\begin{chunk}{input}
--S 5 of 21
S:=set["cat","dog","fly","eel"]
--R 
--R
--R   (28)  {"cat","dog","eel","fly"}
--R                                                            Type: Set(String)
--E 5

\end{chunk}

\begin{chunk}{input}
--S 6 of 21
choose(S,2)
--R 
--R   There are no library operations named choose
--R      Use HyperDoc Browse or issue
--R                               )what op choose
--R      to learn if there is any operation containing choose in its name.
--R   Cannot find a definition or applicable library operation named 
--R      choose with argument type(s)
--R                                  Set(Any)
--R                                   Integer
--R      Perhaps you should use @ to indicate the required return type, or
--R      $ to specify which version of the function you need.
--R   Axiom will attempt to step through and interpret the code.
--R   Compiling function choose with type (Set(Any),NonNegativeInteger)
--R       -> Set(Set(Any)) 
--I   Compiling function G2391 with type Integer -> Boolean 
--R
--R   (29)
--R   {{"eel","fly"}, {"dog","fly"}, {"dog","eel"}, {"cat","fly"}, {"cat","eel"},
--R    {"cat","dog"}}
--R                                                          Type: Set(Set(Any))
--E 6

\end{chunk}

\end{description}

\subsection*{Permutations}
\label{sec:permutations}

\begin{chunk}{nextperm}
nextperm(L:List INT,n:INT):List INT==
++ The driver of Algorithm L: given any permutation, produces the next one
++ in lexicographical order.  This algorithm is implemented in "lexperm" below
  a:=L
  for i in 1..n-1 repeat if a.i<a.(i+1) then k:=i
  for i in k+1..n repeat if a.k<a.i then j:=i
  temp:=a.k
  a.k:=a.j
  a.j:=temp
  next:List INT:=concat([a.i for i in 1..k],reverse([a.i for i in k+1..n]))
  return(next)

\end{chunk}

\begin{chunk}{lexperm}
lexperm(n:INT):List List INT==
++ This is an implementation of Knuth's "Algorithm L" for listing 
++ permutations of [1..n] in lexicographical order.  
  a:List INT:=[k for k in 1..n]
  P:List List INT:=[]
  repeat
    ++print(a)
    P:=append(P,[copy(a)])
    if #[k for k in 1..n-1 | a.k<a.(k+1)]=0 then
      return(P)
    else
      a:=nextperm(a,n)

\end{chunk}

\begin{chunk}{lexperm2}
lexperm2(L:List INT):List List INT==
++ A variation of lexperm which applies the Algorithm L to any list of integers
++ It works well for lists which include repeated elements
  a:=L
  n:=#L
  P:List List INT:=[]
  repeat
    ++print(a)
    P:=append(P,[copy(a)])
    if #[k for k in 1..n-1 | a.k<a.(k+1)]=0 then
      return(P)
    else
      a:=nextperm(a,n)

\end{chunk}

\begin{chunk}{listPermutations}
listPermutations(L:List Any):List List Any==
++ Another variant of lexperm, this time for any list
  E:=removeDuplicates(L)
  EN:=sort([position(x,E) for x in L])
  P:=lexperm2(EN)
  Q:List List Any:=[[E.i for i in p] for p in P]
  return(Q)

\end{chunk}

\begin{description}
\item[\texttt{listPermutations}] Given a list containing any elements, 
including repeated elements, lists all permutations.  The algorithm used is 
called by Knuth (TAOCP) ``Algorithm L'', and lists all permutations in 
lexicographical order.  The first permutation consists of the list with 
elements in non-decreasing order, and the steps to move from one permutation 
$p$ with $n$ elements to the next consist of
\begin{enumerate}
\item find the largest $k$ such that $p.k>p.(k+1)$
\item find the largest $j$ such that $p.j>p.k$
\item swap $p.j$ and $p.k$
\item reverse that part of the list from indices $k+1$ to $n$.
\end{enumerate}

For example:
\begin{chunk}{input}
--S 7 of 21
L:=[1,1,2,3,3]
--R 
--R
--R   (30)  [1,1,2,3,3]
--R                                                  Type: List(PositiveInteger)
--E 7

\end{chunk}

\begin{chunk}{input}
--S 8 of 21
listPermutations(L)
--R 
--R   Compiling function nextperm with type (List(Integer),Integer) -> 
--R      List(Integer) 
--R   Compiling function lexperm2 with type List(Integer) -> List(List(
--R      Integer)) 
--R   Compiling function listPermutations with type List(Any) -> List(List
--R      (Any)) 
--R
--R   (31)
--R   [[1,1,2,3,3], [1,1,3,2,3], [1,1,3,3,2], [1,2,1,3,3], [1,2,3,1,3],
--R    [1,2,3,3,1], [1,3,1,2,3], [1,3,1,3,2], [1,3,2,1,3], [1,3,2,3,1],
--R    [1,3,3,1,2], [1,3,3,2,1], [2,1,1,3,3], [2,1,3,1,3], [2,1,3,3,1],
--R    [2,3,1,1,3], [2,3,1,3,1], [2,3,3,1,1], [3,1,1,2,3], [3,1,1,3,2],
--R    [3,1,2,1,3], [3,1,2,3,1], [3,1,3,1,2], [3,1,3,2,1], [3,2,1,1,3],
--R    [3,2,1,3,1], [3,2,3,1,1], [3,3,1,1,2], [3,3,1,2,1], [3,3,2,1,1]]
--R                                                        Type: List(List(Any))
--E 8

\end{chunk}

\item[\texttt{randomPermutation}] This uses Knuth's shuffle algorithm; for 
a list $L$ with $n$ elements, for each $i$ from 1 to $n-1$ it chooses a 
random element from the list, and swaps it with $L[i]$.
\end{description}

\begin{chunk}{randomPermutation}
randomPermutation(L:List Any):List Any==
++ This is an implementation of the Knuth Shuffle
  M:=copy(L)
  n:=#L
  for k in 1..n-1 repeat
    p:=random(n)+1
    temp:=M.p
    M.p:=M.k
    M.k:=temp
  return(M)

\end{chunk}

\subsection*{Derangements}
\label{sec:derangements}

A \emph{derangement} is a permutation where none of the elements are in their
original place.  For example, here is a listing of the derangements 
of $1,2,3,4$:

\[
\begin{array}[h]{cccc}
  1&2&3&4\\
  \hline
  2&1&4&3\\
  2&3&4&1\\
  2&4&1&3\\
  3&1&4&2\\
  3&4&1&2\\
  3&4&2&1\\
  4&1&2&3\\
  4&3&1&2\\
  4&3&2&1
\end{array}
\]

It can be shown that if $D_n$ is the number of derangements, then
  \begin{align*}
    D_n&=n\!\left(\frac{1}{0!}-\frac{1}{1!}+\frac{1}{2!}-\cdots+
      (-1)^n\frac{1}{n!}\right)\\
    D_n&=nD_{n-1}+(-1)^n\\
    D_n&=(n-1)(D_{n-1}+D_{n-2})
  \end{align*}
We see from the above listing that $D_4=9$.

\begin{chunk}{derangements}
derangements(n:INT):INT==
++ returns the number of derangements D(n) of n objects, using the recursion 
++ D(1)=0,D(2)=1,D(n)=(n-1)*(D(n-1)+D(n-2))
  if n<3 then
    return(n-1)
  else
    a:=0
    b:=1
    for i in 3..n repeat
      c:=(i-1)*(b+a)
      a:=b
      b:=c
    return(c)

\end{chunk}

\begin{description}
\item[\texttt{derangements(n)}] produces the number of derangements of $n$ 
distinct objects.  We use the last property above, along with the starting 
values $D_1=0$ and $D_2=1$.

\begin{chunk}{fixed?}
fixed?(L1:List Any,L2:List Any):Boolean==
++ This is a helper program for computing derangements.  It returns true if the
++ input lists have at least one element in the same place in each list. 
  if #L1~=#L2 then
    error("Lists must be of the same length")
  else
    return(reduce(\/, [(L1.i=L2.i)@Boolean for i in 1..#L1]))

\end{chunk}

\begin{chunk}{listDerangements}
listDerangements(L:List Any):List List Any==
++ List all the derangements (permutations with no fixed points) by the 
++ simple method of first listing all permutations, and keeping only 
++ those with no fixed points.
  P:=listPermutations(L)
  Ds:List List Any:=[]
  for X in P repeat
    if ~fixed?(L,X) then
       Ds:=append(Ds,[X])
  return(Ds)

\end{chunk}

\item[\texttt{listDerangements(L)}] lists all the derangements of a list, by
iterating through the list of all permutations, and only keeping those 
which have no fixed points.  Since
  \[
  \lim_{n\to\infty}\frac{D_n}{n!}=e^{-1}
  \]
  this is reasonably efficient.

For example, with the same list as above:

\begin{chunk}{input}
--S 9 of 21
listDerangements(L)
--R 
--R   Compiling function fixed? with type (List(Any),List(Any)) -> Boolean
--R      
--R   Compiling function listDerangements with type List(Any) -> List(List
--R      (Any)) 
--R
--R   (32)  [[2,3,3,1,1],[3,2,3,1,1],[3,3,1,1,2],[3,3,1,2,1]]
--R                                                        Type: List(List(Any))
--E 9

\end{chunk}

\begin{chunk}{countDerangements}
countDerangements(L:List Any):INT==
++ Returns the number of derangements of a list possibly with repeated
++ elements, using McMahon's method of generating functions
  E:=removeDuplicates(L)
  a:=[count(x,L) for x in E]
  if reduce(max,a)=1 then
    return(derangements(#a))
  else
    vs:=[subscript('x::Symbol,[i])@Symbol for i in 1..#a]
    S:=reduce(+,vs)
    P:DMP(vs,FRAC INT):=reduce(*,[(S-vs.i)^a.i for i in 1..#a])
    c:=coefficient(P,vs.1,a.1)
    for i in 2..#a repeat
      c:=coefficient(c,vs.i,a.i)
    return(c)

\end{chunk}

\item[\texttt{countDerangements(L)}] This produces the number of derangements 
of any list.  If there are $k$ distinct elements of $L$ have multiplicities
$a_1,a_2,\ldots,a_k$, then the number of derangements was first published 
by Major Percy MacMahon in ``Combinbatory Analysis'' (1915):

Let $x_1,x_2,\ldots,x_k$ be variables and put $S=x_1+x_2+\cdots+x_k$.  Then the
required number of derangements is the coefficient of
  \[
  x_1^{a_1}x_2^{a_2}\ldots x_k^{a_k}
  \]
  in the expansion of
  \[
  (S-x_1)^{a_1}(S-x_2)^{a_2}\ldots (S-x_k)^{a_k}.
  \]
Note that if any one $a_j$ satisfies $2a_j>n$, where $n$ is the length of 
the list $L$, then there will be zero derangements.

\begin{chunk}{randomDerangement}
randomDerangement(L:List Any):List Any==
++ Produces a random derangment by choosing permutations at random until 
++ one of them is a derangement.  This is not in fact guaranteed to work, 
++ but the probability of it failing is negligible.  This should be replaced 
++ with a better program.
  if countDerangements(L)=0 then
    error("The list has zero derangements")
  else
    repeat
      X:=randomPermutation(L)
      if ~fixed?(X,L) then
        return(X)

\end{chunk}

\item[\texttt{randomDerangement(L)}] This is a probabilistic function: 
it chooses permutations at random until on of them is a derangement.  
If the number of derangements is known to be zero, the function halts 
with an error message.
\end{description}

\begin{chunk}{listStringPermutations}
listStringPermutations(S:String):List String==
  E:=removeDuplicates(S)
  L:=sort([position(x,parts(E)) for x in parts(S)])
  P:=lexperm2(L)
  Q:List String:=[reduce(concat,[(E.x)::String for x in p]) for p in P]
  return(Q)

\end{chunk}

\begin{chunk}{stringFixed?}
stringFixed?(S1:String,S2:String):Boolean==
  if (#S1~=#S2) then
     error("Strings must have the same length")
  else
     return(reduce(\/, [(S1.i=S2.i)@Boolean for i in 1..#S1]))

\end{chunk}

\begin{chunk}{listStringDerangements}
listStringDerangements(S:String):List String==
  P:=listStringPermutations(S)
  Ds:List String:=[]
  for X in P repeat
    if ~stringFixed?(S,X) then
       Ds:=append(Ds,[X])
  return(Ds)

\end{chunk}

The permutations and derangement functions are also implemented for strings:

\begin{chunk}{input}
--S 10 of 21
listStringPermutations("EERIE")
--R 
--R   Compiling function listStringPermutations with type String -> List(
--R      String) 
--R
--R   (33)
--R   ["EEERI", "EEEIR", "EEREI", "EERIE", "EEIER", "EEIRE", "EREEI", "EREIE",
--R    "ERIEE", "EIEER", "EIERE", "EIREE", "REEEI", "REEIE", "REIEE", "RIEEE",
--R    "IEEER", "IEERE", "IEREE", "IREEE"]
--R                                                           Type: List(String)
--E 10

\end{chunk}

\begin{chunk}{input}
--S 11 of 21
listStringDerangements("banana")
--R 
--R   Compiling function stringFixed? with type (String,String) -> Boolean
--R      
--R   Compiling function listStringDerangements with type String -> List(
--R      String) 
--R
--R   (34)  ["abanan","anaban","ananab"]
--R                                                           Type: List(String)
--E 11

\end{chunk}

\subsection*{Set partitions}
\label{sec:set-partitions}

A \emph{partition} of a set $S$ is a splitting of $S$ into a set of 
subsets $T_i$ of $S$ which are pairwise disjoint, and whose union is $S$.  
For example, a three element set has five partitions:
\[
\{1,2,3\}\to\{\{1,2,3\}, \{\{1\},\{2,3\}\}, \{\{2\},\{1,3\}\}, 
\{\{3\},\{1,2\}\}, \{\{1\},\{2\},\{3\}\}\}.
\]
There is one partition into one subset, three partitions into two subsets, 
and one partitions into three subsets.  The number of partitions of an $n$ 
element set $S$ into $k$ subsets is given by the Stirling number of the 
second kind $S_2(n,k)$.  This is already implemented:

\begin{chunk}{input}
--S 12 of 21
stirling2(3,2)
--R 
--R
--R   (35)  3
--R                                                        Type: PositiveInteger
--E 12

\end{chunk}

The sum of all Stirling numbers of the second kind for a given $n$ is 
called the \emph{Bell number}, denoted $B_n$.  Using Knuth's bracketing 
notation $[{n\atop k}]$ for $S_2(n,k)$, we have
\[
B_n=\sum_{k=0}^n\left[{n\atop k}\right].
\]
Stirling numbers of the second kind can also be given by using \emph{Touchard
polynomials} as generating functions.  These can be defined recursively by
\begin{align*}
  T_0(x)&=1\\
  T_n(x)&=x\left(1+\frac{d}{dx}\right)T_{n-1}(x)\mbox{ for $n\ge 1$}
\end{align*}
Then $[{n\atop k}]$ is the coefficient of $x^k$ in $T_n(x)$.

\begin{chunk}{listPartitions}
listPartitions(n:INT):List List INT==
++ This list all the set partitions in terms of "codes": for a set S with 
++ n elements a partition code C is a list of n numbers 1,2,..,k with 
++ k<=n, such that the i-th element of S belongs to subset C.i.  For example,
++ if S={2,4,6,8,10} and C=[1,2,1,3,1] then the corresponding subset 
++ partition is {{2,6,10},{4},{8}}
  p:List List INT:=[[1]]
  if n=1 then
    return(p)
  else
    for i in 2..n repeat
      q:List List INT:=[]
      for x in p repeat
        c:=reduce(max,x)+1
        np:=[append(x,[j]) for j in 1..c]
        q:=concat(q,np)
      p:=copy(q)
    return(p)

\end{chunk}

Here are the functions:
\begin{description}
\item[\texttt{listPartitions}] This function lists all partitions as codes, 
so that for example, if $S=\{2,4,6,8,10\}$ and the code is $[1,2,1,3,1]$ 
then the corresponding subset partition is $\{\{2,6,10\},\{4\},\{8\}\}$.  
That is, element $S_i$ of $S$ belongs to subset $C_i$.

\begin{chunk}{input}
--S 13 of 21
listPartitions(3)
--R 
--R   Compiling function listPartitions with type Integer -> List(List(
--R      Integer)) 
--R
--R   (36)  [[1,1,1],[1,1,2],[1,2,1],[1,2,2],[1,2,3]]
--R                                                    Type: List(List(Integer))
--E 13

\end{chunk}

\begin{chunk}{setPartitions}
setPartitions(S:Set Any):Set Set Any==
++ For a given set S, this returns the subset list generated from the codes 
++ produced by the listPartitions function
  n:=#S
  P:List List INT:=listPartitions(n)
  Q:Set Set Any:=set[]
  for x in P repeat
    R:List Set Any:=[set[] for i in 1..reduce(max,x)]
    for i in 1..n repeat R.(x.i):=union(R.(x.i),set[parts(S).i])
    Q:=union(Q,set R)
  return(Q)

\end{chunk}

\item[\texttt{setPartitions}] returns the partitions of a set, by mapping the
  elements of the set onto the codes generated by the previous algorithm.

\begin{chunk}{input}
--S 14 of 21
G:Set Any:=set[2.5,'x+'y,"A"]
--R 
--R
--R   (37)  {2.5,y + x,"A"}
--R                                                               Type: Set(Any)
--E 14

\end{chunk}

\begin{chunk}{input}
--S 15 of 21
setPartitions(G)
--R 
--R   Compiling function setPartitions with type Set(Any) -> Set(Set(Any))
--R      
--R
--R   (38)
--R   {{{2.5,y + x,"A"}}, {{2.5,y + x},{"A"}}, {{2.5,"A"},{y + x}},
--R    {{2.5},{y + x,"A"}}, {{2.5},{y + x},{"A"}}}
--R                                                          Type: Set(Set(Any))
--E 15

\end{chunk}

\begin{chunk}{listSizePartitions}
listSizePartitions(n:INT,k:INT):List List INT==
++ This lists the codes of all the set partitions whose maximum value is k.  
++ These codes correspond to partitions of exactly k subsets.
  p:List List INT:=[[1]]
  if n=1 then
    return(p)
  else
    for i in 2..n repeat
      q:List List INT:=[]
      for x in p repeat
        c:=reduce(max,x)+1
        np:=[append(x,[j]) for j in 1..min(k,c)]
        q:=concat(q,np)
      p:=copy(q)
    for x in p repeat
      if reduce(max,x)<k then p:=remove(x,p)
    return(p)

\end{chunk}

\item[\texttt{listSizePartitions(n,k)}] is a slight variant of
\texttt{listPartitions} and lists only those codes whose maximum value is $k$.
These will correspond to partitions into exactly $k$ subsets.

\begin{chunk}{input}
--S 16 of 21
P:=listSizePartitions(5,3)
--R   Compiling function listSizePartitions with type (Integer,Integer)
--R       -> List(List(Integer)) 
--R
--R   (39)
--R   [[1,1,1,2,3], [1,1,2,1,3], [1,1,2,2,3], [1,1,2,3,1], [1,1,2,3,2],
--R    [1,1,2,3,3], [1,2,1,1,3], [1,2,1,2,3], [1,2,1,3,1], [1,2,1,3,2],
--R    [1,2,1,3,3], [1,2,2,1,3], [1,2,2,2,3], [1,2,2,3,1], [1,2,2,3,2],
--R    [1,2,2,3,3], [1,2,3,1,1], [1,2,3,1,2], [1,2,3,1,3], [1,2,3,2,1],
--R    [1,2,3,2,2], [1,2,3,2,3], [1,2,3,3,1], [1,2,3,3,2], [1,2,3,3,3]]
--R                                                    Type: List(List(Integer))
--E 16

\end{chunk}

\begin{chunk}{input}
--S 17 of 21
#P
--R 
--R
--R   (40)  25
--R                                                        Type: PositiveInteger
--E 17

\end{chunk}

\begin{chunk}{input}
--S 18 of 21
stirling2(5,3)
--R 
--R
--R   (41)  25
--R                                                        Type: PositiveInteger
--E 18

\end{chunk}

\begin{chunk}{setSizePartitions}
setSizePartitions(S:Set Any,k:INT):Set Set Any==
++ For a given set S, this returns all partitions of S into exactly k 
++ disjoint subsets
  n:=#S
  P:List List INT:=listSizePartitions(n,k)
  Q:Set Set Any:=set[]
  for x in P repeat
    R:List Set Any:=[set[] for i in 1..k]
    for i in 1..n repeat R.(x.i):=union(R.(x.i),set[parts(S).i])
    Q:=union(Q,set R)
  return(Q)

\end{chunk}

\item[\texttt{setSizePartitions(S,k)}] turns the list of codes into 
partitions of $S$ into $k$ subsets.

\begin{chunk}{bell}
bell(n:NNI):PI==
++ The Bell numbers B(n): the number of ways a set of n elements can be 
++ partitioned into disjoint subsets.  Bell numbers are in fact sums of 
++ Stirling numbers of the second kind so that we could simply define
++ bell(n)==reduce(+,[stirling2(n,k) for k in 0..n])
  if n<2 then
    return(1)
  else
    B:=[1,1]
    for i in 2..n repeat
      N:=reduce(+,[binomial(i-1,k)*B.(k+1) for k in 0..i-1])
      B:=append(B,[N])
    return(B.last)

\end{chunk}

\item[\texttt{bell(n)}] returns the $n$-th Bell number

\begin{chunk}{touchard}
touchard(n:PI,z:Symbol):POLY FRAC INT==
++ The Touchard polynomials T(n,x) are generating functions for Stirling 
++ numbers of the second kind: the coefficient of x^k in T(n,x) is the 
++ value stirling2(n,k)
  if n=0 then
    return(1)
  else
    Tc:POLY FRAC INT:=1
    for i in 1..n repeat
      Tc:=z*(Tc+D(Tc,z))
    return(Tc)

\end{chunk}

\item[\texttt{touchard(n,x)}] returns the $n$-th Touchard polynomial:

\begin{chunk}{input}
--S 19 of 21
p := touchard(7,x)
--R 
--R   Compiling function touchard with type (PositiveInteger,Symbol) -> 
--R      Polynomial(Fraction(Integer)) 
--R
--R          7      6       5       4       3      2
--R   (42)  x  + 21x  + 140x  + 350x  + 301x  + 63x  + x
--R                                          Type: Polynomial(Fraction(Integer))
--E 19

\end{chunk}

We can check that the coefficients are the Stirling numbers:

\begin{chunk}{input}
--S 20 of 21
[coefficient(p,x,k) for k in 0..7]
--R 
--R
--R   (43)  [0,1,63,301,350,140,21,1]
--R                                    Type: List(Polynomial(Fraction(Integer)))
--E 20

\end{chunk}
\begin{chunk}{input}
--S 21 of 21
[stirling2(7,k) for k in 0..7]
--R 
--R
--R   (44)  [0,1,63,301,350,140,21,1]
--R                                                          Type: List(Integer)
--E 21

\end{chunk}
The values are the same, although the lists are of different types.
\end{description}

Now the same programs as above but reworked for strings
\begin{chunk}{randomStringPermutation}
randomStringPermutation(S:String):String==
  L:List String:=parts(S)
  P:=randomPermutation(L)
  return(reduce(concat,P))

\end{chunk}

\begin{chunk}{randomStringDerangement}
randomStringDerangement(S:String):String==
  E:=removeDuplicates(S)
  a:=[count(x,S) for x in parts(E)]
  if reduce(\/,[(2*z>#S)@Boolean for z in a]) then
    error("The string has zero derangements")
  else
    repeat
      X:=randomStringPermutation(S)
      if ~stringFixed?(X,S) then
        return(X)

\end{chunk}

\begin{chunk}{*}
)set break resume
)sys rm -f combinatorics.output
)spool combinatorics.output
)set message test on
)set message auto off
)clear all

\getchunk{powerSet}
\getchunk{choose}
\getchunk{nextperm}
\getchunk{lexperm}
\getchunk{lexperm2}
\getchunk{listPermutations}
\getchunk{randomPermutation}
\getchunk{derangements}
\getchunk{fixed?}
\getchunk{listDerangements}
\getchunk{countDerangements}
\getchunk{randomDerangement}
\getchunk{listStringPermutations}
\getchunk{stringFixed?}
\getchunk{listStringDerangements}
\getchunk{listPartitions}
\getchunk{setPartitions}
\getchunk{listSizePartitions}
\getchunk{setSizePartitions}
\getchunk{bell}
\getchunk{touchard}
\getchunk{randomStringPermutation}
\getchunk{randomStringDerangement}
\getchunk{input}

)spool
\end{chunk}
\end{document}

