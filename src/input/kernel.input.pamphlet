\documentclass{article}
\usepackage{axiom}
\setlength{\textwidth}{400pt}
\begin{document}
\title{\$SPAD/src/input kernel.input}
\author{Timothy Daly, Waldek Hebisch}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{License}
\begin{chunk}{license}
--Copyright The Numerical Algorithms Group Limited 1991.
\end{chunk}
\begin{chunk}{*}
)set break resume
)spool kernel.output
)set message test on
)set message auto off
)clear all
--S 1 of 31
x :: Expression Integer
--R 
--R
--R   (1)  x
--R                                                    Type: Expression(Integer)
--E 1

--S 2 of 31
kernel x
--R 
--R
--R   (2)  x
--R                                            Type: Kernel(Expression(Integer))
--E 2

--S 3 of 31
sin(x) + cos(x)
--R 
--R
--R   (3)  sin(x) + cos(x)
--R                                                    Type: Expression(Integer)
--E 3

--S 4 of 31
kernels %
--R 
--R
--R   (4)  [sin(x),cos(x)]
--R                                      Type: List(Kernel(Expression(Integer)))
--E 4

--S 5 of 31
sin(x)^2 + sin(x) + cos(x)
--R 
--R
--R              2
--R   (5)  sin(x)  + sin(x) + cos(x)
--R                                                    Type: Expression(Integer)
--E 5

--S 6 of 31
kernels %
--R 
--R
--R   (6)  [sin(x),cos(x)]
--R                                      Type: List(Kernel(Expression(Integer)))
--E 6

--S 7 of 31
kernels(1 :: Expression Integer)
--R 
--R
--R   (7)  []
--R                                      Type: List(Kernel(Expression(Integer)))
--E 7

--S 8 of 31
mainKernel(cos(x) + tan(x))
--R 
--R
--R   (8)  tan(x)
--R                                 Type: Union(Kernel(Expression(Integer)),...)
--E 8

--S 9 of 31
height kernel x
--R 
--R
--R   (9)  1
--R                                                        Type: PositiveInteger
--E 9

--S 10 of 31
height mainKernel(sin x)
--R 
--R
--R   (10)  2
--R                                                        Type: PositiveInteger
--E 10

--S 11 of 31
height mainKernel(sin cos x)
--R 
--R
--R   (11)  3
--R                                                        Type: PositiveInteger
--E 11

--S 12 of 31
height mainKernel(sin cos (tan x + sin x))
--R 
--R
--R   (12)  4
--R                                                        Type: PositiveInteger
--E 12

--S 13 of 31
operator mainKernel(sin cos (tan x + sin x))
--R 
--R
--R   (13)  sin
--R                                                          Type: BasicOperator
--E 13

--S 14 of 31
name mainKernel(sin cos (tan x + sin x))
--R 
--R
--R   (14)  sin
--R                                                                 Type: Symbol
--E 14

--S 15 of 31
f := operator 'f
--R 
--R
--R   (15)  f
--R                                                          Type: BasicOperator
--E 15

--S 16 of 31
e := f(x, y, 10)
--R 
--R
--R   (16)  f(x,y,10)
--R                                                    Type: Expression(Integer)
--E 16

--S 17 of 31
is?(e, f)
--R 
--R
--R   (17)  true
--R                                                                Type: Boolean
--E 17

--S 18 of 31
is?(e, 'f)
--R 
--R
--R   (18)  true
--R                                                                Type: Boolean
--E 18

--S 19 of 31
argument mainKernel e
--R 
--R
--R   (19)  [x,y,10]
--R                                              Type: List(Expression(Integer))
--E 19

\end{chunk}

Crucial notion is {\tt kernel. Expression is a single kernel so you can
retract it.

\begin{chunk}{*}
--S 20 of 31
)clear all

ks := retract(sin(a*x+b))@Kernel(Expression(Integer))
--R
--R   (1)  sin(a x + b)
--R                                            Type: Kernel(Expression(Integer))
--E 20

\end{chunk}

{\tt argument} gives you a list of arguments of the kernel

\begin{chunk}{*}
--S 21 of 31
argument(ks)
--R
--R   (2)  [a x + b]
--R                                              Type: List(Expression(Integer))
--E 21

\end{chunk}

{\tt operator} gives the operator

\begin{chunk}{*}
--S 22 of 31
operator(ks)
--R
--R   (3)  sin
--R                                                          Type: BasicOperator
--E 22

\end{chunk}

Given this expression

\begin{chunk}{*}
--S 23 of 31
t1:=(y-m)*sqrt(x)/s
--R
--R                +-+
--R        (y - m)\|x
--R   (4)  -----------
--R             s
--R                                                    Type: Expression(Integer)
--E 23

\end{chunk}

You can use {\tt kernels" to get a list of the top level kernels
contained in the expression.

\begin{chunk}{*}
--S 24 of 31
kl:=kernels(t1)
--R
--R          +-+
--R   (5)  [\|x ,y,s,m]
--R                                      Type: List(Kernel(Expression(Integer)))
--E 24

\end{chunk}

Using a kernel you can convert the numerator to a univariate
polynomial with respect to a kernel:

\begin{chunk}{*}
--S 25 of 31
nu:=univariate(numerator(t1),kl(1))
--R
--R   (6)  (y - m)?
--R              Type: Fraction(SparseUnivariatePolynomial(Expression(Integer)))
--E 25

\end{chunk}

And then extract coefficients

\begin{chunk}{*}
--S 26 of 31
coefficient(nu,1)
--R
--R   (7)  y - m
--R                                                    Type: Expression(Integer)
--E 26

\end{chunk}

There is also {\tt tower}, which gives all the kernels, both top 
level and nested.

\begin{chunk}{*}
--S 27 of 31
tower(t1)
--R
--R                  +-+
--R   (8)  [m,s,x,y,\|x ]
--R                                      Type: List(Kernel(Expression(Integer)))
--E 27

\end{chunk}

Compared to {\tt kernels}, we also get 'x'

Pattern matching is implemented on top of {\tt numer}, {\tt denom},
{\tt isPlus}, {\tt isTimes}, {\tt isExpt}, and kernels handling.
For example

\begin{chunk}{*}
--S 28 of 31
t2:=numer(t1)::Expression(Integer)
--R
--R                +-+
--R   (9)  (y - m)\|x
--R                                                    Type: Expression(Integer)
--E 28

--S 29 of 31
isTimes(t2)
--R
--R   (10)  "failed"
--R                                                    Type: Union("failed",...)
--E 29

--S 30 of 31
isPlus(t2)
--R
--R            +-+     +-+
--R   (11)  [y\|x ,- m\|x ]
--R                                   Type: Union(List(Expression(Integer)),...)
--E 30

--S 31 of 31
isTimes(isPlus(t2).1)
--R
--R           +-+
--R   (12)  [\|x ,y]
--R                                   Type: Union(List(Expression(Integer)),...)
--E 31

\end{chunk}

As you can see the structure seen by the pattern matcher is somewhat
different from the printed form. Not that {\tt isPlus} essentially 
gives you a list of monomials. {\tt isTimes} gives factors of a
single monomial.

)spool 
)lisp (bye)
 
\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

 
