\documentclass{article}
\usepackage{axiom}
\setlength{\textwidth}{400pt}
\begin{document}
\title{\$SPAD/src/input spadcall.input}
\author{Timothy Daly}
\maketitle
\begin{abstract}
Axiom's Spad language is a domain specific language 
implemented on top of Lisp. It is possible to write
algebra programs directly in Lisp. Here we demonstrate
the use of the SPADCALL macro. We look up functions from
the domain LIST(FRAC(INT)), construct the lisp representation
of elements, and then apply the function to the element.
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}
)set break resume
)sys rm -f spadcall.output
)spool spadcall.output
)set message test on
)set message auto off
)clear all

\end{chunk}
First we look at the functions available in LIST(FRAC(INT)).

We will look at several examples, {\tt third}, {\tt sort}, 
and {\tt size?}

\begin{chunk}{*}
--S 1 of 14
)show LIST(FRAC(INT))
--R 
--R List(Fraction(Integer)) is a domain constructor.
--R Abbreviation for List is LIST 
--R This constructor is exposed in this frame.
--R Issue )edit bookvol10.3.pamphlet to see algebra source code for LIST 
--R
--R------------------------------- Operations --------------------------------
--R
--R #? : % -> NonNegativeInteger          ?<? : (%,%) -> Boolean
--R ?<=? : (%,%) -> Boolean               ?=? : (%,%) -> Boolean
--R ?>? : (%,%) -> Boolean                ?>=? : (%,%) -> Boolean
--R OMwrite : (%,Boolean) -> String       OMwrite : % -> String
--R append : (%,%) -> %                   child? : (%,%) -> Boolean
--R children : % -> List(%)               coerce : % -> OutputForm
--R concat : List(%) -> %                 concat : (%,%) -> %
--R concat! : (%,%) -> %                  cons : (Fraction(Integer),%) -> %
--R convert : % -> InputForm              copy : % -> %
--R copyInto! : (%,%,Integer) -> %        cycleEntry : % -> %
--R cycleSplit! : % -> %                  cycleTail : % -> %
--R cyclic? : % -> Boolean                delete : (%,Integer) -> %
--R delete! : (%,Integer) -> %            distance : (%,%) -> Integer
--R ?.rest : (%,rest) -> %                empty : () -> %
--R empty? : % -> Boolean                 eq? : (%,%) -> Boolean
--R explicitlyFinite? : % -> Boolean      fill! : (%,Fraction(Integer)) -> %
--R first : % -> Fraction(Integer)        hash : % -> SingleInteger
--R index? : (Integer,%) -> Boolean       indices : % -> List(Integer)
--R insert : (%,%,Integer) -> %           insert! : (%,%,Integer) -> %
--R last : % -> Fraction(Integer)         last : (%,NonNegativeInteger) -> %
--R latex : % -> String                   leaf? : % -> Boolean
--R list : Fraction(Integer) -> %         max : (%,%) -> %
--R maxIndex : % -> Integer               merge : (%,%) -> %
--R merge! : (%,%) -> %                   min : (%,%) -> %
--R minIndex : % -> Integer               nil : () -> %
--R node? : (%,%) -> Boolean              nodes : % -> List(%)
--R null : % -> Boolean                   possiblyInfinite? : % -> Boolean
--R removeDuplicates : % -> %             removeDuplicates! : % -> %
--R rest : (%,NonNegativeInteger) -> %    rest : % -> %
--R reverse : % -> %                      reverse! : % -> %
--R sample : () -> %                      second : % -> Fraction(Integer)
--R setDifference : (%,%) -> %            setIntersection : (%,%) -> %
--R setUnion : (%,%) -> %                 setchildren! : (%,List(%)) -> %
--R setelt : (%,rest,%) -> %              setrest! : (%,%) -> %
--R sort : % -> %                         sort! : % -> %
--R sorted? : % -> Boolean                split! : (%,Integer) -> %
--R swap! : (%,Integer,Integer) -> Void   tail : % -> %
--R third : % -> Fraction(Integer)        value : % -> Fraction(Integer)
--R ?~=? : (%,%) -> Boolean              
--R OMwrite : (OpenMathDevice,%,Boolean) -> Void
--R OMwrite : (OpenMathDevice,%) -> Void
--R any? : ((Fraction(Integer) -> Boolean),%) -> Boolean
--R concat : (Fraction(Integer),%) -> %
--R concat : (%,Fraction(Integer)) -> %
--R concat! : (%,Fraction(Integer)) -> %
--R construct : List(Fraction(Integer)) -> %
--R count : (Fraction(Integer),%) -> NonNegativeInteger
--R count : ((Fraction(Integer) -> Boolean),%) -> NonNegativeInteger
--R cycleLength : % -> NonNegativeInteger
--R delete : (%,UniversalSegment(Integer)) -> %
--R delete! : (%,UniversalSegment(Integer)) -> %
--R ?.first : (%,first) -> Fraction(Integer)
--R ?.last : (%,last) -> Fraction(Integer)
--R ?.value : (%,value) -> Fraction(Integer)
--R elt : (%,Integer,Fraction(Integer)) -> Fraction(Integer)
--R ?.? : (%,Integer) -> Fraction(Integer)
--R ?.? : (%,UniversalSegment(Integer)) -> %
--R entries : % -> List(Fraction(Integer))
--R entry? : (Fraction(Integer),%) -> Boolean
--R eval : (%,Equation(Fraction(Integer))) -> %
--R eval : (%,Fraction(Integer),Fraction(Integer)) -> %
--R eval : (%,List(Equation(Fraction(Integer)))) -> %
--R eval : (%,List(Fraction(Integer)),List(Fraction(Integer))) -> %
--R every? : ((Fraction(Integer) -> Boolean),%) -> Boolean
--R find : ((Fraction(Integer) -> Boolean),%) -> Union(Fraction(Integer),"failed")
--R first : (%,NonNegativeInteger) -> %
--R insert : (Fraction(Integer),%,Integer) -> %
--R insert! : (Fraction(Integer),%,Integer) -> %
--R leaves : % -> List(Fraction(Integer))
--R less? : (%,NonNegativeInteger) -> Boolean
--R map : (((Fraction(Integer),Fraction(Integer)) -> Fraction(Integer)),%,%) -> %
--R map : ((Fraction(Integer) -> Fraction(Integer)),%) -> %
--R map! : ((Fraction(Integer) -> Fraction(Integer)),%) -> %
--R member? : (Fraction(Integer),%) -> Boolean
--R members : % -> List(Fraction(Integer))
--R merge : (((Fraction(Integer),Fraction(Integer)) -> Boolean),%,%) -> %
--R merge! : (((Fraction(Integer),Fraction(Integer)) -> Boolean),%,%) -> %
--R more? : (%,NonNegativeInteger) -> Boolean
--R new : (NonNegativeInteger,Fraction(Integer)) -> %
--R parts : % -> List(Fraction(Integer))
--R position : (Fraction(Integer),%,Integer) -> Integer
--R position : (Fraction(Integer),%) -> Integer
--R position : ((Fraction(Integer) -> Boolean),%) -> Integer
--R qelt : (%,Integer) -> Fraction(Integer)
--R qsetelt! : (%,Integer,Fraction(Integer)) -> Fraction(Integer)
--R reduce : (((Fraction(Integer),Fraction(Integer)) -> Fraction(Integer)),%,Fraction(Integer),Fraction(Integer)) -> Fraction(Integer)
--R reduce : (((Fraction(Integer),Fraction(Integer)) -> Fraction(Integer)),%,Fraction(Integer)) -> Fraction(Integer)
--R reduce : (((Fraction(Integer),Fraction(Integer)) -> Fraction(Integer)),%) -> Fraction(Integer)
--R remove : (Fraction(Integer),%) -> %
--R remove : ((Fraction(Integer) -> Boolean),%) -> %
--R remove! : (Fraction(Integer),%) -> %
--R remove! : ((Fraction(Integer) -> Boolean),%) -> %
--R select : ((Fraction(Integer) -> Boolean),%) -> %
--R select! : ((Fraction(Integer) -> Boolean),%) -> %
--R setelt : (%,first,Fraction(Integer)) -> Fraction(Integer)
--R setelt : (%,last,Fraction(Integer)) -> Fraction(Integer)
--R setelt : (%,value,Fraction(Integer)) -> Fraction(Integer)
--R setelt : (%,Integer,Fraction(Integer)) -> Fraction(Integer)
--R setelt : (%,UniversalSegment(Integer),Fraction(Integer)) -> Fraction(Integer)
--R setfirst! : (%,Fraction(Integer)) -> Fraction(Integer)
--R setlast! : (%,Fraction(Integer)) -> Fraction(Integer)
--R setvalue! : (%,Fraction(Integer)) -> Fraction(Integer)
--R size? : (%,NonNegativeInteger) -> Boolean
--R sort : (((Fraction(Integer),Fraction(Integer)) -> Boolean),%) -> %
--R sort! : (((Fraction(Integer),Fraction(Integer)) -> Boolean),%) -> %
--R sorted? : (((Fraction(Integer),Fraction(Integer)) -> Boolean),%) -> Boolean
--R
--R
--E 1

\end{chunk}
First we show the Axiom version by constructing a list of fractions of integers.
\begin{chunk}{*}
--S 2 of 14
b:=[1/2,1/3,1/4]
--R 
--R
--R         1 1 1
--R   (1)  [-,-,-]
--R         2 3 4
--R                                                Type: List(Fraction(Integer))
--E 2

\end{chunk}
The Lisp representation of an element from FRAC(INT) is just a pair whose
car is the numerator and whose cdr is the denominator. LIST is just a
Lisp list. So we construct the analog of Axiom's LIST(FRAC(INT)) as
a list of cons cells.
\begin{chunk}{*}
--S 3 of 14
)lisp (setq a '((1 . 2) (1 . 3) (1 . 4)))
--R 
--RValue = ((1 . 2) (1 . 3) (1 . 4))
--E 3

\end{chunk}
At the Axiom level we call the function 'third' from the domain with the 
Axiom argument 'b'.
\begin{chunk}{*}
--S 4 of 14
third b
--R 
--R
--R        1
--R   (2)  -
--R        4
--R                                                      Type: Fraction(Integer)
--E 4

\end{chunk}
To do the same at the Lisp level we first have to get the function from the
domain using {\tt getFunctionFromDomain}. Note that the case is important so
we use vertical bars to preserve case. 

The {\tt getFunctionFromDomain} function wants the name of the function,
the domain to examine, and a list of the type of the arguments since there 
can be several functions with the same name but different arguments.

The function we want is {\tt third}. The domain is 
\verb?(|List| (|Fraction| (|Integer|)))?.
The {\tt third} function takes one argument, an element of the domain. We construct
a list of one argument which is \verb?(|List| (|Fraction| (|Integer|)))?.

The call looks like:
\begin{verbatim}
(setq f (|getFunctionFromDomain| '|third| 
                                 '(|List| (|Fraction| (|Integer|))) 
                                 '((|List| (|Fraction| (|Integer|))))))
\end{verbatim}

\begin{chunk}{*}
--S 5 of 14
)lisp (setq f (|getFunctionFromDomain| '|third| '(|List| (|Fraction| (|Integer|))) '((|List| (|Fraction| (|Integer|))))))
--R 
--IValue = (#<compiled-function |URAGG-;third;AS;5|> . #<vector 00663a88>)
--E 5

\end{chunk}
Now we have a cons cell containing the function in the car and the domain
vector in the cdr, stored in the variable {\tt f}. 

The {\tt spadcall} macro expands to
\begin{verbatim}
   )lisp (macroexpand '(spadcall a f))

   (LET ((#:G1587 F)) (THE (VALUES T) (FUNCALL (CAR #:G1587) A (CDR #:G1587))))
\end{verbatim}
Notice that this will call the function (from the car of the cons) with the
arguments {\tt a} which is our list and the domain vector (from the cdr of
the cons). So {\tt spadcall} is just a convenience macro.

This call will be the exact same result as Axiom's 
\begin{verbatim}
   third b
\end{verbatim}
Notice that it returns the internal representation of an element of the
Fraction(Integer) domain, as expected.
\begin{chunk}{*}
--S 5 of 14
)lisp (spadcall a f)
--R 
--RValue = (1 . 4)
--E 6

\end{chunk}
We do the same thing with the {\tt sort} function at the Axiom level
\begin{chunk}{*}
--S 7 of 14
sort b
--R 
--R
--R         1 1 1
--R   (3)  [-,-,-]
--R         4 3 2
--R                                                Type: List(Fraction(Integer))
--E 7

\end{chunk}
Now we look up {\tt sort} by hand
The call looks like:
\begin{verbatim}
(setq f (|getFunctionFromDomain| '|sort| 
                                 '(|List| (|Fraction| (|Integer|))) 
                                 '((|List| (|Fraction| (|Integer|))))))
\end{verbatim}

\begin{chunk}{*}
--S 8 of 14
)lisp (setq f (|getFunctionFromDomain| '|sort| '(|List| (|Fraction| (|Integer|))) '((|List| (|Fraction| (|Integer|))))))
--R 
--IValue = (#<compiled-function |FLAGG-;sort;2A;4|> . #<vector 006638a8>)
--E 8

and use {\tt spadcall} on our list of cons cells to return a sorted
list of cons cells.
--S 9 of 14
)lisp (spadcall a f)
--R 
--RValue = ((1 . 4) (1 . 3) (1 . 2))
--E 9

\end{chunk}
Functions might require more than one argument such as the {\tt size?} function.
Here is the Axiom version.
\begin{chunk}{*}
--S 10 of 14
size?(b,2)
--R 
--R
--R   (4)  false
--R                                                                Type: Boolean
--E 10

\end{chunk}
In order to look up the {\tt size?} function we need to specify the types of
each argument. The {\tt size?} function requires the first argument to be an element
of the domain List(Fraction(Integer)) and the second argument to be an element
of the domain NonNegativeInteger. Remember that the 3th argument to the 
{\tt getFunctionFromDomain} lookup requires a list of argument types, in this case
there are two, so we make a list of two of them:
\begin{verbatim}
'( (|List| (|Fraction| (|Integer|))) 
   (|NonNegativeInteger|))
\end{verbatim}

The call looks like:
\begin{verbatim}
(setq f (|getFunctionFromDomain| '|size?| 
                                 '(|List| (|Fraction| (|Integer|))) 
                                 '((|List| (|Fraction| (|Integer|))) 
                                   (|NonNegativeInteger|))))
\end{verbatim}

\begin{chunk}{*}
--S 11 of 14
)lisp (setq f (|getFunctionFromDomain| '|size?| '(|List| (|Fraction| (|Integer|))) '((|List| (|Fraction| (|Integer|))) (|NonNegativeInteger|))))
--R 
--IValue = (#<compiled-function |URAGG-;size?;ANniB;14|> . #<vector 00663a88>)
--E 11

\end{chunk}
As in the Axiom call above the result is 'false' represented in Lisp as NIL.
\begin{chunk}{*}
--S 12 of 14
)lisp (spadcall a 2 f)
--R 
--RValue = NIL
--E 12

\end{chunk}
We call the Axiom function again to get a new result.
\begin{chunk}{*}
--S 13 of 14
size?(b,3)
--R 
--R
--R   (5)  true
--R                                                                Type: Boolean
--E 13

\end{chunk}
As in the Axiom call above the result is 'true' represented in Lisp as T.
\begin{chunk}{*}
--S 14 of 14
)lisp (spadcall a 3 f)
--R 
--RValue = T
--E 14

)spool
)lisp (bye)

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
