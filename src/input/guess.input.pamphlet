\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/input guess.input}
\author{Martin Rubey}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}
)set break resume
)spool guess.output
)set message auto off
)clear all
 
--S 1 of 102
coeff:=FRAC(UP('k,Integer))
--R 
--R
--R   (1)  Fraction UnivariatePolynomial(k,Integer)
--R                                                                 Type: Domain
--E 1

--S 2 of 102
Uts:=UnivariateTaylorSeries(coeff,'x,0)
--R 
--R
--R   (2)  UnivariateTaylorSeries(Fraction UnivariatePolynomial(k,Integer),x,0)
--R                                                                 Type: Domain
--E 2

--S 3 of 102
Ets:=EllipticFunctionsUnivariateTaylorSeries(coeff,Uts)
--R 
--R
--R   (3)
--R  EllipticFunctionsUnivariateTaylorSeries(Fraction UnivariatePolynomial(k,Integ
--R  er),UnivariateTaylorSeries(Fraction UnivariatePolynomial(k,Integer),x,0))
--R                                                                 Type: Domain
--E 3

--S 4 of 102
snk:=sn(x::Uts,k::coeff)$Ets
--R 
--R
--R   (4)
--R            2           4      2             6       4       2
--R         - k  - 1  3   k  + 14k  + 1  5   - k  - 135k  - 135k  - 1  7
--R     x + -------- x  + ------------- x  + ------------------------ x
--R             6              120                     5040
--R   + 
--R      8        6        4        2
--R     k  + 1228k  + 5478k  + 1228k  + 1  9      11
--R     --------------------------------- x  + O(x  )
--R                   362880
--R   Type: UnivariateTaylorSeries(Fraction UnivariatePolynomial(k,Integer),x,0)
--E 4

--S 5 of 102
ll:=entries(complete(first(coefficients(snk),25)))
--R 
--R
--R   (5)
--R                2          4      2            6       4       2
--R             - k  - 1     k  + 14k  + 1     - k  - 135k  - 135k  - 1
--R   [0, 1, 0, --------, 0, -------------, 0, ------------------------, 0,
--R                 6             120                    5040
--R     8        6        4        2
--R    k  + 1228k  + 5478k  + 1228k  + 1
--R    ---------------------------------, 0,
--R                  362880
--R       10         8          6          4         2
--R    - k   - 11069k  - 165826k  - 165826k  - 11069k  - 1
--R    ---------------------------------------------------, 0,
--R                          39916800
--R     12         10           8            6           4         2
--R    k   + 99642k   + 4494351k  + 13180268k  + 4494351k  + 99642k  + 1
--R    -----------------------------------------------------------------, 0,
--R                                6227020800
--R
--R            14          12             10             8             6
--R         - k   - 896803k   - 116294673k   - 834687179k  - 834687179k
--R       + 
--R                     4          2
--R         - 116294673k  - 896803k  - 1
--R    /
--R       1307674368000
--R     ,
--R    0,
--R
--R          16           14              12               10                8
--R         k   + 8071256k   + 2949965020k   + 47152124264k   + 109645021894k
--R       + 
--R                     6              4           2
--R         47152124264k  + 2949965020k  + 8071256k  + 1
--R    /
--R       355687428096000
--R     ,
--R    0,
--R
--R            18            16               14                 12
--R         - k   - 72641337k   - 74197080276k   - 2504055894564k
--R       + 
--R                          10                  8                 6
--R         - 11966116940238k   - 11966116940238k  - 2504055894564k
--R       + 
--R                       4            2
--R         - 74197080276k  - 72641337k  - 1
--R    /
--R       121645100408832000
--R     ,
--R    0,
--R
--R          20             18                 16                   14
--R         k   + 653772070k   + 1859539731885k   + 128453495887560k
--R       + 
--R                          12                    10                    8
--R         1171517154238290k   + 2347836365864484k   + 1171517154238290k
--R       + 
--R                         6                 4             2
--R         128453495887560k  + 1859539731885k  + 653772070k  + 1
--R    /
--R       51090942171709440000
--R     ,
--R    0,
--R
--R            22              20                  18                    16
--R         - k   - 5883948671k   - 46535238000235k   - 6460701405171285k
--R       + 
--R                              14                      12                      10
--R         - 107266611330420090k   - 393938089395885894k   - 393938089395885894k
--R       + 
--R                              8                    6                  4
--R         - 107266611330420090k  - 6460701405171285k  - 46535238000235k
--R       + 
--R                      2
--R         - 5883948671k  - 1
--R    /
--R       25852016738884976640000
--R     ,
--R    0]
--R                          Type: List Fraction UnivariatePolynomial(k,Integer)
--E 5

--S 6 of 102
r1:=guessADE(ll,maxDegree==0,safety==5)
--R 
--R
--R   (6)
--R   [
--R     [
--R       function =
--R         BRACKET
--R              n
--R            [x ]f(x):
--R               ,,        2    3     2                          ,
--R              f  (x) - 2k f(x)  + (k  + 1)f(x)= 0,f(0)= 0(0)!,f (0)= 1(1)!
--R
--R       ,
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 6

)clear all

--S 7 of 102
t1:=[0,1,0,1,1,0,0,0,0,0,0,0,0,0,0]
--R 
--R
--R   (1)  [0,1,0,1,1,0,0,0,0,0,0,0,0,0,0]
--R                                                Type: List NonNegativeInteger
--E 7

--S 8 of 102
t2:=first guessADE first(t1,10)
--R 
--R
--R                      n               4    3
--R   (2)  [function= [[x ]f(x): f(x) - x  - x  - x= 0],order= 0]
--R         Type: Record(function: Expression Integer,order: NonNegativeInteger)
--E 8

)clear all

--S 9 of 102
t1:=guessRat [0,1,4]
--R 
--R
--R   (1)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 9

--S 10 of 102
t2:=guessRat [0]
--R 
--R
--R   (2)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 10

--S 11 of 102
t3:=guessRat [1,1]
--R 
--R
--R   (3)  [[function= 1,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 11

--S 12 of 102
t4:=guessRat [0,0]
--R 
--R
--R   (4)  [[function= 0,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 12

--S 13 of 102
t5:=guessRat([0,1,2], allDegrees==false)$GUESSAN
--R 
--R
--R   (5)  [[function= n,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 13

--S 14 of 102
t6:=guessRat([1,2,3], allDegrees==false)
--R 
--R
--R   (6)  [[function= n + 1,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 14

--S 15 of 102
t7:=guessRat([1,1/2,1/3], allDegrees==false)$GUESSAN
--R 
--R
--R                      1
--R   (7)  [[function= -----,order= 0]]
--R                    n + 1
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 15

--S 16 of 102
t8:=guessRat([0,1,4,9])$GUESSAN
--R 
--R
--R                     2
--R   (8)  [[function= n ,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 16

--S 17 of 102
t9:=guessRat([0,1/2,2/3,3/4], allDegrees==false)$GUESSAN
--R 
--R
--R                      n
--R   (9)  [[function= -----,order= 0]]
--R                    n + 1
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 17

--S 18 of 102
t10:=guessRat([1/2,2/3,3/4,4/5], allDegrees==false)
--R 
--R
--R                     n + 1
--R   (10)  [[function= -----,order= 0]]
--R                     n + 2
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 18

--S 19 of 102
t11:=guessRat([0,1,4,9,16], safety==2)
--R 
--R
--R                      2
--R   (11)  [[function= n ,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 19

)clear all

--S 20 of 102
t1:=guessRat(q)([1,q,q^2], [])
--R 
--R
--R                     n
--R   (1)  [[function= q ,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 20

--S 21 of 102
t2:=guessRat(q)([i^3*q^i + q^(2*i) for i in 0..6], maxMixedDegree==2)
--R 
--R   There are no library operations named maxMixedDegree 
--R      Use HyperDoc Browse or issue
--R                           )what op maxMixedDegree
--R      to learn if there is any operation containing " maxMixedDegree " 
--R      in its name.
--R 
--R   Cannot find a definition or applicable library operation named 
--R      maxMixedDegree with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 21

--S 22 of 102
t3:=guessRat([(i+1)*z for i in 0..5]::List POLY PF 5)
--R 
--R   There are 12 exposed and 0 unexposed library operations named 
--R      guessRat having 1 argument(s) but none was determined to be 
--R      applicable. Use HyperDoc Browse, or issue
--R                            )display op guessRat
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--R   Cannot find a definition or applicable library operation named 
--R      guessRat with argument type(s) 
--R                        List Polynomial PrimeField 5
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 22

)clear all

--S 23 of 102
t1:=guessRat([1,0,1])$GUESSF(PF 2)
--R 
--R
--R   (1)  [[function= - n - 1,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 23

--S 24 of 102
t2:=guessRat([1,0,1,0])$GUESSF(PF 2)
--R 
--R 
--R   >> Error detected within library code:
--R   not invertible
--R
--R   Continuing to read the file...
--R
--E 24

--S 25 of 102
t3:=guessRat([1,0,1,1], one==false)$GUESSF(PF 2)
--R 
--R 
--R   >> Error detected within library code:
--R   not invertible
--R
--R   Continuing to read the file...
--R
--E 25

--S 26 of 102
t4:=guessRat([binomial(2*n, n) for n in 0..6])$GUESSF(PF 3)
--R 
--R 
--R   >> Error detected within library code:
--R   not invertible
--R
--R   Continuing to read the file...
--R
--E 26

--S 27 of 102
t5:=guessRat([1,0,1,0,1,0,1])$GUESSF(PF 7)
--R 
--R
--R   (2)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 27

--S 28 of 102
f := operator 'f;
--R 
--R
--R                                                          Type: BasicOperator
--E 28

--S 29 of 102
t6:=guessPade([1,1,1])
--R 
--R
--R                       n
--R   (4)  [[function= [[x ]f(x): (x - 1)f(x) + 1= 0],order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 29

--S 30 of 102
t7:=getEq first t6
--R 
--R   There are 1 exposed and 0 unexposed library operations named getEq 
--R      having 1 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                              )display op getEq
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--R   Cannot find a definition or applicable library operation named getEq
--R      with argument type(s) 
--R       Record(function: Expression Integer,order: NonNegativeInteger)
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 30

--S 31 of 102
t8:=guessPade([1,1,2,3], allDegrees==false)
--R 
--R
--R   (5)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 31

--S 32 of 102
t9:=guessPade([1,1,2,3], allDegrees==true)
--R 
--R
--R                       n         2
--R   (6)  [[function= [[x ]f(x): (x  + x - 1)f(x) + 1= 0],order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 32

--S 33 of 102
t10:=getEq first t9
--R 
--R   There are 1 exposed and 0 unexposed library operations named getEq 
--R      having 1 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                              )display op getEq
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--R   Cannot find a definition or applicable library operation named getEq
--R      with argument type(s) 
--R       Record(function: Expression Integer,order: NonNegativeInteger)
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 33

)clear all

--S 34 of 102
g 0 == 0; 
--R 
--R                                                                   Type: Void
--E 34

--S 35 of 102
g 1 == 1; 
--R 
--R                                                                   Type: Void
--E 35

--S 36 of 102
g 2 == 1; 
--R 
--R                                                                   Type: Void
--E 36

--S 37 of 102
g n == sqrt 2*g(n-1)+3*g(n-2)+g(n-3);
--R 
--R                                                                   Type: Void
--E 37

--S 38 of 102
guessPade([g i for i in 0..6])$GUESSAN
--R 
--R   Compiling function g with type Integer -> AlgebraicNumber 
--R   Compiling function g as a recurrence relation.
--R
--R   (5)
--R   [
--R                   n          +-+    3     2             2 +-+    2
--R     [function= [[x ]f(x): (x\|2  + x  + 3x  - 1)f(x) - x \|2  + x  + x= 0],
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 38

)clear all

--S 39 of 102
g 0 == z; 
--R 
--R                                                                   Type: Void
--E 39

--S 40 of 102
g 1 == 1; 
--R 
--R                                                                   Type: Void
--E 40

--S 41 of 102
g 2 == 1; 
--R 
--R                                                                   Type: Void
--E 41

--S 42 of 102
g n == sqrt 2*g(n-1)+3*g(n-2)+g(n-3);
--R 
--R                                                                   Type: Void
--E 42

--S 43 of 102
guessPade [g i for i in 0..6]
--R 
--R   Compiling function g with type Integer -> Polynomial AlgebraicNumber
--R      
--R   Compiling function g as a recurrence relation.
--R
--R   (5)
--R   SUB
--R      guessPade
--R  ,
--R      z
--R  ,
--R      1
--R  ,
--R      1
--R  ,
--R           +-+
--R      z + \|2  + 3
--R  ,
--R       +-+      +-+
--R      \|2 z + 3\|2  + 6
--R  ,
--R             +-+
--R      5z + 9\|2  + 16
--R  ,
--R         +-+            +-+
--R      (8\|2  + 1)z + 26\|2  + 39
--R                                                                 Type: Symbol
--E 43

)clear all

--S 44 of 102
guessAlg([1/(2*n+1)*binomial(2*n+1, n) for n in 0..3], allDegrees==true)
--R 
--R
--R   (1)
--R   [
--R     [
--R       function =
--R         BRACKET
--R              n
--R            [x ]f(x):
--R                      2                            ,            ,,
--R                x f(x)  - f(x) + 1= 0,f(0)= 1(0)!,f (0)= 1(1)!,f  (0)= 2(2)!
--R
--R             ,
--R                 ,,,
--R                f   (0)= 5(3)!
--R
--R       ,
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 44

)clear all

--S 45 of 102
guessAlg [1/(2*n+1)*binomial(2*n+1, n) for n in 0..5]
--R 
--R
--R   (1)
--R   [
--R     [
--R       function =
--R         BRACKET
--R              n
--R            [x ]f(x):
--R                      2                            ,            ,,
--R                x f(x)  - f(x) + 1= 0,f(0)= 1(0)!,f (0)= 1(1)!,f  (0)= 2(2)!
--R
--R             ,
--R                 ,,,            (iv)
--R                f   (0)= 5(3)!,f    (0)= 14(4)!
--R
--R       ,
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 45

)clear all

--S 46 of 102
guessPRec([1,2,6,20,70])
--R 
--R
--R   (1)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 46

)clear all

--S 47 of 102
guessPRec([1,2,6,20], homogeneous==true, allDegrees==true)
--R 
--R
--R   (1)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 47

--S 48 of 102
guessPRec([1,2,6,20,70], homogeneous==true)
--R 
--R
--R   (2)
--R   [[function= [f(n): (n + 1)f(n + 1) + (- 4n - 2)f(n)= 0,f(0)= 1],order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 48

--S 49 of 102
guessPRec([1,2,6,20,70], allDegrees==true)
--R 
--R
--R   (3)
--R   [[function= [f(n): (n + 1)f(n + 1) + (- 4n - 2)f(n)= 0,f(0)= 1],order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 49

)clear all

--S 50 of 102
guessPRec [0,0,0,1,2,3,4,5]
--R 
--R
--R   (1)  [[function= n - 2,order= 2]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 50

)clear all

--S 51 of 102
r: INT -> POLY INT
--R 
--R                                                                   Type: Void
--E 51

--S 52 of 102
r(0)==1
--R 
--R                                                                   Type: Void
--E 52

--S 53 of 102
r(1)==1
--R 
--R                                                                   Type: Void
--E 53

--S 54 of 102
r(n)==q^(n-1)*r(n-1)+(n-2)*r(n-2)
--R 
--R                                                                   Type: Void
--E 54

--S 55 of 102
guessPRec(q)([r m for m in 0..7], maxMixedDegree==1, maxDegree==1, _
             homogeneous==true)
--R 
--R   Compiling function r with type Integer -> Polynomial Integer 
--R   Compiling function r as a recurrence relation.
--R   There are no library operations named maxMixedDegree 
--R      Use HyperDoc Browse or issue
--R                           )what op maxMixedDegree
--R      to learn if there is any operation containing " maxMixedDegree " 
--R      in its name.
--R 
--R   Cannot find a definition or applicable library operation named 
--R      maxMixedDegree with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 55

)clear all

)set function cache all r

--S 56 of 102
r: INT -> POLY INT
--R 
--R                                                                   Type: Void
--E 56

--S 57 of 102
r 0 == a00
--R 
--R                                                                   Type: Void
--E 57

--S 58 of 102
r 1 == a01
--R 
--R                                                                   Type: Void
--E 58

--S 59 of 102
r 2 == a02
--R 
--R                                                                   Type: Void
--E 59

--S 60 of 102
r 3 == a03
--R 
--R                                                                   Type: Void
--E 60

--S 61 of 102
r 4 == a04
--R 
--R                                                                   Type: Void
--E 61

--S 62 of 102
r n == reduce(+, [r(n-i)::POLY INT for i in 1..4])
--R 
--R                                                                   Type: Void
--E 62

--S 63 of 102
guessPRec [r i for i in 0..11]
--R 
--R   Compiling function r with type Integer -> Polynomial Integer 
--R   r will cache all previously computed values.
--R
--R   (8)
--R   [
--R     [
--R       function =
--R         BRACKET
--R            f(n):
--R                f(n + 5) - f(n + 4) - f(n + 3) - f(n + 2) - f(n + 1)= 0
--R             ,
--R                f(0)= a00,f(1)= a01,f(2)= a02,f(3)= a03
--R       ,
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 63

)clear all

--S 64 of 102
guessPRec([1,0,0,0,0,0,0,0], homogeneous==true)
--R 
--R
--R   (1)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 64

--S 65 of 102
guessPRec([0,1,0,0,0,0,0,0], homogeneous==true)
--R 
--R
--R   (2)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 65

--S 66 of 102
guessPRec([0,0,1,0,0,0,0,0], homogeneous==true)
--R 
--R
--R   (3)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 66

)clear all

--S 67 of 102
guessADE([n^n/factorial n for n in 0..6], allDegrees==true)
--R 
--R
--R   (1)
--R                  n         ,          3       2
--R   [[function= [[x ]f(x): xf (x) - f(x)  + f(x) = 0,f(0)= 1(0)!],order= 0]]
--R
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 67

)clear all

--S 68 of 102
t1 := [1, 1, q+1, q^3+q^2+2*q+1, q^6+q^5+2*q^4+3*q^3+3*q^2+3*q+1, _
       q^10+q^9+2*q^8+3*q^7+5*q^6+5*q^5+7*q^4+7*q^3+6*q^2+4*q+1]
--R 
--R
--R   (1)
--R                  3    2            6    5     4     3     2
--R   [1, 1, q + 1, q  + q  + 2q + 1, q  + q  + 2q  + 3q  + 3q  + 3q + 1,
--R     10    9     8     7     6     5     4     3     2
--R    q   + q  + 2q  + 3q  + 5q  + 5q  + 7q  + 7q  + 6q  + 4q + 1]
--R                                                Type: List Polynomial Integer
--E 68

--S 69 of 102
guessADE(q)(t1, maxPower==2, allDegrees==true)
--R 
--R
--R                       n
--R   (2)  [[function= [[x ]f(x): x f(x)f(q x) - f(x) + 1= 0],order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 69

)clear all

--S 70 of 102
guessADE(q)(first(t1, 4), maxPower==2, allDegrees==true)
--R 
--R   There are 1 exposed and 0 unexposed library operations named first 
--R      having 2 argument(s) but none was determined to be applicable. 
--R      Use HyperDoc Browse, or issue
--R                              )display op first
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--R   Cannot find a definition or applicable library operation named first
--R      with argument type(s) 
--R                                 Variable t1
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 70

)clear all

--S 71 of 102
s: INT -> INT
--R 
--R                                                                   Type: Void
--E 71

--S 72 of 102
s(0)==1
--R 
--R                                                                   Type: Void
--E 72

--S 73 of 102
s(1)==1
--R 
--R                                                                   Type: Void
--E 73

--S 74 of 102
s(2)==1
--R 
--R                                                                   Type: Void
--E 74

--S 75 of 102
s(3)==1
--R 
--R                                                                   Type: Void
--E 75

--S 76 of 102
s(n)==(s(n-1)*s(n-3)+s(n-2)^2)/s(n-4)
--R 
--R                                                                   Type: Void
--E 76

--S 77 of 102
guessRec([s m for m in 0..18], maxPower==2)
--R 
--R   Compiling function s with type Integer -> Integer 
--R   Compiling function s as a recurrence relation.
--R
--R   (7)
--R   [
--R     [
--R       function =
--R         BRACKET
--R            f(n):
--R                                                          2
--R                f(n)f(n + 4) - f(n + 1)f(n + 3) - f(n + 2) = 0,f(0)= 1,f(1)= 1
--R             ,
--R                f(2)= 1,f(3)= 1
--R       ,
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 77

--S 78 of 102
guessRec([s m for m in 0..12], maxPower==2, homogeneous==true)
--R 
--R
--R   (8)  []
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 78

--S 79 of 102
guessRec([s m for m in 0..6], Somos==4, homogeneous==2)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 79

)clear all

)clear values s

--S 80 of 102
s n == reduce(*,[reduce(*,[factorial i for i in 0..j-1],1) for j in 0..n-1],1)
--R 
--R                                                                   Type: Void
--E 80

--S 81 of 102
guess [s l for l in 0..6]
--R 
--R   Compiling function s with type NonNegativeInteger -> Integer 
--R   s will cache all previously computed values.
--R
--R   (2)
--R   [
--R     [
--R       function =
--R         PI2
--R            p = 0
--R             7
--R        ,
--R            n - 1
--R        ,
--R            PI2
--R               p = 0
--R                6
--R           ,
--R               p  - 1
--R                7
--R           ,
--R               BRACKET
--R                    p
--R                     6
--R                  [x  ]f(x):
--R                           2            2                          ,
--R                      3f(x)  - 8f(x) + x  + 2x + 5= 0,f(0)= 1(0)!,f (0)= 1(1)!
--R
--R                   ,
--R                       ,,            ,,,            (iv)
--R                      f  (0)= 2(2)!,f   (0)= 6(3)!,f    (0)= 24(4)!
--R
--R       ,
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 81

--S 82 of 102
guessRec([s l for l in 0..8], Somos==6, homogeneous==4)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 82

--S 83 of 102
guessRec([s l for l in 0..8], Somos==true, homogeneous==4, maxShift==3)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                                   Boolean
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 83

--S 84 of 102
guessRec([s l for l in 0..8], Somos==true, homogeneous==true, _
         maxPower==4, maxShift==3)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                                   Boolean
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 84

)clear all

)clear values s

--S 85 of 102
s 0 == 1
--R 
--R                                                                   Type: Void
--E 85

--S 86 of 102
s 1 == 2
--R 
--R                                                                   Type: Void
--E 86

--S 87 of 102
s n == s(n-1)^2*s(n-2)
--R 
--R                                                                   Type: Void
--E 87

--S 88 of 102
guessRec([s l for l in 0..5], Somos==true, maxShift==2, maxPower==3)
--R 
--R   Compiling function s with type Integer -> PositiveInteger 
--R   Compiling function s as a recurrence relation.
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                                   Boolean
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 88

--S 89 of 102
guessRec([0, 1, 0, 0, 0, 2, 0, 7, 0, 0, 0, 15, 0, 0, 0], one==false)
--R 
--R
--R   (4)
--R   [
--R     [
--R       function =
--R         BRACKET
--R            f(n):
--R                                      4          3          2
--R                65f(n)f(n + 2) - 7f(n)  + 161f(n)  - 889f(n)  + 735f(n)= 0
--R             ,
--R                f(0)= 0,f(1)= 1
--R       ,
--R      order= 0]
--R     ,
--R
--R                             4                      2
--R     [function= [f(n): 20f(n)  + (- 941n + 5741)f(n)  + (647n - 5467)f(n)= 0],
--R      order= 0]
--R     ,
--R
--R     [
--R       function =
--R         BRACKET
--R            f(n):
--R                      2                                3           2
--R                  (79n  - 948n + 2133)f(n + 2) + 28f(n)  - 1008f(n)
--R                + 
--R                  (784n + 196)f(n)
--R                  =
--R                  0
--R             ,
--R                f(0)= 0,f(1)= 1
--R       ,
--R      order= 0]
--R     ,
--R
--R                             3                    2
--R     [function= [f(n): 40f(n)  + (- 79n + 219)f(n)  + (93n - 273)f(n)= 0],
--R      order= 0]
--R     ,
--R                                    2         2
--R    [function= [f(n): (11n - 31)f(n)  + (- 20n  + 103n - 63)f(n)= 0],order= 0],
--R                             2       3       2
--R    [function= [f(n): 240f(n)  + (11n  - 233n  + 997n - 1015)f(n)= 0],order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 89

)clear all

--S 90 of 102
guessExpRat([0,3,32,375,5184])
--R 
--R
--R                             n
--R   (1)  [[function= n (n + 2) ,order= 0]]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 90

)clear all

--S 91 of 102
guessBinRat([1,1,k+1,(3*k*k+5*k+2)/2,(8*k^3+18*k*k+13*k+3)/3])
--R 
--R
--R                     (k + 1)n                        (k + 1)n + 1
--R                    (        )                      (            )
--R                        n                                 n
--R   (1)  [[function= ----------,order= 0],[function= --------------,order= 0]]
--R                      k n + 1                        (k + 1)n + 1
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 91

--S 92 of 102
guessBinRat([binomial(3+7*k, k)/(k+3) for k in 0..6]::List PF 3001)
--R 
--R 
--R   >> Error detected within library code:
--R   (1 . failed) cannot be coerced to mode (Integer)
--R
--R   Continuing to read the file...
--R
--E 92

)clear all

--S 93 of 102
guess([1,1,2,7,42,429,7436,218348], [guessRat], [guessProduct])
--R 
--R
--R                           p  - 1      2
--R                    n - 1   8      27p   + 54p  + 24
--R                    ++-++  ++-++      7       7
--R   (1)  [[function=  | |    | |    -----------------,order= 0]]
--R                     | |    | |        2
--R                    p = 0  p = 0   16p   + 32p  + 12
--R                     8      7         7       7
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 93

--S 94 of 102
guess([0,1,3,9,33], [guessRat], [guessSum, guessProduct])
--R 
--R
--R                           s  - 1
--R                    n - 1   5
--R                     --+   ++-++
--R   (2)  [[function=  >      | |    p  + 2,order= 0]]
--R                     --+    | |     4
--R                    s = 0  p = 0
--R                     5      4
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 94

--S 95 of 102
guess([product(1+factorial k, k=0..n-1) for n in 0..6], _
      [guessPRec], [guessProduct])
--R 
--R
--R   (3)
--R   [
--R                n - 1
--R                ++-++
--R     [function=  | |   [f(p ): f(p  + 1) + (- p  - 1)f(p ) + p = 0,f(0)= 2],
--R                 | |       7      7            7        7     7
--R                p = 0
--R                 7
--R      order= 0]
--R     ]
--R    Type: List Record(function: Expression Integer,order: NonNegativeInteger)
--E 95

--S 96 of 102
guessPRec([1,2,3,4,5], Somos==3)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 96

--S 97 of 102
guessPRec([1,2,3,4,5], Somos==true)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                                   Boolean
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 97

--S 98 of 102
guessRec([1,2,3,4], Somos==true, maxShift==4, homogeneous==1)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                                   Boolean
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 98

--S 99 of 102
guessRec([1,2,3,4], Somos==5, maxShift==4, homogeneous==1)
--R 
--R   There are no library operations named Somos 
--R      Use HyperDoc Browse or issue
--R                               )what op Somos
--R      to learn if there is any operation containing " Somos " in its 
--R      name.
--R 
--R   Cannot find a definition or applicable library operation named Somos
--R      with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 99

)clear all

--S 100 of 102
guessADE(append([n/1 for n in 0..6],[1]),homogeneous==4,maxDegree==2)
--R 
--R   There are 2 exposed and 0 unexposed library operations named 
--R      homogeneous having 1 argument(s) but none was determined to be 
--R      applicable. Use HyperDoc Browse, or issue
--R                           )display op homogeneous
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--R   Cannot find a definition or applicable library operation named 
--R      homogeneous with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 100

--S 101 of 102
guessADE(append([n/1 for n in 0..6],[1]),homogeneous==4,maxDegree==2,_
         checkExtraValues==false)
--R 
--R   There are 2 exposed and 0 unexposed library operations named 
--R      homogeneous having 1 argument(s) but none was determined to be 
--R      applicable. Use HyperDoc Browse, or issue
--R                           )display op homogeneous
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--R   Cannot find a definition or applicable library operation named 
--R      homogeneous with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 101

--S 102 of 102
guessADE(append([n/1 for n in 0..6],[1]),homogeneous==4,maxDegree==2, _
         check=='MonteCarlo)
--R 
--R   There are 2 exposed and 0 unexposed library operations named 
--R      homogeneous having 1 argument(s) but none was determined to be 
--R      applicable. Use HyperDoc Browse, or issue
--R                           )display op homogeneous
--R      to learn more about the available operations. Perhaps 
--R      package-calling the operation or using coercions on the arguments
--R      will allow you to apply the operation.
--R 
--R   Cannot find a definition or applicable library operation named 
--R      homogeneous with argument type(s) 
--R                               PositiveInteger
--R      
--R      Perhaps you should use "@" to indicate the required return type, 
--R      or "$" to specify which version of the function you need.
--E 102

)spool
)lisp (bye)
 
\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
 
