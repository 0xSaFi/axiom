<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Expanding to Higher Dimensions</div>
  <hr/>
To get higher dimensional aggregates, you can create one-dimensional 
aggregates with elements that are themselves aggregates, for example,
lists of list, one-dimensional arrays of list of multisets, and so on. For
applications requiring two-dimensional homogeneous aggregates, you will
likely find two-dimensional arrays and matrices useful.

The entries in <a href="db.xhtml?TwoDimensionalArray">TwoDimensionalArray</a>
and <a href="?Matrix">Matrix</a> objects are all the same type, 
except that those for <a href="db.xhtml?Matrix">Matrix</a> must belong to a
<a href="db.xhtml?Ring">Ring</a>. You create and access elements in roughly
the same way. Since matrices have an understood algebraic structure, certain
algebraic operations are available for matrices but not for arrays. Because
of this, we limit our discussion here to <a href="db.xhtml?Matrix">Matrix</a>,
that can be regarded as an extension of
<a href="db.xhtml?TwoDimensionalArray">TwoDimensionalArray</a>. See
<a href="pagetwodimensionalarray.xhtml">TwoDimensionalArray</a>
For more
information about Axiom's linear algebra facilities see
<a href="pagematrix.xhtml">Matrix</a>,
<a href="pagepermanent.xhtml">Permanent</a>,
<a href="pagesquarematrix.xhtml">SquareMatrix</a>,
<a href="pagevector.xhtml">Vector</a>,
<a href="axbook/section-8.4.xhtml">
Computation of Eigenvalues and Eigenvectors</a>, and
<a href="axbook/section-8.5.xhtml">
Solution of Linear and Polynomial Equations</a>.

You can create a matrix from a list of lists, where each of the inner
lists represents a row of the matrix.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="m:=matrix([[1,2],[3,4]])" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
The "collections" construct (see
<a href="axbook/section-5.5.xhtml">
Creating Lists and Streams with Iterators</a>)
is useful for creating matrices whose entries are given by formulas.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value="matrix([[1/(i+j-x) for i in 1..4] for j in 1..4])" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
Let vm denote the three by three Vandermonde matrix.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="vm:=matrix [[1,1,1],[x,y,z],[x*x,y*y,z*z]]" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
Use this syntax to extract an entry in the matrix.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p3','p4']);"
    value="vm(3,3)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
You can also pull out a <a href="dboprow.xhtml">row</a> or a column.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p3','p5']);"
    value="column(vm,2)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
You can do arithmetic.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p3','p6']);"
    value="vm*vm" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
You can perform operations such as 
<a href="dboptranspose.xhtml">transpose</a>,
<a href="dboptrace.xhtml">trace</a>, and
<a href="dbopdeterminant.xhtml">determinant</a>
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p3','p7']);"
    value="factor determinant vm" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
 </body>
</html>
