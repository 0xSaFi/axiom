<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Example: Bernoulli Polynomials and Sums of Powers</div>
  <hr/>
Axiom provides operations for computing definite and indefinite sums.

You can compute the sum of the first ten fourth powers by evaluating this.
This creates a list whose entries are m^4 as m ranges from 1 to 10, and then
computes the sum of the entries of that list.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="reduce(+,[m^4 for m in 1..10])" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
You can also compute a formula for the sum of the first k fourth powers, 
where k is an unspecified positive integer.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value="sum4:=sum(m^4,m=1..k)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
This formula is valid for any positive integer k. For instance, if we 
replace k by 10, we obtain the number we computed earlier.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="handleFree(['p2','p3']);"
    value="eval(sum4,k=10)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
You can compute a formula for the sum of the first k nth powers in a
similar fashion. Just replace the 4 in the definition of sum4 by any
expression not involving k. Axiom computes these formulas using Bernoulli 
polynomials; we use the rest of this section to describe this method.

First consider this function of t and x.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="makeRequest('p4');"
    value="f:=t*exp(x*t)/(exp(t)-1)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
Since the expressions involved get quite large, we tell Axiom to show us only
terms of degree up to 5.
<ul>
 <li>
  <input type="submit" id="p5" class="noresult" 
    onclick="makeRequest('p5');"
    value=")set streams calculate 5" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
If we look at the Taylor expansion of f(x,t) about t=0, we see that the 
coefficients of the powers of t are polynomials in x.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p4','p5','p6']);"
    value="ff:=taylor(f,t=0)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
In fact, the nth coefficient in this series is essentiall the nth Bernoulli
polynomial: the nth coefficient of the series is 1/n!*Bn(x), where Bn(x) is
the nth Bernoulli polynomial. Thus, to obtain the nth Bernoulli polynomial,
we multiply the nth coefficient of the series ff by n!. For example, the
sixth Bernoulli polynomial is this.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p4','p5','p6','p7']);"
    value="factorial(6)*coefficient(ff,6)" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
We derive some properties of the function f(x,t). First we compute
f(x+1,t)-f(x-t).
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p4','p8']);"
    value="g:=eval(f,x=x+1)-f" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
If we normalize g, we see that it has a particularly simple form.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p4','p8','p9']);"
    value="normalize(g)" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
From this it follows that the nth coefficient in the Taylor expansion of
g(x,t) at t=0 is 1/(n-1)!*x^(n-1). If you want to check this, evaluate the
next expression.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p4','p5','p8','p9','p10']);"
    value="taylor(g,t=0)" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
However, since 
<pre>
  g(x,t)=f(x+1,t)-f(x,t)
</pre> 
it follows that the nth coefficient
is 
<pre>
   1/n! * (Bn(x+1) - Bn(x))
</pre> 
Equating coefficients, we see that 
<pre>
   1/(n-1)! * x^(n-1) = 1/n! * (Bn(x+1) - Bn(x))
</pre>
and, therefore
<pre>
   x^(n-1) = 1/n * (Bn(x+1) - Bn(x))
</pre>
Let's apply this formula repeatedly, letting x vary between two integers
a and b, with a&#60;b:
<pre>
       a^(n-1) = 1/n * (Bn(a+1) - Bn(a))
   (a+1)^(n-1) = 1/n * (Bn(a+2) - Bn(a+1))
   (a+2)^(n-1) = 1/n * (Bn(a+3) - Bn(a+2))
               .
               .
   (b-1)^(n-1) = 1/n * (Bn(b)   - Bn(b-1))
       b^(n-1) = 1/n * (Bn(b+1) - Bn(b))
</pre>
When we add these equations we find that the sum of the left-hand sides is
<pre>
   sum(m=a..b,m^(n-1)) 
</pre>
the sum of the (n-1)-st powers from a to b. The sum
of the right-hand sides is a "telescoping series". After cancellation, the
sum is simply 
<pre>
   1/n*(Bn(b+1)-Bn(a))
</pre>

Replacing n by n+1, we have shown that
<pre>
   sum(m=a..b,m^n) = 1/(n+1)*(B&#60;n+1>(b+1)-B&#60;n+1>(a))
</pre>

Let's use this to obtain the formula for the sum of fourth powers. 
First we obtain the Bernoulli polynomial B5.
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p4','p5','p6','p11']);"
    value="B5:=factorial(5)*coefficient(ff,5)" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
To find the sum of the first k 4th powers, we multiply 1/5 by 
B5(k+1)-B5(1)
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p4','p5','p6','p11','p12']);"
    value="1/5*(eval(B5,x=k+1)-eval(B5,x=1))" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
This is the same formula that we obtained via sum(m^4,m=1..k)
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="handleFree(['p2','p13']);"
    value="sum4" />
  <div id="ansp13"><div></div></div>
 </li>
</ul>
At this point you may want to do the same computation, but with an exponent
other than 4. For example, you might try to find a formula for the sum of
the first k 20th powers.
 </body>
</html>
