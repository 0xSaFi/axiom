<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
   function commandline(arg) {
    var myform = document.getElementById("form2");
    var myfunct = myform.expr.value;
    var myvar = myform.vars.value;
    var mypoint = "";
    // decide what the limit point should be
    var finite = document.getElementById('finite').checked;
    if (finite == true) 
      mypoint = document.getElementById('fpoint').value;
    if (document.getElementById('plus').checked == true) 
      mypoint = "%plusInfinity";
    if (document.getElementById('minus').checked == true) 
      mypoint = "%minusInfinity"; 
    // decide what the limit statement is
    if (document.getElementById('both').checked == true) 
      ans = 'limit('+myform.expr.value+','+myvar+'='+mypoint+')';
    // note: ignore direction if limit is %plusInfinity
    if (document.getElementById('right').checked == true) {
     if (finite == true) {
       ans = 'limit('+myform.expr.value+','+myvar+'='+mypoint+',"right")';
     } else {
       ans = 'limit('+myform.expr.value+','+myvar+'='+mypoint+')';
     };
    };
    // note: ignore direction if limit is %minutInfinity
    if (document.getElementById('left').checked == true) {
     if (finite == true) {
       ans = 'limit('+myform.expr.value+','+myvar+'='+mypoint+',"left")';
     } else {
       ans = 'limit('+myform.expr.value+','+myvar+'='+mypoint+')';
     };
    };
    return(ans);
   }
// The structure returned from Axiom now is
// <div class="stepnum"></div>
// <div class="command"></div>
// <div class="algebra"></div>
// <div class="mathml"></div>
// <div class="type"></div>
// This function will format the output as a console session
<![CDATA[
 function showanswer(mathString,indiv) {
    var mystr = mathString.split("</div>");
      // first we prepare the step number
    var mystept1 = mystr[0].lastIndexOf(">");
    var mystepstr = mystr[0].substr(mystept1+1);
      // now we get the command
    var mycmdt1 = mystr[1].lastIndexOf(">");
    var mycmdstr = mystr[1].substr(mycmdt1+1);
    var myprompt = '('+mystepstr+') -> '+mycmdstr;
      // now we handle the mathml
    var mymathstr = mystr[3].concat("</div>");
      // and the type, we need to insert the string "Type: "
    var mytypet1 = mystr[4].lastIndexOf(">");
    var mytypet2 = mystr[4].substr(mytypet1+1).concat("</div>");
    var mytypestr = '<div> Type: '.concat(mytypet2);
      // bang the whole thing together
    var finaldiv='<div class="command">'+myprompt+'</div>'+mymathstr+mytypestr;
      // this turns the string into a dom fragment
    var mathRange = document.createRange();
    var mathBox=document.createElementNS('http://www.w3.org/1999/xhtml','div');
    mathRange.selectNodeContents(mathBox);
    var answer = mathRange.createContextualFragment(finaldiv);
    mathBox.appendChild(answer);
      // and we stick the result into the requested div block as a child.
    var mathAns = document.getElementById(indiv);
    mathAns.removeChild(mathAns.firstChild);
    mathAns.appendChild(mathBox);
 }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body>
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <form id="form2">
   Enter the function you want to compute the limit of:<br/>
   <input type="text" id="expr" tabindex="10" size="50" 
     value="x*sin(1/x)"/><br/>
   Enter the name of the variable:<br/>
   <input type="text" id="vars" tabindex="20" value="x"/><br/>
   <input type="radio" id="finite" tabindex="30" checked="checked" 
     name="point"/>
    A finite point
    <input type="text" id="fpoint" tabindex="20" value="0"/><br/>
   <input type="radio" id="plus" tabindex="40" name="point"/>
    %plusInfinity<br/>
   <input type="radio" id="minus" tabindex="50" name="point"/>
    %minusInfinity<br/><br/><br/>
   Compute the limit from:<br/>
   <input type="radio" id="both" tabindex="60" name="direction"
     checked="checked"/>
    both directions<br/>
   <input type="radio" id="right" tabindex="70" name="direction"/>
    the right<br/>
   <input type="radio" id="left" tabindex="80" name="direction"/>
    the left<br/>
  </form>
   <center>
     <input type="button" value="Continue" name="continue" 
       onclick="javascript:makeRequest('');"/>
   </center>
  <div id="mathAns"><div></div></div>
 </body>
</html>

