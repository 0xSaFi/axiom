<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
<div align="center">Machine-sized Integers</div>
<hr/>
The <a href="db.xhtml?SingleInteger">SingleInteger</a> is intended to
provide support in Axiom for machine integer arithmetic. It is generally
much faster than (bignum) <a href="db.xhtml?Integer">Integer</a> arithmetic
but suffers from a limited range of values. Since Axiom can be implemented
on top of various dialects of Lisp, the actual representation of small
integers may not correspond exactly to the host machines integer
representation.

You can discover the minimum and maximum values in your implementation by
using <a href="dbopmin.xhtml">min</a> and <a href="dbopmax.xhtml">max</a>
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" onclick="makeRequest('p1');"
    value="min()$SingleInteger" />
  <div id="ansp1"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p2" class="subbut" onclick="makeRequest('p2');"
    value="max()$SingleInteger" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
To avoid confusion with <a href="db.xhtml?Integer">Integer</a>, which is
the default type for integers, you usually need to work with declared
variables (see <a href="axbook/section-2.3.xhtml">Declarations</a>).
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" onclick="makeRequest('p3');"
    value="a:=1234::SingleInteger" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
or use package calling (see 
<a href="axbook/section-2.9.xhtml">Package Calling and Target Types</a>).
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" onclick="makeRequest('p4');"
    value="b:=1234$SingleInteger" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
You can add, multiply, and subtract
<a href="db.xhtml?SingleInteger">SingleInteger</a> objects, and ask for the
greatest common divisor 
(<a href="dbopgcd.xhtml">gcd</a>).
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p3','p4','p5']);"
    value="gcd(a,b)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
The least common multiple 
(<a href="dboplcm.xhtml">lcm</a>) is also available.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p3','p4','p6']);"
    value="lcm(a,b)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
Operations
<a href="dbopmulmod.xhtml">mulmod</a>,
<a href="dbopaddmod.xhtml">addmod</a>,
<a href="dbopsubmod.xhtml">submod</a>, and
<a href="dbopinvmod.xhtml">invmod</a>
are similar -- they provide arithmetic modulo a given small integer.
Here is 5*6 mod 13.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" onclick="makeRequest('p7');"
    value="mulmod(5,6,13)$SingleInteger" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
To reduce a small integer modulo a prime, use
<a href="dboppositiveremainder.xhtml">positiveRemainder</a>
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" onclick="makeRequest('p8');"
    value="positiveRemainder(37,13)$SingleInteger" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
Operations <a href="dbopsingleintegerand.xhtml">And</a>,
<a href="dbopsingleintegeror.xhtml">Or</a>,
<a href="dbopsingleintegerxor.xhtml">xor</a>,
and <a href="dbopsingleintegernot.xhtml">Not</a>
provide bit level operations on small integers.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" onclick="makeRequest('p9');"
    value="And(3,4)$SingleInteger" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
Use shift(int,numToShift) to shift bits, where int is shifted left if
numToShift is positive, right if negative.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" onclick="makeRequest('p10');"
    value="shift(1,4)$SingleInteger" />
  <div id="ansp10"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p11" class="subbut" onclick="makeRequest('p11');"
    value="shift(31,-1)$SingleInteger" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
Many other operations are available for small integers, including many of
those provided for <a href="db.xhtml?Integer">Integer</a>. 
To see other operations use the system command
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="showcall('p12');"
   value=")show SingleInteger"/>
  <div id="ansp12"><div></div></div>
 </li>
</ul>
 </body>
</html>
