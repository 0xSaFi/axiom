<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Roman Numerals</div>
  <hr/>
The Roman numeral package was added to Axiom in MCMLXXXVI for use in
denoting higher order derivatives.

For example, let f be a symbolic operator.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" onclick="makeRequest('p1');"
    value="f:=operator 'f" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
This is the seventh derivative of f with respect to x
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" onclick="makeRequest('p2');"
    value="D(f x,x,7)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
You can have integers printed as Roman numerals by declaring variables
to be of type 
<a href="db.xhtml?RomanNumeral">RomanNumeral</a> 
(abbreviation <a href="db.xhtml?RomanNumeral">ROMAN</a>).
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" onclick="makeRequest('p3');"
    value="a:=roman(1978-1965)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
This package now has a small but devoted group of followers that claim
this domain has shown its efficacy in many other contexts. They claim
that Roman numerals are every bit as useful as ordinary integers.
In a sense, they are correct, because Roman numerals form a ring and
you can therefore construct polynomials with Roman numeral 
coefficients, matrices over Roman numerals,etc..
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" onclick="makeRequest('p4');"
    value="x:UTS(ROMAN,'x,0):=x" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
Was Fibonacci Italian or ROMAN?
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p4','p5']);"
    value="recip(1-x-x^2)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
You can also construct fractions with Roman numeral numerators and 
denominators, as this matrix Hilberticus illustrates.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" onclick="makeRequest('p6');"
    value="m:MATRIX FRAC ROMAN" />
  <div id="ansp6"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p6','p7']);"
    value="m:=matrix [ [1/(i+j) for i in 1..3] for j in 1..3]" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
Note that the inverse of the matrix has integral 
<a href="db.xhtml?RomanNumeral">ROMAN</a> entries.
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p6','p7','p8']);"
    value="inverse m" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
Unfortunately, the spoil-sports say that the fun stops when the
numbers get big -- mostly because the Romans didn't establish
conventions about representing very large numbers.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" onclick="makeRequest('p9');"
    value="y:=factorial 10" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
You work it out!
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p9','p10']);"
    value="roman y" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
Issue the system command
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="showcall('p11');"
   value=")show RomanNumeral"/>
  <div id="ansp11"><div></div></div>
 </li>
</ul>
to display the full list of operations defined by 
<a href="db.xhtml?RomanNumeral">RomanNumeral</a>).
 </body>
</html>
