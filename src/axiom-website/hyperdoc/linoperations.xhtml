<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Operations on Matrices</div>
  <hr/>
Axiom provides both left and right scalar multiplication.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="m:=matrix [[1,2],[3,4]]" />
  <div id="ansp1"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value="4*m*(-5)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
You can add, subtract, and multiply matrices provided, of course, that the
matrices have compatible dimensions. If not, an error message is displayed.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="n:=matrix([[1,0,-2],[-3,5,1]])" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
This following product is defined but n*m is not.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p3','p4']);"
    value="m*n" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
The operations <a href="dbopnrows.xhtml">nrows</a> and
<a href="dbopncols.xhtml">ncols</a> return the number of rows and
columns of a matrix. You can extract a row or a column of a matrix using
the operations <a href="dboprow.xhtml">row</a> and
<a href="dbopcolumn.xhtml">column</a>. The object returned ia a
<a href="db.xhtml?Vector">Vector</a>. Here is the third column of the matrix n.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p3','p5']);"
    value="vec:=column(n,3)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
You can multiply a matrix on the left by a "row vector" and on the right by
a "column vector".
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p1','p5','p6']);"
    value="vec*m" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
The operation <a href="dbopinverse.xhtml">inverse</a> computes the inverse
of a matrix if the matrix is invertible, and returns "failed" if not. This
Hilbert matrix invertible.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="makeRequest('p7');"
    value="hilb:=matrix([[1/(i+j) for i in 1..3] for j in 1..3])" />
  <div id="ansp7"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p7','p8']);"
    value="inverse(hilb)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
This matrix is not invertible.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="makeRequest('p9');"
    value="mm:=matrix([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]])" />
  <div id="ansp9"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p9','p10']);"
    value="inverse(mm)" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
The operation <a href="dbopdeterminant.xhtml">determinant</a> computes the
determinant of a matrix provided that the entries of the matrix belong to a
<a href="db.xhtml?CommutativeRing">CommutativeRing</a>. The above matrix mm
is not invertible and, hence, must have determinant 0.
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p9','p11']);"
    value="determinant(mm)" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
The operation <a href="dboptrace.xhtml">trace</a> computes the trace of a
square matrix.
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p9','p12']);"
    value="trace(mm)" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
The operation <a href="dboprank.xhtml">rank</a> computes the rank of a matrix:
the maximal number of linearly independent rows or columns.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="handleFree(['p9','p13']);"
    value="rank(mm)" />
  <div id="ansp13"><div></div></div>
 </li>
</ul>
The operation <a href="dbopnullity.xhtml">nullity</a> computes the nullity
of a matrix: the dimension of its null space.
<ul>
 <li>
  <input type="submit" id="p14" class="subbut" 
    onclick="handleFree(['p9','p14']);"
    value="nullity(mm)" />
  <div id="ansp14"><div></div></div>
 </li>
</ul>
The operation <a href="dbopnullspace.xhtml">nullSpace</a> returns a list 
containing a basis for the null space of a matrix. Note that the nullity is
the number of elements in a basis for the null space.
<ul>
 <li>
  <input type="submit" id="p15" class="subbut" 
    onclick="handleFree(['p9','p15']);"
    value="nullSpace(mm)" />
  <div id="ansp15"><div></div></div>
 </li>
</ul>
The operation <a href="dboprowechelon.xhtml">rowEchelon</a> returns the row
echelon form of a matrix. It is easy to see that the rank of this matrix is
two and that its nullity is also two.
<ul>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick="handleFree(['p9','p16']);"
    value="rowEchelon(mm)" />
  <div id="ansp16"><div></div></div>
 </li>
</ul>
For more information see
<a href="axbook/section-1.6.xhtml">Expanding to Higher Dimensions</a>,
<a href="axbook/section-8.4.xhtml">
Computation of Eigenvalues and Eigenvectors</a>, and 
<a href="axbook/section-9.27.xhtml#subsec-9.27.4">
An Example: Determinant of a Hilbert Matrix</a>. Also see
<a href="db.xhtml?Permanent">Permanent</a>,
<a href="db.xhtml?Vector">Vector</a>,
<a href="db.xhtml?OneDimensionalArray">OneDimensionalArray</a>, and
<a href="db.xhtml?TwoDimensionalArray">TwoDimensionalArray</a>. Issue the
system command
<ul>
 <li>
  <input type="submit" id="p17" class="subbut" 
    onclick="showcall('p17');"
   value=")show Matrix"/>
  <div id="ansp17"><div></div></div>
 </li>
</ul>
to display the full ist of operations defined by 
<a href="db.xhtml?Matrix">Matrix</a>.
 </body>
</html>
