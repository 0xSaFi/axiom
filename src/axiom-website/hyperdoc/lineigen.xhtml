<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Computation of Eigenvalues and Eigenvectors</div>
  <hr/>
In this section we show you some of Axiom's facilities for computing and
manipulating eigenvalues and eigenvectors, also called characteristic
values and characteristic vectors, respectively.

Let's first create a matrix with integer entries.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="m1:=matrix [[1,2,1],[2,1,-2],[1,-2,4]]" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
To get a list of the rational eigenvalues, use the operation
<a href="dbopeigenvalues.xhtml">eigenvalues</a>.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value="leig:=eigenvalues(m1)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
Given an explicit eigenvalue, 
<a href="dbopeigenvector.xhtml">eigenvector</a> computes the eigenvectors
corresponding to it.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="handleFree(['p1','p2','p3']);"
    value="eigenvector(first(leig),m1)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
The operation <a href="dbopeigenvectors.xhtml">eigenvectors</a> returns a
list of pairs of values and vectors. When an eigenvalue is rational, Axiom
gives you the value explicitly; otherwise, its minimal polynomial is given,
(the polynomial of lowest degree with the eigenvalues as roots), together
with a parametric representation of the eigenvector using the eigenvalue.
This means that if you ask Axiom to <a href="dbopsolve.xhtml">solve</a>
the minimal polynomial, then you can substitute these roots into the
parametric form of the corresponding eigenvectors.

You must be aware that unless an exact eigenvalue has been computed, 
the eigenvector may be badly in error.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p4']);"
    value="eigenvectors(m1)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
Another possibility is to use the operation
<a href="dbopradicaleigenvectors.xhtml">radicalEigenvectors</a> tries to
compute explicitly the eignevectors in terms of radicals.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p1','p5']);"
    value="radicalEigenvectors(m1)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
Alternatively, Axiom can compute real or complex approximations to the
eigenvectors and eigenvalues using the operations
<a href="dboprealeigenvectors.xhtml">realEigenvectors</a> or
<a href="dbopcomplexeigenvectors.xhtml">complexEigenvectors</a>. They
each take an additional argument epsilon to specify the "precision"
required. In the real case, this means that each approximation will be
within plus or minus epsilon of the actual result. In the complex case, this
means that each approximation will be within plus or minus epsilon of the
actual result in each of the real and imaginary parts.

The precision can be specified as a <a href="db.xhtml?Float">Float</a> if
the results are desired in floating-point notation, or as
<a href="dbfractioninteger.xhtml">Fraction Integer</a> if the results are
to be expressed using rational (or complex rational) numbers.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p1','p6']);"
    value="realEigenvectors(m1,1/1000)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
If an n by n matrix has n distinct eigenvalues (and therefore n eigenvectors)
the operation <a href="dbopeigenmatrix.xhtml">eigenMatrix</a> gives you a
matrix of the eigenvectors.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p1','p7']);"
    value="eigenMatrix(m1)" />
  <div id="ansp7"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="makeRequest('p8');"
    value="m2:=matrix [[-5,-2],[18,7]]" />
  <div id="ansp8"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p8','p9']);"
    value="eigenMatrix(m2)" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
If a symmetric matrix has a basis of orthonormal eigenvectors, then
<a href="dboporthonormalbasis.xhtml">orthonormalBasis</a> computes a list
of these vectors.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="makeRequest('p10');"
    value="m3:=matrix [[1,2],[2,1]]" />
  <div id="ansp10"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p10','p11']);"
    value="orthonormalBasis(m3)" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
 </body>
</html>
