<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Integration</div>
  <hr/>
Integration is the reverse process of differentiation, that is, an integral
of a function f with respect to a variable x is any function g such that
D(g,x) is equal to f. The package
<a href="db.xhtml?FunctionSpaceIntegration">FunctionSpaceIntegration</a>
provides the top-level integration operation
<a href="dbopintegrate.xhtml">integrate</a>, for integrating real-valued
elementary functions.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="integrate(cosh(a*x)*sinh(a*x),x)" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
Unfortunately, antiderivatives of most functions cannot be expressed in
terms of elementary functions.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value="integrate(log(1+sqrt(a*x+b)),x)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
Given an elementary function to integrate, Axiom returns a formal integral
as above only when it can prove that the integral is not elementary and
not when it cannot determine the integral. In this rare case it prints a
message that it cannot determine if an elementary integral exists. Similar
functions may have antiderivatives that look quite different because the
form of the antiderivative depends on the sign of a constant that appears
in the function.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="integrate(1/(x^2-2),x)" />
  <div id="ansp3"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="makeRequest('p4');"
    value="integrate(1/(x^2+2),x)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
If the integrand contains parameters, then there may be several possible
antiderivatives, depending on the signs of expressions of the parameters.
In this case Axiom returns a list of answers that cover all possible cases.
Here you use the answer involving the square root of a when a>0 and the
answer involving the square root of -a when a&#60;0.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="makeRequest('p5');"
    value="integrate(x^2/(x^4-a^2),x)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
If the parameters and the variables of integration can be complex numbers
rather than real, then the notion of sign is not defined. In this case all
the possible answers can be expressed as one complex function. To get that
function, rather than a list of real functions, use
<a href="dbopcomplexintegrate.xhtml">complexIntegrate</a>, which is provided
by the package
<a href="db.xhtml?FunctionSpaceComplexIntegration">
FunctionSpaceComplexIntegration</a>.

This operation is used for integrating complex-valued elementary functions.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="makeRequest('p6');"
    value="complexIntegrate(x^2/(x^4-a^2),x)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
As with the real case, antiderivatives for most complex-valued functions
cannot be expressed in terms of elementary functions.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="makeRequest('p7');"
    value="complexIntegrate(log(1+sqrt(a*x+b))/x,x)" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
Sometimes <a href="dbopintegrate.xhtml">integrate</a> can involve 
symbolic algebraic numbers such as those returned by 
<a href="dboprootof.xhtml">rootOf</a>. To see how to work with these
strange generated symbols (such as %%a0), see
<a href="axbook/section-8.3.xhtml#subsec-8.3.2">
Using All Roots of a Polynomial</a>.

Definite integration is the process of computing the area between the x-axis
and the curve of a function f(x). The fundamental theorem of calculus 
states that if f is continuous on an interval a..b and such that D(g,x) is
equal to f, then the definite integral of f for x in the interval a..b is
equal to g(b)-g(a).

The package
<a href="db.xhtml?RationalFunctionDefiniteIntegration">
RationalFunctionDefiniteIntegration</a>
provides the top-level definite integration operation,
<a href="dbopintegrate.xhtml">integrate</a>, 
for integrating real-valued rational functions.
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="makeRequest('p8');"
    value="integrate((x^4-3*x^2+6)/(x^6-5*x^4+5*x^2+4),x=1..2)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
Axiom checks beforehand that the function you are integrating is defined on
the interval a..b, and prints an error message if it finds that this is not
the case, as in the following example:
<pre>
 integrate(1/(x^2-2),x=1..2)

 Error detected within library code:
 Pole in path of integration
</pre>
When parameters are present in the function, the function may or may not be
defined on the interval of integration.

If this is the case, Axiom issues a warning that a pole might lie in the 
path of integration, and does not compute the integral.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="makeRequest('p9');"
    value="integrate(1/(x^2-a),x=1..2)" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
If you know that you are using values of the parameter for which the 
function has no pole in the interval of integration, use the string
"noPole" as a third argument to <a href="dbopintegrate.xhtml">integrate</a>.

The value here is, of course, incorrect if sqrt(a) is between 1 and 2.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="makeRequest('p10');"
    value='integrate(1/(x^2-a),x=1..2,"noPole")' />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
 </body>
</html>
