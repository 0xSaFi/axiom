<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
 </head>
 <body>
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">
   <a href="http://dlmf.nist.gov">
    Digital Library of Mathematical Functions
   </a><br/>
   The Gamma Function -- Graphics
  </div>
  <hr/>
<h3>Graphics</h3>
<h6>Contents</h6>
<ul>
 <li>Real Argument</li>
 <li>The Psi Function</li>
 <li>Complex Argument</li>
</ul>
<h4>Real Argument</h4>
 <img width="403" height="482" src="bitmaps/gammareal3.png"/>
 <br/>
This graph shows the 
 <m:math display="inline">
  <m:mrow>
   <m:mi mathvariant="normal">&#x0393;</m:mi>
   <m:mrow>
    <m:mo>(</m:mo>
    <m:mi>x</m:mi>
    <m:mo>)</m:mo>
   </m:mrow>
  </m:mrow>
 </m:math> and 
 <m:math display="inline">
  <m:mfrac bevelled="true">
   <m:mn>1</m:mn>
   <m:mrow>
    <m:mi mathvariant="normal">&#x0393;</m:mi>
    <m:mrow>
     <m:mo>(</m:mo>
     <m:mi>x</m:mi>
     <m:mo>)</m:mo>
    </m:mrow>
   </m:mrow>
  </m:mfrac>
 </m:math>.

To create these two graphs in Axiom:
<pre>
 -- Draw the first graph in a viewport
 viewport1:=draw(Gamma(i), i=-4.2..4, adaptive==true, unit==[1.0,1.0])
 -- Draw the second graph in a viewport
 viewport2:=draw(1/Gamma(i), i=-4.2..4, adaptive==true, unit==[1.0,1.0])
 -- Get the Gamma graph from the first viewport and layer it on top
 putGraph(viewport2,getGraph(viewport1,1),2)
 -- Remove the points and leave the lines
 points(viewport2,1,"off")
 points(viewport2,2,"off")
 -- Show the combined graph
 makeViewport2D(viewport2)
</pre>

 <img width="300" height="176" alt="" src="bitmaps/loggamma.png"/>
 <br/>
 <m:math display="inline">
  <m:mrow>
   <m:mi>ln</m:mi>
   <m:mrow>
    <m:mi mathvariant="normal">&#x0393;</m:mi>
    <m:mrow>
     <m:mo>(</m:mo>
     <m:mi>x</m:mi>
     <m:mo>)</m:mo>
    </m:mrow>
   </m:mrow>
  </m:mrow>
 </m:math>. This function is convex on 
 <m:math display="inline">
  <m:mrow>
   <m:mo>(</m:mo>
   <m:mrow>
    <m:mn>0</m:mn>
    <m:mo>,</m:mo>
    <m:mi mathvariant="normal">&#x221E;</m:mi>
   </m:mrow>
   <m:mo>)</m:mo>
  </m:mrow>
 </m:math>;
 <br/>
  compare <a href="dlmffunctionalrelations.xhtml#bohrmolleruptheorem">
           Functional Relations</a>
 <p>
You can construct this graph with the Axiom commands:
<pre>
  -- draw the graph of log(Gamma) in a viewport
  viewport1:=draw(log Gamma(i), i=0..8, adaptive==true, unit==[1.0,1.0])
  -- turn off the points and leave the lines
  points(viewport1,1,"off")
</pre>
</p>
 <br/>

 <h4>The Psi Function 
 <m:math display="inline">
  <m:mrow>
   <m:mi>&#x03C8;</m:mi>
   <m:mrow>
    <m:mo>(</m:mo>
    <m:mi>x</m:mi>
    <m:mo>)</m:mo>
   </m:mrow>
  </m:mrow>
 </m:math>
</h4>

<p> This function is a special case of the polygamma function.
In particular, 
 <m:math display="inline">
  <m:mrow>
   <m:mi>&#x03C8;</m:mi>
   <m:mrow>
    <m:mo>(</m:mo>
    <m:mi>x</m:mi>
    <m:mo>)</m:mo>
   </m:mrow>
  </m:mrow>
 </m:math> is equal to polygamma(0,x).
 </p>
 <br/>
 <br/>

 <img width="522" height="556" alt="" src="bitmaps/psi.png"/>
 <br/>
You can reconstruct this graph in Axiom by:
<pre>
  -- first construct the psi function
  psi(x)==polygamma(0,x)
  -- draw the graph in a viewport
  viewport:=draw(psi(y),y=-3.5..4,adaptive==true)
  -- make the gradient obvious
  scale(viewport,1,0.9,22.5)
  -- and recenter the graph
  translate(viewport,1,0,-0.02)
  -- turn off the points and keep the line
  points(viewport,1,"off")
</pre>

 <h4>Complex Argument</h4>

 <img width="400" height="400" alt="" src="bitmaps/gammacomplex.png"/>
 <br/>
 <m:math display="inline">
  <m:mrow>
   <m:mrow>
    <m:mi mathvariant="normal">&#x0393;</m:mi>
    <m:mrow>
     <m:mo>(</m:mo>
     <m:mrow>
      <m:mi>x</m:mi>
      <m:mo>+</m:mo>
      <m:mrow>
       <m:mi mathvariant="normal">&#x2148;</m:mi>
       <m:mi>y</m:mi>
      </m:mrow>
     </m:mrow>
     <m:mo>)</m:mo>
    </m:mrow>
   </m:mrow>
  </m:mrow>
 </m:math>.
 <br/>

You can reconstruct this image in Axiom with:
<pre>
  -- Set up the default viewpoint
  viewPhiDefault(-%pi/4)
  -- define the point set function
  gam(x,y)== 
    g:=Gamma complex(x,y) 
    point [x,y,max(min(real g,4),-4), argument g] 
  -- draw the image and remember the viewport
  viewport:=draw(gam, -4..4,-3..3,var1Steps==100,var2Steps==100)
  -- set the color mapping for the image
  colorDef(viewport,blue(),blue())
  -- and smoothly shade it
  drawStyle(viewport,"smooth")
</pre>
 <img width="400" height="400" src="bitmaps/gammacomplexinverse.png"/>
<br/>
 <m:math display="inline">
  <m:mfrac bevelled="true">
   <m:mn>1</m:mn>
   <m:mrow>
    <m:mrow>
     <m:mi mathvariant="normal">&#x0393;</m:mi>
     <m:mrow>
      <m:mo>(</m:mo>
      <m:mrow>
       <m:mi>x</m:mi>
       <m:mo>+</m:mo>
       <m:mrow>
        <m:mi mathvariant="normal">&#x2148;</m:mi>
        <m:mi>y</m:mi>
       </m:mrow>
      </m:mrow>
      <m:mo>)</m:mo>
     </m:mrow>
    </m:mrow>
   </m:mrow>
  </m:mfrac>
 </m:math>
 <br/>

<p>
You can reproduce this image from Axiom with:
<pre>
  -- Set up the default viewpoint
  viewPhiDefault(-%pi/4)
  -- Define the complex Gamma inverse function
  gaminv(x,y)== 
    g:=1/(Gamma complex(x,y)) 
    point [x,y,max(min(real g,4),-4), argument g]
  -- draw the 3D image and remember the viewport
  viewport:=draw(gaminv, -4..4,-3..3,var1Steps==100,var2Steps==100)
  -- make the image a uniform color
  colorDef(viewport,blue(),blue())
  -- and make it pretty
  drawStyle(viewport,"smooth")
</pre>
</p>


<p>
To get these exact images with the colored background you need
to use GIMP to set the background. The steps I used are:
<ol>
<li>Save the image as a pixmap</li>
<li>Open the saved file in gimp</li>
<li>Dialogs->Colors->ColorPicker button</li>
<li>Eyedrop the color of the web page</li>
<li>Set the color as the foreground on the FG/BG page</li>
<li>Dialogs->Layers</li>
<li>Duplicate Layer</li>
<li>Layer->Stack->Select bottom layer</li>
<li>Edit->Fill with Foreground color</li>
<li>(on Layers panel)Select image</li>
<li>(on Layers panel) Mode->Darken Only</li>
</ol>
Note that you may have to use "lighten only" first before it will
allow you to choose "darken only".
</p>

 </body>
</html>
