<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Partial Fractions</div>
  <hr/>
A partial fraction is a decomposition of a quotient into a sum of quotients
where the denominators of the summand are powers of primes. (Most people 
first encounter partial fractions when they are learning integral calculus.
For a technical discussion of partial fractions see, for example, Lang's
Algebra.) For example, the rational number 1/6 is decomposed into 1/2-1/3.
You can compute partial fractions of quotients of objects from domains
belonging to the category 
<a href="db.xhtml?EuclideanDomain">EuclideanDomain</a>. For example,
<a href="db.xhtml?Integer">Integer</a>,
<a href="dbcomplexinteger.xhtml">Complex Integer</a>, and
<a href="db.xhtml?UnivariatePolynomial">
UnivariatePolynomial(x,Fraction Integer)</a>
all belong to 
<a href="db.xhtml?EuclideanDomain">EuclideanDomain</a>. 
In the examples following, we demonstrate how to decompose quotients of
each of these kinds of objects into partial fractions. 

It is necessary that we know how to factor the denominator when we want to 
compute a partial fraction. Although the interpreter can often do this
automatically, it may be necessary for you to include a call to 
<a href="dbopfactor.xhtml">factor</a>. In these examples, it is not
necessary to factor the denominators explicitly. The main operation for
computing partial fractions is called 
<a href="dboppartialfraction.xhtml">partialFraction</a> and we use this
to compute a decomposition of 1/10!. The first argument top
<a href="dboppartialfraction.xhtml">partialFraction</a> is the numerator
of the quotient and the second argument is the factored denominator.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" onclick="makeRequest('p1');"
    value="partialFraction(1,factorial 10)" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
Since the denominators are powers of primes, it may be possible to expand
the numerators further with respect to those primes. Use the operation
<a href="dboppadicfraction.xhtml">padicFraction</a> to do this.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" onclick="makeRequest('p2');"
    value="f:=padicFraction(%)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
The operation <a href="dbopcompactfraction.xhtml">compactFraction</a>
returns an expanded fraction into the usual form. The compacted version
is used internally for computational efficiency.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="handleFree(['p2','p3']);"
    value="compactFraction(f)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
You can add, subtract, multiply, and divide partial fractions. In addition,
you can extract the parts of the decomposition.
<a href="dbopnumberoffractionalterms.xhtml">numberOfFractionalTerms</a>
computes the number of terms in the fractional part. This does not include
the whole part of the fraction, which you get by calling
<a href="dbopwholepart.xhtml">wholePart</a>. In this example, the whole part
is 0.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p2','p4']);"
    value="numberOfFractionalTerms(f)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
The operation 
<a href="dbopnthfractionalterm.xhtml">nthFractionalTerm</a>
returns the individual terms in the decomposition. Notice that the object
returned is a partial fraction itself. 
<a href="dbopfirstnumer.xhtml">firstNumer</a> and
<a href="dbopfirstdenom.xhtml">firstDenom</a> extract the numerator and
denominator of the first term of the fraction.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p2','p5']);"
    value="nthFractionalTerm(f,3)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
Given two gaussian integers (see <a href="db.xhtml?Complex">Complex</a>),
you can decompose their quotient into a partial fraction.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" onclick="makeRequest('p6');"
    value="g:=partialFraction(1,-13+14*%i)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
To convert back to a quotient, simply use the conversion
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p6','p7']);"
    value="g::Fraction Complex Integer" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
To conclude this section, we compute the decomposition of
<pre>
                   1
     -------------------------------
                   2       3       4
     (x + 1)(x + 2) (a + 3) (x + 4)
</pre>
The polynomials in this object have type
<a href="db.xhtml?UnivariatePolynomial">
UnivariatePolynomial(x,Fraction Integer)</a>.
We use the <a href="dbopprimefactor.xhtml">primeFactor</a> operation
(see <a href="db.xhtml?Factored">Factored</a>) to create the denominator
in factored form directly.
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" onclick="makeRequest('p8');"
   value="u:FR UP(x,FRAC INT):=reduce(*,[primeFactor(x+i,i) for i in 1..4])"/>
  <div id="ansp8"><div></div></div>
 </li>
</ul>
These are the compact and expanded partial fractions for the quotient.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p8','p9']);"
    value="pu:=partialFraction(1,u)" />
  <div id="ansp9"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p8','p9','p10']);"
    value="padicFraction pu" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
Also see
<a href="db.xhtml?FullPartialFractionExpansion">
FullPartialFractionExpansion</a> for examples of factor-free conversion of
quotients to full partial fractions.

Issue the system
command
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="showcall('p11');"
   value=")show PartialFraction"/>
  <div id="ansp11"><div></div></div>
 </li>
</ul>
to display the full list of operations defined by 
<a href="db.xhtml?PartialFraction">PartialFraction</a>.

 </body>
</html>
