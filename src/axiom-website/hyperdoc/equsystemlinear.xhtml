<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Solution of Systems of Linear Equations</div>
  <hr/>
You can use the operation <a href="dbopsolve.xhtml">solve</a> to solve
systems of linear equations.

The operation <a href="dbopsolve.xhtml">solve</a> takes two arguments, the
list of equations and the list of the unknowns to be solved for. A system
of linear equations need not have a unique solution.

To solve the linear system:
<pre>
        x + y + x = 8
    3*x - 2*y + z = 0
    x + 2*y + 2*z = 17
</pre>
evaluate this expression.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="solve([x+y+x=8,3*x-2*y+z=0,x+2*y+2*z=17],[x,y,z])" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
Parameters are given as new variables starting with a percent sign and
"%" and the variables are expressed in terms of the parameters. If the system
has no solutions then the empty list is returned.

When you solve the linear system
<pre>
      x + 2*y + 3*z = 2
    2*x + 3*y + 4*z = 2
    3*x + 4*y + 5*z = 2
</pre>
with this expression you get a solution involving a parameter.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value="solve([x+2*y+3*z=2,2*x+3*y+4*z=2,3*x+4*y+5*z=2],[x,y,z])" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
The system can also be presented as a matrix and a vector. The matrix 
contains the coefficients of the linear equations and the vector contains
the numbers appearing on the right-hand sides of the equations. You may 
input the matrix as a list of rows and the vector as a list of its elements.

To solve the system:
<pre>
       x + y + z = 8
   2*x - 2*y + z = 0
   x + 2*y + 2*z = 17
</pre>
in matrix form you would evaluate this expression.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="solve([[1,1,1],[3,-2,1],[1,2,2]],[8,0,17])" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
The solutions are presented as a Record with two components: the component
particular contains a particular solution of the given system or the item
"failed" if there are no solutions, the component basis contains a list of
vectors that are a basis for the space of solutions of the corresponding
homogeneous system. If the system of linear equations does not have a unique
solution, then the basis component contains non-trivial vectors.

This happens when you solve the linear system
<pre>
    x + 2*y + 3*z = 2
  2*x + 3*y + 4*z = 2
  3*x + 4*y + 5*z = 2
</pre>
with this command.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="makeRequest('p4');"
    value="solve([[1,2,3],[2,3,4],[3,4,5]],[2,2,2])" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
All solutions of this system are obtained by adding the particular solution
with a linear combination of the basis vectors.

When no solution exists then "failed" is returned as the particular 
component, as follows:
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="makeRequest('p5');"
    value="solve([[1,2,3],[2,3,4],[3,4,5]],[2,3,2])" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
When you want to solve a system of homogeneous equations (that is, a system
where the numbers on the right-hand sides of the equations are all zero)
in the matrix form you can omit the second argument and use the 
<a href="dbopnullspace.xhtml">nullSpace</a> operation.

This computes the solutions of the following system of equations:
<pre>
    x + 2*y + 3*z = 0
  2*x + 3*y + 4*z = 0
  3*x + 4*y + 5*z = 0
</pre>
The result is given as a list of vectors and these vectors form a basis for
the solution space.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="makeRequest('p6');"
    value="nullSpace([[1,2,3],[2,3,4],[3,4,5]])" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>

 </body>
</html>
