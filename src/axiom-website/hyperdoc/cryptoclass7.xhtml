<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
 </head>
 <body>
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
<center>
 <h2>RCM3720 Cryptography, Network and Computer Security</h2>
 <h3>Laboratory Class 7: Knapsack cryptosystems</h3>
</center>
<hr/>

You will need to read in the <a href="rcm3720.input">rcm3720.input</a>
file for various necessary procedures.
<br/><br/>
<b>The subset sum problem</b>
<br/><br/>

We will first experiment with this problem; creating random lists and adding
up elements from them.

<ul>
 <li> Start with a list of eight elements:
  <ul>
   <li> <span class="cmd">ln:=8</span></li>
   <li> <span class="cmd">lst:=[random(10^6) for i in 1..ln]</span></li>
   <li> <span class="cmd">m:=[random(2) for i in 1..ln]</span></li>
   <li> <span class="cmd">c:=reduce(+,[m.i*lst.i for i in 1..ln])</span></li>
   <li> <span class="cmd">subsetsum(lst,c)</span></li>
  </ul>
 </li>
 <li> The <tt>subsetsum</tt> command implements a fairly non-efficient 
      command for attemping to solve the subset sum problem for an 
      arbitrary list.
 </li>
 <li> Try the above commands, but starting with a length <tt>ln</tt> of
      12. You should find the command is a bit slower this time.  
      Use this command to time it:
  <ul>
   <li> <span class="cmd">)set messages time on</span></li>
  </ul>
 </li>
 <li> Experiment with lengths of 16 and 20.  How long does the
      <tt>subsetsum</tt> command take for each of these values?
 </li>
</ul>
<br/><br/>
<b>Superincreasing sequences</b>

<ul>
 <li> Create a superincreasing sequence with
  <ul>
   <li> <span class="cmd">ln:=8</span></li>
   <li> <span class="cmd">lst:=[random(10^6) for i in 1..ln]</span></li>
   <li> 
    <span class="cmd">
     for i in 2..ln repeat lst.i:=reduce(+,[lst.j for j in 1..i-1])+random(10)+1
    </span>
   </li>
  </ul>
 </li>
 <li> Now create <tt>m</tt> and <tt>c</tt> as above.  This time, solve the
      problem with
  <ul>
   <li> <span class="cmd">siSolve(lst,c)</span></li>
  </ul>  
 </li>
 <li> Now try with larger lengths: 12, 16 and 20, and time the commands each
      time.
 </li>
 <li> What can you say about solving the subset sum problem for general and
      superincreasing lists?
 </li>
</ul>
<br/><br/>
<b>The Merkle-Hellman additive knapsack system</b>

<ul>
 <li> Create a superincreasing list of length <tt>ln</tt> 10, and call it
  <tt>a</tt>.  Create a new number <tt>N</tt> greater than the sum of all
  values of <tt>a</tt>.  Check with
  <ul>
   <li> <span class="cmd">N>reduce(+,[a.i for i in 1..ln])</span></li>
  </ul>
 </li>
 <li> Now choose (randomly) a value <b>wN</b> and which is
      relatively prime to <b>N</b>.  Then construct your public key:
  <ul>
   <li> <span class="cmd">b:=map(x +-> x*w rem N,a)</span></li>
  </ul>  
 </li>
 <li> Now for an encryption and decryption. Create a random message <tt>m</tt>
  as above, and encrypt it to a ciphertext <tt>c</tt> using the public key
  <tt>b</tt>. 
 </li>
 <li> Decrypt it as follows:
  <ul>
   <li> <span class="cmd">c1:=inv_mod(w,N)*c rem N</span></li>
   <li> <span class="cmd">siSolve(a,c1)</span></li>
  </ul>
 </li>
 <li> 
  Experiment with longer lists and messages: 12, 16, 20 or even larger.
 </li>
</ul>
<br/><br/>
<b>The Merkle-Hellman multiplicative knapsack system</b>

<ul>
 <li> Choose <tt>a</tt> to be the first ten primes, 
      and a large prime <tt>p</tt>:
  <ul>
   <li> <span class="cmd">a:=[2,3,5,7,11,13,17,19,23,29]</span></li>
   <li> <span class="cmd">p:=6469785001</span></li>
  </ul>
 </li>
 <li> Check that <tt>p</tt> is greater than the product of all elements of
      <tt>a</tt>:
  <ul>
   <li> <span class="cmd">p>reduce(*,[a.i for i in 1..10])</span></li>
  </ul>
 </li>
 <li> and that <tt>p-1</tt> has only small factors:
  <ul>
   <li> <span class="cmd">factor(p-1)</span></li>
  </ul>
 </li>
 <li> Choose as a primitive root the value 34:
  <ul>
   <li> <span class="cmd">r:=34</span></li>
   <li> <span class="cmd">primitive?(r)$PF(p)</span></li>
  </ul>  
 </li>  
 <li> and compute the public key: 
  <ul>
   <li> <span class="cmd">b:=map(x +-> discreteLog(r,x)$PF(p),a)</span></li>
  </ul>  
 </li>
 <li> Create a message of length 10, and encrypt it using the public key
  <tt>b</tt>:
  <ul>
   <li> 
    <span class="cmd">
     c:=reduce(+,[m.i*b.i::INT for i in 1..ln])
    </span>
   </li>
  </ul>
 </li>
 <li> Decryption is now done with:
  <ul>
   <li> <span class="cmd">c1:=powmod(r,c,p)</span></li>
   <li> <span class="cmd">factor(c1)</span></li>
  </ul>
 </li>
</ul>
 </body>
</html>
