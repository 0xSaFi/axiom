<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
   function commandline(arg) {
    myfunc1 = document.getElementById('function1').value;
    myfunc2 = document.getElementById('function2').value;
    myfunc3 = document.getElementById('function3').value;
    myvar1 = document.getElementById('var1').value;
    myfrom1 = document.getElementById('range1').value;
    myto1 = document.getElementById('range2').value;
    myvar2 = document.getElementById('var11').value;
    myfrom2 = document.getElementById('range11').value;
    myto2 = document.getElementById('range21').value;
    mytitle = document.getElementById('title1').value;
    if (mytitle == "") {
     ans=
      'draw(surface('+myfunc1+','+myfunc2+','+myfunc3+'),'+
        myvar1+'='+myfrom1+'..'+myto1+','+
        myvar2+'='+myfrom2+'..'+myto2+')';
    } else {
     ans=
      'draw(surface('+myfunc1+','+myfunc2+','+myfunc3+'),'+
        myvar1+'='+myfrom1+'..'+myto1+','+
        myvar2+'='+myfrom2+'..'+myto2+',title=="'+mytitle+'")';
    }
    alert(ans);
    return(ans);
   }
// The structure returned from Axiom now is
// <div class="stepnum"></div>
// <div class="command"></div>
// <div class="algebra"></div>
// <div class="mathml"></div>
// <div class="type"></div>
// This function will format the output as a console session
<![CDATA[
 function showanswer(mathString,indiv) {
    var mystr = mathString.split("</div>");
      // first we prepare the step number
    var mystept1 = mystr[0].lastIndexOf(">");
    var mystepstr = mystr[0].substr(mystept1+1);
      // now we get the command
    var mycmdt1 = mystr[1].lastIndexOf(">");
    var mycmdstr = mystr[1].substr(mycmdt1+1);
    var myprompt = '('+mystepstr+') -> '+mycmdstr;
      // now we handle the mathml
    var mymathstr = mystr[3].concat("</div>");
      // and the type, we need to insert the string "Type: "
    var mytypet1 = mystr[4].lastIndexOf(">");
    var mytypet2 = mystr[4].substr(mytypet1+1).concat("</div>");
    var mytypestr = '<div> Type: '.concat(mytypet2);
      // bang the whole thing together
    var finaldiv='<div class="command">'+myprompt+'</div>'+mymathstr+mytypestr;
      // this turns the string into a dom fragment
    var mathRange = document.createRange();
    var mathBox=document.createElementNS('http://www.w3.org/1999/xhtml','div');
    mathRange.selectNodeContents(mathBox);
    var answer = mathRange.createContextualFragment(finaldiv);
    mathBox.appendChild(answer);
      // and we stick the result into the requested div block as a child.
    var mathAns = document.getElementById(indiv);
    mathAns.removeChild(mathAns.firstChild);
    mathAns.appendChild(mathBox);
 }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body>
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
 <center>
  Drawing a parametrically defined surface<br/>
  (f1(u,v), f2(u,v), f3(u,v))<br/>
  in terms of three functions f1, f2, and f3<br/>
  and two independent variables u and v
 </center>
  <table>
   <tr>
    <td>
     Enter the three functions of the independent variable:<br/>
     Function f1: 
     <input type="text" id="function1" size="70" tabindex="10"
       value="u*sin(v)"/><br/>
     Function f2: 
     <input type="text" id="function2" size="70" tabindex="20"
       value="v*cos(u)"/><br/>
     Function f3: 
     <input type="text" id="function3" size="70" tabindex="30"
       value="u*cos(v)"/><br/>
    </td>
   </tr>
   <tr>
    <td>
    Enter the independent variables and range:<br/>
    Variable 1: 
     <input type="text" id="var1" size="10" tabindex="40" value="u"/>
     ranges from:
     <input type="text" id="range1" size="10" tabindex="50" value="-%pi"/>
     to:
     <input type="text" id="range2" size="10" tabindex="60" value="%pi"/>
    <br/>
    Variable 2: 
     <input type="text" id="var11" size="10" tabindex="70" value="v"/>
     ranges from:
     <input type="text" id="range11" size="10" tabindex="80" value="-%pi/2"/>
     to:
     <input type="text" id="range21" size="10" tabindex="90" value="%pi/2"/>
    </td>
   </tr>
   <tr>
    <td>
     Optionally enter a title for your surface:
     <input type="text" id="title1" size="20" tabindex="100"/>
    </td>
   </tr>
  </table>
   <center>
     <input type="button" value="Continue" name="continue" 
       onclick="javascript:makeRequest('');"/>
   </center>
  <div id="mathAns"><div></div></div>
 </body>
</html>
