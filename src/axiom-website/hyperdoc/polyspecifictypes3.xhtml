<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">MultivariatePolynomial</div>
  <hr/>
The domain constructor 
<a href="db.xhtml?MultivariatePolynomial">MultivariatePolynomial</a> is
similar to <a href="db.xhtml?Polynomial">Polynomial</a> except that it
specifies the variables to be used. 
<a href="db.xhtml?Polynomial">Polynomial</a> are available for 
<a href="db.xhtml?MultivariatePolynomial">MultivariatePolynomial</a>.
The abbreviation for 
<a href="db.xhtml?MultivariatePolynomial">MultivariatePolynomial</a> is
<a href="db.xhtml?MultivariatePolynomial">MPOLY</a>. The type expressions
<pre>
   MultivariatePolynomial([x,y],Integer)
</pre>
and
<pre>
         MPOLY([x,y],INT)
</pre>
refer to the domain of multivariate polynomials in the variables x and y
where the coefficients are restricted to be integers. The first variable
specified is the main variable and the display of the polynomial reflects
this. This polynomial appears with terms in descending powers of the 
variable x.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="m:MPOLY([x,y],INT):=(x^2-x*y^3+3*y)^2" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
It is easy to see a different variable ordering by doing a conversion.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value="m::MPOLY([y,x],INT)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
You can use other, unspecified variables, by using
<a href="db.xhtml?Polynomial">Polynomial</a> in the coefficient type of
<a href="db.xhtml?MultivariatePolynomial">MPOLY</a>.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="p:MPOLY([x,y],POLY INT):=(a^2*x-b*y^2+1)^2" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
Conversions can be used to re-express such polynomials in terms of the
other variables. For example, you can first push all the variables into a
polynomial with integer coefficients.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p3','p4']);"
    value="u:=p::POLY INT" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
Now pull out the variables of interest.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p3','p4','p5']);"
    value="u::MPOLY([a,b],POLY INT)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
<hr/>
<b>Restriction:</b> Axiom does not allow you to create types where
<a href="db.xhtml?MultivariatePolynomial">MultivariatePolynomial</a> is
contained in the coefficient type of 
<a href="db.xhtml?Polynomial">Polynomial</a>. Therefore, 
<pre>
     MPOLY([x,y],POLY INT)
</pre>
is legal but this is not:
<pre>
     POLY MPOLY([x,y],INT)n
</pre>
<hr/>
Multivariate polynomials may be combined with univariate polynomials to 
create types with special structures.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="makeRequest('p6');"
    value="q:UP(x,FRAC MPOLY([y,z],INT)):=(x^2-x*(z+1)/y+2)^2" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
This is a polynomial in x whose coefficients are quotients of polynomials
in y and z. Use conversions for the structural rearrangements. z does not
appear in a denominator and so it can be made the main variable.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p6','p7']);"
    value="q::UP(z,FRAC MPOLY([x,y],INT))" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
Or you can make a multivariate polynomial in x and z whose coefficients
are fractions in polynomials in y
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p6','p8']);"
    value="q::MPOLY([x,z],FRAC UP(y,INT))" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
A conversion like 
<pre>
  q::MPOLY([x,y],FRAC UP(z,INT))
</pre>
is not possible in this example because y appears in the denominator of
a fraction. As you can see, Axiom provides extraordinary flexibility in
the manipulation and display of expressions via its conversion facility.

For more information on related topics, see
<a href="polyspecifictypes1.xhtml">Polynomial</a>,
<a href="polyspecifictypes2.xhtml">UnivariatePolynomial</a>, and
<a href="polyspecifictypes4.xhtml">DistributedMultivariatePolynomial</a>.
Issue the system command
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="showcall('p9');"
   value=")show MultivariatePolynomial"/>
  <div id="ansp9"><div></div></div>
 </li>
</ul>
to display the full list of operations defined by 
<a href="db.xhtml?MultivariatePolynomial">MultivariatePolynomial</a>.
 </body>
</html>
