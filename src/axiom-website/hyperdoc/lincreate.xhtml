<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Creating Matrices</div>
  <hr/>
There are many ways to create a matrix from a collection of values or
from existing matrices.

If the matrix has almost all items equal to the same value, use
<a href="dbopnew.xhtml">new</a> to create a matrix filled with that value
and then reset the entries that are different.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="m:Matrix(Integer):=new(3,3,0)" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
To change the entry in the second row, third column to 5, use
<a href="dbopsetelt.xhtml">setelt</a>.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value="setelt(m,2,3,5)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
An alternative syntax is to use assignment.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="handleFree(['p1','p3']);"
    value="m(1,2):=10" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
The matrix was destructively modified.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p4']);"
    value="m" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
If you already have the matrix entries as a list of lists, use
<a href="dbopmatrix.xhtml">matrix</a>.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="makeRequest('p5');"
    value="matrix [[1,2,3,4],[0,9,8,7]]" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
If the matrix is diagonal, use
<a href="dbopdiagonalmatrix.xhtml">diagonalMatrix</a>
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="makeRequest('p6');"
    value="dm:=diagonalMatrix [1,x^2,x^3,x^4,x^5]" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
Use <a href="dbopsetrowbang.xhtml">setRow!</a> and
<a href="dbopsetcolumnbang.xhtml">setColumn!</a>
to change a row or column of a matrix.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p6','p7']);"
    value="setRow!(dm,5,vector [1,1,1,1,1])" />
  <div id="ansp7"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p6','p7','p8']);"
    value="setColumn!(dm,2,vector [y,y,y,y,y])" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
Use <a href="dbopcopy.xhtml">copy</a> to make a copy of a matrix.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p6','p7','p8','p9']);"
    value="cdm:=copy(dm)" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
This is useful if you intend to modify a matrix destructively but want a
copy of the original.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p6','p7','p8','p9','p10']);"
    value="setelt(dm,4,1,1-x^7)" />
  <div id="ansp10"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p6','p7','p8','p9','p10','p11']);"
    value="[dm,cdm]" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
Use <a href="dbopsubmatrix.xhtml">subMatrix</a>(dm,2,3,2,4) to extract
part of an existing matrix. The syntax is
<pre>
  subMatrix(m,firstrow,lastrow,firstcol,lastcol)
</pre>
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p6','p7','p8','p9','p10','p11','p12']);"
    value="subMatrix(dm,2,3,2,4)" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
To change a submatrix, use 
<a href="dbopsetsubmatrixbang.xhtml">setsubMatrix!</a>.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="makeRequest('p13');"
    value="d:=diagonalMatrix [1.2,-1.3,1.4,-1.5]" />
  <div id="ansp13"><div></div></div>
 </li>
</ul>
If e is too big to fit where you specify, an error message is displayed. Use
<a href="dbopsubmatrix.xhtml">subMatrix</a>.
<ul>
 <li>
  <input type="submit" id="p14" class="subbut" 
    onclick="makeRequest('p14');"
    value="e:=matrix [[6.7,9.11],[-31.33,67.19]]" />
  <div id="ansp14"><div></div></div>
 </li>
</ul>
This changes the submatrix of d whose upper left corner is at the first row
and second column and whose size is that of e.
<ul>
 <li>
  <input type="submit" id="p15" class="subbut" 
    onclick="handleFree(['p13','p14','p15']);"
    value="setsubMatrix!(d,1,2,e)" />
  <div id="ansp15"><div></div></div>
 </li>
</ul>
<ul>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick="handleFree(['p13','p14','p15','p16']);"
    value="d" />
  <div id="ansp16"><div></div></div>
 </li>
</ul>
Matrices can be joined either horizontally or vertically to make new
matrices.
<ul>
 <li>
  <input type="submit" id="p17" class="subbut" 
    onclick="makeRequest('p17');"
    value="a:=matrix [[1/2,1/3,1/4],[1/5,1/6,1/7]]" />
  <div id="ansp17"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p18" class="subbut" 
    onclick="makeRequest('p18');"
    value="b:=matrix [[3/5,3/7,3/11],[3/13,3/17,3/19]]" />
  <div id="ansp18"><div></div></div>
 </li>
</ul>
Use <a href="dbophorizconcat.xhtml">horizConcat</a> to append them side to
side. The two matrices must have the same number of rows.
<ul>
 <li>
  <input type="submit" id="p19" class="subbut" 
    onclick="handleFree(['p17','p18','p19']);"
    value="horizConcat(a,b)" />
  <div id="ansp19"><div></div></div>
 </li>
</ul>
Use <a href="dbopvertconcat.xhtml">vertConcat</a> to stack one upon the
other. The two matrices must have the same number of columns.
<ul>
 <li>
  <input type="submit" id="p20" class="subbut" 
    onclick="handleFree(['p17','p18','p20']);"
    value="vab:=vertConcat(a,b)" />
  <div id="ansp20"><div></div></div>
 </li>
</ul>
The operation <a href="dboptranspose.xhtml">transpose</a> is used to create
a new matrix by reflection across the main diagonal.
<ul>
 <li>
  <input type="submit" id="p21" class="subbut" 
    onclick="handleFree(['p17','p18','p20','p21']);"
    value="transpose vab" />
  <div id="ansp21"><div></div></div>
 </li>
</ul>
 </body>
</html>
