<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Creation of Power Series</div>
  <hr/>
This is the easiest way to create a power series. This tells Axiom that x
is to be treated as a power series, so funcitons of x are again power series.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="x:=series 'x" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
We didn't say anything about the coefficients of the power series, so the
coefficients are general expressions over the integers. This allows us to
introduce denominators, symbolic constants, and other variables as needed.
Here the coefficents are integers (note that the coefficients are the
Fibonacci numbers).
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value="1/(1-x-x^2)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
This series has coefficients that are rational numbers.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="handleFree(['p1','p3']);"
    value="sin(x)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
When you enter this expression you introduce the symbolic constants sin(1)
and cos(1).
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p4']);"
    value="sin(1+x)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
When you enter the expression the variable a appears in the resulting 
series expansion.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p1','p5']);"
    value="sin(a*x)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
You can also convert an expression into a series expansion. This expression
creates the series expansion of 1/log(v) about v=1. For details and more
examples see
<a href="axbook/section-8.9.xhtml#subsec-8.9.5">
Converting to Power Series</a>
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="makeRequest('p6');"
    value="series(1/log(v),v=1)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
You can create power series with more general coefficients. You normally
accomplish this via a type declaration, see 
<a href="axbook/section-2.3.xhtml">Declarations</a>. See
<a href="axbook/section-8.9.xhtml#subsec-8.9.4">
Functions on Power Series</a> for some warnings about working with 
declared series.

We delcare that y is a one-variable Taylor series 
(<a href="db.xhtml?UnivariateTaylorSeries">UTS</a> is the abbreviation for
<a href="db.xhtml?UnivariateTaylorSeries">UnivariateTaylorSeries</a> in the
variable z with <a href="db.xhtml?Float">FLOAT</a> (that is, floating-point)
coefficients, centered about 0. Then, by assignment, we obtain the Taylor
expansion of exp(z) with floating-point coefficients.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="makeRequest('p7');"
    value="y:UTS(FLOAT,'z,0):=exp(z)" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
You can also create a power series by giving an explicit formula for the
nth coefficient. For details and more examples see
<a href="axbook/section-8.9.xhtml#subsec-8.9.6">
Power Series from Formulas</a>

To create a series about w=0 whose nth Taylor coefficient is 1/n!, you can
evaluate this expression. This is the Taylor expansion of exp(w) at w=0.
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="makeRequest('p8');"
    value="series(1/factorial(n),n,w=0)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
 </body>
</html>
