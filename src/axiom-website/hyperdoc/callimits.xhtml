<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Limits</div>
  <hr/>
To compute a limit, you must specify a functional expression, a variable,
and a limiting value for that variable. If you do not specify a direction,
Axiom attempts to compute a two-sided limit.

Issue this to compute the limit of (x^2-2*x+2)/(x^2-1) as x approaches 1.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="limit((x^2-3*x+2)/(x^2-1),x=1)" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
Sometimes the limit when approached from the left is different from the
limit from the right and, in this case, you may wish to ask for a one-sided
limit. Also, if you have a function that is only defined on one side of a
particular value, you can compute a one-sided limit.

The function log(x) is only defined to the right of zero, that is, for
x>0. Thus, when computing limits of functions involving log(x), you probably
want a "right-hand" limit.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value='limit(x*log(x),x=0,"right")' />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
When you do not specify "right" or "left" as the optional fourth argument,
<a href="dboplimit.xhtml">limit</a> tries to compute a two-sided limit.
Here the limit from the left does not exist, as Axiom indicates when you
try to take a two-sided limit.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="limit(x*log(x),x=0)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
A function can be defined on both sides of a particular value, but tend to
different limits as its variable approaches that value from the left and
from the right. We can construct an example of this as follows: Since 
sqrt(y^2) is simply the absolute value of y, the function sqrt(y^2)/y is
simply the sign (+1 or -1) of the nonzero real number y. Therefore,
sqrt(y^2)/y=-1 for y&#60;0 and sqrt(y^2)/y=+1 for y>0. This is what happens 
when we take the limit at y=0. The answer returned by Axiom gives both a
"left-handed" and a "right-handed" limit.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="makeRequest('p4');"
    value="limit(sqrt(y^2)/y,y=0)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
Here is another example, this time using a more complicated function.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="makeRequest('p5');"
    value="limit(sqrt(1-cos(t))/t,t=0)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
You can compute limits at infinity by passing either "plus infinity" or
"minus infinity" as the third argument of <a href="dboplimit.xhtml">limit</a>.
To do this, use the constants %plusInfinity and %minusInfinity.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="makeRequest('p6');"
    value="limit(sqrt(3*x^2+1)/(5*x),x=%plusInfinity)" />
  <div id="ansp6"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="makeRequest('p7');"
    value="limit(sqrt(3*x^2+1)/(5*x),x=%minusInfinity)" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
You can take limits of functions with parameters. As you can see, the limit
is expressed in terms of the parameters.
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="makeRequest('p8');"
    value="limit(sinh(a*x)/tan(b*x),x=0)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
When you use <a href="dboplimit.xhtml">limit</a>, you are taking the limit
of a real function of a real variable. When you compute this, Axiom returns
0 because, as a function of a real variable, sin(1/z) is always between -1
and 1, so z*sin(1/z) tends to 0 as z tends to 0.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="makeRequest('p9');"
    value="limit(z*sin(1/z),z=0)" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
However, as a function of a complex variable, sin(1/z) is badly behaved
near 0 (one says that sin(1/z) has an essential singularlity at z=0). When
viewed as a function of a complex variable, z*sin(1/z) does not approach any
limit as z tends to 0 in the complex plane. Axiom indicates this when we
call <a href="dbopcomplexlimit.xhtml">complexLimit</a>.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="makeRequest('p10');"
    value="complexLimit(z*sin(1/z),z=0)" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
You can also take complex limits at infinity, that is, limits of a function
of z as z approaches infinity on the Riemann sphere. Use the symbol
%infinity to denote "complex infinity". As above, to compute complex limits
rather than real limits, use <a href="dbopcomplexlimit.xhtml">complexLimit</a>.
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="makeRequest('p11');"
    value="complexLimit((2+z)/(1-z),z=%infinity)" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
In many cases, a limit of a real function of a real variable exists when
the corresponding complex limit does not. This limit exists.
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="makeRequest('p12');"
    value="limit(sin(x)/x,x=%plusInfinity)" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
But this limit does not.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="makeRequest('p13');"
    value="complexLimit(sin(x)/x,x=%infinity)" />
  <div id="ansp13"><div></div></div>
 </li>
</ul>
 </body>
</html>
