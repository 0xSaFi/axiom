<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Numeric Functions</div>
  <hr/>
Axiom provides two basic floating point types: 
<a href="numfloat.xhtml">Float</a> and
<a href="nummachinefloats.xhtml">DoubleFloat</a>. This section
describes how to use numerical operations defined on these types and
the related complex types. As we mentioned in
<a href="axbook/book-contents.xhtml#chapter1">An Overview of Axiom</a>
in chapter 1., the 
<a href="numfloat.xhtml">Float</a> type is a software implementation of
floating point numbers in which the exponent and the significand may have
any number of digits. See
<a href="numfloat.xhtml">Float</a> for detailed information about this 
domain. The 
<a href="nummachinefloats.xhtml">DoubleFloat</a> is usually a hardware
implementation of floating point numbers, corresponding to machine double
precision. The types 
<a href="dbcomplexfloat.xhtml">Complex Float</a> and 
<a href="dbcomplexdoublefloat.xhtml">Complex DoubleFloat</a> are the
corresponding software implementations of complex floating point numbers.
In this section the term floating point type means any of these four
types. The floating point types immplement the basic elementary functions.
These include (where $ means
<a href="nummachinefloats.xhtml">DoubleFloat</a>,
<a href="numfloat.xhtml">Float</a>,
<a href="dbcomplexfloat.xhtml">Complex Float</a>,
<a href="dbcomplexdoublefloat.xhtml">Complex DoubleFloat</a>):<br/>
<a href="dbopexp.xhtml">exp</a>,
<a href="dboplog.xhtml">log</a>: $ -> $<br/>
<a href="dbopsin.xhtml">sin</a>,
<a href="dbopcos.xhtml">cos</a>,
<a href="dboptan.xhtml">tan</a>,
<a href="dbopcot.xhtml">cot</a>,
<a href="dbopsec.xhtml">sec</a>,
<a href="dbopcsc.xhtml">csc</a>: $ -> $<br/>
<a href="dbopasin.xhtml">asin</a>,
<a href="dbopacos.xhtml">acos</a>,
<a href="dbopatan.xhtml">atan</a>,
<a href="dbopacot.xhtml">acot</a>,
<a href="dbopasec.xhtml">asec</a>,
<a href="dbopacsc.xhtml">acsc</a>: $ -> $<br/>
<a href="dbopsinh.xhtml">sinh</a>,
<a href="dbopcosh.xhtml">cosh</a>,
<a href="dboptanh.xhtml">tanh</a>,
<a href="dbopcoth.xhtml">coth</a>,
<a href="dbopsech.xhtml">sech</a>,
<a href="dbopcsch.xhtml">csch</a>: $ -> $<br/>
<a href="dbopasinh.xhtml">asinh</a>,
<a href="dbopacosh.xhtml">acosh</a>,
<a href="dbopatanh.xhtml">atanh</a>,
<a href="dbopacoth.xhtml">acoth</a>,
<a href="dbopasech.xhtml">asech</a>,
<a href="dbopacsch.xhtml">acsch</a>: $ -> $<br/>
<a href="dboppi.xhtml">pi</a>: () -> $<br/>
<a href="dbopsqrt.xhtml">sqrt</a>: $ -> $<br/>
<a href="dbopnthroot.xhtml">nthRoot</a>: ($,Integer) -> $<br/>
<a href="dbopstarstar.xhtml">**</a>: ($,Fraction Integer) -> $<br/>
<a href="dbopstarstar.xhtml">**</a>: ($,$) -> $<br/>
The handling of roots depends on whether the floating point type is
real or complex: for the real floating point types, 
<a href="nummachinefloats.xhtml">DoubleFloat</a> and
<a href="numfloat.xhtml">Float</a>, if a real root exists the one with 
the same sign as the radicand is returned; for the complex floating
point types, the principal value is returned. Also, for real floating
point types the inverse functions produce errors if the results are not
real. This includes cases such as asin(1.2), log(-3.2), sqrt(-1,1).
The default floating point type is <a href="numfloat.xhtml">Float</a>
or <a href="dbcomplexfloat.xhtml">Complex Float</a>, just use normal
decimal notation.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" onclick="makeRequest('p1');"
    value="exp(3.1)" />
  <div id="ansp1"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p2" class="subbut" onclick="makeRequest('p2');"
    value="exp(3.1+4.5*%i)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
To evaluate functions using 
<a href="nummachinefloats.xhtml">DoubleFloat</a> or 
<a href="dbcomplexdoublefloat.xhtml">Complex DoubleFloat</a>, a 
declaration or conversion is required.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" onclick="makeRequest('p3');"
    value="(r:DFLOAT:=3.1; t:DFLOAT:=4.5; exp(r+t*%i))" />
  <div id="ansp3"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p4" class="subbut" onclick="makeRequest('p4');"
    value="exp(3.1::DFLOAT+4.5::DFLOAT*%i)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
A number of special functions are provided by the package
<a href="db.xhtml?DoubleFloatSpecialFunctions">DoubleFloatSpecialFunctions</a>
for the machine precision floating point types. The special functions
provided are listed below, where F stands for the types
<a href="numfloat.xhtml">Float</a>
or <a href="dbcomplexfloat.xhtml">Complex Float</a>. The real versions
of the functions yield an error if the result is not real.
<ul>
 <li> 
  <a href="dbopgamma.xhtml">Gamma</a>: F -> F<br/>
  Gamma(z) is the Euler gamma
  function, Gamma(Z), defined by<br/>
  Gamma(z) = integrate(t^(z-1)*exp(-t),t=0..%infinity)
 </li>
 <li>
  <a href="dbopbeta.xhtml">Beta</a>: F -> F<br/>
  Beta(u,v) is the Euler Beta
  function B(u,v), defined by <br/>
  Beta(u,v)=integrate(t^(u-1)*(1-t)^(b-1),t=0..1)<br/>
  This is related to Gamma(z) by<br/>
  Beta(u,v)=Gamma(u)*Gamma(v)/Gamma(u+v)
 </li>
 <li>
  <a href="dboploggamma.xhtml">logGamma</a>: F -> F<br/>
  logGamma(z) is the natural logarithm of Gamma(z). This can often be
  computed even if Gamma(z) cannot.
 </li>
 <li>
  <a href="dbopdigamma.xhtml">digamma</a>: F -> F<br/>
  digamma(z), also called psi(z), is the function psi(z), defined by<br/>
  psi(z)=Gamma'(z)/Gamma(z)
 </li>
 <li>
 <a href="dboppolygamma.xhtml">polygamma</a>: (NonNegativeInteger, F) -> F<br/>
  polygamma(n,z) is the n-th derivative of digamma(z)
 </li>
 <li>
  <a href="dbopbesselj.xhtml">besselJ</a>: (F, F) -> F<br/>
  besselJ(v,z) is the Bessel function of the first kind, J(v,z). This 
  function satisfies the differential equation<br/>
  z^(2w)''(z)+zw'(z)+(z^2-v^2)w(z)=0
 </li>
 <li>
  <a href="dbopbessely.xhtml">besselY</a>: (F, F) -> F<br/>
  besselY(v,z) is the Bessel function of the second kind, Y(v,z). This
  function satisfies the same differential equation as 
  <a href="dbopbesselj.xhtml">besselJ</a>. The implementation simply
  uses the relation<br/>
  Y(v,z)=(J(v,z)cos(v*%pi)-J(-v,z))/sin(v*%pi)
 </li>
 <li>
  <a href="dbopbesseli.xhtml">besselI</a>: (F, F) -> F<br/>
  besselI(v,z) if the modifed Bessel function of the first kind, I(v,z).
  This function satisfies the differential equation<br/>
  z^2w''(z)+zw'(z)-(z^2+v^2)w(z)=0
 </li>
 <li>
  <a href="dbopbesselk.xhtml">besselK</a>: (F, F) -> F<br/>
  besselK(v,z) is the modifed Bessel function of the second kind, K(v,z).
  This function satisfies the same differential equation as
  <a href="dbopbesseli.xhtml">besselI</a>. The implementation simply uses
  the relation<br/>
  K(v,z)=%pi*(I(v,z)-I(-v,z))/(2sin(v*%pi))
 </li>
 <li>
  <a href="dbopairyai.xhtml">airyAi</a>: F -> F<br/>
  airyAi(z) is the Airy function Ai(z). This function satisfies the
  differential equation<br/>
  w''(z)-zw(z)=0<br/>
  The implementation simply uses the relation<br/>
  Ai(-z)=1/3*sqrt(z)*(J(-1/3,2/3*z^(3/2))+J(1/3,2/3*z^(3/2)))
 </li>
 <li>
  <a href="dbopairybi.xhtml">airyBi</a>: F -> F<br/>
  airyBi(z) is the Airy function Bi(z). This function satisfies the
  same differential equation as airyAi.
  The implementation simply uses the relation<br/>
  Bi(-z)=1/3*sqrt(3*z)*(J(-1/3,2/3*z^(3/2))-J(1/3,2/3*z^(3/2)))
 </li>
 <li>
  <a href="dbophypergeometric0f1.xhtml">hypergeometric0F1</a>: (F, F) -> F<br/>
  hypergeometric0F1(c,z) is the hypergeometric function 0F1(;c;z). The above
  special functions are defined only for small floating point types. If you
  give <a href="numfloat.xhtml">Float</a> arguments, they are converted to
  <a href="nummachinefloats.xhtml">DoubleFloat</a> by Axiom.
 </li>
 <li>
  <input type="submit" id="p5" class="subbut" onclick="makeRequest('p5');"
    value="Gamma(0.5)^2" />
  <div id="ansp5"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p6" class="subbut" onclick="makeRequest('p6');"
    value="(a:=2.1; b:=1.1; besselI(a+%i*b,b*a+1))" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
 </body>
</html>
