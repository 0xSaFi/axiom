<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Polynomial</div>
  <hr/>
The domain constructor <a href="db.xhtml?Polynomial">Polynomial</a>
(abbreviation: <a href="db.xhtml?Polynomial">POLY</a>) provides polynomials
with an arbitrary number of unspecified variables.

It is used to create the default polynomial domains in Axiom. Here the
coefficients are integers.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="x+1" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
Here the coefficients have type <a href="db.xhtml?Float">Float</a>.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value="z-2.3" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
And here we have a polynomial in two variables with coefficients which 
have type <a href="dbfractioninteger.xhtml">Fraction Integer</a>
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="y^2-z+3/4" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
The representation of objects of domains created by 
<a href="db.xhtml?Polynomial">Polynomial</a> is that of recursive univariate
polynomials. (The term univariate means "one variable". The term 
multivariate means "possibly more than one variable".) This recursive
structure is sometimes obvious from the display of a polynomial.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="makeRequest('p4');"
    value="r:=y^2+x*y+y" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
In this example, you see that the polynomial is stored as a polynomial in y
with coefficients that are polynomials in x with integer coefficients. In 
fact, you really don't need to worry about the representation unless you are
working on an advanced application where it is critical. The polynomial
types created from
<a href="db.xhtml?DistributedMultivariatePolynomial">
DistributedMultivariatePolynomial</a> and
<a href="db.xhtml?XDistributedPolynomial">XDistributedPolynomial</a> 
(discussed in
<a href="axbook/section-9.16.xhtml">"DistributedMultivariatePolynomial"</a>
are stored and displayed in a
non-recursive manner. You see a "flat" display of the above polynomial by
converting to one of those types.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p4','p5']);"
    value="r::DMP([y,x],INT)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
We will demonstrate many of the polynomial facilities by using two 
polynomials with integer coefficients. By default, the interpreter 
expands polynomial expressions, even if they are written in a factored
format.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="makeRequest('p6');"
    value="p:=(y-1)^2*x*z" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
See <a href="axbook/section-9.22.xhtml">Factored</a> 
to see how to create objects in factored form directly.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="makeRequest('p7');"
    value="q:=(y-1)*x*(z+5)" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
The fully factored form can be recovered by using 
<a href="dbopfactor.xhtml">factor</a>
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p7','p8']);"
    value="factor(q)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
This is the same name used for the operation to factor integer.
Such reuse of names is called 
<a href="glossarypage.xhtml#p36465">overloading</a> and makes it much
easier to think of solving problems in general ways. Axiom facilities
for factoring polynomials created with 
<a href="db.xhtml?Polynomial">Polynomial</a>
are currently restricted to the integer and rational number coefficients
cases. There are more complete facilities for factoring univariate
polynomials (see 
<a href="axbook/section-8.2.xhtml">Polynomial Factorization</a>)

The standard arithmetic operations are available for polynomials.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p6','p7','p9']);"
    value="p-q^2" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
The operation <a href="dbopgcd.xhtml">gcd</a> is used to compute the 
greated common divisor of two polynomials.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p6','p7','p10']);"
    value="m:=gcd(p,q)" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
In the case of p and q, the gcd is obvious from their definitions.
We factor the gcd to show this relationship better.
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p6','p7','p10','p11']);"
    value="factor m" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
The least common multiple is computed by using 
<a href="dboplcm.xhtml">lcm</a>.
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p6','p7','p12']);"
    value="lcm(p,q)" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
Use <a href="dbopcontent.xhtml">content</a> to compute the greatest common
divisor of the coefficients of the polynomial.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="handleFree(['p6','p13']);"
    value="content p" />
  <div id="ansp13"><div></div></div>
 </li>
</ul>
Many of the operations on polynomials require you to specify a variable.
For example, <a href="dbopresultant.xhtml">resultant</a> requires you to
give the variable in which the polynomials should be expressed. This 
computes the resultant of the values of p and q, considering them as
polynomials in the variable z. They do not share a root when thought
of as polynomials in z.
<ul>
 <li>
  <input type="submit" id="p14" class="subbut" 
    onclick="handleFree(['p6','p7','p14']);"
    value="resultant(p,q,z)" />
  <div id="ansp14"><div></div></div>
 </li>
</ul>
This value is 0 because as polynomials in x the polynomials have a
common root.
<ul>
 <li>
  <input type="submit" id="p15" class="subbut" 
    onclick="handleFree(['p6','p7','p15']);"
    value="resultant(p,q,x)" />
  <div id="ansp15"><div></div></div>
 </li>
</ul>
The data type used for the variables created by 
<a href="db.xhtml?Polynomial">Polynomial</a> is 
<a href="db.xhtml?Symbol">Symbol</a>. As mentioned above, the representation
used by <a href="db.xhtml?Polynomial">Polynomial</a> is recursive and so
there is a main variable for nonconstant polynomials. The operation
<a href="dbopmainvariable.xhtml">makeVariable</a> returns this variable.
The return type is actually a union of <a href="db.xhtml?Symbol">Symbol</a>
and "failed".
<ul>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick="handleFree(['p6','p16']);"
    value="mainVariable p" />
  <div id="ansp16"><div></div></div>
 </li>
</ul>
The latter branch of the union is used if the polynomial has no
variables, that is, is a constant.
<ul>
 <li>
  <input type="submit" id="p17" class="subbut" 
    onclick="handleFree(['p6','p17']);"
    value="ground? p" />
  <div id="ansp17"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p18" class="subbut" 
    onclick="makeRequest('p18');"
    value="ground?(1::POLY INT)" />
  <div id="ansp18"><div></div></div>
 </li>
</ul>
The complete list of variables actually used in a particular polynomial
is returned by <a href="dbopvariables.xhtml">variables</a>. For constant
polynomials, this list is empty.
<ul>
 <li>
  <input type="submit" id="p19" class="subbut" 
    onclick="handleFree(['p6','p19']);"
    value="variables p" />
  <div id="ansp19"><div></div></div>
 </li>
</ul>
The <a href="dbopdegree.xhtml">degree</a> operation returns the degree
of a polynomial in a specific variable.
<ul>
 <li>
  <input type="submit" id="p20" class="subbut" 
    onclick="handleFree(['p6','p20']);"
    value="degree(p,x)" />
  <div id="ansp20"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p21" class="subbut" 
    onclick="handleFree(['p6','p21']);"
    value="degree(p,y)" />
  <div id="ansp21"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p22" class="subbut" 
    onclick="handleFree(['p6','p22']);"
    value="degree(p,z)" />
  <div id="ansp22"><div></div></div>
 </li>
</ul>
If you give a list of variables for the second argument, a list of the
degrees in those variables is returned.
<ul>
 <li>
  <input type="submit" id="p23" class="subbut" 
    onclick="handleFree(['p6','p23']);"
    value="degree(p,[x,y,z])" />
  <div id="ansp23"><div></div></div>
 </li>
</ul>
The minimum degree of a variable in a polynomial is computed using
<a href="dbopminimumdegree.xhtml">minimumDegree</a>.
<ul>
 <li>
  <input type="submit" id="p24" class="subbut" 
    onclick="handleFree(['p6','p24']);"
    value="minimumDegree(p,z)" />
  <div id="ansp24"><div></div></div>
 </li>
</ul>
The total degree of a polynomial is returned by
<a href="dboptotaldegree.xhtml">totalDegree</a>.
<ul>
 <li>
  <input type="submit" id="p25" class="subbut" 
    onclick="handleFree(['p6','p25']);"
    value="totalDegree p" />
  <div id="ansp25"><div></div></div>
 </li>
</ul>
It is often convenient to think of a polynomial as a leading monomial
plus the remaining terms, using the operation
<a href="dbopleadingmonomial.xhtml">leadingMonomial</a>
<ul>
 <li>
  <input type="submit" id="p26" class="subbut" 
    onclick="handleFree(['p6','p26']);"
    value="leadingMonomial p" />
  <div id="ansp26"><div></div></div>
 </li>
</ul>
The <a href="dbopreductum.xhtml">reductum</a> operation returns a polynomial
consisting of the sum of the monomials after the first.
<ul>
 <li>
  <input type="submit" id="p27" class="subbut" 
    onclick="handleFree(['p6','p27']);"
    value="reductum p" />
  <div id="ansp27"><div></div></div>
 </li>
</ul>
These have the obvious relationship that the original polynomial is equal
to the leading monomial plus the reductum.
<ul>
 <li>
  <input type="submit" id="p28" class="subbut" 
    onclick="handleFree(['p6','p28']);"
    value="p-leadingMonomial p - reductum p" />
  <div id="ansp28"><div></div></div>
 </li>
</ul>
The value returned by <a href="dbopleadingmonomial.xhtml">leadingMonomial</a>
includes the coefficient of that term. This is extracted by using 
<a href="dbopleadingcoefficient.xhtml">leadingCoefficient</a> on the 
original polynomial.
<ul>
 <li>
  <input type="submit" id="p29" class="subbut" 
    onclick="handleFree(['p6','p29']);"
    value="leadingCoefficient p" />
  <div id="ansp29"><div></div></div>
 </li>
</ul>
The operation <a href="dbopeval.xhtml">eval</a> is used to substitute a 
value for a varialbe in a polynomial.
<ul>
 <li>
  <input type="submit" id="p30" class="subbut" 
    onclick="handleFree(['p6','p30']);"
    value="p" />
  <div id="ansp30"><div></div></div>
 </li>
</ul>
This value may be another variable, a constant or a polynomial.
<ul>
 <li>
  <input type="submit" id="p31" class="subbut" 
    onclick="handleFree(['p6','p31']);"
    value="eval(p,x,w)" />
  <div id="ansp31"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p32" class="subbut" 
    onclick="handleFree(['p6','p32']);"
    value="eval(p,x,1)" />
  <div id="ansp32"><div></div></div>
 </li>
</ul>
Actually, all the things being substituted are just polynomials, some 
more trivial than others.
<ul>
 <li>
  <input type="submit" id="p33" class="subbut" 
    onclick="handleFree(['p6','p33']);"
    value="eval(p,x,y^2-1)" />
  <div id="ansp33"><div></div></div>
 </li>
</ul>
Derivatives are computed using the <a href="dbopd.xhtml">D</a> operation.
<ul>
 <li>
  <input type="submit" id="p34" class="subbut" 
    onclick="handleFree(['p6','p34']);"
    value="D(p,x)" />
  <div id="ansp34"><div></div></div>
 </li>
</ul>
The first argument is the polynomial and the second is the variable.
<ul>
 <li>
  <input type="submit" id="p35" class="subbut" 
    onclick="handleFree(['p6','p35']);"
    value="D(p,y)" />
  <div id="ansp35"><div></div></div>
 </li>
</ul>
Even if the polynomial has only one variable, you must specify it.
<ul>
 <li>
  <input type="submit" id="p36" class="subbut" 
    onclick="handleFree(['p6','p36']);"
    value="D(p,z)" />
  <div id="ansp36"><div></div></div>
 </li>
</ul>
Integration of polynomials is similar and the 
<a href="dbopintegrate.xhtml">integrate</a> operation is used.

Integration requires that the coefficients support division. 
Consequently, Axiom converts polynomials over the integers to polynomials
over the rational numbers before integrating them.
<ul>
 <li>
  <input type="submit" id="p37" class="subbut" 
    onclick="handleFree(['p6','p37']);"
    value="integrate(p,y)" />
  <div id="ansp37"><div></div></div>
 </li>
</ul>
It is not possible, in general, to divide two polynomials. In our example
using polynomials over the integers, the operation
<a href="dbopmonicdivide.xhtml">monicDivide</a> divides a polynomial by a
monic polynomial (that is, a polynomial with leading coefficient equal to
1). The result is a record of the quotient and remainder of the division.
You must specify the variable in which to express the polynomial.
<ul>
 <li>
  <input type="submit" id="p38" class="subbut" 
    onclick="handleFree(['p6','p38']);"
    value="qr:=monicDivide(p,x+1,x)" />
  <div id="ansp38"><div></div></div>
 </li>
</ul>
The selectors of the components of the record are quotient and
remainder. Issue this to extract the remainder:
<ul>
 <li>
  <input type="submit" id="p39" class="subbut" 
    onclick="handleFree(['p6','p38','p39']);"
    value="qr.remainder" />
  <div id="ansp39"><div></div></div>
 </li>
</ul>
Now that we can extract the components, we can demonstrate the 
relationship among them and the arguments to our original expression
<pre>
  qr:=monicDivide(p,x+1,x)
</pre>
<ul>
 <li>
  <input type="submit" id="p40" class="subbut" 
    onclick="handleFree(['p6','p38','p40']);"
    value="p-((x+1)*qr.quotient+qr.remainder)" />
  <div id="ansp40"><div></div></div>
 </li>
</ul>
If the <a href="dbopdivide.xhtml">/</a> operator is used with polynomials,
a fraction object is created. In this example, the result is an object of
type 
<a href="dbfractionpolynomialinteger.xhtml">Fraction Polynomial Integer</a>.
<ul>
 <li>
  <input type="submit" id="p41" class="subbut" 
    onclick="handleFree(['p6','p7','p41']);"
    value="p/q" />
  <div id="ansp41"><div></div></div>
 </li>
</ul>
If you use rational numbers as polynomial coefficients, the resulting
object is of type 
<a href="dbpolynomialfractioninteger.xhtml">Polynomial Fraction Integer</a>
<ul>
 <li>
  <input type="submit" id="p42" class="subbut" 
    onclick="makeRequest('p42');"
    value="pfi:=(2/3)*x^2-y+4/5" />
  <div id="ansp42"><div></div></div>
 </li>
</ul>
This can be converted to a fraction of polynomials and back again, if
required.
<ul>
 <li>
  <input type="submit" id="p43" class="subbut" 
    onclick="handleFree(['p42','p43']);"
    value="fpi:=pfi::FRAC POLY INT" />
  <div id="ansp43"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p44" class="subbut" 
    onclick="handleFree(['p42','p43','p44']);"
    value="fpi::POLY FRAC INT" />
  <div id="ansp44"><div></div></div>
 </li>
</ul>
To convert the coefficients to floating point, map the 
<a href="dbopnumeric.xhtml">numeric</a> operation on the coefficients
of the polynomial.
<ul>
 <li>
  <input type="submit" id="p45" class="subbut" 
    onclick="handleFree(['p42','p45']);"
    value="map(numeric,pfi)" />
  <div id="ansp45"><div></div></div>
 </li>
</ul>
For more information on related topcis, see
<a href="axbook/section-9.83.xhtml">UnivariatePolynomial</a>,
<a href="axbook/section-9.54.xhtml">MultivariatePolynomial</a>, and
<a href="axbook/section-9.16.xhtml">DistributedMultivariatePolynomial</a>.
You can also issue the system command
<ul>
 <li>
  <input type="submit" id="p46" class="subbut" 
    onclick="showcall('p46');"
   value=")show Polynomial"/>
  <div id="ansp46"><div></div></div>
 </li>
</ul>
to display the full list of operations defined by 
<a href="db.xhtml?Polynomial">Polynomial</a>.
 </body>
</html>
