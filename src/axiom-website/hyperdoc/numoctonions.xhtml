<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Octonions</div>
  <hr/>
The Octonions, also called the Cayley-Dixon algebra, defined over a
commutative ring are an eight-dimensional non-associative algebra. Their
construction from quaternions is similar to the construction of quaternions
from complex numbers (see <a href="numquaternions.xhtml">Quaternion</a>).
As <a href="db.xhtml?Octonion">Octonion</a> creates an eight-dimensional
algebra, you have to give eight components to construct an octonion.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" onclick="makeRequest('p1');"
    value="oci1:=octon(1,2,3,4,5,6,7,8)" />
  <div id="ansp1"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p2" class="subbut" onclick="makeRequest('p2');"
    value="oci2:=octon(7,2,3,-4,5,6,-7,0)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
Or you can use two quaternions to create an octonion.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" onclick="makeRequest('p3');"
    value="oci3:=octon(quatern(-7,-12,3,-10),quatern(5,6,9,0))" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
You can easily demonstrate the non-associativity of multiplication.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4']);"
    value="(oci1*oci2)*oci3-oci1*(oci2*oci3)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
As with the quaternions, we have a real part, the imaginary parts i, j,
k, and four additional imaginary parts E, I, J, and K. These parts 
correspond to the canonical basis (1,i,j,k,E,I,J,K). For each basis
element there is a component operation to extract the coefficient of 
the basis element for a given octonion.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p1','p5']);"
value="[real oci1, imagi oci1, imagj oci1, imagk oci1, 
imagE oci1, imagI oci1, imagJ oci1, imagK oci1]"/>
  <div id="ansp5"><div></div></div>
 </li>
</ul>
A basis with respect to the quaternions is given by (1,E). However, you 
might ask, what then are the commuting rules? To answer this, we create
some generic elements. We do this in Axim by simply changing the ground
ring from
<a href="db.xhtml?Integer">Integer</a> to
<a href="dbpolynomialinteger.xhtml">Polynomial Integer</a>.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" onclick="makeRequest('p6');"
    value="q:Quaternion Polynomial Integer:=quatern(q1,qi,qj,qk)" />
  <div id="ansp6"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p7" class="subbut" onclick="makeRequest('p7');"
    value="E:Octonion Polynomial Integer:=octon(0,0,0,0,1,0,0,0)" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
Note that quaternions are automatically converted to octonions in the
obvious way.
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p6','p7','p8']);"
    value="q*E" />
  <div id="ansp8"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p6','p7','p9']);"
    value="E*q" />
  <div id="ansp9"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p6','p10']);"
    value="q*1$(Octonion Polynomial Integer)" />
  <div id="ansp10"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p6','p11']);"
    value="1$(Octonion Polynomial Integer)*q" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
Finally, we check that the <a href="dbopnorm.xhtml">norm</a>, defined as 
the sum of the squares of the coefficients, is a multiplicative map.
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" onclick="makeRequest('p12');"
    value="o:Octonion Polynomial Integer:=octon(o1,oi,oj,ok,oE,oI,oJ,oK)" />
  <div id="ansp12"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="handleFree(['p12','p13']);"
    value="norm o" />
  <div id="ansp13"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p14" class="subbut" onclick="makeRequest('p14');"
    value="p:Octonion Polynomial Integer:=octon(p1,pi,pj,pk,pE,pI,pJ,pK)" />
  <div id="ansp14"><div></div></div>
 </li>
</ul>
Since the result is 0, the norm is multiplicative
<ul>
 <li>
  <input type="submit" id="p15" class="subbut" 
    onclick="handleFree(['p12','p14','p15']);"
    value="norm(o*p)-norm(o)*norm(p)" />
  <div id="ansp15"><div></div></div>
 </li>
</ul>
Issue the system command
<ul>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick="showcall('p16');"
   value=")show Octonion"/>
  <div id="ansp16"><div></div></div>
 </li>
</ul>
to display the list of operations defined by 
<a href="db.xhtml?Octonion">Octonion</a>.
 </body>
</html>
