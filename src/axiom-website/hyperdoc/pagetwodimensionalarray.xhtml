<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">TwoDimensionalArray</div>
  <hr/>
The <a href="db.xhtml?TwoDimensionalArray">TwoDimensionalArray</a> is used for
storing data in a two-dimensional data structure indexed by row and column.
Such an array is a homogeneous data structure in that all the entries of the
array must belong to the same Axiom domain (although see 
<a href="axbook/section-2.6.xhtml">The Any Domain</a>). Each array has a fixed 
number of rows and columns specified by the user and arrays are not 
extensible. In Axiom, the indexing of two-dimensional arrays is one-based.
This means that both the "first" row of an array and the "first" column of
an array are given the index 1. Thus, the entry in the upper left corner
of an array is in position (1,1).

The operation <a href="dbopnew.xhtml">new</a> creates an array with a 
specified number of rows and columns and fills the components of that array 
with a specified entry. The arguments of this operation specify the number
of rows, the number of columns, and the entry. This creates a five-by-four
array of integers, all of whose entries are zero.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="arr:ARRAY2 INT:=new(5,4,0)" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
The entries of this array can be set to other integers using the operation
<a href="dbopsetelt.xhtml">setelt</a>. 

Issue this to set the element in the upper left corner of this array to 17.
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value="setelt(arr,1,1,17)" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
Now the first element of the array is 17.
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="handleFree(['p1','p2','p3']);"
    value="arr" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
Likewise, elements of an array are extracted using the operation
<a href="dbopelt.xhtml">elt</a>.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p2','p4']);"
    value="elt(arr,1,1)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
Another way to use these two operations is as follows. This sets the
element in position (3,2) of the array to 15.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p1','p2','p5']);"
    value="arr(3,2):=15" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
This extracts the element in position (3,2) of the array.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p6']);"
    value="arr(3,2)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
The operation <a href="dbopelt.xhtml">elt</a> and 
<a href="dbopsetelt.xhtml">setelt</a> come equipped with an error check
which verifies that the indices are in the proper ranges. For example,
the above array has five rows and four columns, so if you ask for the
entry in position (6,2) with arr(6,2) Axiom displays an error message.
If there is no need for an error check, you can call the operations
<a href="dbopqelt.xhtml">qelt</a> and
<a href="dbopqseteltbang.xhtml">qsetelt!</a> 
which provide the same functionality
but without the error check. Typically, these operations are called in
well-tested programs.

The operations <a href="dboprow.xhtml">row</a> and
<a href="dbopcolumn.xhtml">column</a> extract rows and columns, respectively,
and return objects of 
<a href="db.xhtml?OneDimensionalArray">OneDimensionalArray</a> with the
same underlying element type.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p7']);"
    value="row(arr,1)" />
  <div id="ansp7"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p8']);"
    value="column(arr,1)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
You can determine the dimensions of an array by calling the operations
<a href="dbopnrows.xhtml">nrows</a> and
<a href="dbopncols.xhtml">ncols</a>, which return the number of rows
and columns, respectively.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p9']);"
    value="nrows(arr)" />
  <div id="ansp9"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p10']);"
    value="ncols(arr)" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
To apply an operation to every element of an array, use
<a href="dbopmap.xhtml">map</a>. This creates a new array. This 
expression negates every element.
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11']);"
    value="map(-,arr)" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
This creates an array where all the elements are doubled.
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12']);"
    value="map((x+->x+x),arr)" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
To change the array destructively, use 
<a href="dbopmapbang.xhtml">map!</a> instead of 
<a href="dbopmap.xhtml">map</a>.
If you need to make a copy of an array,
use <a href="dbopcopy.xhtml">copy</a>.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p13']);"
    value="arrc:=copy(arr)" />
  <div id="ansp13"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p14" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p13','p14']);"
    value="map!(-,arrc)" />
  <div id="ansp14"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p15" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p13','p14','p15']);"
    value="arrc" />
  <div id="ansp15"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p16']);"
    value="arr" />
  <div id="ansp16"><div></div></div>
 </li>
</ul>
Use <a href="dbopmemberq.xhtml">member?</a> to see if a given element is in
an array.
<ul>
 <li>
  <input type="submit" id="p17" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p17']);"
    value="member?(17,arr)" />
  <div id="ansp17"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p18" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p18']);"
    value="member?(10317,arr)" />
  <div id="ansp18"><div></div></div>
 </li>
</ul>
To see how many times an element appears in an array, use 
<a href="dbopcount.xhtml">count</a>.
<ul>
 <li>
  <input type="submit" id="p19" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p19']);"
    value="count(17,arr)" />
  <div id="ansp19"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p20" class="subbut" 
    onclick="handleFree(['p1','p2','p5','p11','p12','p20']);"
    value="count(0,arr)" />
  <div id="ansp20"><div></div></div>
 </li>
</ul>
For more information about the operations available for 
<a href="db.xhtml?TwoDimensionalArray">TwoDimensionalArray</a>, issue
<ul>
 <li>
  <input type="submit" id="p21" class="subbut" 
    onclick="showcall('p21');"
   value=")show TwoDimensionalArray"/>
  <div id="ansp21"><div></div></div>
 </li>
</ul>
For more information on related topics, see
<a href="pagematrix.xhtml">Matrix</a> and
<a href="pageonedimensionalarray.xhtml">OneDimensionalArray</a>.
 </body>
</html>
