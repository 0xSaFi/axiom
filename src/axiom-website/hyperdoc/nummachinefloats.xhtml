<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Machine Floats</div>
  <hr/>
Axiom provides two kinds of floating point numbers. The domain 
<a href="db.xhtml?Float">Float</a> 
(abbreviation <a href="db.xhtml?Float">FLOAT</a>) 
implements a model of arbitrary precisions floating point numbers. The
domain
<a href="db.xhtml?DoubleFloat">DoubleFloat</a> 
(abbreviation <a href="db.xhtml?DoubleFloat">DFLOAT</a>) 
is intended to make available hardware floating point arithmetic in Axiom.
The actual model of floating point 
<a href="db.xhtml?DoubleFloat">DoubleFloat</a> that Axiom
provides is system dependent. For example, on the IBM System 370, Axiom
uses IBM double precision which has fourteen hexadecimal digits of 
precision or roughly sixteen decimal digits. Arbitrary precision floats
allow the user to specify the precision at which arithmetic operations 
are computed. Although this is an attractive facility, it comes at a cost.
Arbitrary precision floating point arithmetic typically takes twenty to
two hundred times more time than hardware floating point.

By default, floating point numbers that you enter into Axiom are of type
<a href="db.xhtml?Float">Float</a>.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="2.71828" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
You must therefore tell Axiom that you want to use 
<a href="db.xhtml?DoubleFloat">DoubleFloat</a> values and operations. The
following are some conservative guidelines for getting Axiom to use 
<a href="db.xhtml?DoubleFloat">DoubleFloat</a>.

To get a value of type <a href="db.xhtml?DoubleFloat">DoubleFloat</a>., 
use a target with
    "@", ...
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value="2.71828@DoubleFloat" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
a conversion,...
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="2.71828::DoubleFloat" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
or an assignment to a declared variable. It is more efficient if you
use a target rather than an explicit or implicit conversion.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="makeRequest('p4');"
    value="eApprox:DoubleFloat:=2.71828" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
You also need to declare functions that work with 
<a href="db.xhtml?DoubleFloat">DoubleFloat</a>.
<ul>
 <li>
  <input type="submit" id="p5" class="noresult" 
    onclick="makeRequest('p5');"
    value="avg:List DoubleFloat -> DoubleFloat" />
  <div id="ansp5"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p6" class="noresult" 
    onclick="makeRequest('p6');"
    value="avg l==(empty? l => 0::DoubleFloat; reduce(_+,l)/#l)"/>
  <div id="ansp6"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p5','p6','p7']);"
    value="avg []" />
  <div id="ansp7"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p5','p6','p8']);"
    value="avg [3.4,9.7,-6.8]" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
Use package calling for operations from 
<a href="db.xhtml?DoubleFloat">DoubleFloat</a>
unless the arguments themselves are already of type
<a href="db.xhtml?DoubleFloat">DoubleFloat</a>.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="makeRequest('p9');"
    value="cos(3.1415926)$DoubleFloat" />
  <div id="ansp9"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="makeRequest('p10');"
    value="cos(3.1415926)::DoubleFloat" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
By far, the most common usage of 
<a href="db.xhtml?DoubleFloat">DoubleFloat</a>
is for functions to be graphied. For more information about Axiom's
numerical and graphical facilities, see
<a href="axbook/book-contents.xhtml#chapter7">Graphics</a>
in section 7, 
<a href="axbook/book-contents.xhtml#chapter8">Numeric Functions</a>
in section 8.1, and
<a href="numfloat.xhtml">Float</a>

The usual arithmetic and elementary functions are available for
<a href="db.xhtml?DoubleFloat">DoubleFloat</a>. Use 
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="showcall('p11');"
   value=")show DoubleFloat"/>
  <div id="ansp11"><div></div></div>
 </li>
</ul>
to get a list of operations.
 </body>
</html>
