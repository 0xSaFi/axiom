<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Cardinal Numbers</div>
  <hr/>
The <a href="dbopcardinalnumber.xhtml">CardinalNumber</a> can be used for
values indicating the cardinality of sets, both finite and infinite. For
example, the <a href="dbopdimension.xhtml">dimension</a> operation in the
category <a href="dbopvectorspace.xhtml">VectorSpace</a> returns a cardinal
number.

The non-negative integers have a natural construction as cardinals
<pre>
0=#{ }, 1={0}, 2={0,1}, ..., n={i | 0 &#60;= i &#60; n}
</pre>
The fact that 0 acts as a zero for the multiplication of cardinals is
equivalent to the axiom of choice.

Cardinal numbers can be created by conversion from non-negative integers.
 <ul>
  <li>
   <input type="submit" id="p1" class="subbut" onclick="makeRequest('p1');"
     value="c0:=0::CardinalNumber" />
   <div id="ansp1"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p2" class="subbut" onclick="makeRequest('p2');"
     value="c1:=1::CardinalNumber" />
   <div id="ansp2"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p3" class="subbut" onclick="makeRequest('p3');"
     value="c2:=2::CardinalNumber" />
   <div id="ansp3"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p4" class="subbut" onclick="makeRequest('p4');"
     value="c3:=3::CardinalNumber" />
   <div id="ansp4"><div></div></div>
  </li>
 </ul>
The can also be obtained as the named cardinal Aleph(n)
 <ul>
  <li>
   <input type="submit" id="p5" class="subbut" onclick="makeRequest('p5');"
     value="A0:=Aleph 0" />
   <div id="ansp5"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p6" class="subbut" onclick="makeRequest('p6');"
     value="A1:=Aleph 1" />
   <div id="ansp6"><div></div></div>
  </li>
 </ul>
The <a href="dbopfiniteq.xhtml">finite?</a> operation tests whether a value
is a finite cardinal, that is, a non-negative integer.
 <ul>
  <li>
   <input type="submit" id="p7" class="subbut" 
     onclick="handleFree(['p3','p7']);"
     value="finite? c2" />
   <div id="ansp7"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p8" class="subbut" 
     onclick="handleFree(['p5','p8']);"
     value="finite? A0" />
   <div id="ansp8"><div></div></div>
  </li>
 </ul>
Similarly, the <a href="dbopcountableq.xhtml">countable?</a> operation
determines whether a value is a countable cardinal, that is, finite or
Aleph(0).
 <ul>
  <li>
   <input type="submit" id="p9" class="subbut" 
     onclick="handleFree(['p3','p9']);"
     value="countable? c2" />
   <div id="ansp9"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p10" class="subbut" 
     onclick="handleFree(['p5','p10']);"
     value="countable? A0" />
   <div id="ansp10"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p11" class="subbut" 
     onclick="handleFree(['p6','p11']);"
     value="countable? A1" />
   <div id="ansp11"><div></div></div>
  </li>
 </ul>
Arithmetic operations are defined on cardinal numbers as follows:
<table>
 <tr>
  <td>
   x+y = #(X+Y)
  </td>
  <td>
   cardinality of the disjoint union
  </td>
 </tr>
 <tr>
  <td>
   x-y = #(X-Y)
  </td>
  <td>
   cardinality of the relative complement
  </td>
 </tr>
 <tr>
  <td>
   x*y = #(X*Y)
  </td>
  <td>
   cardinality of the Cartesian product
  </td>
 </tr>
 <tr>
  <td>
   x+*y = #(X**Y)
  </td>
  <td>
   cardinality of the set of maps from Y to X
  </td>
 </tr>
</table>
Here are some arithmetic examples:
 <ul>
  <li>
   <input type="submit" id="p12" class="subbut" 
     onclick="handleFree(['p3','p6','p12']);"
     value="[c2+c2,c1+A1]" />
   <div id="ansp12"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p13" class="subbut" 
     onclick="handleFree(['p1','p2','p3','p5','p6','p13']);"
     value="[c0*c2,c1*c2,c2*c2,c0*A1,c1*A1,c2*A1,A0*A1]" />
   <div id="ansp13"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p14" class="subbut" 
     onclick="handleFree(['p1','p2','p3','p6','p14']);"
     value="[c2**c0,c2**c1,c2**c2,A1**c0,A1**c1,A1**c2]" />
   <div id="ansp14"><div></div></div>
  </li>
 </ul>
Subtraction is a partial operation; it is not defined when subtracting
a larger cardinal from a smaller one, nor when subtracting two equal
infinite cardinals.
 <ul>
  <li>
   <input type="submit" id="p15" class="subbut" 
     onclick="handleFree(['p2','p3','p4','p5','p6','p15']);"
     value="[c2-c1,c2-c2,c2-c3,A1-c2,A1-A0,A1-A1]" />
   <div id="ansp15"><div></div></div>
  </li>
 </ul>
The generalized continuum hypothesis asserts that
<pre>
 2**Aleph i = Aleph(i+1)
</pre>
and is independent of the axioms of set theory. (Goedel, The consistency
of the continuum hypothesis, Ann. Math. Studies, Princeton Univ. Press,
1940) The <a href="dbopcardinalnumber.xhtml">CardinalNumber</a> domain 
provides an operation to assert whether the hypothesis is to be assumed.
 <ul>
  <li>
   <input type="submit" id="p16" class="subbut" 
     onclick="makeRequest('p16');"
     value="generalizedContinuumHypothesisAssumed true" />
   <div id="ansp16"><div></div></div>
  </li>
 </ul>
When the generalized continuum hypothesis is assumed, exponentiation to
a transfinite power is allowed.
 <ul>
  <li>
   <input type="submit" id="p17" class="subbut" 
     onclick="handleFree(['p1','p2','p3','p5','p6','p17']);"
     value="[c0**A0,c1**A0,c2**A0,A0**A0,A0**A1,A1**A0,A1**A1]" />
   <div id="ansp17"><div></div></div>
  </li>
 </ul>
Three commonly encountered cardinal numbers are
<pre>
  a = #Z                 countable infinity
  c = #R                 the continuum
  f = #{g|g: [0,1]->R}
</pre>
In this domain, these values are obtained under the generalized continuum
hypothesis in this way:
 <ul>
  <li>
   <input type="submit" id="p18" class="subbut" 
     onclick="makeRequest('p18');"
     value="a:=Aleph 0" />
   <div id="ansp18"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p19" class="subbut" 
     onclick="handleFree(['p18','p19']);"
     value="c:=2**a" />
   <div id="ansp19"><div></div></div>
  </li>
  <li>
   <input type="submit" id="p20" class="subbut" 
     onclick="handleFree(['p18','p19','p20']);"
     value="f:=2**c" />
   <div id="ansp20"><div></div></div>
  </li>
 </ul>
 </body>
</html>
