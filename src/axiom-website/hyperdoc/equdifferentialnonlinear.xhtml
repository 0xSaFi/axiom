<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #FFFF66;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#FFFF66;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#FFFF66;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">
   Closed-Form Solutions of Non-Linear Differential Equations
  </div>
  <hr/>
This is an example that shows how to solve a non-linear first order 
ordinary differential equation manually when an integrating factor can
be found just by integration. At the end, we show you how to solve it
directly.

Let's solve the differential equation
<pre>
  y' = y/(x + y log y)
</pre>
Using the notation
<pre>
  m(x,y)+n(x,y)y' = 0
</pre>
we have m=-y and n=x+y*log y
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="m:=-y" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value="n:=x+y*log y" />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
We first check for exactness, that is, does dm/dy=dn/dx?
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="handleFree(['p1','p2','p3']);"
    value="D(m,y)-D(n,x)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
This is not zero, so the equation is not exact. Therefore we must look
for an integrating factor, that is, a function mu(x,y) such that 
d(mu m)/dy=d(mu n)/dx. Normally, we first search for mu(x,y) depending only
on x or only on y. Let's search for such a mu(x) first.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="makeRequest('p4');"
    value="mu:=operator 'mu" />
  <div id="ansp4"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p5']);"
    value="a:=D(mu(x)*m,y)-D(mu(x)*n,x)" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
If the above is zero for a function mu that does not depend on y, then
mu(x) is an integrating factor.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p5','p6']);"
    value="solve(a=0,mu,x)" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
The solution depends on y, so there is no integrating factor that depends
on x only. Let's look for on that depends on y only.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p7']);"
    value="b:=D(mu(y)*m,y)-D(mu(y)*n,x)" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p7','p8']);"
    value="sb:=solve(b=0,mu,y)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
We've found one. The above mu(y) is an integrating factor. We must multiply
our initial equation (that is, m and n) by the integrating factor.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p7','p8','p9']);"
    value="intFactor:=sb.basis.1" />
  <div id="ansp9"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p7','p8','p9','p10']);"
    value="m:=intFactor*m" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p7','p8','p9','p11']);"
    value="n:=intFactor*n" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
Let's check for exactness.
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p7','p8','p9','p10','p11','p12']);"
    value="D(m,y)-D(n,x)" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
We must solve the exact equation, that is, find a function s(x,y) such that
ds/dx=m and ds/dy=n. We start by writing 
<pre>
  s(x,y) = h(y) + integrate(m,x)
</pre>
where h(y) is an unknown function of y. This guarantees that ds/dx=m.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="makeRequest('p13');"
    value="h:=operator 'h" />
  <div id="ansp13"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p14" class="subbut" 
    onclick="handleFree(['p1','p2','p4','p7','p8','p9','p10','p13','p14']);"
    value="sol:=h y+integrate(m,x)" />
  <div id="ansp14"><div></div></div>
 </li>
</ul>
All we want is to find h(y) such that ds/dy=n.
<ul>
 <li>
  <input type="submit" id="p15" class="subbut" 
    onclick=
     "handleFree(['p1','p2','p4','p7','p8','p9','p10','p13','p14','p15']);"
    value="dsol:=D(sol,y)" />
  <div id="ansp15"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick=
   "handleFree(['p1','p2','p4','p7','p8','p9','p10','p13','p14','p15','p16']);"
    value="nsol:=solve(dsol=n,h,y)" />
  <div id="ansp16"><div></div></div>
 </li>
</ul>
The above particular solution is the h(y) we want, so we just replace h(y)
by it in the implicit solution.
<ul>
 <li>
  <input type="submit" id="p17" class="subbut" 
    onclick=
"handleFree(['p1','p2','p4','p7','p8','p9','p10','p13','p14','p15','p16','p17']);"
    value="eval(sol,h y=nsol.particular)" />
  <div id="ansp17"><div></div></div>
 </li>
</ul>
A first integral of the initial equation is obtained by setting this result
equal to an arbitrary constant.

Now that we've seen how to solve the equation "by hand" we show you how to 
do it with the <a href="dbopsolve.xhtml">solve</a> operation. First define
y to be an operator.
<ul>
 <li>
  <input type="submit" id="p18" class="subbut" 
    onclick="makeRequest('p18');"
    value="y:=operator 'y" />
  <div id="ansp18"><div></div></div>
 </li>
</ul>
Next we create the differential equation.
<ul>
 <li>
  <input type="submit" id="p19" class="subbut" 
    onclick="handleFree(['p18','p19']);"
    value="deq:=D(y x,x)=y(x)/(x+y(x)*log y x)" />
  <div id="ansp19"><div></div></div>
 </li>
</ul>
Finally, we solve it.
<ul>
 <li>
  <input type="submit" id="p20" class="subbut" 
    onclick="handleFree(['p18','p19','p20']);"
    value="solve(deq,y,x)" />
  <div id="ansp20"><div></div></div>
 </li>
</ul>
 </body>
</html>
