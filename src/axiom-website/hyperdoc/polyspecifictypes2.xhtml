<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">UnivariatePolynomial</div>
  <hr/>
The domain constructor 
<a href="db.xhtml?UnivariatePolynomial">UnivariatePolynomial</a> 
(abbreviated <a href="db.xhtml?UnivariatePolynomial">UP</a>)
creates domains of univariate polynomials in a specified variable.
For example, the domain UP(a1,POLY FRAC INT) provides polynomials in
the single variable a1 whose coefficients are general polynomials with
rational number coefficients.
<hr/>
<b>Restriction:</b><br/>
Axiom does not allow you to create types where
<a href="db.xhtml?UnivariatePolynomial">UnivariatePolynomial</a> 
is contained in the coefficient type of 
<a href="db.xhtml?Polynomial">Polynomial</a>.
Therefore, UP(x,POLY INT) is legal but POLY UP(x,INT) is not.
<hr/>
UP(x,INT) is the domain of polynomials in the single variable x with
integer coefficients.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="(p,q):UP(x,INT)" />
  <div id="ansp1"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="makeRequest('p2');"
    value="p:=(3*x-1)^2*2*(2*x+8)" />
  <div id="ansp2"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="q:=(1-6*x+9*x^2)^2" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
The usual arithmetic operations are available for univariate polynomials.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4']);"
    value="p^2+p*q" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
The operation 
<a href="dbopleadingcoefficient.xhtml">leadingCoefficient</a>
extracts the coefficient of the term of highest degree.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p1','p2','p5']);"
    value="leadingCoefficient p" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
The operation <a href="dbopdegree.xhtml">degree</a> returns the degree of
the polynomial. Since the polynomial has only one variable, the variable
is not supplied to operations like <a href="dbopdegree.xhtml">degree</a>.
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p1','p2','p6']);"
    value="degree p" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
The reductum of the polynomial, the polynomial obtained by subtracting
the term of highest order, is returned by 
<a href="dbopreductum.xhtml">reductum</a>.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p1','p2','p7']);"
    value="reductum p" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
The operation <a href="dbopgcd.xhtml">gcd</a> computes the greatest common
divisor of two polynomials.
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p8']);"
    value="gcd(p,q)" />
  <div id="ansp8"><div></div></div>
 </li>
</ul>
The operation <a href="dboplcm.xhtml">lcm</a> computes the least common 
multiple.
<ul>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p9']);"
    value="lcm(p,q)" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
The operation <a href="dbopresultant.xhtml">resultant</a> computes the
resultant of two univariate polynomials. In the case of p and q, the
resultant is 0 because they share a common root.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p10']);"
    value="resultant(p,q)" />
  <div id="ansp10"><div></div></div>
 </li>
</ul>
To compute the derivative of a univariate polynomial with respect to 
its variable, use <a href="dbopd.xhtml">D</a>.
<ul>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p1','p2','p11']);"
    value="D p" />
  <div id="ansp11"><div></div></div>
 </li>
</ul>
Univariate polynomials can also be used as if they were functions.
To evaluate a univariate polynomial at some point, apply the polynomial
to the point.
<ul>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p1','p2','p12']);"
    value="p(2)" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
The same syntax is used for composing two univariate polynomials, i.e.
substituting one polynomial for the variable in another. This substitutes q
for the variable in p.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p13']);"
    value="p(q)" />
  <div id="ansp13"><div></div></div>
 </li>
</ul>
This substitutes p for the variable in q.
<ul>
 <li>
  <input type="submit" id="p14" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p14']);"
    value="q(p)" />
  <div id="ansp14"><div></div></div>
 </li>
</ul>
To obtain a list of coefficients of the polynomial, use
<a href="dbopcoefficients.xhtml">coefficients</a>.
<ul>
 <li>
  <input type="submit" id="p15" class="subbut" 
    onclick="handleFree(['p1','p2','p15']);"
    value="l:=coefficients p" />
  <div id="ansp15"><div></div></div>
 </li>
</ul>
From this you can use <a href="dbopgcd.xhtml">gcd</a> and
<a href="dbopreduce.xhtml">reduce</a> to compute the contents of the
polynomial.
<ul>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick="handleFree(['p1','p2','p15','p16']);"
    value="reduce(gcd,l)" />
  <div id="ansp16"><div></div></div>
 </li>
</ul>
Alternatively (and more easily), you can just call
<a href="dbopcontent.xhtml">content</a>
<ul>
 <li>
  <input type="submit" id="p17" class="subbut" 
    onclick="handleFree(['p1','p2','p17']);"
    value="content p" />
  <div id="ansp17"><div></div></div>
 </li>
</ul>
Note that the operation <a href="dbopcoefficients.xhtml">coefficients</a>
omits the zero coefficients from the list. Sometimes it is useful to 
convert a univariate polynomial to a vector whose i-th position contains
the degree i-1 coefficient of the polynomial.
<ul>
 <li>
  <input type="submit" id="p18" class="subbut" 
    onclick="makeRequest('p18');"
    value="ux:=(x^4+2*x+3)::UP(x,INT)" />
  <div id="ansp18"><div></div></div>
 </li>
</ul>
To get a complete vector of coefficients, use the operation 
<a href="dbopvectorise.xhtml">vectorise</a>, which takes a univariate
polynomial and an integer denoting the length of the desired vector.
<ul>
 <li>
  <input type="submit" id="p19" class="subbut" 
    onclick="handleFree(['p18','p19']);"
    value="vectorise(ux,5)" />
  <div id="ansp19"><div></div></div>
 </li>
</ul>
It is common to want to do something to every term of a polynomial, 
creating a new polynomial in the process. This is a function for
iterating across the terms of a polynomial, squaring each term.
<ul>
 <li>
  <input type="submit" id="p20" class="subbut" 
    onclick="makeRequest('p20');"
    value="squareTerms(m)==reduce(+,[t^2 for t in monomials m])" />
  <div id="ansp20"><div></div></div>
 </li>
</ul>
Recall what p looked like.
<ul>
 <li>
  <input type="submit" id="p21" class="subbut" 
    onclick="handleFree(['p1','p2','p21']);"
    value="p" />
  <div id="ansp21"><div></div></div>
 </li>
</ul>
We can demonstrate squareTerms on p.
<ul>
 <li>
  <input type="submit" id="p22" class="subbut" 
    onclick="handleFree(['p1','p2','p20','p22']);"
    value="squareTerms p" />
  <div id="ansp22"><div></div></div>
 </li>
</ul>
When the coefficients of the univariate polynomial belong to a field,
(for example, when the coefficients are rational numbers, as opposed to
integers. The important property of a field is that non-zero elements can
be divided and produce another element. The quotient of the integers 2 and 3
is not another integer.) It is possible to compute quotients and remainders.
<ul>
 <li>
  <input type="submit" id="p23" class="subbut" 
    onclick="makeRequest('p23');"
    value="(r,s):UP(a1,FRAC INT)" />
  <div id="ansp23"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p24" class="subbut" 
    onclick="handleFree(['p23','p24']);"
    value="r:=a1^2-2/3" />
  <div id="ansp24"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p25" class="subbut" 
    onclick="handleFree(['p23','p25']);"
    value="s:=a1+4" />
  <div id="ansp25"><div></div></div>
 </li>
</ul>
When the coefficients are rational numbers or rational expressions, the
operation <a href="dbopquo.xhtml">quo</a> computes the quotient of two
polynomials.
<ul>
 <li>
  <input type="submit" id="p26" class="subbut" 
    onclick="handleFree(['p23','p24','p25','p26']);"
    value="r quo s" />
  <div id="ansp26"><div></div></div>
 </li>
</ul>
The operation <a href="dboprem.xhtml">rem</a> computes the remainder.
<ul>
 <li>
  <input type="submit" id="p27" class="subbut" 
    onclick="handleFree(['p23','p24','p25','p27']);"
    value="r rem s" />
  <div id="ansp27"><div></div></div>
 </li>
</ul>
The operation <a href="dbopdivide.xhtml">divide</a> can be used to return
a record of both components.
<ul>
 <li>
  <input type="submit" id="p28" class="subbut" 
    onclick="handleFree(['p23','p24','p25','p28']);"
    value="d:=divide(r,s)" />
  <div id="ansp28"><div></div></div>
 </li>
</ul>
Now we check the arithmetic.
<ul>
 <li>
  <input type="submit" id="p29" class="subbut" 
    onclick="handleFree(['p23','p24','p25','p28','p29']);"
    value="r-(d.quotient*s+d.remainder)" />
  <div id="ansp29"><div></div></div>
 </li>
</ul>
It is also possible to integrate univariate polynomials when the 
coefficients belong to a field.
<ul>
 <li>
  <input type="submit" id="p30" class="subbut" 
    onclick="handleFree(['p23','p24','p30']);"
    value="integrate r" />
  <div id="ansp30"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p31" class="subbut" 
    onclick="handleFree(['p23','p25','p31']);"
    value="integrate s" />
  <div id="ansp31"><div></div></div>
 </li>
</ul>
One application of univariate polynomials is to see expressions in terms of
a specific variable. We start with a polynomial in a1 whose coefficients are
quotients of polynomials in b1 and b2.
<ul>
 <li>
  <input type="submit" id="p32" class="subbut" 
    onclick="makeRequest('p32');"
    value="t:UP(a1,FRAC POLY INT)" />
  <div id="ansp32"><div></div></div>
 </li>
</ul>
Since in this case we are not talking about using multivariate polynomials
in only two variables, we use <a href="db.xhtml?Polynomial">Polynomial</a>.
We also use <a href="db.xhtml?Fraction">Fraction</a> because we want fractions.
<ul>
 <li>
  <input type="submit" id="p33" class="subbut" 
    onclick="handleFree(['p32','p33']);"
    value="t:=a1^2-a1/b2+(b1^2-b1)/(b2+3)" />
  <div id="ansp33"><div></div></div>
 </li>
</ul>
We push all the variables into a single quotient of polynomials.
<ul>
 <li>
  <input type="submit" id="p34" class="subbut" 
    onclick="handleFree(['p32','p33','p34']);"
    value="u:FRAC POLY INT:=t" />
  <div id="ansp34"><div></div></div>
 </li>
</ul>
Alternatively, we can view this as a polynomial in the variable. This is a
mode-directed conversion: You indicate as much of the structure as you care
about and let Axiom decide on the full type and how to do the transformation.
<ul>
 <li>
  <input type="submit" id="p35" class="subbut" 
    onclick="handleFree(['p32','p33','p34','p35']);"
    value="u::UP(b1,?)" />
  <div id="ansp35"><div></div></div>
 </li>
</ul>
See <a href="axbook/section-8.2.xhtml">Polynomial Factorization</a> for a
discussion of the factorization facilities in Axiom for univariate
polynomials. For more information on related topics, see
<a href="axbook/section-1.8.xhtml">Polynomials</a>,
<a href="axbook/section-2.7.xhtml">Conversion</a>,
<a href="polyspecifictypes1.xhtml">Polynomial</a>,
<a href="polyspecifictypes3.xhtml">MultivariatePolynomial</a>, and
<a href="polyspecifictypes4.xhtml">DistributedMultivariatePolynomial</a>.
Issue the system command
<ul>
 <li>
  <input type="submit" id="p36" class="subbut" 
    onclick="showcall('p36');"
   value=")show UnivariatePolynomial"/>
  <div id="ansp36"><div></div></div>
 </li>
</ul>
to display the full list of operations defined by
<a href="db.xhtml?UnivariatePolynomial">UnivariatePolynomial</a>.
 </body>
</html>
