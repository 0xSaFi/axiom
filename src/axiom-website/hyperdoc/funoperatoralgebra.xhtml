<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
 <head>
  <meta http-equiv="Content-Type" content="text/html" charset="us-ascii"/>
  <title>Axiom Documentation</title>
  <style>

   html {
     background-color: #ECEA81;
   }

   body { 
     margin: 0px;
     padding: 0px;
   }

   div.command { 
     color:red;
   }

   div.center {
     color:blue;
   }

   div.reset {
     visibility:hidden;
   }

   div.mathml { 
     color:blue;
   }

   input.subbut {
     background-color:#ECEA81;
     border: 0;
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   input.noresult {
     background-color:#ECEA81;
     border: 0;
     color:black;
     font-family: "Courier New", Courier, monospace;
   }

   span.cmd { 
     color:green;
     font-family: "Courier New", Courier, monospace;
   }

   pre {
     font-family: "Courier New", Courier, monospace;
   }
  </style>
  <script type="text/javascript">
<![CDATA[
     // This is a hash table of the values we've evaluated.
     // This is indexed by a string argument. 
     // A value of 0 means we need to evaluate the expression
     // A value of 1 means we have evaluated the expression
   Evaled = new Array();
     // this says we should modify the page
   hiding = 'show';
     // and this is the id of the div tag to modify (defaulted)
   thediv = 'mathAns';
     // commandline will mark that its arg has been evaled so we don't repeat
   function commandline(arg) {
     Evaled[arg] = 0;  // remember that we have set this value
     thediv='ans'+arg; // mark where we should put the output
     var ans = document.getElementById(arg).value;
     return(ans);
   }
   // the function only modifies the page if when we're showing the
   // final result, otherwise it does nothing.
   function showanswer(mathString,indiv) {
     if (hiding == 'show') { // only do something useful if we're showing
       indiv = thediv;  // override the argument so we can change it
       var mystr = mathString.split("</div>");
       for (var i=0; i < mystr.length; i++) {
         if (mystr[i].indexOf("mathml") > 0) {
           var mymathstr = mystr[i].concat("</div>");
         }
       }
       // this turns the string into a dom fragment
       var mathRange = document.createRange();
       var mathBox=
               document.createElementNS('http://www.w3.org/1999/xhtml','div');
       mathRange.selectNodeContents(mathBox);
       var mymath = mathRange.createContextualFragment(mymathstr);
       mathBox.appendChild(mymath);
       // now we need to format it properly
       // and we stick the result into the requested div block as a child.
       var mathAns = document.getElementById(indiv);
       mathAns.removeChild(mathAns.firstChild);
       mathAns.appendChild(mathBox);
     }
   }
   // this function takes a list of expressions ids to evaluate
   // the list contains a list of "free" expression ids that need to
   // be evaluated before the last expression. 
   // For each expression id, if it has not yet been evaluated we
   // evaluate it "hidden" otherwise we can skip the expression.
   // Once we have evaluated all of the free expressions we can
   // evaluate the final expression and modify the page.
   function handleFree(arg) {
     var placename = arg.pop();      // last array val is real
     var mycnt = arg.length;         // remaining free vars
       // we handle all of the prerequired expressions quietly
     hiding = 'hide';
     for (var i=0; i<mycnt; i++) {   // for each of the free variables
       if (Evaled[arg[i]] == null) { // if we haven't evaled it
         Evaled[arg[i]] = 0;         // remember we evaled it
         makeRequest(arg[i]);        // initialize the free values
       }
     }
       // and now we start talking to the page again
     hiding = 'show';                // we want to show this
     thediv = 'ans'+placename;       // at this div id
     makeRequest(placename);         // and we eval and show it
   }
]]>
<![CDATA[
  function ignoreResponse() {}
  function resetvars() {
    http_request = new XMLHttpRequest();         
    http_request.open('POST', '127.0.0.1:8085', true);
    http_request.onreadystatechange = ignoreResponse;
    http_request.setRequestHeader('Content-Type', 'text/plain');
    http_request.send("command=)clear all");
    return(false);
  }
]]>
 function init() {
 }
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
 }
 function lispcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("lispcall="+command);
   return(false);
 }
 function showcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("showcall="+command);
   return(false);
 }
 function interpcall(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("interpcall="+command);
   return(false);
 }
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }

  </script>
 </head>
 <body onload="resetvars();">
  <div align="center"><img align="middle" src="doctitle.png"/></div>
  <hr/>
  <div align="center">Operator</div>
  <hr/>
Given any ring R, the ring of the <a href="db.xhtml?Integer">Integer</a>
linear operators over R is called <a href="db.xhtml?Operator">Operator(R)</a>.
To create an operator over R, first create a basic operator using the
operation <a href="dbopoperator.xhtml">operator</a>, and then convert it
to <a href="db.xhtml?Operator">Operator(R)</a> for the R you want. We choose R
to be the two by two matrices over the integers.
<ul>
 <li>
  <input type="submit" id="p1" class="subbut" 
    onclick="makeRequest('p1');"
    value="R:=SQMATRIX(2,INT)" />
  <div id="ansp1"><div></div></div>
 </li>
</ul>
Create the operator tilde on R
<ul>
 <li>
  <input type="submit" id="p2" class="subbut" 
    onclick="handleFree(['p1','p2']);"
    value='t:=operator("tilde")::OP(R)' />
  <div id="ansp2"><div></div></div>
 </li>
</ul>
Since  <a href="db.xhtml?Operator">Operator</a> is unexposed we must either
package-call operations from it, or expose it explicitly. For convenience
we will do the latter.
<ul>
 <li>
  <input type="submit" id="p3" class="noresult" 
    onclick="makeRequest('p3');"
    value=")set expose add constructor Operator" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
To attach an evaluation function (from R to R) to an operator over R, use
evaluate(op,f) where op is an operator over R and f is a function R->R.
This needs to be done only once when the operator is defined. Note that f
must be <a href="db.xhtml?Integer">Integer</a> linear (that is, 
<pre>
  f(ax+y) = a f(x) + f(y)
</pre>
for any integer a and any x and y in R). We now attach the transpose map
to the above operator t.
<ul>
 <li>
  <input type="submit" id="p4" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4']);"
    value="evaluate(t,m+->transpose m)" />
  <div id="ansp4"><div></div></div>
 </li>
</ul>
Operators can be manipulated formally as in any ring: 
<a href="dbopplus.xhtml">+</a> is the pointwise addition and 
<a href="dbopstar.xhtml">*</a> is composition. Any element x of R can
be converted to an operator op_x over R, and the evaluation function of
op_x is left-multiplication by x. Multiplying on the left by this matrix
swaps the two rows.
<ul>
 <li>
  <input type="submit" id="p5" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5']);"
    value="s:R:=matrix [[0,1],[1,0]]" />
  <div id="ansp5"><div></div></div>
 </li>
</ul>
Can you guess what is the action of the following operator?
<ul>
 <li>
  <input type="submit" id="p6" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6']);"
    value="rho:=t*s" />
  <div id="ansp6"><div></div></div>
 </li>
</ul>
Hint: applying rho four times gives the identity, so rho^4-1
should return 0 when applied to any two by two matrix.
<ul>
 <li>
  <input type="submit" id="p7" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6','p7']);"
    value="z:=rho^4-1" />
  <div id="ansp7"><div></div></div>
 </li>
</ul>
Now check with this matrix
<ul>
 <li>
  <input type="submit" id="p8" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p8']);"
    value="m:R:=matrix [[1,2],[3,4]]" />
  <div id="ansp8"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p9" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6','p7','p8','p9']);"
    value="z m" />
  <div id="ansp9"><div></div></div>
 </li>
</ul>
As you have probably guessed by now, rho acts on matrices by rotating
the elements clockwise.
<ul>
 <li>
  <input type="submit" id="p10" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6','p8','p10']);"
    value="rho m" />
  <div id="ansp10"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p11" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6','p8','p11']);"
    value="rho rho m" />
  <div id="ansp11"><div></div></div>
 </li>
 <li>
  <input type="submit" id="p12" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6','p8','p12']);"
    value="(rho**3) m" />
  <div id="ansp12"><div></div></div>
 </li>
</ul>
Do the swapping of rows and transposition commute? We can check by computing
their bracket.
<ul>
 <li>
  <input type="submit" id="p13" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6','p8','p13']);"
    value="b:=t*s-s*t" />
  <div id="ansp13"><div></div></div>
 </li>
</ul>
Now apply it to m.
<ul>
 <li>
  <input type="submit" id="p14" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p4','p5','p6','p8','p13','p14']);"
    value="b m" />
  <div id="ansp14"><div></div></div>
 </li>
</ul>

Next we demonstrate how to define a differential operator on a polynomial
ring. This is the recursive definition of the nth Legendre polynomial.
<ul>
 <li>
  <input type="submit" id="p15" class="noresult" 
    onclick="makeRequest('p15');"
    value="L n==( n=0 => 1 ; n=1 => x ; (2*n-1)/n*x*L(n-1)-(n-1)/n*L(n-2) )" />
  <div id="ansp15"><div></div></div>
 </li>
</ul>
Create the differential operator d/dx on polynomials in x over the rational
numbers.
<ul>
 <li>
  <input type="submit" id="p16" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p16']);"
    value='dx:=operator("D")::OP(POLY FRAC INT)' />
  <div id="ansp16"><div></div></div>
 </li>
</ul>
Now attach a map to it.
<ul>
 <li>
  <input type="submit" id="p17" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p16','p17']);"
    value="evaluate(dx,p+->D(p,'x))" />
  <div id="ansp17"><div></div></div>
 </li>
</ul>
This is the differential equation satisfied by the nth Legendre polynomial.
<ul>
 <li>
  <input type="submit" id="p18" class="noresult" 
    onclick="handleFree(['p1','p2','p3','p16','p17','p18']);"
    value="E n == (1-x^2)*dx^2-2*x*dx+n*(n+1)" />
  <div id="ansp18"><div></div></div>
 </li>
</ul>
Now we verify this for n=15. Here is the polynomial.
<ul>
 <li>
  <input type="submit" id="p19" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p15','p19']);"
    value="L 15" />
  <div id="ansp19"><div></div></div>
 </li>
</ul>
Here is the operator.
<ul>
 <li>
  <input type="submit" id="p20" class="subbut" 
    onclick="handleFree(['p1','p2','p3','p16','p17','p18','p20']);"
    value="E 15" />
  <div id="ansp20"><div></div></div>
 </li>
</ul>
Here is the evaluation.
<ul>
 <li>
  <input type="submit" id="p21" class="subbut" 
    onclick=
 "handleFree(['p1','p2','p3','p15','p16','p17','p18','p19','p20','p21']);"
    value="(E 15)(L 15)" />
  <div id="ansp21"><div></div></div>
 </li>
</ul>
 </body>
</html>
