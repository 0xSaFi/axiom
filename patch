books/bookvolbib add proof references

Goal: Proving Axiom Correct
 
\index{Platzer, Andre}
\index{Quesel, Jan-David}
\index{Rummer, Philipp}
\begin{chunk}{axiom.bib}
@article{Plat09,
  author = "Platzer, Andre and Quesel, Jan-David and Rummer, Philipp",
  title = "Real World Verification",
  journal = "LNCS",
  volume = "5663",
  year = "2009",
  pages = "495-501",
  link = "\url{http://www.cs.cmu.edu/~aplatzer/pub/rwv.pdf}",
  abstract =
    "Scalable handling of real arithmetic is a crucial part of the
    verification of hybrid systems, mathematical algorithms, and mixed
    analog/digital circuits.  Despite substantial advances in verification
    technology, complexity issues with classical decision procedures are
    still a major obstacle for formal verification of real-world
    applications, e.g., in automotive and avionic industries.  To identify
    strengths and weaknesses, we examine state of the art symbolic
    techniques and implementations for the universal fragment of
    real-closed fields: approaches based on quantifier elimination,
    Groebner Bases, and semidefinite programming for the
    Positivstellensatz. Within a uniform context of the verification tool
    KeYmaera, we compare these approaches qualitatively and quantitatively
    on verification benchmarks from hybrid systems, textbook algorithms,
    and on geometric problems. Finally, we introduce a new decision
    procedure combining Groebner Bases and semidefinite programming for
    the real Nullstellensatz that outperforms the individual approaches on
    an interesting set of problems.",
  paper = "Plat09,pdf"
}  

\end{chunk}

\index{Krebbers, Robbert Jan}
\index{Wiedijk, Freek}
\begin{chunk}{axiom.bib}
@misc{Kreb15a,
  author = "Krebbers, Robbert and Wiedijk, Freek",
  title = "A Typed C11 Semantics for Interactive Theorem Proving",
  year = "2015",
  link = "\url{http://robbertkrebbers.nl/research/articles/interpreter.pdf}",
  abstract =
    "We present a semantics of a significant fragment of the C programming
    language as described by the C11 standard. It consists of a small step
    semantics of a core language, which uses a structured memory model to
    capture subtleties of C11, such as strict-aliasing restrictions
    related to unions, that have not yet been addressed by others. The
    semantics of actual C programs is defined by translation into this
    core language. We have an explicit type system for the core language,
    and prove type preservation and progress, as well as type correctness
    of the translation.
    
    Due to unspecified order of evaluation, our operational semantics is
    non-deterministic. To explore all defined and undefined behaviors, we
    present an executable semantics that computes a stream of finite sets
    of reachable states. It is proved sound and complete with respect to
    the operational semantics.
    
    Both the translation into the core language and the executable
    semantics are defined as Coq programs.  Extraction to OCaml is used to
    obtain a C interpreter to run and test the semantics on actual C
    programs. All proofs are fully formalized in Coq.",
  paper = "Kreb15a.pdf"
}

\end{chunk}

\index{Krebbers, Robbert Jan}
\begin{chunk}{axiom.bib}
@misc{Kreb17,
  author = "Krebbers, Robbert Jan",
  title = {The CH$_2$O formalization of ISO C11},
  year = "2017",
  link = "\url{http://robbertkrebbers.nl/research/ch2o/}"
}

\end{chunk}

 
\index{Liskov, Barbara}
\index{Synder, Alan}
\index{Atkinson, Russell}
\index{Schaffert, Craig}
\begin{chunk}{axiom.bib}
@article{Lisk77,
  author = "Liskov, Barbara and Synder, Alan and Atkinson, Russell and
            Schaffert, Craig",
  title = "Abstraction Mechanisms in CLU",
  journal = "CACM",
  volume = "20",
  number = "8",
  year = "1977",
  link = "\url{https://www.cs.virginia.edu/~weimer/615/reading/liskov-clu-abstraction.pdf}",
  abstract =
    "CLU is a new programming language designed to support the use of
    abstractions in program construction. Work in programming methodology
    has led to the realization that three kinds of abstractions --
    procedural, control, and especially data abstractions -- are useful in
    the programming process. Of these, only the procedural abstraction is
    supported well by conventional languages, through the procedure or
    subroutine. CLU provides, in addition to procedures, novel linguistic
    mechanisms that support the use of data and control abstractions. This
    paper provides an introduction to the abstraction mechanisms of
    CLU. By means of programming examples, the utility of the three kinds
    of abstractions in program construction is illustrated, and it is
    shown how CLU programs may be written to use and implement
    abstractions. The CLU library, which permits incremental program
    development with complete type checking performed at compile time, is
    also discussed.",
  paper = "Lisk77.pdf"
}

\end{chunk}
