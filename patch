src/interp/format.lisp bug 7237: coerce failure fixed

Goal: Axiom Maintenance

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7237: coerce failure}
\begin{verbatim}

)d op coerce
 

There are 194 exposed functions called coerce :
   [1] List(D2) -> D from D if D2 has FIELD and D has AFSPCAT(D2)
   [2] D -> List(D2) from D if D has AFSPCAT(D2) and D2 has FIELD
   [3] D1 -> D from D if D has ALGEBRA(D1) and D1 has COMRING
 
Daly Bug
   >> System error:
   D2 is not of type SEQUENCE.

   Continuing to read the file...

--R 
--R
--RThere are 194 exposed functions called coerce :
--R   [1] List D2 -> D from D if D2 has FIELD and D has AFSPCAT D2
--R   [2] D -> List D2 from D if D has AFSPCAT D2 and D2 has FIELD
--R   [3] D1 -> D from D if D has ALGEBRA D1 and D1 has COMRING
--R   [4] Vector D2 -> AlgebraGivenByStructuralConstants(D2,D3,D4,D5)
--R            from AlgebraGivenByStructuralConstants(D2,D3,D4,D5)
--R            if D2 has FIELD and D5: VECTOR MATRIX D2 and D3: PI and D4
--R            : LIST SYMBOL

\end{verbatim}

Now reads:

(1) -> )d op coerce

There are 195 exposed functions called coerce :
   [1] List(D2) -> D from D if D2 has FIELD and D has AFSPCAT(D2)
   [2] D -> List(D2) from D if D has AFSPCAT(D2) and D2 has FIELD
   [3] D1 -> D from D if D has ALGEBRA(D1) and D1 has COMRING
   [4] Vector(D2) -> AlgebraGivenByStructuralConstants(D2,D3,D4,D5)
             from AlgebraGivenByStructuralConstants(D2,D3,D4,D5)
             if D2 has FIELD and D5: VECTOR(MATRIX(D2)) and D3: PI and 
            D4: LIST(SYMBOL)
   [5] SparseMultivariatePolynomial(Integer,Kernel(AlgebraicNumber))
             -> AlgebraicNumber
             from AlgebraicNumber
   [6] D2 -> Any from AnyFunctions1(D2) if D2 has TYPE
   [7] Vector(FortranExpression([construct,QUOTEJINT,QUOTEX,QUOTEELAM],
            [construct],MachineFloat)) -> Asp10(D2)
             from Asp10(D2) if D2: SYMBOL
   [8] Vector(FortranExpression([construct],[construct,QUOTEXC],
            MachineFloat)) -> Asp19(D2)
             from Asp19(D2) if D2: SYMBOL
   [9] FortranExpression([construct,QUOTEX],[construct],MachineFloat)
             -> Asp1(D2)
             from Asp1(D2) if D2: SYMBOL
   [10] Matrix(FortranExpression([construct],[construct,QUOTEX,QUOTE
            HESS],MachineFloat)) -> Asp20(D2)
             from Asp20(D2) if D2: SYMBOL
   [11] FortranExpression([construct],[construct,QUOTEXC],MachineFloat)
             -> Asp24(D2)
             from Asp24(D2) if D2: SYMBOL
   [12] Vector(FortranExpression([construct,QUOTEX],[construct,QUOTEY],
            MachineFloat)) -> Asp31(D2)
             from Asp31(D2) if D2: SYMBOL
   [13] Vector(FortranExpression([construct],[construct,QUOTEX],
            MachineFloat)) -> Asp35(D2)
             from Asp35(D2) if D2: SYMBOL
   [14] Vector(FortranExpression([construct,QUOTEX,QUOTEEPS],[construct
            ,QUOTEY],MachineFloat)) -> Asp41(D2,D3,D4)
             from Asp41(D2,D3,D4) if D2: SYMBOL and D3: SYMBOL and D4: 
            SYMBOL
   [15] Vector(FortranExpression([construct,QUOTEEPS],[construct,QUOTE
            YA,QUOTEYB],MachineFloat)) -> Asp42(D2,D3,D4)
             from Asp42(D2,D3,D4) if D2: SYMBOL and D3: SYMBOL and D4: 
            SYMBOL
   [16] FortranExpression([construct],[construct,QUOTEX],MachineFloat)
             -> Asp49(D2)
             from Asp49(D2) if D2: SYMBOL
   [17] FortranExpression([construct],[construct,QUOTEX],MachineFloat)
             -> Asp4(D2)
             from Asp4(D2) if D2: SYMBOL
   [18] Vector(FortranExpression([construct],[construct,QUOTEXC],
            MachineFloat)) -> Asp50(D2)
             from Asp50(D2) if D2: SYMBOL
   [19] Vector(FortranExpression([construct],[construct,QUOTEX],
            MachineFloat)) -> Asp55(D2)
             from Asp55(D2) if D2: SYMBOL
   [20] Vector(FortranExpression([construct],[construct,QUOTEX],
            MachineFloat)) -> Asp6(D2)
             from Asp6(D2) if D2: SYMBOL
   [21] Vector(FortranExpression([construct,QUOTEX,QUOTEY],[construct],
            MachineFloat)) -> Asp73(D2)
             from Asp73(D2) if D2: SYMBOL
   [22] Matrix(FortranExpression([construct,QUOTEX,QUOTEY],[construct],
            MachineFloat)) -> Asp74(D2)
             from Asp74(D2) if D2: SYMBOL
   [23] Matrix(FortranExpression([construct,QUOTEX],[construct],
            MachineFloat)) -> Asp77(D2)
             from Asp77(D2) if D2: SYMBOL
   [24] Vector(FortranExpression([construct,QUOTEX],[construct],
            MachineFloat)) -> Asp78(D2)
             from Asp78(D2) if D2: SYMBOL
   [25] Vector(FortranExpression([construct,QUOTEX],[construct,QUOTEY],
            MachineFloat)) -> Asp7(D2)
             from Asp7(D2) if D2: SYMBOL
   [26] Matrix(FortranExpression([construct,QUOTEXL,QUOTEXR,QUOTEELAM],
            [construct],MachineFloat)) -> Asp80(D2)
             from Asp80(D2) if D2: SYMBOL
   [27] FortranExpression([construct,QUOTEX],[construct,QUOTEY],
            MachineFloat) -> Asp9(D2)
             from Asp9(D2) if D2: SYMBOL
   [28] ArrayStack(D2) -> OutputForm from ArrayStack(D2)
             if D2 has SETCAT and D2 has SETCAT
   [29] BinaryExpansion -> RadixExpansion(2) from BinaryExpansion
   [30] BinaryExpansion -> Fraction(Integer) from BinaryExpansion
   [31] List(Integer) -> D from D if D has BLMETCT
   [32] List(CartesianTensor(D2,D3,D4)) -> CartesianTensor(D2,D3,D4)
             from CartesianTensor(D2,D3,D4) if D2: INT and D3: NNI and 
            D4 has COMRING
   [33] List(D4) -> CartesianTensor(D2,D3,D4) from CartesianTensor(D2,
            D3,D4)
             if D4 has COMRING and D2: INT and D3: NNI
   [34] SquareMatrix(D3,D4) -> CartesianTensor(D2,D3,D4)
             from CartesianTensor(D2,D3,D4) if D3: NNI and D4 has 
            COMRING and D2: INT
   [35] DirectProduct(D3,D4) -> CartesianTensor(D2,D3,D4)
             from CartesianTensor(D2,D3,D4) if D3: NNI and D4 has 
            COMRING and D2: INT
   [36] List(D2) -> Database(D2) from Database(D2)
             if D2 has OrderedSetwith
               ?.? : (%,Symbol) -> String
               display : % -> Void
               fullDisplay : % -> Void
   [37] DecimalExpansion -> RadixExpansion(10) from DecimalExpansion
         
   [38] DecimalExpansion -> Fraction(Integer) from DecimalExpansion
   [39] Dequeue(D2) -> OutputForm from Dequeue(D2) if D2 has SETCAT and
            D2 has SETCAT
   [40] DirichletRing(D2) -> Stream(D2) from DirichletRing(D2) if D2
             has RING
   [41] Stream(D2) -> DirichletRing(D2) from DirichletRing(D2) if D2
             has RING
   [42] DirichletRing(D2) -> (PositiveInteger -> D2) from DirichletRing
            (D2)
             if D2 has RING
   [43] (PositiveInteger -> D2) -> DirichletRing(D2) from DirichletRing
            (D2)
             if D2 has RING
   [44] DataList(D2) -> List(D2) from DataList(D2) if D2 has ORDSET
   [45] List(D2) -> DataList(D2) from DataList(D2) if D2 has ORDSET
   [46] SegmentBinding(Expression(D3)) -> SegmentBinding(Float)
             from DrawNumericHack(D3)
             if D3 has Join(OrderedSet,IntegralDomain,ConvertibleTo(
            Float))
   [47] D1 -> D from D if D has DVARCAT(D1) and D1 has ORDSET
   [48] FortranCode -> OutputForm from FortranCode
   [49] FortranExpression(D2,D3,D4) -> Expression(D4)
             from FortranExpression(D2,D3,D4)
             if D2: LIST(SYMBOL) and D3: LIST(SYMBOL) and D4 has FMTC
         
   [50] D2 -> D1 from FiniteFieldHomomorphisms(D2,D3,D1)
             if D3 has FFIELDC and D1 has FAXF(D3) and D2 has FAXF(D3)
            
   [51] D2 -> D1 from FiniteFieldHomomorphisms(D1,D3,D2)
             if D3 has FFIELDC and D1 has FAXF(D3) and D2 has FAXF(D3)
            
   [52] D -> XRecursivePolynomial(D2,D3) from D
             if D has FLALG(D2,D3) and D2 has ORDSET and D3 has COMRING
            
   [53] D -> XDistributedPolynomial(D2,D3) from D
             if D has FLALG(D2,D3) and D2 has ORDSET and D3 has COMRING
            
   [54] D1 -> D from D if D has FLALG(D1,D2) and D1 has ORDSET and D2
             has COMRING
   [55] Record(localSymbols: SymbolTable,code: List(FortranCode)) -> D
             from D
             if D has FMC
   [56] FortranCode -> D from D if D has FMC
   [57] List(FortranCode) -> D from D if D has FMC
   [58] Matrix(MachineFloat) -> D from D if D has FMC
   [59] Record(localSymbols: SymbolTable,code: List(FortranCode)) -> D
             from D
             if D has FMFUN
   [60] FortranCode -> D from D if D has FMFUN
   [61] List(FortranCode) -> D from D if D has FMFUN
   [62] D -> String from D if D has FNCAT
   [63] String -> D from D if D has FNCAT
   [64] D2 -> ScriptFormulaFormat from ScriptFormulaFormat1(D2) if D2
             has SETCAT
   [65] OutputForm -> ScriptFormulaFormat from ScriptFormulaFormat
   [66] Record(localSymbols: SymbolTable,code: List(FortranCode)) -> D
             from D
             if D has FORTFN
   [67] FortranCode -> D from D if D has FORTFN
   [68] List(FortranCode) -> D from D if D has FORTFN
   [69] Equation(Expression(Complex(Float))) -> FortranProgram(D2,D3,D4
            ,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [70] Equation(Expression(Float)) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [71] Equation(Expression(Integer)) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [72] Expression(Complex(Float)) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [73] Expression(Float) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [74] Expression(Integer) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [75] Equation(Expression(MachineComplex)) -> FortranProgram(D2,D3,D4
            ,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [76] Equation(Expression(MachineFloat)) -> FortranProgram(D2,D3,D4,
            D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [77] Equation(Expression(MachineInteger)) -> FortranProgram(D2,D3,D4
            ,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [78] Expression(MachineComplex) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [79] Expression(MachineFloat) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [80] Expression(MachineInteger) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [81] Record(localSymbols: SymbolTable,code: List(FortranCode)) -> 
            FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [82] List(FortranCode) -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [83] FortranCode -> FortranProgram(D2,D3,D4,D5)
             from FortranProgram(D2,D3,D4,D5)
             if D2: SYMBOL and D3: Union(fst: FortranScalarType,void: 
            void) and D4: LIST(SYMBOL) and D5: SYMTAB
   [84] FourierComponent(D3) -> FourierSeries(D2,D3) from FourierSeries
            (D2,D3)
             if D3 has Join(OrderedSet,AbelianGroup) and D2 has Join(
            CommutativeRing,Algebra(Fraction(Integer)))
   [85] D1 -> FourierSeries(D1,D2) from FourierSeries(D1,D2)
             if D1 has Join(CommutativeRing,Algebra(Fraction(Integer)))
            and D2 has Join(OrderedSet,AbelianGroup)
   [86] Fraction(Polynomial(Fraction(D2))) -> D from D
             if D2 has INTDOM and D2 has ORDSET and D has FS(D2)
   [87] Polynomial(Fraction(D2)) -> D from D
             if D2 has INTDOM and D2 has ORDSET and D has FS(D2)
   [88] Fraction(D2) -> D from D if D2 has INTDOM and D2 has ORDSET and
            D has FS(D2)
   [89] SparseMultivariatePolynomial(D2,Kernel(D)) -> D from D
             if D2 has RING and D2 has ORDSET and D has FS(D2)
   [90] FortranScalarType -> SExpression from FortranScalarType
   [91] FortranScalarType -> Symbol from FortranScalarType
   [92] Symbol -> FortranScalarType from FortranScalarType
   [93] String -> FortranScalarType from FortranScalarType
   [94] FortranScalarType -> FortranType from FortranType
   [95] FortranType -> OutputForm from FortranType
   [96] Record(localSymbols: SymbolTable,code: List(FortranCode)) -> D
             from D
             if D has FVC
   [97] FortranCode -> D from D if D has FVC
   [98] List(FortranCode) -> D from D if D has FVC
   [99] Vector(MachineFloat) -> D from D if D has FVC
   [100] Record(localSymbols: SymbolTable,code: List(FortranCode)) -> D
             from D
             if D has FVFUN
   [101] FortranCode -> D from D if D has FVFUN
   [102] List(FortranCode) -> D from D if D has FVFUN
   [103] UnivariatePuiseuxSeries(D2,D3,D4) -> 
            GeneralUnivariatePowerSeries(D2,D3,D4)
             from GeneralUnivariatePowerSeries(D2,D3,D4)
             if D2 has RING and D3: SYMBOL and D4: D2
   [104] Variable(D3) -> GeneralUnivariatePowerSeries(D2,D3,D4)
             from GeneralUnivariatePowerSeries(D2,D3,D4)
             if D3: SYMBOL and D2 has RING and D4: D2
   [105] Heap(D2) -> OutputForm from Heap(D2) if D2 has SETCAT and D2
             has ORDSET
   [106] HexadecimalExpansion -> RadixExpansion(16) from 
            HexadecimalExpansion
   [107] HexadecimalExpansion -> Fraction(Integer) from 
            HexadecimalExpansion
   [108] OutputForm -> String from HTMLFormat
   [109] String -> IndexCard from IndexCard
   [110] List(D5) -> PolynomialIdeals(D2,D3,D4,D5)
             from PolynomialIdeals(D2,D3,D4,D5)
             if D5 has POLYCAT(D2,D3,D4) and D2 has FIELD and D3 has 
            OAMONS and D4 has ORDSET
   [111] D1 -> AssociatedJordanAlgebra(D2,D1) from 
            AssociatedJordanAlgebra(D2,D1)
             if D2 has COMRING and D1 has NAALG(D2)
   [112] D -> D1 from D if D has KOERCE(D1) and D1 has TYPE
   [113] D1 -> D from D if D has LALG(D1) and D1 has RING
   [114] D1 -> AssociatedLieAlgebra(D2,D1) from AssociatedLieAlgebra(D2
            ,D1)
             if D2 has COMRING and D1 has NAALG(D2)
   [115] D -> Stream(Record(k: Integer,c: D2)) from D
             if D has LOCPOWC(D2) and D2 has FIELD
   [116] Stream(Record(k: Integer,c: D2)) -> D from D
             if D2 has FIELD and D has LOCPOWC(D2)
   [117] ThreeDimensionalMatrix(D2) -> PrimitiveArray(PrimitiveArray(
            PrimitiveArray(D2)))
             from ThreeDimensionalMatrix(D2) if D2 has SETCAT
   [118] PrimitiveArray(PrimitiveArray(PrimitiveArray(D2))) -> 
            ThreeDimensionalMatrix(D2)
             from ThreeDimensionalMatrix(D2) if D2 has SETCAT
   [119] D2 -> (() -> D2) from MappingPackage1(D2) if D2 has SETCAT
   [120] D1 -> D from D
             if D2 has RING and D has MATCAT(D2,D3,D1) and D3 has FLAGG
            (D2) and D1 has FLAGG(D2)
   [121] MachineComplex -> Complex(Float) from MachineComplex
   [122] Complex(MachineInteger) -> MachineComplex from MachineComplex
            
   [123] Complex(MachineFloat) -> MachineComplex from MachineComplex
         
   [124] Complex(Integer) -> MachineComplex from MachineComplex
   [125] Complex(Float) -> MachineComplex from MachineComplex
   [126] MachineInteger -> MachineFloat from MachineFloat
   [127] MachineFloat -> Float from MachineFloat
   [128] Expression(Integer) -> Expression(MachineInteger) from 
            MachineInteger
   [129] OutputForm -> String from MathMLFormat
   [130] Fraction(MyUnivariatePolynomial(D2,D3)) -> MyExpression(D2,D3)
             from MyExpression(D2,D3)
             if D2: SYMBOL and D3 has Join(Ring,OrderedSet,
            IntegralDomain)
   [131] Polynomial(D3) -> MyUnivariatePolynomial(D2,D3)
             from MyUnivariatePolynomial(D2,D3) if D3 has RING and D2: 
            SYMBOL
   [132] Variable(D2) -> MyUnivariatePolynomial(D2,D3)
             from MyUnivariatePolynomial(D2,D3) if D2: SYMBOL and D3
             has RING
   [133] D1 -> MyUnivariatePolynomial(D2,D1) from 
            MyUnivariatePolynomial(D2,D1)
             if D2: SYMBOL and D1 has RING
   [134] Integer -> D from D if D has NASRING
   [135] Union(nia: Record(var: Symbol,fn: Expression(DoubleFloat),
            range: Segment(OrderedCompletion(DoubleFloat)),abserr: 
            DoubleFloat,relerr: DoubleFloat),mdnia: Record(fn: Expression(
            DoubleFloat),range: List(Segment(OrderedCompletion(DoubleFloat)))
            ,abserr: DoubleFloat,relerr: DoubleFloat)) -> 
            NumericalIntegrationProblem
             from NumericalIntegrationProblem
   [136] Record(fn: Expression(DoubleFloat),range: List(Segment(
            OrderedCompletion(DoubleFloat))),abserr: DoubleFloat,relerr: 
            DoubleFloat) -> NumericalIntegrationProblem
             from NumericalIntegrationProblem
   [137] Record(var: Symbol,fn: Expression(DoubleFloat),range: Segment(
            OrderedCompletion(DoubleFloat)),abserr: DoubleFloat,relerr: 
            DoubleFloat) -> NumericalIntegrationProblem
             from NumericalIntegrationProblem
   [138] NumericalIntegrationProblem -> OutputForm
             from NumericalIntegrationProblem
   [139] D2 -> None from NoneFunctions1(D2) if D2 has TYPE
   [140] Record(xinit: DoubleFloat,xend: DoubleFloat,fn: Vector(
            Expression(DoubleFloat)),yinit: List(DoubleFloat),intvals: List(
            DoubleFloat),g: Expression(DoubleFloat),abserr: DoubleFloat,
            relerr: DoubleFloat) -> NumericalODEProblem
             from NumericalODEProblem
   [141] NumericalODEProblem -> OutputForm from NumericalODEProblem
   [142] OrdinaryDifferentialRing(D2,D1,D3) -> D1
             from OrdinaryDifferentialRing(D2,D1,D3)
             if D1 has PDRING(D2) and D2 has SETCAT and D3: D2
   [143] D1 -> OrdinaryDifferentialRing(D2,D1,D3)
             from OrdinaryDifferentialRing(D2,D1,D3)
             if D2 has SETCAT and D3: D2 and D1 has PDRING(D2)
   [144] Symbol -> OpenMathErrorKind from OpenMathErrorKind
   [145] Union(noa: Record(fn: Expression(DoubleFloat),init: List(
            DoubleFloat),lb: List(OrderedCompletion(DoubleFloat)),cf: List(
            Expression(DoubleFloat)),ub: List(OrderedCompletion(DoubleFloat))
            ),lsa: Record(lfn: List(Expression(DoubleFloat)),init: List(
            DoubleFloat))) -> NumericalOptimizationProblem
             from NumericalOptimizationProblem
   [146] Record(lfn: List(Expression(DoubleFloat)),init: List(
            DoubleFloat)) -> NumericalOptimizationProblem
             from NumericalOptimizationProblem
   [147] Record(fn: Expression(DoubleFloat),init: List(DoubleFloat),lb
            : List(OrderedCompletion(DoubleFloat)),cf: List(Expression(
            DoubleFloat)),ub: List(OrderedCompletion(DoubleFloat))) -> 
            NumericalOptimizationProblem
             from NumericalOptimizationProblem
   [148] NumericalOptimizationProblem -> OutputForm
             from NumericalOptimizationProblem
   [149] Integer -> OrdSetInts from OrdSetInts
   [150] Color -> Palette from Palette
   [151] Polynomial(AlgebraicNumber) -> Expression(Integer)
             from PolynomialAN2Expression
   [152] Fraction(Polynomial(AlgebraicNumber)) -> Expression(Integer)
             from PolynomialAN2Expression
   [153] Record(pde: List(Expression(DoubleFloat)),constraints: List(
            Record(start: DoubleFloat,finish: DoubleFloat,grid: 
            NonNegativeInteger,boundaryType: Integer,dStart: Matrix(
            DoubleFloat),dFinish: Matrix(DoubleFloat))),f: List(List(
            Expression(DoubleFloat))),st: String,tol: DoubleFloat) -> 
            NumericalPDEProblem
             from NumericalPDEProblem
   [154] NumericalPDEProblem -> OutputForm from NumericalPDEProblem
   [155] PendantTree(D2) -> Tree(D2) from PendantTree(D2) if D2 has 
            SETCAT
   [156] List(Permutation(D2)) -> PermutationGroup(D2) from 
            PermutationGroup(D2)
             if D2 has SETCAT
   [157] PermutationGroup(D2) -> List(Permutation(D2)) from 
            PermutationGroup(D2)
             if D2 has SETCAT
   [158] List(D2) -> Permutation(D2) from Permutation(D2) if D2 has 
            SETCAT
   [159] List(List(D2)) -> Permutation(D2) from Permutation(D2) if D2
             has SETCAT
   [160] Fraction(Factored(D2)) -> PartialFraction(D2) from 
            PartialFraction(D2)
             if D2 has EUCDOM
   [161] PartialFraction(D2) -> Fraction(D2) from PartialFraction(D2)
             if D2 has EUCDOM
   [162] Pi -> Expression(D3) from PiCoercions(D3)
             if D3 has Join(OrderedSet,IntegralDomain)
   [163] List(D2) -> D from D if D2 has FIELD and D has PRSPCAT(D2)
   [164] D -> List(D2) from D if D has PRSPCAT(D2) and D2 has FIELD
   [165] Queue(D2) -> OutputForm from Queue(D2) if D2 has SETCAT and D2
             has SETCAT
   [166] RadixExpansion(D2) -> Fraction(Integer) from RadixExpansion(D2
            ) if D2: INT
   [167] D2 -> Void from ResolveLatticeCompletion(D2) if D2 has TYPE
         
   [168] Exit -> D1 from ResolveLatticeCompletion(D1) if D1 has TYPE
         
   [169] D1 -> D from D if D has RETRACT(D1) and D1 has TYPE
   [170] D2 -> Fraction(Polynomial(D2)) from RationalFunction(D2) if D2
             has INTDOM
   [171] Integer -> D from D if D has RING
   [172] SparseEchelonMatrix(D2,D3) -> Matrix(D3) from 
            SparseEchelonMatrix(D2,D3)
             if D2 has ORDSET and D3 has RING
   [173] D -> OutputForm from D if D has SPACEC(D2) and D2 has RING
   [174] Character -> D from D if D has SRAGG
   [175] Stack(D2) -> OutputForm from Stack(D2) if D2 has SETCAT and D2
             has SETCAT
   [176] List(D2) -> Stream(D2) from Stream(D2) if D2 has TYPE
   [177] Symbol -> Switch from Switch
   [178] String -> Symbol from Symbol
   [179] SymbolTable -> Table(Symbol,FortranType) from SymbolTable
   [180] Tableau(D2) -> OutputForm from Tableau(D2) if D2 has SETCAT
         
   [181] D2 -> TexFormat from TexFormat1(D2) if D2 has SETCAT
   [182] OutputForm -> TexFormat from TexFormat
   [183] Polynomial(D2) -> TaylorSeries(D2) from TaylorSeries(D2) if D2
             has RING
   [184] Symbol -> TaylorSeries(D2) from TaylorSeries(D2) if D2 has 
            RING
   [185] Variable(QUOTE(x)) -> UnivariateFormalPowerSeries(D2)
             from UnivariateFormalPowerSeries(D2) if D2 has RING
   [186] UnivariatePolynomial(QUOTE(x),D2) -> 
            UnivariateFormalPowerSeries(D2)
             from UnivariateFormalPowerSeries(D2) if D2 has RING
   [187] D1 -> D from D if D2 has RING and D has ULSCCAT(D2,D1) and D1
             has UTSCAT(D2)
   [188] Segment(D2) -> UniversalSegment(D2) from UniversalSegment(D2)
             if D2 has TYPE
   [189] Variable(D2) -> UnivariatePolynomial(D2,D3)
             from UnivariatePolynomial(D2,D3) if D2: SYMBOL and D3 has 
            RING
   [190] D1 -> D from D if D2 has RING and D has UPXSCCA(D2,D1) and D1
             has ULSCAT(D2)
   [191] Variable(D3) -> UnivariateTaylorSeriesCZero(D2,D3)
             from UnivariateTaylorSeriesCZero(D2,D3) if D3: SYMBOL and 
            D2 has RING
   [192] UnivariatePolynomial(D3,D2) -> UnivariateTaylorSeriesCZero(D2,
            D3)
             from UnivariateTaylorSeriesCZero(D2,D3) if D2 has RING and
            D3: SYMBOL
   [193] Void -> OutputForm from Void
   [194] D1 -> D from D if D has XALG(D1) and D1 has RING
   [195] D1 -> D from D if D has XFALG(D1,D2) and D1 has ORDSET and D2
             has RING

There are 50 unexposed functions called coerce :
   [1] Vector(Matrix(D3)) -> Vector(Matrix(Fraction(Polynomial(D3))))
             from CoerceVectorMatrixPackage(D3) if D3 has COMRING
   [2] List(Integer) -> ExtAlgBasis from ExtAlgBasis
   [3] EuclideanModularRing(D2,D1,D3,D4,D5,D6) -> D1
             from EuclideanModularRing(D2,D1,D3,D4,D5,D6)
             if D1 has UPOLYC(D2) and D2 has COMRING and D3 has ABELMON
            and D4: ((D1,D3) -> D1) and D5: ((D3,D3) -> Union(D3,
            "failed")) and D6: ((D1,D1,D3) -> Union(D1,"failed"))
   [4] UnivariatePuiseuxSeries(D3,D4,D5) -> ExponentialExpansion(D2,D3,
            D4,D5)
             from ExponentialExpansion(D2,D3,D4,D5)
             if D3 has Join(AlgebraicallyClosedField,
            TranscendentalFunctionCategory,FunctionSpace(D2)) and D4: 
            SYMBOL and D5: D3 and D2 has Join(OrderedSet,RetractableTo(
            Integer),LinearlyExplicitRingOver(Integer),GcdDomain)
   [5] Vector(Fraction(Polynomial(D2))) -> GenericNonAssociativeAlgebra
            (D2,D3,D4,D5)
             from GenericNonAssociativeAlgebra(D2,D3,D4,D5)
             if D2 has COMRING and D5: VECTOR(MATRIX(D2)) and D3: PI 
            and D4: LIST(SYMBOL)
   [6] List(List(Point(DoubleFloat))) -> GraphImage from GraphImage
   [7] GraphImage -> OutputForm from GraphImage
   [8] SparseMultivariatePolynomial(Integer,Kernel(InnerAlgebraicNumber
            )) -> InnerAlgebraicNumber
             from InnerAlgebraicNumber
   [9] LieExponentials(D2,D3,D4) -> XPBWPolynomial(D2,D3)
             from LieExponentials(D2,D3,D4)
             if D2 has ORDSET and D3 has Join(CommutativeRing,Module(
            Fraction(Integer))) and D4: PI
   [10] LieExponentials(D2,D3,D4) -> XDistributedPolynomial(D2,D3)
             from LieExponentials(D2,D3,D4)
             if D2 has ORDSET and D3 has Join(CommutativeRing,Module(
            Fraction(Integer))) and D4: PI
   [11] LyndonWord(D2) -> Magma(D2) from LyndonWord(D2) if D2 has 
            ORDSET
   [12] LyndonWord(D2) -> OrderedFreeMonoid(D2) from LyndonWord(D2) if 
            D2 has ORDSET
   [13] Magma(D2) -> OrderedFreeMonoid(D2) from Magma(D2) if D2 has 
            ORDSET
   [14] D1 -> MakeCachableSet(D1) from MakeCachableSet(D1) if D1 has 
            SETCAT
   [15] ModularField(D1,D2,D3,D4,D5) -> D1 from ModularField(D1,D2,D3,
            D4,D5)
             if D1 has COMRING and D2 has ABELMON and D3: ((D1,D2) -> 
            D1) and D4: ((D2,D2) -> Union(D2,"failed")) and D5: ((D1,D1
            ,D2) -> Union(D1,"failed"))
   [16] D1 -> ModMonic(D2,D1) from ModMonic(D2,D1)
             if D2 has RING and D1 has UPOLYC(D2)
   [17] ModuleMonomial(D2,D3,D4) -> Record(index: D2,exponent: D3)
             from ModuleMonomial(D2,D3,D4)
             if D2 has ORDSET and D3 has SETCAT and D4: ((Record(index
            : D2,exponent: D3),Record(index: D2,exponent: D3)) -> 
            Boolean)
   [18] Record(index: D2,exponent: D3) -> ModuleMonomial(D2,D3,D4)
             from ModuleMonomial(D2,D3,D4)
             if D2 has ORDSET and D3 has SETCAT and D4: ((Record(index
            : D2,exponent: D3),Record(index: D2,exponent: D3)) -> 
            Boolean)
   [19] ModularRing(D1,D2,D3,D4,D5) -> D1 from ModularRing(D1,D2,D3,D4,
            D5)
             if D1 has COMRING and D2 has ABELMON and D3: ((D1,D2) -> 
            D1) and D4: ((D2,D2) -> Union(D2,"failed")) and D5: ((D1,D1
            ,D2) -> Union(D1,"failed"))
   [20] List(Record(coef: D2,monom: D3)) -> MonoidRing(D2,D3)
             from MonoidRing(D2,D3) if D2 has RING and D3 has MONOID
         
   [21] Variable(D2) -> UnivariateSkewPolynomial(D2,D3,D4,D5)
             from UnivariateSkewPolynomial(D2,D3,D4,D5)
             if D2: SYMBOL and D3 has RING and D4: AUTOMOR(D3) and D5: 
            (D3 -> D3)
   [22] Polynomial(D2) -> OrdinaryWeightedPolynomials(D2,D3,D4,D5)
             from OrdinaryWeightedPolynomials(D2,D3,D4,D5)
             if D2 has RING and D3: LIST(SYMBOL) and D4: LIST(NNI) and 
            D5: NNI
   [23] OrdinaryWeightedPolynomials(D2,D3,D4,D5) -> Polynomial(D2)
             from OrdinaryWeightedPolynomials(D2,D3,D4,D5)
             if D2 has RING and D3: LIST(SYMBOL) and D4: LIST(NNI) and 
            D5: NNI
   [24] D1 -> PoincareBirkhoffWittLyndonBasis(D1)
             from PoincareBirkhoffWittLyndonBasis(D1) if D1 has ORDSET
            
   [25] PoincareBirkhoffWittLyndonBasis(D2) -> OrderedFreeMonoid(D2)
             from PoincareBirkhoffWittLyndonBasis(D2) if D2 has ORDSET
            
   [26] Partition -> List(Integer) from Partition
   [27] D1 -> ResidueRing(D2,D3,D4,D1,D5) from ResidueRing(D2,D3,D4,D1,
            D5)
             if D2 has FIELD and D3 has OAMONS and D4 has ORDSET and D1
             has POLYCAT(D2,D3,D4) and D5: LIST(D1)
   [28] RectangularMatrix(D2,D3,D4) -> Matrix(D4)
             from RectangularMatrix(D2,D3,D4) if D2: NNI and D3: NNI 
            and D4 has RING
   [29] D1 -> SparseMultivariateTaylorSeries(D2,D3,D1)
             from SparseMultivariateTaylorSeries(D2,D3,D1)
             if D2 has RING and D3 has ORDSET and D1 has POLYCAT(D2,
            INDE(D3),D3)
   [30] D1 -> SparseMultivariateTaylorSeries(D2,D1,D3)
             from SparseMultivariateTaylorSeries(D2,D1,D3)
             if D2 has RING and D1 has ORDSET and D3 has POLYCAT(D2,
            INDE(D1),D1)
   [31] SquareMatrix(D2,D3) -> Matrix(D3) from SquareMatrix(D2,D3)
             if D2: NNI and D3 has RING
   [32] D2 -> Stream(D2) from StreamTaylorSeriesOperations(D2) if D2
             has RING
   [33] Variable(D3) -> SparseUnivariateLaurentSeries(D2,D3,D4)
             from SparseUnivariateLaurentSeries(D2,D3,D4)
             if D3: SYMBOL and D2 has RING and D4: D2
   [34] Variable(D3) -> SparseUnivariatePuiseuxSeries(D2,D3,D4)
             from SparseUnivariatePuiseuxSeries(D2,D3,D4)
             if D3: SYMBOL and D2 has RING and D4: D2
   [35] Variable(D3) -> SparseUnivariateTaylorSeries(D2,D3,D4)
             from SparseUnivariateTaylorSeries(D2,D3,D4)
             if D3: SYMBOL and D2 has RING and D4: D2
   [36] UnivariatePolynomial(D3,D2) -> SparseUnivariateTaylorSeries(D2,
            D3,D4)
             from SparseUnivariateTaylorSeries(D2,D3,D4)
             if D2 has RING and D3: SYMBOL and D4: D2
   [37] PrimitiveArray(D2) -> Tuple(D2) from Tuple(D2) if D2 has TYPE
         
   [38] Variable(D3) -> UnivariateLaurentSeries(D2,D3,D4)
             from UnivariateLaurentSeries(D2,D3,D4)
             if D3: SYMBOL and D2 has RING and D4: D2
   [39] Variable(D3) -> UnivariatePuiseuxSeries(D2,D3,D4)
             from UnivariatePuiseuxSeries(D2,D3,D4)
             if D3: SYMBOL and D2 has RING and D4: D2
   [40] Variable(D3) -> UnivariateTaylorSeries(D2,D3,D4)
             from UnivariateTaylorSeries(D2,D3,D4)
             if D3: SYMBOL and D2 has RING and D4: D2
   [41] UnivariatePolynomial(D3,D2) -> UnivariateTaylorSeries(D2,D3,D4)
             from UnivariateTaylorSeries(D2,D3,D4)
             if D2 has RING and D3: SYMBOL and D4: D2
   [42] Variable(D2) -> Symbol from Variable(D2) if D2: SYMBOL
   [43] TwoDimensionalViewport -> OutputForm from 
            TwoDimensionalViewport
   [44] GraphImage -> TwoDimensionalViewport from ViewportPackage
   [45] D1 -> WeightedPolynomials(D2,D3,D4,D1,D5,D6,D7)
             from WeightedPolynomials(D2,D3,D4,D1,D5,D6,D7)
             if D2 has RING and D3 has ORDSET and D4 has OAMONS and D5
            : LIST(D3) and D1 has POLYCAT(D2,D4,D3) and D6: LIST(NNI) 
            and D7: NNI
   [46] WeightedPolynomials(D2,D3,D4,D1,D5,D6,D7) -> D1
             from WeightedPolynomials(D2,D3,D4,D1,D5,D6,D7)
             if D1 has POLYCAT(D2,D4,D3) and D2 has RING and D3 has 
            ORDSET and D4 has OAMONS and D5: LIST(D3) and D6: LIST(NNI)
            and D7: NNI
   [47] XPBWPolynomial(D2,D3) -> XRecursivePolynomial(D2,D3)
             from XPBWPolynomial(D2,D3) if D2 has ORDSET and D3 has 
            COMRING
   [48] XPBWPolynomial(D2,D3) -> XDistributedPolynomial(D2,D3)
             from XPBWPolynomial(D2,D3) if D2 has ORDSET and D3 has 
            COMRING
   [49] LiePolynomial(D2,D3) -> XPBWPolynomial(D2,D3) from 
            XPBWPolynomial(D2,D3)
             if D2 has ORDSET and D3 has COMRING
   [50] D1 -> XPolynomialRing(D2,D1) from XPolynomialRing(D2,D1)
             if D2 has RING and D1 has ORDMON

Examples of coerce from AffineSpaceCategory


Examples of coerce from Algebra


Examples of coerce from AlgebraGivenByStructuralConstants


Examples of coerce from AlgebraicNumber


Examples of coerce from AnyFunctions1


Examples of coerce from Asp10


Examples of coerce from Asp19


Examples of coerce from Asp1


Examples of coerce from Asp20


Examples of coerce from Asp24


Examples of coerce from Asp31


Examples of coerce from Asp35


Examples of coerce from Asp41


Examples of coerce from Asp42


Examples of coerce from Asp49


Examples of coerce from Asp4


Examples of coerce from Asp50


Examples of coerce from Asp55


Examples of coerce from Asp6


Examples of coerce from Asp73


Examples of coerce from Asp74


Examples of coerce from Asp77


Examples of coerce from Asp78


Examples of coerce from Asp7


Examples of coerce from Asp80


Examples of coerce from Asp9


Examples of coerce from ArrayStack

a:ArrayStack INT:= arrayStack [1,2,3,4,5] 
coerce a


Examples of coerce from BinaryExpansion


Examples of coerce from BlowUpMethodCategory


Examples of coerce from CartesianTensor

v:=[2,3] 
tv:CartesianTensor(1,2,Integer):=v 
tm:CartesianTensor(1,2,Integer):=[tv,tv]

v:=[2,3] 
tv:CartesianTensor(1,2,Integer):=v

v:SquareMatrix(2,Integer):=[[1,2],[3,4]] 
tv:CartesianTensor(1,2,Integer):=v

v:DirectProduct(2,Integer):=directProduct [3,4] 
tv:CartesianTensor(1,2,Integer):=v


Examples of coerce from CoerceVectorMatrixPackage


Examples of coerce from Database


Examples of coerce from DecimalExpansion


Examples of coerce from Dequeue

a:Dequeue INT:= dequeue [1,2,3,4,5] 
coerce a


Examples of coerce from DirichletRing


Examples of coerce from DataList


Examples of coerce from DrawNumericHack


Examples of coerce from DifferentialVariableCategory


Examples of coerce from ExtAlgBasis


Examples of coerce from EuclideanModularRing


Examples of coerce from ExponentialExpansion


Examples of coerce from FortranCode


Examples of coerce from FortranExpression


Examples of coerce from FiniteFieldHomomorphisms


Examples of coerce from FreeLieAlgebra


Examples of coerce from FortranMatrixCategory


Examples of coerce from FortranMatrixFunctionCategory


Examples of coerce from FileNameCategory


Examples of coerce from ScriptFormulaFormat1


Examples of coerce from ScriptFormulaFormat


Examples of coerce from FortranFunctionCategory


Examples of coerce from FortranProgram


Examples of coerce from FourierSeries


Examples of coerce from FunctionSpace


Examples of coerce from FortranScalarType


Examples of coerce from FortranType


Examples of coerce from FortranVectorCategory


Examples of coerce from FortranVectorFunctionCategory


Examples of coerce from GenericNonAssociativeAlgebra


Examples of coerce from GraphImage


Examples of coerce from GeneralUnivariatePowerSeries


Examples of coerce from Heap

a:Heap INT:= heap [1,2,3,4,5] 
coerce a


Examples of coerce from HexadecimalExpansion


Examples of coerce from HTMLFormat

coerce(sqrt(3+x)::OutputForm)$HTMLFORM


Examples of coerce from InnerAlgebraicNumber


Examples of coerce from IndexCard


Examples of coerce from PolynomialIdeals


Examples of coerce from AssociatedJordanAlgebra


Examples of coerce from CoercibleTo


Examples of coerce from LeftAlgebra


Examples of coerce from LieExponentials


Examples of coerce from AssociatedLieAlgebra


Examples of coerce from LocalPowerSeriesCategory


Examples of coerce from LyndonWord


Examples of coerce from ThreeDimensionalMatrix


Examples of coerce from Magma


Examples of coerce from MappingPackage1


Examples of coerce from MatrixCategory

coerce([1,2,3])@Matrix(INT)


Examples of coerce from MachineComplex


Examples of coerce from MachineFloat


Examples of coerce from MachineInteger


Examples of coerce from MakeCachableSet


Examples of coerce from MathMLFormat


Examples of coerce from ModularField


Examples of coerce from ModMonic


Examples of coerce from ModuleMonomial


Examples of coerce from ModularRing


Examples of coerce from MonoidRing


Examples of coerce from MyExpression


Examples of coerce from MyUnivariatePolynomial


Examples of coerce from NonAssociativeRing


Examples of coerce from NumericalIntegrationProblem


Examples of coerce from NoneFunctions1


Examples of coerce from NumericalODEProblem


Examples of coerce from OrdinaryDifferentialRing


Examples of coerce from OpenMathErrorKind


Examples of coerce from NumericalOptimizationProblem


Examples of coerce from UnivariateSkewPolynomial


Examples of coerce from OrdSetInts


Examples of coerce from OrdinaryWeightedPolynomials


Examples of coerce from Palette


Examples of coerce from PolynomialAN2Expression


Examples of coerce from PoincareBirkhoffWittLyndonBasis


Examples of coerce from NumericalPDEProblem


Examples of coerce from PendantTree

t1:=ptree([1,2,3]) 
t2:=ptree(t1,ptree([1,2,3])) 
t2::Tree List PositiveInteger


Examples of coerce from PermutationGroup

y : PERM INT := [[3,5,7,9]] 
z : PERM INT := [1,3,11] 
g : PERMGRP INT := [ y , z ]

x : PERM INT := [[1,3,5],[7,11,9]]


Examples of coerce from Permutation


Examples of coerce from PartialFraction

(13/74)::PFR(INT)

a:=(13/74)::PFR(INT) 
a::FRAC(INT)


Examples of coerce from PiCoercions


Examples of coerce from ProjectiveSpaceCategory


Examples of coerce from Partition


Examples of coerce from Queue

a:Queue INT:= queue [1,2,3,4,5] 
coerce a


Examples of coerce from RadixExpansion


Examples of coerce from ResolveLatticeCompletion


Examples of coerce from ResidueRing


Examples of coerce from RetractableTo


Examples of coerce from RationalFunction


Examples of coerce from Ring


Examples of coerce from RectangularMatrix


Examples of coerce from SparseEchelonMatrix


Examples of coerce from SparseMultivariateTaylorSeries


Examples of coerce from ThreeSpaceCategory


Examples of coerce from SquareMatrix


Examples of coerce from StringAggregate


Examples of coerce from Stack

a:Stack INT:= stack [1,2,3,4,5] 
coerce a


Examples of coerce from Stream

m:=[1,2,3,4,5,6,7,8,9,10,11,12] 
coerce(m)@Stream(Integer) 
m::Stream(Integer)


Examples of coerce from StreamTaylorSeriesOperations


Examples of coerce from SparseUnivariateLaurentSeries


Examples of coerce from SparseUnivariatePuiseuxSeries


Examples of coerce from SparseUnivariateTaylorSeries


Examples of coerce from Switch


Examples of coerce from Symbol


Examples of coerce from SymbolTable


Examples of coerce from Tableau


Examples of coerce from TexFormat1


Examples of coerce from TexFormat


Examples of coerce from TaylorSeries


Examples of coerce from Tuple

t1:PrimitiveArray(Integer):= [i for i in 1..10] 
t2:=coerce(t1)$Tuple(Integer)


Examples of coerce from UnivariateFormalPowerSeries


Examples of coerce from UnivariateLaurentSeriesConstructorCategory


Examples of coerce from UnivariateLaurentSeries


Examples of coerce from UniversalSegment


Examples of coerce from UnivariatePolynomial


Examples of coerce from UnivariatePuiseuxSeriesConstructorCategory


Examples of coerce from UnivariatePuiseuxSeries


Examples of coerce from UnivariateTaylorSeries


Examples of coerce from UnivariateTaylorSeriesCZero


Examples of coerce from Variable


Examples of coerce from TwoDimensionalViewport


Examples of coerce from ViewportPackage


Examples of coerce from Void


Examples of coerce from WeightedPolynomials


Examples of coerce from XAlgebra


Examples of coerce from XFreeAlgebra


Examples of coerce from XPBWPolynomial


Examples of coerce from XPolynomialRing

(1) -> 