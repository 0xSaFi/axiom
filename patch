books/bookvolbib Add proof references

Goal: Axiom references

\index{Melquiond, Guillaume}
\begin{chunk}{axiom.bib}
@article{Melq12,
  author = "Melquiond, Guillaume",
  title = "Floating-point arithmetic in the Coq system",
  journal = "Information and Computation",
  volume = "216",
  pages = "14-23",
  year = "2012",
  link = "\url{https://www.lri.fr/~melquion/doc/08-mc8-article.pdf}",
  abstract = 
    "The process of proving some mathematical theorems can be greatly
    reduced by relying on numerically-intensive computations with a
    certified arithmetic. This article presents a formalization of
    floating-point arithmetic that makes it possible to efficiently
    compute inside the proofs of the Coq system. This certified library is
    a multi-radix and multi-precision implementation free from underflow
    and overflow. It provides the basic arithmetic operators and a few
    elementary functions.",
  paper = "Melq12.pdf"
}

\end{chunk}

\index{Akers, Robert Lawrence}
\begin{chunk}{axiom.bib}
@phdthesis{Aker93,
  author = "Akers, Robert Lawrence",
  title = "Strong Static Type Checking for Functional Common Lisp",
  school = "Univerity of Texas at Austin",
  year = "1995",
  link = "\url{ftp://www.cs.utexas.edu/pub/boyer/cli-reports/096.pdf}",
  abstract =
    "This thesis presents a type system which supports the strong static
    type checking of programs developed in an applicative subset of the
    Common Lisp language. The Lisp subset is augmented with a guard
    construct for function definitions, which allows type restrictions to
    be placed on the arguments. Guards support the analysis and safe use
    of partial functions, like CAR, which are well-defined only for
    arguments of a certain type.

    A language of type descriptors characterizes the type
    domain. Descriptors are composed into function signatures which
    characterize the guard and which map various combinations of actual
    parameter types to possible result types. From a base of signatures
    for a small collection of primitive functions, the system infers
    signatures for newly submitted functions.

    The system includes a type inference algorithm which handles
    constructs beyond the constraints of ML-style systems. Most notable
    are the free use of CONS to construct objects of undeclared type and
    the use of IF forms whose two result components have unrelated types,
    resulting in ad hoc polymorphism. Accordingly, the type descriptor
    language accommodates disjunction, unrestricted CONS, recursive type
    forms, and ad hoc polymorphic function signatures. As with traditional
    type inference systems, unification is a central algorithm, but the
    richness of our type language complicates many component algorithms,
    including unification. Special treatment is given to recognizer
    functions, which are predicates determining whether an object is of a
    particular type. Type inference in this setting is undecidable, so the
    algorithm is heuristic and is not complete.

    The semantics of the system are in terms of a function which
    determines whether values satisfy descriptors with respect to a
    binding of type variables. The soundness of each signature emitted by
    the system is validated by a signature checker, whose properties are
    formally specified with respect to the formal semantics and proven to
    hold. The checker algorithm is substantially simpler than the
    inference algorithm, as it need not perform operations such as
    discovering closed recursive forms. Thus, its proof is both more
    straightforward to construct and easier to validate than a direct
    proof of the inference algorithm would be.",
  paper = "Aker93.pdf"
}

\end{chunk}

\index{Byrd, William}
\begin{chunk}{axiom.bib}
@misc{Byrd17,
  author = "Byrd, William",
  title = "The Most Beautiful Program Ever Written",
  link = "\url{https://www.youtube.com/watch?v=OyfBQmvr2Hc}",
  comment = "See miniKanren and Barliman (program synthesis with proof)"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Unkn13,
  author = "Unknown",
  title = "Hindley-Milner Type Inference",
  link = "\url{https://www7.in.tum.de/um/courses/seminar/sove/SS2013/final/hindley-milner.slides.pdf}",
  paper = "Unkn13.pdf"

}

\end{chunk}

