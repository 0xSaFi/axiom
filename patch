books/bookvol3 Additional explanations and references

Goal: Proving Axiom Correct

\index{Bertoli, P.}
\index{Calmet, J.}
\index{Guinchiglia, F.}
\index{Homann, K.}
\begin{chunk}{axiom.bib}
@article{Bert98,
  author = "Bertoli, P. and Calmet, J. and Guinchiglia, F. and Homann, K.",
  title = "Specification and Integration of Theorem Provers and Computer
           Algebra Systems",
  journal = "Lecture Notes in Computer Science",
  volume = "1476",
  year = "1998",
  pages = "94-106",
  abstract =
    "Computer algebra systems (CASs) and automated theorem provers (ATPs)
    exhibit complementary abilities. CASs focus on efficiently solving
    domain-specific problems. ATPs are designed to allow for the
    formalization and solution of wide classes of problems within some
    logical framework. Integrating CASs and ATPs allows for the solution
    of problems of a higher complexity than those confronted by each class
    alone. However, most experiments conducted so far followed an ad-hoc
    approach, resulting in tailored solutions to specific problems. A
    structured and principled approach is necessary to allow for the sound
    integration of systems in a modular way. The Open Mechanized Reasoning
    Systems (OMRS) framework was introduced for the specification and
    implementation of mechanized reasoning systems, e.g. ATPs. The
    approach was recasted to the domain of computer algebra systems. In
    this paper, we introduce a generalization of OMRS, named OMSCS (Open
    Mechanized Symbolic Computation Systems). We show how OMSCS can be
    used to soundly express CASs, ATPs, and their integration, by
    formalizing a combination between the Isabelle prover and the Maple
    algebra system. We show how the integrated system solves a problem
    which could not be tackled by each single system alone.",
  paper = "Bert98.pdf"
}

\end{chunk}

\index{Dolzmann, Andreas},
\index{Sturm, Thomas}
\begin{chunk}{axiom.bib}
@article{Dolz97b,
  author = "Dolzmann, Andreas and Sturm, Thomas",
  title = "REDLOG: Computer Algebra meets Computer Logic",
  journal = "ACM SIGSAM Bulletin",
  volume = "31",
  number = "2",
  year = "1997",
  pages = "2-9",
  abstract =
    "REDLOG is a package that extends the computer algebra system REDUCE
    to a computer logic system, i.e., a system that provides algorithms
    for the symbolic manipulation of first-order formulas over some
    temporarily fixed language and theory. In contrast to theorem provers,
    the methods applied know about the underlying algebraic theory and
    make use of it. We illustrate some applications of REDLOG, describe
    its functionality as it appears to the user, and explain the design
    issues and implementation techniques. REDLOG is available on the WWW.",
  paper = "Dolz97b.pdf"
}

\end{chunk}

\index{Calmet, Jacques}
\index{Homann, Karsten}
\begin{chunk}{axiom.bib}
@book{Calm96,
  author = "Calmet, Jacques and Homann, Karsten",
  title = "Classification of Communication and Cooperation Mechanisms for
           Logical and Symbolic Computation Systems",
  booktitle = "Frontiers of Combining Systems",
  publisher = "Kluwer Academic",
  year = "1996",
  pages = "221-234",
  abstract =
    "The combination of logical and symbolic computation systems has
    recently emerged from prototype extensions of stand-alone systems to
    the study of environments allowing interaction among several
    systems. Communication and cooperation mechanisms of systems
    performing any kind of mathematical service enable one to study and
    solve new classes of problems and to perform efficient computation by
    distributed specialized packages. The classification of communication
    and cooperation methods for logical and symbolic computation systems
    given in this paper provides and surveys different methodologies for
    combining mathematical services and their characteristics,
    capabilities, requirements, and differences. The methods are
    illustrated by recent well-known examples. We separate the
    classification into communication and cooperation methods. The former
    includes all aspects of the physical connection, the flow of
    mathematical information, the communication language(s) and its
    encoding, encryption, and knowledge sharing. The latter concerns the
    semantic aspects of architectures for cooperative problem solving.",
 paper = "Calm96.pdf"
}

\end{chunk}

\index{Dowek, Gilles}
\begin{chunk}{axiom.bib}
@article{Dowe00,
  author = "Dowek, Gilles",
  title = "Axioms vs Rewrite Rules: From Completeness to Cut Elimination",
  journal = "Lecture Notes in Computer Science",
  volume = "1794",
  pages = "62-72",
  year = "2000",
  abstract =
    "Combining a standard proof search method, such as resolution or
    tableaux, and rewriting is a powerful way to cut off search space in
    automated theorem proving, but proving the completeness of such
    combined methods may be challenging. It may require in particular to
    prove cut elimination for an extended notion of proof that combines
    deductions and computations. This suggests new interactions between
    automated theorem proving and proof theory.",
  paper = "Dowe00.pdf"
}  

\end{chunk}

\index{Sorge, Volker}
\begin{chunk}{axiom.bib}
@article{Sorg00,
  author = "Sorge, Volker",
  title = "Non-trivial Symbolic Computations in Proof Planning",
  journal = "LNCS",
  volume = "1794",
  pages = "121-135",
  year = "2000",
  abstract =
    "We discuss a pragmatic approach to integrate computer algebra into
    proof planning. It is based on the idea to separate computation and
    verification and can thereby exploit the fact that many elaborate
    symbolic computations are trivially checked. In proof planning the
    separation is realized by using a powerful computer algebra system
    during the planning process to do non-trivial symbolic
    computations. Results of these computations are checked during the
    refinement of a proof plan to a calculus level proof using a small,
    self-implemented system that gives us protocol information on its
    calculation. This protocol can be easily expanded into a checkable
    low-level calculus proof ensuring the correctness of the
    computation. We demonstrate our approach with the concrete
    implementation in the $\Omega$MEGA system.",
  paper = "Sorg00.pdf"
}

\end{chunk}

\index{Melham, Thomas F.}
\begin{chunk}{axiom.bib}
@article{Melh02,
  author = "Melham, Thomas F.",
  title = "PROSPER An Investigation into Software Architecture for Embedded
           Proof Engines",
  journal = "LNCS",
  volume = "2309",
  pages = "193-206",
  year = "2002",
  abstract =
    "Prosper is a recently-completed ESPRIT Framework IV research project
    that investigated software architectures for component-based, embedded
    formal verification tools. The aim of the project was to make
    mechanized formal analysis more accessible in practice by providing a
    framework for integrating formal proof tools inside other software
    applications. This paper is an extended abstract of an invited
    presentation on Prosper given at FroCoS 2002. It describes the vision
    of the Prosper project and provides a summary of the technical
    approach taken and some of the lessons learned.",
  paper = "Melh02.pdf"
}

\end{chunk}

\index{Adams, Andrew A.}
\index{Gottlieben, Hanne}
\index{Linton, Steve A.}
\index{Martin, Ursula}
\begin{chunk}{axiom.bib}
@inproceedings{Adam99,
  author = "Adams, Andrew A. and Gottlieben, Hanne and Linton, Steve A. and
            Martin, Ursula",
  title = "Automated theorem proving in support of computer algebra: 
           symbolic definite integration as a case study",
  booktitle = "ISSAC '99",
  pages = "253-260",
  year = "1999",
  abstract = "
    We assess the current state of research in the application of computer
    aided formal reasoning to computer algebra, and argue that embedded
    verification support allows users to enjoy its benefits without
    wrestling with technicalities. We illustrate this claim by considering
    symbolic definite integration, and present a verifiable symbolic
    definite integral table look up: a system which matches a query
    comprising a definite integral with parameters and side conditions,
    against an entry in a verifiable table and uses a call to a library of
    lemmas about the reals in the theorem prover PVS to aid in the
    transformation of the table entry into an answer. We present the full
    model of such a system as well as a description of our prototype
    implementation showing the efficacy of such a system: for example, the
    prototype is able to obtain correct answers in cases where computer
    algebra systems [CAS] do not. We extend upon Fateman's web-based table
    by including parametric limits of integration and queries with side
    conditions.",
  paper = "Adam99.pdf"

\end{chunk}

\index{Buchberger, B.}
\index{Jebelean, Tudor}
\index{Kriftner, Franz}
\index{Vasaru, Daniela}
\begin{chunk}{axiom.bib}
@inproceedings{Buch77,
  author = "Buchberger, B. and Jebelean, Tudor and Kriftner, Franz and
            Vasaru, Daniela",
  title = "A Survey on the Theorema Project",
  booktitle = "ISSAC '97",
  year = "1997",
  abstract =
    "The Theorema project aims at extending current computer algebra
    systems by facilities for supporting mathematical proving. The present
    early-prototype version of the Theorema software system is implemented
    in Mathematica 3.0. The system consists of a general higher-order
    predicate logic prover and a collection of special provers that call
    each other depending on the particular proof situations. The
    individual provers imitate the proof style of human mathematicians and
    aim at producing human-readable proofs in natural language presented
    in nested cells that facilitate studying the computer-generated proofs
    at various levels of detail. The special provers are intimately
    connected with the functors that build up the various mathematical
    domains.",
  paper = "Buch77.pdf"
}

\end{chunk}

\index{Clarke, Edmund}
\index{Zhao, Xudong}
\begin{chunk}{axiom.bib}
@techreport{Clar94,
  author = "Clarke, Edmund and Zhao, Xudong",
  title = "Combining Symbolic Computation and Theorem Proving: Some
           Problems of Ramanujan",
  year = "1994",
  type = "technical report",
  institution = "Carnegie Mellon University",
  number = "CMU-CS-94-103",
  abstract =
    "One way of building more powerful theorem provers is to use
    techniques from symbolic computation. The challenge problems in this
    paper are taken from Chapter 2 of Ramanujan''s Notebooks. They were
    selected because they are non-trivial and require the use of symbolic
    computation techniques. We have developed a theorem prover based on
    the symbolic computation system Mathematica, that can prove all the
    challenge problems completely automatically. The axioms and inference
    rules for constructing the proofs are also briefly discussed.",
  paper = "Clar94.pdf",
  keywords = "CAS-Proof"
}

\end{chunk}

\index{de Bruijn, N.G.}
\begin{chunk}{axiom.bib}
@article{Brui94,
  author = "de Bruijn, N.G.",
  title = "A Survey on the project Automath",
  journal = "Studies in Logic and the Foundations of Mathematics",
  volume = "133",
  year = "1994",
  pages = "141-161",
  abstract =
    "Thus far, much about Automath has been written in separate
    reports. Most of this work has been made available upon request, but
    only a small part was published in journals, conference proceedings,
    etc. Unfortunately, a general survey in the form of a book is still
    lacking. A short survey was given in [de Bruijn 73c], but the present
    one will be much more extensive. Naturally, this survey will report
    about work that has been done, is going on, or is planned for the
    future. But it will also be used to explain how various parts of the
    project are related. Moreover we shall try to clarify a few points
    which many outsiders consider as uncommon or even wierd. In particular
    we spend quite some attention to our concept of types and the matter
    of ``propositions as types'' (Section 14). Finally the survey will be
    used to ventilate opinions and views in mathematics which are not
    easily set down in more technical reports.",
  paper = "Brui94.pdf"
}

\end{chunk}

\index{Dutertre, Bruno}
\begin{chunk}{axiom.bib}
@article{Dute96,
  author = "Dutertre, Bruno",
  title = "Elements of Mathematical Analysis in PVS",
  journal = "LNCS",
  volume = "1125",
  pages = "141-156",
  year = "1996",
  abstract =
    "This paper presents the formalization of some elements of
    mathematical analysis using the PVS verification system. Our main
    motivation was to extend the existing PVS libraries and provide means
    of modelling and reasoning about hybrid systems. The paper focuses on
    several important aspects of PVS including recent extensions of the
    type system and discusses their merits and effectiveness. We conclude
    by a brief comparison with similar developments using other theorem
    provers.",
  paper = "Dute96.pdf"
}

\end{chunk}

\index{Homann, Karsten}
\index{Calmet, Jacques}
\begin{chunk}{axiom.bib}
@article{Homa94,
  author = "Homann, Karsten and Calmet, Jacques",
  title = "Combining Theorem Proving and Symbolic Mathematical Computing",
  journal = "LNCS",
  volume = "958",
  pages = "18-29",
  year = "1994",
  abstract =
    "An intelligent mathematical environment must enable symbolic
    mathematical computation and sophisticated reasoning techniques on the
    underlying mathematical laws. This paper disscusses different possible
    levels of interaction between a symbolic calculator based on algebraic
    algorithms and a theorem prover. A high level of interaction requires
    a common knowledge representation of the mathematical knowledge of the
    two systems. We describe a model for such a knowledge base mainly
    consisting of type and algorithm schemata, algebraic algorithms and
    theorems.",
  paper = "Homa94.pdf",
  keywords = "CAS-Proof"
}

\end{chunk}

\index{Kredel, Heinz}
\begin{chunk}{axiom.bib}
@article{Kred90,
  author = "Kredel, Heinz",
  title = "MAS Modula-2 Algebra System",
  journal = "LNCS",
  volume = "429",
  pages = "270-271",
  year = "1990",
  keywords = "axiomref"
}

\end{chunk}

\index{Fortenbacher, Albrecht}
\begin{chunk}{axiom.bib}
@article{Fort87,
  author = "Fortenbacher, Albrecht",
  title = "An Algebraic Approach to Unification Under Associativity and
           Commutativity",
  journal = "J. Symbolic Computation",
  volume = "3",
  pages = "217-229",
  year = "1987",
  abstract =
    "From the work of Siekmann & Livesey, and Stickel it is known how to
    unify two terms in an associative and commutative theory: transfer the
    terms into Abelian strings, look for mappings which solve the problem
    in the Abelian monoid, and decide whether a mapping can be regarded as
    a unifier.  Very often most of the mappings are thus eliminated, and
    so it is crucial for efficiency either to not create these unnecessary
    solutions or to remove them as soon as possible.  The following work
    formalises the transformations between the free algebra and this
    monoid.  This leads to an algorithm which uses maximal information for
    its search for solutions in the monoid.  It is both very efficient and
    easily verifiable.  Some applications of this algorithm are shown in
    the appendix.",
  paper = "Fort87.pdf"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@book{ADAx83,
  author = "U.S. Government",
  title = "The Programming Language Ada Reference Manual",
  publisher = "U.S. Government",
  year = "1983",
  comment = "STD-1815A-1983"
}

\end{chunk}

\index{Ausiello, Giovanni Francesco Mascari}
\begin{chunk}{axiom.bib}
@article{Ausi79,
  author = "Ausiello, Giovanni Francesco Mascari",
  title = "On the Design of Algebraic Data Structures with the 
           Approach of Abstract Data Types",
  journal = "LNCS",
  volume = "72",
  year = "1979",
  pages = "514-530",
  abstract =
    "The problem of giving a formal definition of the representation of
    algebraic data structures is considered and developped in the frame
    work of the abstract data types approach. Such concepts as canonical
    form and simplification are formalized and related to properties of
    the abstract specification and of the associated term rewriting
    system.",
  paper = "Ausi79.pdf"
}

\end{chunk}

\index{Burstall, R.M.}
\index{Goguen, J.A.}
\begin{chunk}{axiom.bib}
@inproceedings{Burs77,
  author = "Burstall, R.M. and Goguen, J.A.",
  title = "Putting THeories together to make Specifications",
  booktitle = "IJCAI 77 Volume 2",
  pages = "1045-1058",
  year = "1977",
  paper = "Burs77.pdf"
}

\end{chunk}

\index{Cohn, Paul Moritz}
\begin{chunk}{axiom.bib}
@book{Cohn65,
  author = "Cohn, Paul Moritz",
  title = "Universal Algebra",
  publisher = "Harper and Row",
  year = "1965"
}

\end{chunk}

\index{Davenport, J.H.}
\index{Jenks, R.D.}
\begin{chunk}{axiom.bib}
@misc{Dave80b,
  author = "Davenport, J.H. and Jenks, R.D.",
  title = "SCRATCHPAD/370: Modes and Domains",
  year = "1980",
  comment = "private communication"
}

\end{chunk}

\index{Demers, A.}
\index{Donahue, J.}
\begin{chunk}{axiom.bib}
@techreport{Deme79,
  author = "Demers, A. and Donahue, J.",
  title = "Revised Report on RUSSELL",
  year = "1979",
  type = "technical report",
  institution = "Cornell",
  number = "TR 79-389"
}

\end{chunk}

\index{Griss, Martin L.}
\begin{chunk}{axiom.bib}
@inproceedings{Gris76,
  author = "Griss, Martin L.",
  title = "The Definition and Use of Data Structures in REDUCE",
  booktitle = "SYMSAC '76",
  pages = "53-59",
  year = "1976",
  abstract =
    "This paper gives a brief description and motivation of the mode
    analyzing and data-structuring extensions to the algebraic language
    REDUCE. These include generic functions, user defined recursive data
    structures, mode transfer functions and user modifiable automatic
    coercion. A number of examples are given to illustrate the style and
    features of the language, and how it will aid in the construction of
    more efficient and reliable programs."
}

\end{chunk}

\index{Loos, Ruediger G. K.}
\begin{chunk}{axiom.bib}
@article{Loos74,
  author = "Loos, Ruediger G. K.",
  title = "Toward a Formal Implementation of Computer Algebra",
  journal = "SIGSAM",
  volume = "8",
  number = "3",
  pages = "9-16",
  year = "1974",
  abstract =
    "We consider in this paper the task of synthesizing an algebraic
    system. Today the task is significantly simpler than in the pioneer
    days of symbol manipulation, mainly because of the work done by the
    pioneers in our area, but also because of the progress in other areas
    of Computer Science. There is now a considerable collection of
    algebraic algorithms at hand and a much better understanding of data
    structures and programming constructs than only a few years ago.",
  paper = "Loos74.pdf",
  keywords = "axiomref"
}

\end{chunk}

\index{Levenworth, B.}
\begin{chunk}{axiom.bib}
@misc{Leve80,
  author = "Levenworth, B.",
  title = "ADAPT Reference Manual",
  comment = "IBM Research",
  year = "1980"
}

\end{chunk}


\index{Wegbreit, Ben}
\begin{chunk}{axiom.bib}
@article{Wegb74,
  author = "Wegbreit, Ben",
  title = "The Treatment of Data Types in EL1",
  journal = "Communications of the ACM",
  volume = "17",
  number = "5",
  year = "1974",
  pages = "251-264",
  abstract = 
    "In constructing a general purpose programming language, a key issue
    is providing a sufficient set of data types and associated operations
    in a manner that permits both natural problem-oriented notation and
    efficient implementation. The EL1 language contains a number of
    features specifically designed to simultaneously satisfy both
    requirements. The resulting treatment of data types includes provision
    for programmer-defined data types and generaic routines, programmer
    control over type conversion, and very flexible data type behavior, in
    a context that allows efficient compiled code and compact data
    representation.",
  paper = "Wegb74.pdf"
}

\end{chunk}

\index{Wulf, William A.}
\index{London, Ralph L.}
\index{Shaw, Mary}
\begin{chunk}{axiom.bib}
@article{Wulf76,
  author = "Wulf, William A. and London, Ralph L. and Shaw, Mary",
  title = "An Introduction to the Construction and Verification of 
           Alphard Programs",
  journal = "IEEE Tr. Software Engineering",
  volume = "SE-2",
  number = "4",
  year = "1976",
  pages = "253-265",
  abstract =
    "The programming language Alphard is designed to provide support for
    both the methodologies of ``well-structured'' programming and the
    techniques of formal program verification.  Language constructs allow
    a programmer to isolate an abstraction, specifying its behavior
    publicly while localizing.  knowledge about its implementation.  The
    verification of such an abstraction consists of showing that its
    implementation behaves in accordance with its public specifications;
    the abstraction can then be used with confidence in constructing
    other programs, and the verification of that use employs only the
    public specifications.  This paper introduces Alphard by developing
    and verifying a data structure definition and a program that uses it.
    It shows how each language construct contributes to the development of
    the abstraction and discusses the way the language design and the
    verification methodology wete tailored to each other.  It serves not
    only as an introduction to Alphard, but also as an example of the
    symbiosis between verification and methodology in language design.
    The strategy of program structuring, illustrated for Alphard, is
    also applicable to most of the "data abstraction" mechanisms now
    appearing.",
  paper = "Wulf76.pdf"
}

\end{chunk}

\index{Astesiano, Egidio}
\index{Bidoit, Michel}
\index{Kirchner, Helene}
\index{Krieg-Bruckner, Bernd}
\index{Mosses, Peter D.}
\index{Sannella, Donald}
\index{Tarlecki, Andrzej}
\begin{chunk}{axiom.bib}
@article{Aste02,
  author = "Astesiano, Egidio and Bidoit, Michel and Kirchner, Helene and
            Krieg-Bruckner, Bernd and Mosses, Peter D. and Sannella, Donald
            and Tarlecki, Andrzej",
  title = "CASL: the Common Algebraic Specification Language",
  journal = "Theoretical Computer Science",
  volume = "286",
  number = "2",
  pages = "153-196",
  year = "2002",
  abstract =
    "The Common Algebraic Specification Language (CASL) is an expressive
    language for the formal specification of functional requirements and
    modular design of software. It has been designed by COFI, the
    international Common Framework Initiative for algebraic specification
    and development. It is based on a critical selection of features that
    have already been explored in various contexts, including subsorts,
    partial functions, first-order logic, and structured and architectural
    specifications. CASL should facilitate interoperability of many
    existing algebraic prototyping and verification tools.
    
    This paper gives an overview of the CASL design. The major issues that
    had to be resolved in the design process are indicated, and all the
    main concepts and constructs of CASL are briefly explained and
    illustrated — the reader is referred to the CASL Language Summary for
    further details. Some familiarity with the fundamental concepts of
    algebraic specification would be advantageous.",
  paper = "Aste02.pdf"
}

\end{chunk}

\index{Davenport, James H.}
\begin{chunk}{axiom.bib}
@article{Dave90a,
  author = "Davenport, James H.",
  title = "Current Problems in Computer Algebra Systems Design",
  journal = "LNCS",
  volume = "429",
  year = "1990",
  pages = "1-9",
  abstract =
    "Computer Algebra systems have been with us for over twenty years, but
    there is still no consensus on what an ``ideal'' system would look
    like.  There are all sorts of tradeoffs between portability,
    functionality, and efficiency. This paper discusses some of those issues.",
  keywords = "axiomref"
}

\end{chunk}

\index{Galligo, A.}
\index{Grimm, J.}
\index{Pottier, L.}
\begin{chunk}{axiom.bib}
@article{Gall90,
  author = "Galligo, A. and Grimm, J. and Pottier, L.",
  title = "The Design of SISYPHE: A System for doing Symbolic and
           Algebraic Computations",
  journal = "LNCS",
  volume = "429"
  pages = "30-39",
  year = "1990"
  keywords = "axiomref"
}

\end{chunk}
