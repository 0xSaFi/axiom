books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Hearn, Anthony C.}
\index{Eberhard, Schrufer}
\begin{chunk}{axiom.bib}
@article{Hear95,
  author = "Hearn, Anthony C. and Eberhard, Schrufer",
  title = "A computer algebra system based on order-sorted algebra",
  journal = "J. Symbolic Computing",
  volume = "19",
  number = "1-3",
  pages = "65-77",
  year = "1995",
  keywords = "axiomref",
  paper = "Hear95.pdf",
  abstract =
    "This paper presents the prototype design of an algebraic computation
    system that manipulates algebraic quantities as generic objects using
    order-sorted algebra as the underlying model. The resulting programs
    have a form that is closely related to the algorithmic description of
    a problem, but with the security of full type checking in a compact,
    natural style."
}

\end{chunk}


\index{Hoeppner, Sabine}
\begin{chunk}{axiom.bib}
@misc{Hoep95,
  author = "Hoeppner, Sabine",
  title = "Linear differential equations of second order in fields of
           positive characteristic",
  comment = "Essen: Univ. Essen, FB Math 71 S.",
  year = "1995",
  keywords = "axiomref",
  abstract =
    "Let be a differential field of characteristic $p>2$ of the type
    $(\mathbb{F}_p(x),\frac{d}{dx})$. The equation studied is
    $y^{\prime\prime}+ay^{\prime}+by=0$ with $a,b \in K$.  The goal is to
    produce a Liouvillian extension $L \supset K$ which contains two
    independent solutions. This is done by solving the associated Riccati
    equation $u^{\prime}+u^2+au+b=0$. Unlike the characteristic zero
    situation, the Riccati equation has one or two solutions in an
    algebraic extension of degree $\le 2$ of $K$.  Full solutions are
    given for the various cases that do occur. The paper ends with a
    program in AXIOM which computes the solutions of the Riccati equation
    and the Liouvillian extensions."
}

\end{chunk}

\index{Santas, Philip S.}
\begin{chunk}{axiom.bib}
@article{Sant95,
  author = "Santas, Philip S.",
  title = "A type system for computer algebra",
  journal = "J. Symbolic Computation",
  volume = "19",
  number = "1-3",
  pages = "79-109",
  year = "1995",
  keywords = "axiomref",
  paper = "Sant95.pdf",
  abstract =
    "This paper presents a type system for support of subtypes,
    parameterized types with sharing and categories in a computer algebra
    environment. By modeling representation of instances in terms of
    existential types, we obtain a simplified model, and build a basis for
    defining subtyping among algebraic domains. The inheritance at
    category level has been formalized; this allows the automatic
    inference of type classes. By means of type classes and existential
    types we construct subtype relations without involving coercions. A
    type sharing mechanism works in parallel and allows the consistent
    extension and combination of domains. The expressiveness of the system
    is further increased by viewing domain types as special case of
    package types, forming weak and strong sums respectively. The
    introduced system, although awkward at first sight, is simpler than
    other proposed systems for computer algebra without including some of
    their problems. The system can be further extended in other to support
    more constructs and increase its flexibility."
}

\end{chunk}

\index{Dalmas, St\'ephane}
\begin{chunk}{axiom.bib}
  author = "Dalmas, Stephane",
  title = "A polymorphic functional language applied to symbolic computation",
  year = "1992",
  booktitle = "Proc. ISSAC 1992",
  series = "ISSAC 1992",
  pages = "369-375",
  isbn = "0-89791-489-9 (soft cover) 0-89791-490-2 (hard cover)",
  keywords = "axiomref"
}

\end{chunk}

\index{Missura, Stephan A.}
\begin{chunk}{axiom.bib}
@InProceedings{Miss05,
  author = "Missura, Stephan A.",
  title = {Theories = Signatures + Propositions Used as Types},
  keywords = "axiomref",
  booktitle = "Integrating Symbolic Mathematics and Artificial Intelligence",
  volume = "958",
  pages = "144-155",
  year = "2005",
  paper = "Miss05",
  abstract =
    "Languages that distinguish between types and structures use explicit
    components for the carrier type(s) in structures. Examples are the
    function language Standard ML and most algebraic specification
    systems.  Hence, they have to use general sum types or signatures to
    give types to structures and be able to build, for instance, the
    algebraic hierarchy."
}

\end{chunk}

\index{Fitch, John P.}
\begin{chunk}{axiom.bib}
@InProceedings{Fitc93,
  author = "Fitch (ed), John P.",
  title = "Design and Implementation of Symbolic Computation Systems",
  year = "1992",
  booktitle = "Int. Symp. DISCO '92 Proceedings",
  series = "DISCO 92",
  publisher = "Springer-Verlag, Berlin",
  isbn = "0-387-57272-4",
  keywords = "axiomref",
  paper = "Fitc93.tex"
}

\end{chunk}

\index{Dupee, Brian J.}
\index{Davenport, James H.}
\begin{chunk}{axiom.bib}
@misc{Dupe95,
  author = "Dupee, Brian J. and Davenport, James H.",
  title = "Using Computer Algebra to Choose and Apply Numerical Routines",
  year = "1995",
  paper = "Dupe95.pdf",
  keywords = "axiomref",
  url = 
"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.33.5645&rep=rep1&type=pdf",
  algebra =
   "\newline\refto{domain D01AJFA d01ajfAnnaType}
    \newline\refto{domain D01AKFA d01akfAnnaType}
    \newline\refto{domain D01ALFA d01alfAnnaType}
    \newline\refto{domain D01AMFA d01amfAnnaType}
    \newline\refto{domain D01ANFA d01anfAnnaType}
    \newline\refto{domain D01APFA d01apfAnnaType}
    \newline\refto{domain D01AQFA d01aqfAnnaType}
    \newline\refto{domain D01ASFA d01asfAnnaType}
    \newline\refto{domain D01FCFA d01fcfAnnaType}
    \newline\refto{domain D01GBFA d01gbfAnnaType}
    \newline\refto{domain D01TRNS d01TransformFunctionType}
    \newline\refto{domain D02BBFA d02bbfAnnaType}
    \newline\refto{domain D02BHFA d02bhfAnnaType}
    \newline\refto{domain D02CJFA d02cjfAnnaType}
    \newline\refto{domain D02EJFA d02ejfAnnaType}
    \newline\refto{domain D03EEFA d03eefAnnaType}
    \newline\refto{domain D03FAFA d03fafAnnaType}
    \newline\refto{domain E04DGFA e04dgfAnnaType}
    \newline\refto{domain E04FDFA e04fdfAnnaType}
    \newline\refto{domain E04GCFA e04gcfAnnaType}
    \newline\refto{domain E04JAFA e04jafAnnaType}
    \newline\refto{domain E04MBFA e04mbfAnnaType}
    \newline\refto{domain E04NAFA e04nafAnnaType}
    \newline\refto{domain E04UCFA e04ucfAnnaType}
    \newline\refto{domain NIPROB NumericalIntegrationProblem}
    \newline\refto{domain ODEPROB NumericalODEProblem}
    \newline\refto{domain OPTPROB NumericalOptimizationProblem}
    \newline\refto{domain PDEPROB NumericalPDEProblem}",
  abstract =
    "In applied mathematics, electronic and chemical engineering, the
    modelling process can produce a number of mathematical problems which
    require numerical solutions for which symbolic methods are either not
    possible or not obvious. With the plethora of numerical library
    routines for the solution of these problems often the numerical
    analyst has to answer the question {\sl Which routine to choose?} and
    {\sl How do I use it?}. Some analysis needs to be carried out before
    the appropriate routine can be identifed, i.e. {\sl How stiff is this
    ODE?} and {\sl Is this function continuous?}. It may well be the case
    that more than one routine is applicable to the problem. So the
    question may become {\ls Which is likely to be the best?}. Such a
    choice may be critical for both accuracy and efficiency.
    
    An expert system is thus required to make this choice based on the
    results of its own analysis of the problem, call the routine and act
    on the outcome. This may be to put the answer in a relevant form or
    react to an apparent failure of the chosen routine and thus choose and
    call an alternative. It should also have sufficient explanation
    mechanisms to inform on the choice of routine and the reasons for that
    choice. Much of this work can be achieved using computer algebra and
    symbolic algebra packages.
    
    This paper describes an expert system currently in prototype in terms
    of both its object-based structure and its computational agents. Some
    of these agents are described in detail, paying particular attention
    to the practical aspects of their algorithms and the use of computer
    algebra.
    
    The {\bf axiom2} Symbolic Algebra System is used as a user interface
    as well as the link to the NAG Foundation Library for the numerical
    routines and the inference mechanisms for the expert system."
}

\end{chunk}

\index{Dewar, Michael C.}
\begin{chunk}{axiom.bib}
@InProceedings{Dewa92,
  author = "Dewar, Michael C.",
  title = "Using Computer Algebra to Select Numerical Algorithms",
  booktitle = "Proc. ISSAC 1992",
  series = "ISSAC 1992",
  year = "1992",
  location = "Berkeley, CA",
  pages = "1-8",
  paper = "Dewa92.pdf",
  algebra =
   "\newline\refto{domain D01AJFA d01ajfAnnaType}
    \newline\refto{domain D01AKFA d01akfAnnaType}
    \newline\refto{domain D01ALFA d01alfAnnaType}
    \newline\refto{domain D01AMFA d01amfAnnaType}
    \newline\refto{domain D01ANFA d01anfAnnaType}
    \newline\refto{domain D01APFA d01apfAnnaType}
    \newline\refto{domain D01AQFA d01aqfAnnaType}
    \newline\refto{domain D01ASFA d01asfAnnaType}
    \newline\refto{domain D01FCFA d01fcfAnnaType}
    \newline\refto{domain D01GBFA d01gbfAnnaType}
    \newline\refto{domain D01TRNS d01TransformFunctionType}
    \newline\refto{domain D02BBFA d02bbfAnnaType}
    \newline\refto{domain D02BHFA d02bhfAnnaType}
    \newline\refto{domain D02CJFA d02cjfAnnaType}
    \newline\refto{domain D02EJFA d02ejfAnnaType}
    \newline\refto{domain D03EEFA d03eefAnnaType}
    \newline\refto{domain D03FAFA d03fafAnnaType}
    \newline\refto{domain E04DGFA e04dgfAnnaType}
    \newline\refto{domain E04FDFA e04fdfAnnaType}
    \newline\refto{domain E04GCFA e04gcfAnnaType}
    \newline\refto{domain E04JAFA e04jafAnnaType}
    \newline\refto{domain E04MBFA e04mbfAnnaType}
    \newline\refto{domain E04NAFA e04nafAnnaType}
    \newline\refto{domain E04UCFA e04ucfAnnaType}
    \newline\refto{domain NIPROB NumericalIntegrationProblem}
    \newline\refto{domain ODEPROB NumericalODEProblem}
    \newline\refto{domain OPTPROB NumericalOptimizationProblem}
    \newline\refto{domain PDEPROB NumericalPDEProblem}",
  abstract =
    "Many real-life problems require a compbination of both symbolic and
    numerical methods for their solution. This has led to the development
    of intgrated, interactive symbolic / numeric packages which use a
    computer algebra system for the former and a standard subroutine
    library for the latter. These systems may also be viewed as simplified
    front-ends to the numerical library. To use these packages, however, a
    user must be able to select which of the many available routines is
    the most appropriate for his or her problem, which contrsts with the
    ``black-box'' style interfaces available in computer algebra
    systems. This paper describes how a computer algebra system can be
    used to make this decision, thus providing a much-simplified and more
    orthogonal interface."
}

\end{chunk}


\index{Brown, Christopher W.}
\begin{chunk}{axiom.bib}
@phdthesis{Brow99,
  author = "Brown, Christopher W.",
  title = "Solution Formula Construction for Truth Invariant CADs",
  school = "University of Delaware",
  year = "1999",
  website = "http://www.usna.edu/CS/qepcadweb/B/impl/Implementation.html",
  url = "http://www.usna.edu/Users/cs/wcbrown/research/thesis.ps.gz",
  paper = "Brow99.pdf",
  abstract = 
    "The CAD-based quantifier elimination algorithm takes a formula from
    the elementary theory of real closed fields as input, and constructs a
    CAD of the space of the formula's unquantified variables. This
    decomposition is truth invariant with respect to the input formula,
    meaning that the formula is either identically true or identically
    false in each cell of the decomposition. The method determines the
    truth of the input formula for each cell of the CAD, and then uses the
    CAD to construct a solution formula -- a quantifier free formula that
    is equivalent to the input formula. This final phase of the algorithm,
    the solution formula construction phase, is the focus of this thesis.

    An optimal solution formula construction algorithm would be {\sl
    complete} -- i.e. applicable to any truth-invariant CAD, would be {\sl
    efficient}, and would produce {\sl simple} solution formulas. Prior to
    this thesis, no method was available with even two of these three
    properties. Several algorithms are presented, all addressing problems
    related to solution formula construction. In combination, these
    provide an efficient and complete method for constructing solution
    formulas that are simple in a variety of ways.

    Algorithms presented in this thesis have been implemented using the
    SACLIB library, and integrated into QEPCAD, a SACLIB-based
    implementation of quantifier elimination by CAD. Example computations
    based on these implementations are discussed."
}

\end{chunk}

