books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Mathews, J. }
\begin{chunk}{ignore}
@article{Math89,
  author = "Mathews, J.",
  title = "Symbolic computational algebra applied to Picard iteration",
  journal = "Mathematics and computer education",
  volume = "23",
  number = "2",
  pages = "117-122",
  year = "1989",
  url = 
"http://mathfaculty.fullerton.edu/mathews/articles/1989PicardIteration.pdf",
  paper = "Math89.pdf",
  keywords = "axiomref",
    "The term ``Picard iteration'' occurs two places in undergraduate
    mathematics. In numerical analysis it is used when discussing fixed
    point iteration for finding a numerical approximation to the equation
    $s=g(x)$. In differential equations, Picard iteration is a
    constructive procedure for establishing the existence of a solution to
    a differential equation $y^{\prime} = f(x,y)$.
    
    The first type of Picard iteration uses computations to generate a
    sequence of numbers which converges to a solution. We will not present
    this application, but mention that it involves the traditional role of
    the computer as a ``number cruncher.''
    
    The second application of Picard iteration illustrates how to use a
    computer to generate a sequence of functions which converges to a
    solution. The purpose of this article is to show the step by step
    process in translating mathematical theory into the symbolic
    manipulation setting. Systems such as MACSYM, ALTRAN, REDUCE, SMP,
    MAPLE, SCRATCHPAD and muMATH are being introduced in undergraduate
    mathematics courses to assist in keeping trace of equations during
    complicated manipulations."
}

\end{chunk}

\index{Ollivier, F.}
\begin{chunk}{axiom.bib}
@inproceedings{Olli89,
  author = "Ollivier, F.",
  title = "Inversibility of rational mappings and structural 
           identifiablility in automatics",
  booktitle = "Proc. SIGSAM 1989",
  series = "SIGSAM '89",
  pages = "43-54",
  isbn = "0-89791-325-6",
  year = "1989",
  keywords = "axiomref",
  paper = "Olli89.pdf",
  abstract =
    "We investigate different methods for testing whether a rational
    mapping $f$ from $k^n$ to $k^m$ admits a rational inverse, or whether
    a polynomial mapping admits a polynomial one. We give a new solution,
    which seems much more efficient in practice than previously known ones
    using ``tag'' variables and standard basis, and a majoration for the
    degree of the standard basis calculations which is valid for both
    methods in the case of a polynomial map which is birational. We
    further show that a better bound can be given for our method, under
    some assumptions on the form of $f$. Our method can also extend to
    check whether a given polynomial belong to the subfield generated by a
    finite set of fractions.
    
    We then illustrate our algorithm, with a application to structural
    identifiability. The implantation has been done in the IBM computer
    algebra system Scratchpad II."
}

\end{chunk}

\index{Trevisan, Vilmar}
\index{Wang, Paul}
\begin{chunk}{axiom.bib}
@inproceedings{Trev91,
  author = "Trevisan, Vilmar and Wang, Paul",
  title = "Practical factorization of univariate polynomials over 
           finite fields",
  booktitle = "Proc. ISSAC 1991",
  series = "ISSAC '91",
  publisher = "ACM",
  isbn = "0-89791-437-6",
  pages = "22-31",
  year = "1991",
  url = 
  "http://lib.org/by/\_djvu\_Papers/Computer\_algebra/Algebraic\%20numbers",
  paper = "Trev91.djvu",
  abstract =
    "Research presented here is part of an effort to establish
    state-of-the-art factoring routines for polynomials. The foundation of
    such algorithms lies in the efficient factorization over a finite
    field $GF(p^k)$. The Cantor-Zassenhaus algorithm together with
    innovative ideas suggested by others is compared with the Berlekamp
    algorithm. The studies led us to design a hybrid algorithm that
    combine the strengths of the different approaches. The algorithms are
    also implemented and machine timings are obtained to measure the
    performance of these algorithms."
}

\end{chunk}

\index{Bosma, Wieb}
\index{Cannon, John}
\index{Playoust, Catherine}
\begin{chunk}{axiom.bib}
@article{Bosm97,
  author = "Bosma, Wieb and Cannon, John and Playoust, Catherine",
  title = "The Magma Algebra System I: The User Language",
  journal = "J. Symbolic Computation",
  volume = "24",
  pages = "235-265",
  year = "1997",
  keywords = "axiomref",
  url = "http://lib.org.by/_djvu/_Papers/Computer_algebra/CAS%20systems/",
  paper = "Bosm97.djvu",
  abstract = 
    "In the first of two papers on MAGMA, a new system for computational
    algebra, we present the MAGMA language, outline the design principles
    and theoretical background, and indicate its scope and use. Particular
    attention is given to the constructors for structures, maps, and sets."
}

\end{chunk}

\index{Salvy, Bruno}
\begin{chunk}{axiom.bib}
@techreport{Salv89,
  author = "Salvy, Bruno",
  title = "Examples of automatic asymptotic expansions",
  institution = "Inst. Nat. Recherche Inf. Autom.",
  type = "technical report",
  number = "114",
  year = "1989",
  paper = "Salv89.pdf",
  comment = "SIGSAM Bulletin Vol 25 No 2 1991 pp4-17",
  keywords = "axiomref",
  abstract =
    "We describe the current state of a Maple library, gdev, designed to
    perform asymptotic expansions for a large class of expressions. Many
    examples are provided, along with a short sketch of the underlying
    principles. At the time when this report is written, a striking
    feature of these examples is that none of them can be computed
    directly with any of today's most widespread symbolic computation
    systems (Macsyma, Mathematica, Maple or Scratchpad II)."
}

\end{chunk}

\index{Bronstein, Manuel}
\begin{chunk}{axiom.bib}
@inproceedings{Bron96b,
  author = "Bronstein, Manuel",
  title = "On the Factorization of Linear Ordinary Differential Operators",
  booktitle = "Mathematics and Computers in Simulation",
  volume = "42",
  number = "4-6",
  pages = "387-389",
  year = "1996",
  paper = "Bro96b.pdf",
  abstract = 
    "After reviewing the arithmetic of linear ordinary differential
    operators, we describe the current status of the factorisation
    algorithm, specially with respect to factoring over non-algebraically
    closed constant fields. We also describe recent results from Singer
    and Ulmer that reduce determining the differential Galois group of an
    operator to factoring."
}

\end{chunk}

\index{Diaz, Glauco Alfredo Lopez}
\begin{chunk}{axiom.bib}
@phdthesis{Diaz06,
  author = "Diaz, Glauco Alfredo Lopez",
  title = "Symbolic Methods for Factoring Linear Differential Operators",
  school = "Johannes Kepler Universitat, Linz",
  year = "2006",
  month = "February",
  paper = "Diaz06.pdf",
  keywords = "axiomref",
  abstract = 
    "A survey of symbolic methods for factoring linear differential
    operators is given. Starting from basic notions – ring of operators,
    differential Galois theory – methods for finding rational and
    exponential solutions that can provide first order right-hand factors
    are considered. Subsequently several known algorithms for
    factorization are presented. These include Singer’s eigenring
    factorization algorithm, factorization via Newton polygons, van
    Hoeij’s methods for local factorization, and an adapted version of
    Pade approximation.
    
    In addition a procedure based on pure algebraic methods for factoring
    second order linear partial differential operators is
    developed. Splitting an operator of this kind reduces to solving a
    system of linear algebraic equations. Those solutions which satisfy a
    certain different ial condition, immediately produce linear factors of
    the operator. The method applies also to operators of third order,
    thereby resulting in a more complicated system of equations. In
    contrast to the second order case, differential equations must also be
    solved, which, in particular cases, are simplified with the aid of
    characteristic sets.
    
    Finally, complete decomposition into linear factors of ordinary
    differential operators of arbitrary order is discussed. A splitting
    formula is developed, provided that a linear basis of solutions is
    available.  This theoretical representation is valuable in
    understanding the nature of the classical Beke algorithm and its
    variants like the algorithm LODEF by Schwarz and the Beke-Bronstein
    algorithm."
}

\end{chunk}

\index{Schwarz, Fritz}
\begin{chunk}{axiom.bib}
@inproceedings{Schw89,
  author = "Schwarz, Fritz",
  title = "A factorization algorithm for linear ordinary 
           differential equations",
  booktitle = "Proc. SYMSAC 1989",
  series = "SYMSAC '89",
  isbn = "0-89791-325-6",
  year = "1989",
  pages = "17-25",
  keywords = "axiomref",
  abstract = 
    "The reducibility and factorization of linear homogeneous differential
    equations are of great theoretical and practical importance in
    mathematics.  Although it has been known for a long time that
    factorization is in principle a decision procedure, its use in an
    automatic differential equation solver requires a more detailed
    analysis of the various steps involved. Especially important are
    certain auxiliary equations, the so-called associated equations. An
    upper bound for the degree of its coefficients is derived.  Another
    important ingredient is the computation of optimal estimates for the
    size of polynomial and rational solutions of certain differential
    equations with rotational coefficients. Applying these results, the
    design of the factorization algorithm LODEF and its implementation in
    the Scratchpad II Computer Algebra System is described.",
}

\end{chunk}

\index{Schwarz, Fritz}
\begin{chunk}{axiom.bib}
@inproceedings{Schw89,
  author = "Schwarz, Fritz",
  title = "A factorization algorithm for linear ordinary 
           differential equations",
  booktitle = "Proc. SYMSAC 1989",
  series = "SYMSAC '89",
  isbn = "0-89791-325-6",
  year = "1989",
  pages = "17-25",
  keywords = "axiomref",
  paper = "Schw89.pdf",
  abstract = 
    "The reducibility and factorization of linear homogeneous differential
    equations are of great theoretical and practical importance in
    mathematics.  Although it has been known for a long time that
    factorization is in principle a decision procedure, its use in an
    automatic differential equation solver requires a more detailed
    analysis of the various steps involved. Especially important are
    certain auxiliary equations, the so-called associated equations. An
    upper bound for the degree of its coefficients is derived.  Another
    important ingredient is the computation of optimal estimates for the
    size of polynomial and rational solutions of certain differential
    equations with rotational coefficients. Applying these results, the
    design of the factorization algorithm LODEF and its implementation in
    the Scratchpad II Computer Algebra System is described.",
}

\end{chunk}

\index{Fateman, Richard J.}
\index{Caspi, Eylon}
\begin{chunk}{axiom.bib}
@misc{Fate99a,
  author = "Fateman, Richard J. and Caspi, Eylon",
  title = "Parsing TeX into Mathematics",
  year = "1999",
  url = "http://lib.org.by/_djvu/_Papers/Computer_algebra/CAS%20systems/",
  paper = "Fate99a.djvu",
  keywords = "axiomref",
  abstract =
    "Communication, storage, transmission, and searching of complex
    material has become increasingly important. Mathematical computing in
    a distributed environment is also becoming more plausible as libraries
    and computing facilities are connected with each other and with user
    facilites. TeX is a well-known mathematical typesetting language, and
    from the display perspective it might seem that it could be used for
    communication between computer systems as well as an intermediate form
    for the results of OCR (optical character recognition) of mathematical
    expressions. There are flaws in this reasoning, since exchanging
    mathematical informaiton requires a system to parse and semantically
    ``understand'' the TeX, even if it is ``ambiguous'' notationally. A
    program we developed can handle 43\% of 10,740 TeX formulas in a
    well-known table of integrals. We expect that a higher success rte can
    be achieved easily."
}

\end{chunk}

\index{Sit, William Y.}
\begin{chunk}{axiom.bib}
@inproceedings{Sitx89,
  author = "Sit, William Y.",
  title = "On Goldman's algorithm for solving first-order multinomial 
           autonomous systems",
  booktitle = "Proc. Algebraic Algorithms and Error-Correcting Codes, AAECC-6",
  series = "Lecture Notes in Computer Science 357",
  location = "Rome, Italy",
  year = "1988",
  isbn = "3-540-51083-4",
  pages = "386-395",
  keywords = "axiomref",
  abstract =
    "In this article, a brief exposition of a method for finding first
    integrals for first order multinomial autonomous systems (FOMAS) of
    ordinary differential equations with constant coefficients will be
    given. The method is a simplified as well as a redesigned version
    based on a paper of Goldman (1987). We shall see how it can be applied
    to FOMAS with parametric coefficients. The algorithm is currently
    being implemented by the author, using the SCRATCHPAD II computer
    algebra language and system at the IBM T.J. Watson Research Center.
    
    FOMAS occur and are of interest in many disciplines and their first
    integrals (or trajectories of motion) are generally difficult to
    find. Examples of FOMAS are too numerous to list, some well-known ones
    are the Riccati equation, the Lotka-Volterra equations for competing
    populations, Selkov's model for chemical reactions, the Lorenz system
    of the Rayleigh-Bernard problem, and Hamiltonian systems (where the
    Hamiltonian is a sum of monomial terms with constant coefficients).
    
    Let $Y=(y_1,\ldots,y_n)$ be $n$ functions depending on the variable
    $\tau$. A monomial in $Y$ is a product of the form $y_1^{k_1}\cdots
    y_n^{k_n}$, where $k_1,\ldots,k_n$ are constants. If
    $K=(k_1,\ldots,k_n)$, we shall denote the monomial in $Y$ by $Y^K$,
    and $K$ is called the exponent vector for the monomial. By convention,
    exponent vectors are column vectors, but whenever convenient, we shall
    write exponent vectors as row vectors. We say that $Y$ satisfies a
    first-order multinomial autonomous system (FOMAS) if for each $i$, $1
    \le i \le n$, $y_i$ satisfies a first order differential equation of
    the form:
    \[y_i^{\prime} = f_i(Y)\quad\quad\quad(1)\]
    where $f_i$ is a linear combination of monomials in $Y$ with coefficients
    which may be either constants or parametric constants. For example, the
    Lotka-Volterra equations for three competing species considered by
    Schwarz and Steeb (1984), form a FOMAS:
    \[x_1^{\prime}=x_1(1+ax_2+bx_3)\]
    \[x_2^{\prime}=x_2(1-ax_1+bx_3)\]
    \[x_3^{\prime}=x_3(1-bx_1-cx_2)\]
    When the exponent vectors occuring in $f_i$ are all non-negative integers,
    as in the example above, a FOMAS reduces to a polynomial autonomous
    system (FOPAS).
    
    A computer program was developed by Schwarz (1986) to compute the
    first integrals of FOPAS's which are themselves polynomials in
    $y_1,\ldots,y_n$. Schwarz's algorithm literally takes a general
    polynomial of a fixed degree $d$ in $n$ variables and substitutes it
    into (1). This method does not work well on a FOMAS, because in a
    FOMAS, the exponent vectors need not have integral components. Also,
    it wll not find integrals with exponent vectors that involve
    fractional or irrational numbers.
    
    Goldman (1987) proved a theorem which gives necessary and sufficient
    conditions for the existence of a multinomial first integral for
    FOMAS. The proof also contained the outline of an algorithm for
    finding such integrals. In Goldman's paper, he introduced the notion
    of an integral array, which is a certain matrix satisfying some 10
    conditions. He gave a few hints and several examples but did not
    elaborate on how such an integral array can be found in general
    (except in the case $q=2$). Assuming such an array is found, he can
    compute the integral, in most cases, by solving systems of linear
    equations, or at worse in certain cases, by solving a system of
    algebraic equations. It was not clear when algebraic conditions are
    necessary.
    
    In this brief exposition, Goldman's method will be expanded to a
    complete algorithm with a new simplified notation. The integral arrays
    are replaced by addition schemes (which is equivalent to integral
    arrays with some conditions removed). The generation of addition
    schemes is a combinatorial problem unrelated, in a sense, to
    FOMAS. When the first integral is a polynomial, the additioin scheme
    is trivial to compute. We shall now begin by explaining some details
    of this theory."
}

\end{chunk}

\index{Bronstein, Manuel}
\begin{chunk}{axiom.bib}
@misc{Bronxx,
  author = "Bronstein, Manuel",
  title = "Symbolic Integration in Computer Algebra",
  url = "http://www.iaea.org/inis/collection/NCLCollectionStore/_Public/26/042/26042580.pdf",
  paper = "Bron90.pdf",
  year = "1990",
  keywords = "axiomref",
  abstract =
    "One major goal of symbolic integrators is to determine under what
    circumstances the integral of the elementary functions of calculus can
    themselves be expressed as elementary functions.  While using tables
    and the ad hoc tricks taught in calculus courses can have some limited
    success, a decision procedure is necessary in all but the most trivial
    cases.  The first complete algorithm for solving this problem was
    presented by Risch in 1969, but its complexity, specially when
    algebraic functions are present in the integrand, has prevented it
    from being fully implemented.  Over the past 20 years, the Risch
    integration algorithm has been completed, extended, and improved to
    such a point that recent computer algebra systems can integrate
    elementary functions without using any of the heuristics traditionally
    taught in calculus courses and used by older systems.  In this talk,
    we give an overview and description of the algorithms used in the
    Scratchpad symbolic integrator, and illustrate them with integrals
    drawn from the physical sciences."
}

\end{chunk}

\index{Wang, Dongming}
\begin{chunk}{axiom.bib}
@article{Wang89,
  author = "Wang, Dongming",
  title = "A program for computing the Liapunov functions and Liapunov 
           constants in Scratchpad II",
  journal = "SIGSAM Bulletin",
  volume = "23",
  number = "4",
  pages = "25-31",
  year = "1989",
  keywords = "axiomref",
  abstract =
    "This report describes the implementation and use of a program for
    computing the Liapunov functions and Liapunov constants for a class
    of differential systems in Scratchpad II"
}

\end{chunk}

\index{Davenport, James H.}
\begin{chunk}{axiom.bib}
@misc{Dave15,
  author = "Davenport, James H.",
  title = "SIAM AAG 15 and ICIAM 2015",
  url = "http://people.bath.ac.uk/masjhd/Meetings/AAG-ICIAM15.pdf",
  paper = "Dave15.pdf",
  keywords = "axiomref"
}

\index{Watt, Stephen M.}
\begin{chunk}{axiom.bib}
@inproceedings{Watt89,
  author = "Watt, Stephen M.",
  title = "A fixed point method for power series computation",
  booktitle = "Proc. ISSAC '88",
  series = "Lecture Notes in Computer Science 358",
  location = "Rome, Italy",
  pages = "206-217",
  isbn = "3-540-51084-2",
  year = "1988",
  series = "AAECC-6, ISSAC '88",
  keywords = "axiomref",
  abstract =
    "This paper presents a novel technique for manipulating structures
    which represents infinite power series.
    
    When power series are implemented using lazy evaluation, many
    operations can be written as simple recursive procedures. For example,
    the programs to generate the series for the elementary transcendental
    functions are almost transliterations of the defining integral
    equations. However, a naive lazy algorithm provides an implementation
    which may be orders of magnitude slower than a method which
    manipulates the coefficients explicitly.
    
    The technique described here allows a power series to be defined in a
    very natural but computationally inefficient way and transforms it to
    an equivalent, efficient form. This is achieved by using a fixed point
    operator on the delayed part to remove redundant calculations.
    
    This paper describes this fixed point method and the class of problems
    to which it is applicable. It has been used in Scratchpad II to
    improve the performance of a number of operations on infinite series,
    including division, reversion, special functions and the solution of
    linear and non-linear ordinary differential equations.
    
    A few examples are given of the method and of the speed up
    obtained. To illustrate, the computation of the first $n$ terms of
    exp($u$) for a dense, infinite series $u$ is reduced from $O(n^4)$ to
    $O(n^2)$ coefficient operations, the same as required by the standard
    on-line algorithms."
}

\end{chunk}

\index{Fateman, Richard J.}
\begin{chunk}{axiom.bib}
@inproceedings{Fate90,
  author = "Fateman, Richard J.",
  title = "Advances and trends in the design and construction of algebraic 
           manipulation systems",
  booktitle = "Proc. ISSAC 1990",
  publisher = "ACM",
  pages = "60-67",
  isbn = "0-89791-401-5",
  year = "1990",
  paper = "Fate90.pdf",
  url = "http://people.eecs.berkeley.edu/~fateman/papers/advances.pdf",
  keywords = "axiomref",
  abstract =
    "We compare and contrast several techniques for the implementation of
    components of an algebraic manipulation system. On one hand is the
    mathematical-algebraic approach which chaaracterizes (for example)
    IBM's Axiom. On the other hand is the more {\sl ad hoc} approach which
    characterizes many other popular systems (for example, Macsyma,
    Reduce, Maple, and Mathematica). While the algebraic approach has
    generally positive results, careful examination suggests that there
    are significant remaining problems, expecially in the representation
    and manipulation of analytical, as opposed to algebraic,
    mathematics. We describe some of these problems and some general
    approaches for solutions."
}

\end{chunk}

\index{Fortenbacher, Albrecht}
\begin{chunk}{axiom.bib}
@inproceedings{Fort90,
  author = "Fortenbacher, Albrecht",
  title = "Efficient type inference and coercion in computer algebra",
  booktitle = "Design and Implementation of Symbolic Computation Systems",
  series = "Lecture Notes in Computer Science 429",
  pages = "56-60",
  isbn = "0-387-52531-9",
  year = "1990",
  keywords = "axiomref",
  abstract =
    "Computer algebra systesm of the new generation, like SCRATCHPAD, are
    characterized by a very rich type concept, which models the
    relationship between mathematical domains of computation. To use these
    systems interactively, however, the user should be freed of type
    information. A type inference mechanism determines the appropriate
    function to call. All known models which allow to define a semantics
    for type inference cannot express the rich ``mathematical'' type
    structure, so presently type inference is done heuristically. The
    following paper defines a semantics for a subproblem therof, namely
    coercion, which is based on rewrite rules. From this definition, an
    efficient coercion algorithm for SCRATCHPAD is constructed using graph
    techniques."
}

\end{chunk}

\index{Weber, Andreas}
\begin{chunk}{axiom.bib}
@inproceedings{Webe05,
  author = "Weber, Andreas",
  title = "A Type-Coercion Problem in Computer Algebra",
  booktitle = "Artificial Intelligence and Symbolic Mathematical Computing",
  series = "Lecture Notes in Computer Science 737",
  year = "2005",
  publisher = "Springer",
  pages = "188-194",
  paper = "Webe05.pdf",
  abstract = 
    "An important feature of modern computer algebra systems is the
    support of a rich type system with the possibility of type inference.
    
    Basic features of such a system are polymorphism and coercion between
    types. Recently the use of order-sorted rewrite systems was proposed
    as a general framework.
    
    We will give a quite simple example of a family of types arising in
    computer algebra whose coercion relations cannot be captured by a
    finite set of first-order rewrite rules."
}

\end{chunk}

\index{Fouche, Francois}
\begin{chunk}{axiom.bib}
@techreport{Fouc90,
  author = "Fouche, Francois",
  title = "Une implantation de l'algorithme de Kovacic en Scratchpad",
  type = "technical report",
  number = "ULP-IRMA-447-P-254",
  year = "1990",
  institution = {Institut de Recherche Math{\'{e}}matique Avanc{\'{e}}e''},
  location = "Strasbourg, France",
  keywords = "axiomref"
}

\end{chunk}

\index{Duval, Anne}
\index{Loday-Richaud, Michele}
\begin{chunk}{axiom.bib}
@article{Duva92,
  author = "Duval, Anne and Loday-Richaud, Michele",
  title = "Kovacic's Algorithm and Its Application to Some Families 
           of Special Functions",
  journal = "Applicable Algebra in Engineering, Communication, and Computing",
  series = "AAECC 3",
  pages = "211-246",
  year = "1992",
  publisher = "Springer-Verlag",
  keywords = "axiomref",
  abstract =
    "We apply the Kovacic algorithm to some families of special functions,
    mainly the hypergeometric one and that of Heun, in order to discuss
    the existence of closed-form solutions. We begin by giving a slightly
    modified version of the kovacic algorithm and a sketch proof."
}

\end{chunk}

\index{Lewis, Robert H.}
\index{Wester, Michael}
\begin{chunk}{axiom.bib}
@article{Lewi99,
  author = "Lewis, Robert H. and Wester, Michael",
  title = "Comparison of polynomial-orienged computer algebra systems",
  journal = "SIGSAM Bulletin",
  volume = "33",
  number = "4",
  pages = "5-13",
  year = "1999",
  url = "https://home.bway.net/lewis/cacomp.ps",
  paper = "Lewi99.pdf",
  keywords = "axiomref",
  abstract =
    "Exact symbolic computation with polynomials and matrices over
    polynomial rings has wide applicability to many fields [Hereman96,
    Lewis99]. By ``exact symbolic'', we mean computation with polynomials
    whose coefficients are integers (of any size), rational numbers, or
    from finite fields, as opposed to coefficients that are ``floats'' of a
    certain precision. Such computation is part of most computer algebra
    (CA) systems. Over the last dozen years, several large CA systems have
    become widely available, such as Axiom, Derive, Macsyma, Maple,
    Mathematica and Reduce. They tend to have great breadth, be produced
    by profit-making companies, and be relatively expensive, at least for
    a full blown non-student version. However, most if not all of these
    systems have difficulty computing with the polynomials and matrices
    that arise in actual research. Real problems tend to produce large
    polynomials and large matrices that the general CA systems cannot
    handle [Lewis99].
    
    In the last few years, several smaller CA systems focused on
    polynomials have been produced at universities by individual
    researchers or small teams. They run on Macs, PCs and workstations.
    They are freeware or shareware. Several claim to be much more
    efficient than the large systems at exact polynomial computations. The
    list of these systems includes CoCoA, Fermat, MuPAD, Pari-Gp and
    Singular [CoCoA, Fermat, MuPAD, Pari-Gp, Singular].
    
    In this paper, we compare these small systems to each other and to two
    of the large systems (Magma and Maple) on a set of problems involving
    exact symbolic computation with polynomials and matrices. The problems
    here involve:
    \begin{itemize}
    \item the ground rings $\mathbb{Z}$, $\mathbb{Q}$, $\mathbb{Z}/p$ 
    and other finite fields
    \item basic arithmetic of polynomials over the ground ring
    \tem basic arithmetic of rational functions over the ground ring
    \item polynomial evaluation (substitution)
    \item matrix normal form
    \item determinants and characteristic polynomial
    \item GCDs of multivariate polynomial
    \item resultants
    \end{itemize}"
}

\end{chunk}

\index{Ganzha, Victor G.}
\index{Vorozhtsov, Evgenii V.}
\index{Wester, Michael}
\begin{chunk}{axiom.bib}
@book{Ganz00,
  author = "Ganzha, Victor G. and Vorozhtsov, Evgenii V. and Wester, Michael",
  title = "An Assessment of the Efficiency of Computer Algebra Systems in 
           the Solution of Scientific Computing Problems",
  booktitle = "Computer Algebra in Scientific Computing",
  year = "2000",
  isbn = "978-3-540-41040-9",
  publisher = "Springer",
  pages = "145-166",
  keywords = "axiomref",
  abstract =
    "Computer algebra systems (CASs) have become an important tool for the
    solution of scientific computing problems. With the increasing number
    of general purpose CASs, there is now a need for an assessment of the
    efficiency of these systems. We discuss some peculiarities associated
    with the analysis of CPU time efficiency in CASs, and then present
    results from three specific systems (Maple Vr5, Mathematics 4.0 and
    MuPAD 1.4) on a sample of intermediate size problems. These results
    show that Maple Vr5 is generally the speediest on our
    examples. Finally, we formulate some requirements for developing a
    comprehensive suite for analyzing the efficiency of CASs."
}

\end{chunk}

\index{Zimmermann, Paul}
\begin{chunk}{axiom.bib}
@misc{Zimm96,
  author = "Zimmermann, Paul",
  title = "Wester's test suite in MuPAD 1.3",
  year = "1996",
  paper = "Zimm96.pdf",
  keywords = "axiomref",
  abstract =
    "In December 1994, Michael Wester made a review of the mathematical
    capabilities of different computer algebra systems, namely Axiom,
    Derive, Macsyma, Maple, Mathematica and Reduce. This review, which is
    available by anonymous ftp from math.unm.edu, file pub/cas/Paper.ps,
    consists of 131 tests in different domains of mathematics (arithmetic,
    algebraic equations, differential equations, integration, operator
    computation, series expansions, limits).
    
    We describe in this paper the problems that can be solved with MuPAD
    1.3, and how to solve them. The problems marked as [New] are solved
    using new functionalities of the version 1.3 with respect to 1.2.2"
}

\end{chunk}

\index{Zimmermann, Paul}
\begin{chunk}{axiom.bib}
@misc{Zimm95,
  author = "Zimmermann, Paul",
  title = "Wester's test suite in MuPAD 1.2.2",
  year = "1995",
  paper = "Zimm95.pdf",
  keywords = "axiomref",
  abstract =
    "A few months ago, Michael Wester made a review of the mathematical
    capabilities of different computer algebra systems, namely Axiom,
    Derive, Macsyma, Maple, Mathematica and Reduce. This review, which is
    available by anonymous ftp from math.unm.edu, file pub/cas/Paper.ps,
    consists of 131 tests in different domains of mathematics (arithmetic,
    algebraic equations, differential equations, integration, operator
    computation, series expansions, limits).
    
    We describe in this paper the problems that can be solved with MuPAD
    1.2.2, and how to solve them. The problems marked as [New] are solved
    using new functionalities of the version 1.2.2 with respect to 1.2.1"
}

\end{chunk}

\index{Martinez-Moro, Edgar}
\index{Kotsireas, Ilias}
\begin{chunk}{axiom.bib}
@misc{ACA15,
  authors = "Martinez-Moro, Edgar Kotsireas, Ilias",
  title = "21st Conference on Applications of Computer Algebra",
  keywords = "axiomref",
  conference = "Sessions of ACA2015",
  location = "Kalamata, Greece",
  year = "2015",
  url = "http://www.singacom.uva.es/ACA2015/latex/ACAproc.pdf",
  paper = "ACA15.pdf"
}

\end{chunk}

