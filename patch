books/bookvolbib add references

Goal: Proving Axiom Correct

\index{Scott, Dana}
\begin{chunk}{axiom.bib}
@article{Scot76,
  author = "Scott, Dana",
  title = {{Data Types as Lattices}},
  journal = "SIAM J. Comput.",
  volume = "5",
  year = "1976",
  pages = "522-587",
  abstract =
    "The meaning of many kinds of expressions in programming languages can
    be taken as elements of certain spaces of 'partial' objects. In this
    report these spaces are modeled in one univeral domain $P_\omega$, the
    set of all subsets of the integers. This domain renders the connection
    of this semantic theory with the ordinary theor of number theoretic
    (especailly general recursive) functions clear and straightforward.",
  paper = "Scot76.pdf"
}

\end{chunk}

\index{Bishop, Errett}
\begin{chunk}{axiom.bib}
@book{Bish12,
  author = "Bishop, Errett",
  title = {{Foundations of Constructive Analysis}},
  publisher = "ISHI Press",
  year = "2012",
  isbn = "978-4-87187-714-5"
}

\end{chunk}

\index{Asperti, Andrea}
\index{Ricciotti, Wilmer}
\index{Coer, Claudio Sacerdoti}
\index{Tassi, Enrico}
\begin{chunk}{axiom.bib}
@article{Aspe09,
  author = "Asperti, Andrea and Ricciotti, Wilmer and Coer, Claudio
            Sacerdoti and Tassi, Enrico",
  title = {{A Compact Kernel for the Calculus of Inductive Constructions}},
  journal = "Sadhana",
  volume = "34",
  number = "1",
  year = "2009",
  pages = "71-104",
  abstract =
    "The paper describes the new kernel for the Calculus of Inductive
    Constructions (CIC) implemented inside the Matita Interactive
    Theorem Prover.  The design of the new kernel has been completely
    revisited since the first release, resulting in a remarkably compact
    implementation of about 2300 lines of OCaml code. The work is meant
    for people interested in implementation aspects of Interactive
    Provers, and is not self contained . In particular, it requires good
    acquaintance with Type Theory and functional programming
    languages.",
  paper = "Aspe09.pdf"
}

\end{chunk}

\index{Asperti, Andrea}
\index{Ricciotti, Wilmer}
\index{Coer, Claudio Sacerdoti}
\index{Tassi, Enrico}
\begin{chunk}{axiom.bib}
@inproceedings{Aspe11,
  author = "Asperti, Andrea and Ricciotti, Wilmer and Coer, Claudio
            Sacerdoti and Tassi, Enrico",
  title = {{The Matita Interactive Theorem Prover}},
  booktitle = "CADE-23 Automated Deduction",
  year = "2011",
  pages = "64-69",
  abstract =
    "Matita is an interactive theorem prover being developed by the Helm
    team at the University of Bologna. Its stable version 0.5.x may be
    downloaded at http://matita.cs.unibo.it . The tool originated in the
    European project MoWGLI as a set of XML-based tools aimed to provide a
    mathematician-friendly web-interface to repositories of formal
    mathematical knoweldge, supporting advanced content-based
    functionalities for querying, searching and browsing the library. It
    has since then evolved into a fully fledged ITP, specifically designed
    as a light-weight, but competitive system, particularly suited for the
    assessment of innovative ideas, both at foundational and logical
    level. In this paper, we give an account of the whole system, its
    peculiarities and its main applications.",
  paper = "Aspe11.pdf",
}

\end{chunk}  

\index{Spitters, Bas}
\index{van der Weegen, Eelis}
\begin{chunk}{axiom.bib}
@article{Spit11,
  author = "Spitters, Bas and van der Weegen, Eelis",
  title = {{Type Classes for Mathematics in Type Theory}},
  journal = "Math. Struct. Comput. Sci.",
  volume = "21",
  number = "4",
  pages = "795-825",
  year = "2011",
  abstract =
    "The introduction of first-class type classes in the Coq system calls
    for re-examination of the basic interfaces used for mathematical 
    formalization in type theory. We present a new set of type classes for
    mathematics and take full advantage of their unique features to make
    practical a particularly flexible approach formerly thought
    infeasible. Thus, we address both traditional proof engineering
    challenges as well as new ones resulting from our ambition to build
    upon this development a library of constructive analysis in which
    abstraction penalties inhibiting efficient computation are reduced to
    a minimum.
    
    The base of our development consists of type classes representing a
    standard algebraic hierarchy, as well as portions of category theory
    and universal algebra. On this foundation we build a set of
    mathematically sound abstract interfaces for different kinds of
    numbers, succinctly expressed using categorical language and universal
    algebra constructions. Strategic use of type classes lets us support
    these high-level theory-friendly definitions while still enabling
    efficient implementations unhindered by gratuitous indirection,
    conversion or projection.
    
    Algebra thrives on the interplay between syntax and semantics. The
    Prolog-like abilities of type class instance resolution allow us to
    conveniently define a quote function, thus facilitating the use of
    reflective techniques.",
  paper = "Spit11.pdf"
}
    
\end{chunk}

\index{Coen, Claudio Sacerdoti}
\begin{chunk}{axiom.bib}
@article{Coen10,
  author = "Coen, Claudio Sacerdoti",
  title = {{Declarative Representation of Proof Terms}},
  journal = "J. Automated Reasoning",
  volume = "44",
  number = "1-2",
  pages = "25-52",
  year = "2010",
  abstract =
    "We present a declarative language inspired by the pseudo-natural
    language previously used in Matita for the explanation of proof
    terms. We show how to compile the language to proof terms and how to
    automatically generate declarative scripts from proof terms. Then we
    investigate the relationship between the two translations, identifying
    the amount of proof structure preserved by compilation and
    re-generation of declarative scripts.",
  paper = "Coen10.pdf"
}

\end{chunk}

\index{Luo, Zhaohui}
\begin{chunk}{axiom.bib}
@inproceedings{Luox96,
  author = "Luo, Zhaohui",
  title = {{Coercive Subtyping in Type Theory}},
  booktitle = "CSL'96 Euro. Ass. for Comput. Sci. Logic",
  year = "1996",
  abstract =
    "We propose and study coercive subtyping, a formal extension with
    subtyping of dependent type theories such as Martin-Lof's type theory
    [NPS90] and the type theory UTT [Luo94]. In this approach, subtyping
    with specied implicit coercions is treated as a feature at the level
    of the logical framework; in particular, subsumption and coercion are
    combined in such a way that the meaning of an object being in a
    supertype is given by coercive definition rules for the definitional
    equality. It is shown that this provides a conceptually simple and
    uniform framework to understand subtyping and coercion relations in
    type theories with sophisticated type structures such as inductive
    types and universes. The use of coercive subtyping in formal
    development and in reasoning about subsets of objects is discussed in
    the context of computer-assisted formal reasoning.",
  paper = "Luox96.pdf"
}

\end{chunk}

\index{Luo, Zhaohui}
\begin{chunk}{axiom.bib}
@misc{Luox11,
  author = "Luo, Zhaohui",
  title = {{Type-Theoretical Semantics with Coercive Subtyping}},
  year = "2011",
  comment = "Lecture Notes 2011 ESSLLI Summer School, Ljubljana,
             Slovenia",
  paper = "Luox11.pdf"
}

\end{chunk}

\index{Bailey, Anthony}
\begin{chunk}{axiom.bib}
@phdthesis{Bail98,
  author = "Bailey, Anthony",
  title = {{The Machine-Checked Literate Formalisation of Algebra
             in Type Theory}},
  school = "University of Manchester",
  year = "1998",
  link =
  "\url{http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.464.1249&rep=rep1&type=pdf}",
  abstract =
    "I present a large-scale formalisation within a type theory of a
    proof of a result from abstract algebra.  The formalisation body
    consists of files that are machine-checked to ensure their
    correctness, and also processed to produce a report on the proof that
    is human-readable.  The resulting presentation is intended to approach
    being a standard informal account of some mathematics.  In addition
    to presenting this proof, the thesis also identifies and examines
    problems in reconciling the formal nature of the development with the
    wish for it to be easy to read.  It presents some tools and methodologies 
    for solving these problems, and discusses the advantages and
    disadvantages of these solutions.  In particular, it addresses the
    implementation and use of implicit coercions within the type theory,
    the styles of proof that can be used, and the borrowing of concepts
    from the literate programming paradigm.  To be more specific, the
    algebra in question is a constructive version of the fundamental
    theorem of Galois Theory. The formalisation is developed within a
    variant of the Unified Theory of Types that is implemented by a
    modified version of the LEGO proof-checker.",
  paper = "Bail98.pdf",
  keywords = "axiomref"
}

\end{chunk}

\index{Mulligan, Dominic P.}
\begin{chunk}{axiom.bib}
@misc{Mull13,
  author = "Mulligan, Dominic P.",
  title = {{Mosquito: An Aimplementation for Higher-Order Logic}},
  school = "University of Cambridge",
  year = "2013",
  abstract =
    "We present Mosquito: an experimental stateless, pure, largely total
    LCF-style implementation of higher-order logic using Haskell as a
    metalanguage. We discuss details of the logic implemented, kernel
    design, and novel proof state and tactic representations.",
  paper = "Mull13.pdf"
}

\end{chunk}


