books/bookvolbib add Coercion references

Goal: Proving Axiom Correct

\index{Traytel, Dmitriy}
\index{Berghofer, Stefan}
\index{Nipkow, Tobias}
\begin{chunk}{axiom.bib}
@article{Tray11,
  author = "Traytel, Dmitriy and Berghofer, Stefan and Nipkow, Tobias",
  title = "Extending Hindley-Milner Type Inference with Coercive
           Structural Subtyping",
  journal = "LNCS",
  volume = "7078",
  pages = "89-104",
  year = "2011",
  abstract = 
    "We investigate how to add coercive structural subtyping to a type
    system for simply-typed lambda calculus with Hindley-Milner 
    polymorphism. Coercions allow to convert between different types, and
    their automatic insertion can greatly increase readability of
    terms. We present a type inference algorithm that, given a term
    without type information, computes a type assignment and determines at
    which positions in the term coercions have to be inserted to make it
    type-correct according to the standard Hindley-Milner system (without
    any subtypes). The algorithm is sound and, if the subtype relation
    on base types is a disjoint union of lattices, also complete. The
    algorithm has been implemented in the proof assistant Isabelle.",
  paper = "Tray11.pdf",
  keywords = "coercion"
}

\end{chunk}

\index{Ab\'anades, M.}
\index{Botana, F.}
\index{Kov\'acs, Z.}
\index{Recio, T.}
\index{S\'olyom-Gecse, C.}
\begin{chunk}{axiom.bib}
@article{Aban16,
  author = "Abanades, M. and Botana, F. and Kovacs, Z. and Recio, T. and
            Solyom-Gecse, C.",
  title = "Development of automatic reasoning tools in GeoGebra",
  journal = "ACM Comm. Computer Algebra",
  volume = "50",
  pages = "85-88",
  year = "2016",
  abstract =
    "Much effort has been put into the implementation of automatic proving
    in interactive geometric environments (e.g. Java Geometry Expert,
    GeoGebra). The closely related concept of automatic discovery, remains
    however almost unexplored.
    
    This software presentation will demonstrate our results towards the
    incorporation of automatic discovery capabilities into GeoGebra, an
    educational software with tens of millions of users worldwide. As main
    result, we report on a new command, currently available in the
    official version, that allows the automatic discovery of loci of
    points in diagrams defined by implicit conditions. This represents an
    extension of a previous command, similar in nature, but restricted to
    loci defined by the standard mover-tracer construction. Our proposal
    successfully automates the `dummy locus dragging' in dynamic
    geometry. This makes the cycle conjecturing-checking-proving
    accessible for general users in elementary geometry.",
  paper = "Aban16.pdf"
}

\end{chunk}

\index{Avigad, Jeremy}
\begin{chunk}{axiom.bib}
@article{Avig12a,
  author = "Avigad, Jeremy",
  title = "Type Inference in Mathematics",
  journal = "European Association of Theoretical Computer Science",
  volume = "106",
  pages = "78-98",
  year = "2012",
  abstract =
    "In the theory of programming languages, type inference is the process
    of inferring the type of an expression automatically, often making use
    of information from the context in which the expression appears. Such
    mechanisms turn out to be extremely useful in the practice of
    interactive theorem proving, whereby users interact with a
    computational proof assistant to construct formal axiomatic
    derivations of mathematical theorems. This article explains some of
    the mechanisms for type inference used by the Mathematical
    Components project, which is working towards a verification of the
    Feit-Thompson theorem.",
  paper = "Avig12a.pdf",
  keywords = "coercion"
}

\end{chunk}

\index{Abraham, Erika}
@inproceedings{Abra15,
  author = "Abraham, Erika",
  title = "Building Bridges between Symbolic Computation and Satisfiability
           Checking",
  booktitle = "ISSAC 15",
  year = "2015",
  pages = "1-6",
  publisher = "ACM",
  isbn = "978-1-4503-3435-8",
  abstract =
    "The satisfiability problem is the problem of deciding whether a
    logical formula is satisfiable. For first-order arithmetic theories,
    in the early 20th century some novel solutions in form of decision
    procedures were developed in the area of mathematical logic. With the
    advent of powerful computer architectures, a new research line started
    to develop practically feasible implementations of such decision
    procedures. Since then, symbolic computation has grown to an extremely
    successful scientific area, supporting all kinds of scientific
    computing by efficient computer algebra systems.
    
    Independently, around 1960 a new technology called SAT solving started
    its career. Restricted to propositional logic, SAT solvers showed to
    be very efficient when employed by formal methods for verification. It
    did not take long till the power of SAT solving for Boolean problems
    had been extended to cover also different theories. Nowadays, fast
    SAT-modulo-theories (SMT) solvers are available also for arithmetic
    problems.
    
    Due to their different roots, symbolic computation and SMT solving
    tackle the satisfiability problem differently. We discuss differences
    and similarities in their approaches, highlight potentials of
    combining their strengths, and discuss the challenges that come with
    this task.",
  paper = "Abra15.pdf"
}

\end{chunk}

\index{Abraham, Erika}
\begin{chunk}{axiom.bib}
@inproceedings{Abra16,
  author = "Abraham, Erika",
  title = "Symbolic Computation Techniques in Satisfiability Checking",
  booktitle = "SYNASC 2016",
  publisher = "IEEE Press",
  year = "2016",
  isbn = "978-1-5090-5707-8",
  pages = "3-10"
}

\end{chunk}

\index{Kauers, Manuel}
\begin{chunk}{axiom.bib}
@article{Kaue11,
  author = "Kauers, Manuel",
  title = "How to use Cylindrical Algebraic Decomposition",
  journal = {S\'emminaire Lotharingien de Combinatoire},
  volume = "65",
  year = "2011",
  comment = "Article B65a",
  abstract =
    "We take some items from a textbook on inequalities and show how to
    prove them with computer algebra using the Cylindrical Algebraic
    Decomposition algorithm.  This is an example collection for standard
    applications of this algorithm, intended as a guide for potential users.",
  paper = "Kaue11.pdf"
}

\end{chunk}

\index{Abraham, Erika}
\index{Jebelean, Tudor}
\begin{chunk}{axiom.bib}
@inproceedings{Abra17,
  author = "Abraham, Erika and Jebelean, Tudor",
  title = "Adapting Cylindrical Algebraic Decomposition for Proof Specific
           Tasks",
  booktitle = "IJCAI 2017",
  year = "2017",
  comment = "Extended Abstract",
  paper = "Abra17.pdf"
}

\end{chunk}

\index{Abraham, Erika}
\index{Abbott, John}
\index{Becker, Bernd}
\index{Bigatti, Anna M.}
\index{Brain, Martin}
\index{Cimatti, Alessandro}
\index{Davenport, James H.}
\index{England, Matthew}
\index{Fontaine, Pascal}
\index{Forrest, Stephen}
\index{Ganesh, Vijay}
\index{Griggio, Alberto}
\index{Kroenig, Daniel}
\index{Seiler, Werner M.}
\begin{chunk}{axiom.bib}
@misc{Abraxx,
  author = "Abraham, Erika and Abbott, John and Becker, Bernd and 
            Bigatti, Anna M. and Brain, Martin and Cimatti, Alessandro and
            Davenport, James H. and England, Matthew and Fontaine, Pascal
            and Forrest, Stephen and Ganesh, Vijay and Griggio, Alberto and
            Kroenig, Daniel and Seiler, Werner M.",
  title = "SC2 challenges: when Satisfiability Checking and Symbolic
           Computation join forces",
  year = "2017",
  abstract =
    "Symbolic Computation and Satisfiability Checking are two research
    areas, both having their individual scientific focus but with common
    interests, e.g., in the development, implementation and application
    of decision procedures for arithmetic theories.  Despite their
    commonalities, the two communities are rather weakly connected.  The
    aim of the SC 2 initiative is to strengthen the connection between
    these communities by creating common platforms, initiating interaction
    and exchange, identifying common challenges, and developing a common
    roadmap from theory along the way to tools and (industrial) applications.",
  paper = "Abraxx.pdf"
}

\end{chunk}

\index{de Moura, Leonardo}
\index{Avigad, Jeremy}
\index{Kong, Soonho}
\index{Roux, Cody}
\begin{chunk}{axiom.bib}
@misc{Mour15,
  author = "de Moura, Leonardo and Avigad, Jeremy and Kong, Soonho and 
            Roux, Cody",
  title = "Elaboration in Dependent Type Theory",
  year = "2015",
  abstract =
    "To be usable in practice, interactive theorem provers need to provide
    convenient and efficient means of writing expressions, definitions,
    and proofs. This involves inferring information that is often left
    implicit in an ordinary mathematical text, and resolving ambiguities
    in mathematical expressions. We refer to the process of passing from a
    quasi-formal and partially- specified expression to a completely
    precise formal one as {\sl elaboration}. We describe an elaboration
    algorithms for dependent type theory that has been implemented in the
    Lean theorem prover. Lean's elaborator supports higher-order
    unification, type class inference, ad hoc overloading, insertion of
    coercions, the use of tactics, and the computational reduction of
    terms. The interactions between these components are subtle and
    complex, and the elaboration algorithm has been carefully designed to
    balance efficiency and usability. We describe the central design
    goals, and the means by which they are achieved.",
  paper = "Mour15.pdf",
  keywords = "coercion"
}  

\end{chunk}

\index{Reynolds, John C.}
\begin{chunk}{axiom.bib}
@article{Reyn05,
  author = "Reynolds, John C.",
  title = "An Overview of Separation Logic",
  journal = "LNCS",
  volume = "4171",
  pages = "460-469",
  abstract = 
    "After some general remarks about program verification, we introduce
    separation logic, a novel extension of Hoare logic that can strengthen
    the applicability and scalability of program verification for
    imperative programs that use shared mutable data structures or
    shared-memory concurrency",
  paper = "Reyn05.pdf",
}

\end{chunk}

\index{Reynolds, John C.}
\begin{chunk}{axiom.bib}
@inproceedings{Reyn02,
  author = "Reynolds, John C.",
  title = "Separation Logic: A Logic for Shared Mutable Data Structures",
  booktitle = "Logic in Computer Science '02",
  year = "2002",
  pages = "55-74",
  isbn = "0-7695-1483-9",
  abstract =
    "In joint work with Peter O'Hearn and others, based on early ideas of
    Burstall, we have developed an extension of Hoare logic that permits
    reasoning about low-level imperativeprograms that use shared mutable
    data structure.The simple imperative programming language is extended
    with commands (not expressions) for accessing and modifying shared
    structures, and for explicit allocation and deallocation of
    storage. Assertions are extended by introducing a "separating
    conjunction" that asserts that its sub-formulas hold for disjoint
    parts of the heap, and a closely related "separating
    implication". Coupled with the inductive definition of predicates on
    abstract data structures, this extension permits the concise and
    flexible description of structures with controlled sharing.In this
    paper, we will survey the current development of this program logic,
    including extensions that permit unrestricted address arithmetic,
    dynamically allocated arrays, and recursive procedures. We will also
    discuss promising future directions.",
  paper = "Reyn02.pdf"
}

\end{chunk}

\index{Hearn, Peter W.O.}
\begin{chunk}{axiom.bib}
@misc{Hear12,
  author = "Hearn, Peter W.O.",
  title = "A Primer on Separation Logic (and Automatic Program 
           Verification and Analysis",
  year = "2012",
  abstract =
    "These are the notes to accompany a course at the Marktoberdorf PhD
    summer school in 2011. The course consists of an introduction to
    separation logic, with a slant towards its use in automatic program
    verification and analysis.",
  paper = "Hear12.pdf"
}

\end{chunk}

\index{Kaliszyk, Cezary}
\begin{chunk}{axiom.bib}
@phdthesis{Kali09,
  author = "Kaliszyk, Cezary"
  title = "Correctness and Availability: Building Computer Algebra on top
           of Proof Assistants and making Proof Assistants available over
           the Web",
  year = "2009",
  school = "Radboud University, Nijmegen",
  link = "\url{http://cl-informatik.uibk.ac.at/users/cek/docs/09/kaliszyk\_thesis\_webdoc.pdf}",
  abstract =
    "In this thesis we present an approach to extending the usability
     of proof assistants in mathematics and computer science. We do it
     in two ways: by combining proof assistants with computer algebra
     systems and by providing interactive access to such systems on
     the web.",
  paper = "Kali09.pdf"
}

\end{chunk}
