books/bookvolbib add additional references

Goal: Proving Axiom Correct

\index{Dybjer, Peter}
\begin{chunk}{axiom.bib}
@inproceedings{Dybj90,
  author = "Dybjer, Peter",
  title = {Inductive Sets and Families in Marin-L\"of's Type Theory and
           Their Set-Theoretic Semantics},
  booktitle = "Proc. First Workshop on Logical Frameworks",
  year = "1990",
  link = 
    "\url{http://www.cse.chalmers.se/~peterd/papers/Setsem\_Inductive.pdf}",
  abstract =
    "{Martin-L\"of}'s type theory is presented in several steps. The kernel
    is a dependently typed $\lambda$-calculs. Then there are schemata for
    inductive sets and families of sets and for primitive recursive functions
    and families of functions. Finally, there are set formers (generic
    polymorphism) and universes. At each step syntax, inference rules, and
    set-theoretic sematics are given",
  paper = "Dybj90.pdf"
}

\end{chunk}

\index{Goguen, Healfdene}
\index{McBride, Conor}
\index{McKinna, James}
\begin{chunk}{axiom.bib}
@article{Gogu06,
  author = "Goguen, Healfdene and McBride, Conor and McKinna, James",
  title = "Eliminating Dependent Pattern Matching",
  year = "2006",
  journal = "Lecture Notes in Computer Science",
  volume = "4060",
  pages = "521-540",
  link = "\url{http://cs.ru.nl/~james/RESEARCH/goguen2006.pdf}",
  abstract =
    "This paper gives a reduction-preserving translation from Coquand's
    {\sl dependent pattern matching} into a traditional type theory
    with universes, inductive types and relations and the axiom K. This
    translation serves as a proof of termination for structurally
    recursive pattern matching programs, provides an implementable
    compilation technique in the style of functional programming languages,
    and demonstrates the equivelence with a more easily understood type
    theory.",
  paper = "Gogu06.pdf"
}

\end{chunk}

\index{McBride, Conor}
\index{Goguen, Healfdene}
\index{McKinna, James}
\begin{chunk}{axiom.bib}
@article{Mcbr06,
  author = "McBride, Conor and Goguen, Healfdene and McKinna, James",
  title = "A Few Constructions on Constructors",
  journal = "Lecture Notes in Computer Science",
  volume = "3839",
  pages = "186-200",
  year = "2006",
  link = "\url{http://www.strictlypositive.org/concon.ps.gz}",
  abstract =
    "We present four constructions for standard equipment which can be
    generated for every inductive datatype: case analysis, structural
    recursion, no confusion, acyclicity. Our constructions follow a
    two-level approach -- they require less work than the standard
    techniques which inspired them. Moreover, given a suitably
    heterogeneous notion of equality, they extend without difficulty to
    inductive families of datatypes. These constructions are vital
    components of the translation from dependently typed programs in
    pattern matching style to the equivalent programs expressed in terms
    of induction principles and as such play a crucial behind-the-scenes
    role in Epigram.",
  paper = "Mcbr06.pdf"
}  

\end{chunk}

\index{Bove, Ana}
\index{Dybjer, Peter}
\begin{chunk}{axiom.bib}
@misc{Bove08,
  author = "Bove, Ana and Dybjer, Peter",
  title = "Dependent Types at Work",
  year = "2008",
  comment = "Lecture notes from LerNET Summer School, Piriapolis",
  link = 
    "\url{http://www.cse.chalmers.se/~peterd/papers/DependentTypesAtWork.pdf}",
  abstract =
    "In these lecture notes we give an introduction to functional
    programming with dependent types. We use the dependently typed
    programming language Agda which is an extension of {Martin-L\"of} type
    theory. First we show how to do simply typed functional programming in
    the style of Haskell and ML. Some differences between Agda's type
    system and the Hindley-Milner type system of Haskell and ML are also
    discussed. Then we show how to use dependent types for programming and
    we explain the basic ideas behind type-checking dependent types. We go
    on to explain the Curry-Howard identification of propositions and
    types. This is what makes Agda a programming logic and not only a
    programming language. According to Curry-Howard, we identify programs
    and proofs, something which is possible only by requiring that all
    programs terminate. However, at the end of these notes we present a
    method for encoding partial and general recursive functions as total
    functions using dependent types.",
  paper = "Bove08.pdf"
}

\end{chunk}

\index{Benke, Marcin}
\index{Dybjer, Peter}
\index{Jansson, Patrik}
\begin{chunk}{axiom.bib}
@article{Benk03,
  author = "Benke, Marcin and Dybjer, Peter and Jansson, Patrik",
  title = "Universes for generic programs and proofs in dependent type
           theory",
  journal = "Nordic Journal of Computing",
  volume = "10",
  year = "2003",
  pages = "265-269",
  link = "\url{http://www.cse.chalmers.se/~peterd/papers/generic.html}",
  abstract = 
    "We show how to write generic programs and proofs in {Martin L\"of}
    type theory. To this end we considier several extensions of
    {Martin-L\"of}'s logical framework for dependent types. Each extension
    has a universe of codes (signatures) for inductively defined sets with
    generic formation, introduction, elimination, and equality
    rules. These extensions are modeled on Dybjer and Setzer's finitely
    axiomatized theories of inductive-recursive definitions, which also
    have universese of codes for sets, and generic formation,
    introduction, elimination, and equality rules. Here we consider
    several smaller universes of interest for generic programming and
    universal algebra. We formalize one-sorted and many-sorted term
    algebras, as well as iterated, generalized, parameterized, and indexed
    inductive definitions. We also show how to extend the techniques of
    generic programming to these universes. Furthermore, we give generic
    proofs of reflexivity and substitutivity of a generic equality
    test. Most of the definitions in the paper have been implemented using
    the proof assistant Alfa for dependent type theory.",
  paper = "Benk03.pdf"
}

\end{chunk}

\index{Martin-L\"of, Per}
\begin{chunk}{axiom.bib}
@misc{Mart80,
  author = {Martin-L\"of, Per},
  title = "Intuitionistic Type Theory",
  link = "\url{http://archive-pml.github.io/martin-lof/pdfs/Bibliopolis-Book-retypeset-1984.pdf}",
  year = "1980",
  paper = "Mart80.pdf"
}

\end{chunk}

\index{Martin-L\"of, Per}
\begin{chunk}{axiom.bib}
@inproceedings{Mart85,
  author = {Martin-L\"of, Per},
  title = "Costructive Mathematics and Computer Programming",
  booktitle = "Proc Royal Soc. of London on Math. Logic and Programming Lang.",
  link = "\url{http://www.cs.tufts.edu/~nr/cs257/archive/per-martin-lof/constructive-math.pdf}",
  year = "1985",
  isbn = "0-13-561465-1",
  pages = "168-184",
  publisher = "Prentice-Hall",
  paper = "Mart85.pdf"
}

\end{chunk}

\index{Dybjer, Peter}
\index{Setzer, Anton}
\begin{chunk}{axiom.bib}
@article{Dybj03,
  author = "Dybjer, Peter and Setzer, Anton",
  title = "Induction-recursion and initial algebras",
  journal = "Annals of Pure and Applied Logic",
  volume = "124",
  year = "2003",
  pages = "1-47",
  abstract = 
    "Induction-recursion is a powerful definition method in intuitionistic
    type theory. It extends (generalized) inductive definitions and allows us
    to define all standard sets of Martin-{L\"of} type theory as well as a
    large collection of commonly occuring inductive data structures. It also
    includes a variety of universes which are constructive analogues of 
    inaccessibles and other large cardinals below the first Mahlo cardinal.
    In this article we give a new compact formalization of inductive-recursive
    definnitions by modeling them as initial algebras in slice categories. We
    give generic formation, introduction, elimination, and equality rules
    generalizing the usual rules of type theory. Moreover, we prove that the
    elimination and equality rules are equivalent to the principle of the 
    existence of initial algebras for certain endofunctors. We also show the
    equivalence of the current formulation with the formulation of 
    induction-recursion as a reflection principle given in Dybjer and
    Setzer (Lecture Notes in Comput. Sci. 2183 (2001) 93). Finally we discuss
    two type-theoretic analogues of Mahlo cardinals in set theory: an external
    Mahlo universe which is defined by induction-recursion and captured by our
    formalization, and an internal Mahlo universe, which goes beyond induction-
    recursion. We show that the external Mahlo universe, and therefore also
    the theory of inductive-recursive definitions, have proof-theoretical 
    strength of at least Rathjen's theory KPM.",
  paper = "Dybj03.pdf"
}

\end{chunk}

