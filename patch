readme add Jacob Nyffeler Smith to credits list

Goal: Axiom Documentation

\index{Smith, Jacob Nyffeler}
\begin{chunk}{axiom.bib}
@phdthesis{Smit10,
  author = "Smith, Jacob",
  title = "Techniques in Active and Generic Software Libraries",
  school = "Texas A and M University",
  year = "2010",
  link = "\url{oaktrust.library.tamu.edu/bitstream/handle/1969.1/ETD-TAMU-2010-05-7823/SMITH-DISSERTATION.pdf}",
  abstract = 
    "Reusing code from software libraries can reduce the time and effort
    to construct software systems and also enable the development of
    larger systems. However, the benefits that come from the use of
    software libraries may not be realized due to limitations in the way
    that traditional software libraries are constructed. Libraries come
    equipped with application programming interfaces (API) that help
    enforce the correct use of the abstraction in those libraries. Writing
    new components and adapting existing ones to conform to library APIs
    may require substantial amounts of ``glue'' code that potentially
    affects software's efficiency, robustness, and ease-of-maintenance. 
    If, as a result, the idea of reusing functionality from a software 
    library is rejected, no benefits of reuse will be realized.
    
    This dissertation explores and develops techniques that support the
    construction of software libraries with abstraction layers that do not
    impede efficiency. In many situations, glue code can be expected to
    have very low (or zero) performance overhead. In particular, we
    describe advances in the design and development of active libraries --
    software libraries that take an active role in the compilation of the
    user's code. Common to the presented techniques is that they may
    ``break'' a library API (in a controlled manner) to adapt the
    functionality of the library for a particular use case.
    
    The concrete contributions of this dissertation are: a library API
    that supports iterator selection in the Standard Template Library,
    allowing generic algorithms to find the most suitable traversal
    through a container, allowing (in one case) a 30-fold improvement in
    performance; the development of techniques, idioms, and best practices
    for {\tt concepts} and {\tt concept\_maps} in C++, allowing the
    construction of algorithms for one domain entirely in terms of
    formalisms from a second domain; the construction of generic
    algorithms for algorithmic differentiation, implemented as an active
    library in Spad, language of the Open Axiom computer algebra system,
    allowing algorithmic differentiation to be applied to the appropriate
    mathematical object and not just concrete data-types; and the
    description of a static analysis framework to describe the generic
    programming notion of local specialization with Spad, allowing more
    sophisticated (value-based) control over algorithm selection and
    specialization in categories and domains.
    
    We will find that active libraries simultaneously increase the
    expressivity of the underlying language and the performance of
    software using those libraries",
  paper = "Smit10.pdf",
  keywords = "axiomref",
}

\end{chunk}

