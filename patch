books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Kredel, Heinz}
\begin{chunk}{axiom.bib}
@article{Kred08,
  author = "Kredel, Heinz",
  title = "On a Java computer algebra system, 
           its performance and applications",
  journal = "Sci. Comput. Program.",
  volume = "70",
  number = "2-3",
  pages = "185-207",
  year = "2008",
  url = 
"http://ac.els-cdn.com/S0167642307001736/1-s2.0-S0167642307001736-main.pdf",
  paper = "Kred08.pdf",
  keywords = "axiomref",
  abstract =
    "This paper considers Java as an implementation language for a
    starting part of a computer algebra library. It describes a design of
    basic arithmetic and multivariate polynomial interfaces and classes
    which are then employed in advanced parallel and distributed Groebner
    base algorithms and applications. The library is type-safe due to its
    design with Java's generic type parameters and thread-safe using
    Java's concurrent programming facilities. We report on the performance
    of the polynomial arithmetic and on applications built upon the core
    library."
}

\end{chunk}

\index{Kredel, Heinz}
\begin{chunk}{axiom.bib}
@InProceedings{{Kred07,
  author = "Kredel, Heinz",
  title = "Evaluation of a Java computer algebra system",
  booktitle = "Computer Mathematics, 8th Asian symposium",
  series = "ASCM 2007",
  year = "2007",
  isbn = "978-3-540-87826-1",
  location = "Singapore",
  pages = "121-138",
  keywords = "axiomref",
  paper = "Kred07.pdf",
  url = "http://krum.rz.uni-mannheim.de/kredel/oocas-casc2010-slides.pdf",
  abstract =
    "This paper evaluates the suitability of Java as an implementation
    language for the foundations of a computer algebra library. The design
    of basic arithmetic and multivariate polynomial interfaces and classes
    have been presented. The library is type-safe due to its design with
    Java's generic type parameters and thread-safe using Java's concurrent
    programming facilities. We evaluate some key points of our library and
    differences to other computer algebra systems."
} 

\end{chunk}

\index{Cox, David}
\index{Little, John}
\index{O'Shea, Donal}
\begin{chunk}{axiom.bib}
@book{Coxx07,
  author = "Cox, David and Little, John and O'Shea, Donal",
  title = "Ideals, varieties and algorithms. An introduction to computational
           algebraic geometry and commutative algebra",
  publisher = "Springer",
  isbn = "978-0-387-35650-1",
  year = "2007",
  keywords = "axiomref",
  abstract =
    "Around 1980 two new directions in science and technique came
    together. One was Buchberger’s algorithms in order to handle Groebner
    bases in an effective way for solving polynomial equations. The second
    one was the development of the personal computers. This was the
    starting point of a computational perspective in commutative algebra
    and algebraic geometry. In 1991 the three authors invented the first
    edition of their book as an introduction for undergraduates to some
    interesting ideas in commutative algebra and algebraic geometry with a
    strong perspective to practical and computational aspects. A second
    revised edition appeared in 1996. That means from the very beginning
    the book provides a bridge for the new, computational aspects in the
    field of commutative algebra and algebraic geometry.

    To be more precise, the book gives an introduction to Buchberger’s
    algorithm with applications to syzygies, Hilbert polynomials, primary
    decompositions. There is an introduction to classical algebraic
    geometry with applications to the ideal membership problem, solving
    polynomial equations, and elimination theory. Some more spectacular
    applications are about robotics, automatic geometric theorem proving,
    and invariants of finite groups. It seems to the reviewer to carry
    coals to Newcastle for estimating the importance and usefulness of the
    book. It should be of some interest to ask how many undergraduates
    have been introduced to algorithmic aspects of commutative algebra and
    algebraic geometry following the line of the book. The reviewer will
    be sure that this will continue in the future too.  

    What are the changes to the previous editions? There is a significant
    shorter proof of the Extension Theorem, see 3.6 in Chapter 3,
    suggested by A.H.M. Levelt. A major update has been done in Appendix C
    ``Computer Algebra Systems''. This concerns in the main the section
    about MAPLE. Some minor updated information concern the use of AXIOM,
    CoCoA, Macaulay2, Magma, Mathematica, and SINGULAR. This reflects
    about the recent developments in Computer Algebra Systems. It
    encourages an interested reader to more practical exercises. The
    authors have made changes on over 200 pages to enhance clarity and
    correctness. Many individuals have reported typographical errors and
    gave the authors feedback on the earlier editions. The book is
    well-written. The reviewer guesses that it will become more and more
    difficult to earn 1 dollar (sponsored by the authors) for every new
    typographical error as it was the case also with the first and second
    edition. The reviewer is sure that it will be a excellent guide to
    introduce further undergraduates in the algorithmic aspect of
    commutative algebra and algebraic geometry."
}

\end{chunk}

\index{Li, Xin}
\index{Moreno Maza, Marc}
\index{Schost, Eric}
\begin{chunk}{axiom.bib}
@InProceedings{{Lixx07,
  author = "Li, Xin and Moreno Maza, Marc and Schost, Eric",
  title = "Fast arithmetic for triangular sets: from theory to practice",
  booktitle = "Proc 32nd ISSAC",
  series = "ISSAC 2007",
  year = "2007",
  isbn = "978-1-59593-743-8",
  location = "Canada",
  pages = "269-276",
  keywords = "axiomref",
  paper = "Lixx09.pdf",
  url = 
"http://www.csd.uwo.ca/~moreno/Publications/LiMorenoSchost-ISSAC-2007.pdf",
  abstract =
    "We study arithmetic operations for triangular families of
    polynomials, concentrating on multiplication in dimension zero. By a
    suitable extension of fast univariate Euclidean division, we obtain
    theoretical and practical improvements over a direct recursive
    approach; for a family of special cases, we reach quasi-linear
    complexity. The main outcome we have in mind is the acceleration of
    higher-level algorithms, by interfacing our low-level implemention
    with languages such as AXIOM or Maple. We show the potential for hugh
    speed-ups, by comparing two AXIOM implementations of vanHoeij and
    Monagan's modular GCD algorithm."
}

\end{chunk}

\index{Monagan, Michael}
\index{Pearce, Roman}
\begin{chunk}{axiom.bib}
@InProceedings{{Lixx07,
  author = "Monagan, Michael and Pearce, Roman",
  title = "Polynomial division using dynamic arrays, heaps, and packed 
           exponent vectors",
  booktitle = "Computer algebra in scientific computing",
  series = "CASC 2007",
  year = "2007",
  isbn = "978-3-540-75186-1",
  location = "Bonn",
  pages = "295-315",
  keywords = "axiomref",
  paper = "Mona07.pdf",
  url = "http://www.cecm.sfu.ca/~rpearcea/sdmp/sdmp\_paper.pdf",
  abstract =
    "A common way of implementing multivariate polynomial multiplication
    and division is to represent polynomials as linked lists of terms
    sorted in a term ordering and to use repeated merging. This results in
    poor performance on large sparse polynomials.

    In this paper we use an auxiliary heap of pointers to reduce the
    number of monomial comparisons in the worst case while keeping the
    overall storage linear. We give two variations. In the first, the size
    of the heap is bounded by the number of terms in the quotient(s). In
    the second, which is new, the size is bounded by the number of terms
    in the divisor(s).

    We use dynamic arrays of terms rather than linked lists to reduce
    storage allocations and indirect memory references. We pack monomials
    in the array to reduce storage and to speed up monomial
    comparisons. We give a new packing for the graded reverse
    lexicographical ordering.

    We have implemented the heap algorithms in C with an interface to
    Maple. For comparison we have also implemented Yan’s ``geobuckets'' data
    structure. Our timings demonstrate that heaps of pointers are
    comparable in speed with geobuckets but use significantly less
    storage."
}

\end{chunk}

\index{Page, William S.}
\begin{chunk}{axiom.bib}
@InProceedings{Page07,
  author = "Page, William S.",
  title = "Axiom - Open Source Computer Algebra System",
  booktitle = "Poster ISSAC 2007 Proceedings",
  series = "ISSAC 2007",
  year = "2007",
  volume = "41",
  number = "3",
  pages = "114",
  keywords = "axiomref"
}

\end{chunk}

\index{Pritchard, F. Leon}
\index{Sit, William Y.}
\begin{chunk}{axiom.bib}
@InProceedings{Prit06,
  author = "Pritchard, F. Leon and Sit, William Y.",
  title = "On initial value problems for ordinary differential-algebraic 
           equations",
  booktitle = "Radon Series on Computational and Applied Mathematics",
  year = "2006",
  pages = "283-340",
  isbn = "978-3-11-019323-7",
  keywords = "axiomref",
  abstract =
    "This paper addresses polynomial implicit ODEs in an autonomous
    context. These ODEs are defined by a system of the form
    \[f_i(z_1,\cdots,z_n,\dot{z_1},\cdots,\dot{z_n})=0,\quad i=1,\cdots,m\]
    where $f_i$ is (for $i=1,\ldots,m$) a polynomial in $2n$ variables
    $(X,P)=(X_1,\ldots,X_n,P_1,\ldots,P_n)$. This covers in particular
    quasilinear systems, often encountered in applications and defined
    by polynomials $f_i$ in which the total degree in the variables $P$
    is at most one. The approach is close to the geometrical framework
    of Rabier and Rheinboldt, profitting from the polynomial form of
    the system.

    The authors develop an algorithm for the symbolic computation of
    the set of consistent initial values via ideal-theoretic results; 
    this is based on a stationary algebraic process of ``prolongation'',
    together with the notions of the completion of a given ideal and the
    algebraic index of the system, defined as the number of steps taken
    by the process to stabilize. Over- and under-determined systems are
    also accommodated in their framework."
}

\end{chunk}

\index{Smith, Jacob}
\index{Dos Reis, Gabriel}
\index{Jarvi, Jaakko}
\begin{chunk}{axiom.bib}
@InProceedings{Smit07,
  author = "Smith, Jacob and Dos Reis, Gabriel and Jarvi, Jaakko",
  title = "Algorithmic differentiation in Axiom",
  booktitle = "ACM SIGSAM Proceedings",
  series = "ISSAC 2007",
  year = "2007",
  pages = "347-354",
  keywords = "axiomref",
  isbn = "978-1-59593-743-8",
  paper = "Smit07.pdf",
  keywords = "axiomref",
  abstract = "
    This paper describes the design and implementation of an algorithmic
    differentiation framework in the Axiom computer algebra system. Our
    implementation works by transformations on Spad programs at the level
    of the typed abstract syntax tree -- Spad is the language for extending
    Axiom with libraries. The framework illustrates an algebraic theory
    of algorithmic differentiation, here only for Spad programs, but
    we suggest that the theory is general. In particular, if it is
    possible to define a compositional semantics for programs, we define
    the exact requirements for when a program can be algorithmically
    differentiated. This leads to a general algorithmic differentiation
    system, and is not confined to functions which compute with basic
    data types, such as floating point numbers."
}

\end{chunk}



