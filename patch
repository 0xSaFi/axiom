books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Colin, Antoine}
\begin{chunk}{axiom.bib}
@article{Coli97,
  author = "Colin, Antoine",
  title = "Solving a system of algebraic equations with symmetries",
  journal = "J. Pure Appl. Algebra",
  volume = "117-118",
  pages = "195-215",
  year = "1997",
  keywords = "axiomref",
  abstract =
    "Let $(F)$ be a system of $p$ polynomial equations 
    $F_i({\bf X}) \in k[{\bf X}]$, where $k$ is a commutative field and 
    ${\bf X} := (X_1,\cdots,X_n)$ are indeterminates. Let $G$ be a subgroup
    of $GL_n(k)$. A polynomial $P \in k[{\bf X}]$ (resp. rational function 
    $P \in k({\bf X})$ ) is an invariant of $G$ if and only if for all 
    $A \in G$ we have $A\cdot P = P$. We denote $k[{\bf X}]^G$ by (resp. 
    $k({\bf X})^G$) the algebra of polynomial (resp. rational function) 
    invariants of $G$. If $L$ is another subgroup of $GL_n(k)$ such that 
    $G \subset L$, $P$ is called a primary invariant of $G$ relative to $L$ if 
    and only if $Stab_L(P) = G$ (where $Stab_L(P)$ is the stabilizer of 
    $P$ in $L$).

    The paper describes the algebra of the invariants of a finite group
    and how to express these invariants in terms of a small number of
    them, from both the Cohen-Macaulay algebra and the field theory points
    of view. A method is proposed to solve $(F)$ by expressing it in terms of
    primary invariants $\Pi_1,\cdots,\Pi_n$
    (e.g. the elementary symmetric polynomials) and one
    ``primitive'' secondary invariant.
    
    The main thrust of the paper is contained in the following theorem. 
    Let $(F)$ be a set of invariants of $G$. Let $L$ be a subgroup of 
    $GL_n(k)$ such that $G \subset L$ and $k({\bf X})^L$ is a purely 
    transcendental extension of $k_i$, let $\Pi_1,\cdots,\Pi_n$ be 
    polynomials such that $k({\bf X})^L = k(\Pi_1,\cdots,\Pi_n)$,
    and let $\Theta \in k[{\bf X}]^G$ be a primitive polynomial invariant 
    of $G$ relative to $L$.
    When possible, it is convenient to choose $\Theta$ to be one of the
    polynomials in $(F)$. – An algorithm is given that allows each polynomial
    $F_i$ to be expressed as $F_i({\bf X}) = H_i(\Pi_1,\cdots,\Pi_n,\Theta)$, 
    an algebraic fraction in $\Pi_1,\cdots,\Pi_n$ and a polynomial in
    $\Theta$. Now let $L$ be the minimal polynomial of $\Theta$ over 
    $k[{\bf X}]^L$; we have 
    \[L({\bf X},T)=\prod_{\Theta^{'} \in L\cdot \Theta}(T-\Theta^{'})
    \in k[{\bf X}]^L[T]\]
    (where $L$ is called a generic Lagrange resolvent). 
    As $k(\Pi_1,\cdots,\Pi_n)=k({\bf X})^L$, we can write 
    $L({\bf X},T)=H_0(\Pi_1,\cdots,\Pi_n,T)$ where $H_0$ is some
    rational function. The question 
    $H_0(\Pi_1,\cdots,\Pi_n,\Theta)=0$ is always satisfied because 
    $\Theta$ is a root of $L$. Then, we solve the system of ($p=1$) 
    algebraic equations $H_i(\Pi_1,\cdots,\Pi_n,\Theta)=0$,
    $0 \le i \le p$ for $\Pi_1,\cdots,\Pi_n,\Theta$ as indeterminates.
    
    Theorem 1: Let $D \in k[\Pi_1,\cdots,\Pi_n]$ be the LCM of the 
    denominators of all the fractions $H_i$,$0 \le i \le p$ and let 
    $H_i^{'}=DH_i$. For every solution 
    $x:=(x_1,\cdots,x_n)$ of the system $(F)$:$F_i({\bf X})=0$,
    $1 \le i \le p$, there exists a solution ($\pi_1,\cdots,\pi_n,\Theta$)
    of the system 
    $(H^{'}):H_i^{'}(\Pi_1,\cdots,\Pi_n,\Theta)=0$, $0 \le i \le p$ such 
    that $x$ is a solution of the system 
    $(P_\pi):\Pi_i({\bf X})=\pi_i$, $1 \le i \le n$ , and of the equation 
    $\Theta({\bf X})=0$. Conversely, for any solution 
    $(\[i_1,\cdots,\pi_n,\theta)$ of the system $(H^{'})$ such that 
    $D(\pi_1,\cdots,\pi_n) \ne 0$, if $x$ is a solution of the system 
    $(P_\pi)$ relative to $(\pi_1,\cdots,\pi_n)$, then there exists 
    some $A \in L$ such that $\Theta(A\cdot x)=\theta$, and then for all 
    $B \in G$, $BA\cdot x$, is a solution of the system $(F)$.
    
    A slighly more general version of this theorem is also given. The
    paper then presents an algorithm that applies the theory and has been
    implemented in AXIOM. It is followed by several examples."
}

\end{chunk}

\index{DiBlasio, Paolo}
\index{Temperini, Marco}
\begin{chunk}{axiom.bib}
@article{DiBl95,
  author = "DiBlasio, Paolo and Temperini, Marco",
  title = "Subtyping Inheritance and Its Application in Languages for
           Symbolic Computation Systems",
  journal = "J. Symbolic Computation",
  volume = "19",
  pages = "39-63",
  year = "1995",
  paper = "DiBl95.pdf",
  keywords = "axiomref",
  abstract = 
    "Application of object-oriented programming techniques to design and
    implementation of symbolic computation is investigated. We show the
    significance of certain correctness problems, occurring in programming
    environments based on specialization inheritance, due to use of method
    redefinition and polymorphism. We propose a solution to these
    problems, by defining a mechanism of subtyping inheritance and the
    prototype of an object-oriented programming language for a symbolic
    computation system. We devise the subtyping inheritance {\sl ESI
    (Enhanced String Inheritance)} by lifting to programming language
    constructs a given model of subtyping, which is established by a
    monotonic (covariant) subtyping rule. Type safeness of language
    instructions is proved.
    
    The adoption of {\sl ESI} allows to model method and class
    specialization in a natural way. The {\sl ESI} mechanism verifies the
    type correctness of language statements by means of type checking
    rules and preserves their correctness at run-time by a suitable method
    lookup algorithm."
}

\end{chunk}

\index{DiBlasio, Paolo}
\index{Temperini, Marco}
\begin{chunk}{axiom.bib}
@InProceedings{DiBl97,
  author = "DiBlasio, Paolo and Temperini, Marco",
  title = "On subtyping in languages for symbolic computation systems",
  booktitle = "Advances in the design of symbolic computation systems",
  series = "Monographs in Symbolic Computation",
  year = "1997",
  publisher = "Springer",
  pages = "164-178",
  keywords = "axiomref",
  abstract =
    "We want to define a strongly typed OOP language suitable as the
    software development tool of a symbolic computation system, which
    provides class structure to manage ADTs and supports multiple
    inheritance to model specialization hierarchies. In this paper, we
    provide the theoretical background for such a task."
}

\end{chunk}

\index{Fakler, Winfried}
\begin{chunk}{axiom.bib}
@article{Fakl97,
  author = "Fakler, Winfried",
  title = "On second order homogeneous linear differential equations with
           Liouvillian solutions",
  journal = "Theor. Comput. Sci.",
  volume = "187",
  number = "1-2",
  pages = "27-48",
  year = "1997",
  paper = "Fakl97.pdf",
  keywords = "axiomref",
  abstract =
    "We determine all minimal polynomials for second order homogeneous
    linear differential equations with algebraic solutions decomposed into
    invariants and we show how easily one can recover the known conditions
    on differential Galois groups [J. Kovacic, J. Symb. Comput. 2, 3-43
    (1986; Zbl 0603.68035), M. F. Singer and F. Ulmer,
    J. Symb. Comput. 16, 9-36, 37-73 (1993; Zbl 0802.12004, Zbl
    0802.12005), F.Ulmer and J. A. Weil, J. Symb. Comput. 22, 179-200
    (1996; Zbl 0871.12008)] using invariant theory. Applying these
    conditions and the differential invariants of a differential equation
    we deduce an alternative method to the algorithms given in (loc. cit.)
    for computing Liouvillian solutions. For irreducible second order
    equations our method determines solutions by formulas in all but three
    cases."
}

\end{chunk}

\index{Jacquemard, Alain}
\index{Khechichine-Mourtada, F.Z.}
\index{Mourtada, A.}
\begin{chunk}{axiom.bib}
@article{Jacq97,
  author = "Jacquemard, Alain and Khechichine-Mourtada, F.Z. and Mourtada, A.",
  title = "Formal algorithms applied to the study of the cyclicity of a
           generic algebraic polycycle with four hyperbolic crests",
  journal = "Nonlinearity",
  volume = "10",
  number = "1",
  pages = "19-53",
  year = "1997",
  keywords = "axiomref",
  comment = "french",
  abstract =
    "Drawing on the work of Mourtada, we show that a family of vector
    fields with a generic algebraic polycycle of four hyperbolic apices
    possesses a maximum capacity of four limit cycles. This cyclicity is
    attained in an opening connecting the parameters which the edge
    contains, in particular a generic line of singularities of dovetail
    type. We also give an asymptotic estimation of the volume of this
    opening, as well as an explicit example of a family of polynomial
    vector fields replicating the above-described conditions and
    possessing five limit cycles. The methods employed are very diverse:
    geometrical arguments (Thom’s theory of catastrophes and the theory of
    algebraic singularities), developments from Puiseux, the number of
    major roots by Descartes’ law and calculated exactly by Sturm series,
    and other specific methods for formal calculus, such as for example
    the cylindrical algebraic decomposition and the resolution of
    algebraic systems via the construction of Gröbner bases. The
    calculations have been executed formally, that is to say without
    making the least appeal to numerical approximation, in using the
    formal calculus system AXIOM."
}

\end{chunk}

\index{Lambe, Larry A.}
\index{Radford, David E.}
\begin{chunk}{axiom.bib}
@book{Lamb97,
  author = "Lambe, Larry A. and Radford, David E.",
  title = "Introduction to the quantum Yang-Baxter equation and quantum
           groups: an algebraic approach",
  booktitle = "Mathematics and its Applications",
  publisher = "Kluwer Adademic Publishers",
  year = "1997",
  keywords = "axiomref",
  abstract =
    "The quantum Yang-Baxter equation (QYBE) has roots in statistical
    mechanics and the inverse scattering method and leads to a natural
    construction of a bialgebra. It turns out to have important
    connections with knot theory and invariants of 3-manifolds. There are
    now available many reference books to quantum groups and these various
    applications. The book under review develops the algebraic
    underpinning and theory of the QYBE, including the constant form and
    the one and two parameter forms.
    
    We give a brief description of the chapters. Chapter 1 (together with
    an Appendix) gives the algebraic preliminaries involving coalgebras,
    bialgebras, Hopf algebras, modules and comodules. Chapter 2 introduces
    the various forms of the QYBE, and the basic algebraic structures
    associated to them, including Faddeev-Reshetikhin-Takhtadzhan (FRT)
    construction. Chapter 3 explores various categorical settings for the
    constant form of the QYBE, the most basic being the category of left
    QYB modules over a bialgebra and the notion of algebras, coalgebras,
    etc. in this category. Chapter 4 develops universal mapping properties
    of the FRT construction and its reduced version, and the authors
    investigate when the reduced FRT construction leads to a pointed
    bialgebra or a pointed Hopf algebra. Chapter 5 develops the quantum
    groups associated to $SL(2)$, i.e., the quantum universal enveloping
    algebra, and the quantum function algebra. Chapter 6 introduces
    quasitriangular Hopf algebras, and discusses how the
    finite-dimensional ones give rise to solutions of the QYBE through
    their representation theory. The most important example is the
    Drinfeld double of a finite-dimensional Hopf algebra. The authors note
    (through an exercise!) that every finite-dimensional Hopf algebra is
    the reduced FRT construction of some solution to the QYBE. Chapter 7
    introduces coquasitriangular bialgebras, the most important being the
    FRT and the reduced FRT constructions. There are some generalizations
    here to the one-parameter form of the QYBE. Chapter 8 uses all the
    previously developed techniques to find solutions of the QYBE in
    certain cases, including the one-parameter form. Some of these were
    discovered by computer algebra methods. The final chapter 9 gives a
    brief discussion of certain categorical constructions and the QYBE is
    certain fairly abstract categories, motivated by the fact that the FRT
    construction is a coend.
    
    This book fills an important niche in the literature involving the
    QYBE by highlighting the algebraic aspects and applications. Although
    this is basically a reference book, it includes so many important
    parts of the study of Hopf algebras that it could be used as a
    textbook for a certain type of course on Hopf algebras and quantum
    groups, and certainly as supplementary reading material for such a
    course. There are frequent exercises which would be useful for such
    purposes. Besides being a basic source book, the authors include some
    new results and some novel approaches to earlier results. All this
    makes this book a most welcome addition to the quantum group
    literature."
}

\end{chunk}

\index{Letichevskij, A. Alexander}
\index{Marinchenko, V. G.}
\begin{chunk}{axiom.bib}
@article{Leti97,
  author = "Letichevskij, A. Alexander and Marinchenko, V. G.",
  title = "Objects in algebraic programming system",
  journal = "Cybern. Syst. Anal.",
  volume = "33",
  number = "2",
  pages = "283-299",
  year = "1997",
  keywords = "axiomref",
  comment = "translated from Russian",
  abstract =
    "The algebraic programming system (APS) developed at the
    V. M. Glushkov Institute of Cybernetics of the Academy of Sciences of
    the Ukrainian SSR integrates the basic programming paradigms,
    including procedural, functional, algebraic, and logic programming.
    
    Algebraic programming in APS relies on special data structures, the
    so-called graph terms, which permit using diverse data and knowledge
    representations in relevant application domains. In the language
    APLAN, graph terms are described by expressions or systems of
    expressions of a many-sorted algebra of data. They may represent both
    objects of the application domain and reasoning about these
    objects. The option of setting an arbitrary interpretation of the
    operations in the algebra of data makes it possible to use APS as a
    basis for various extensions.
    
    Symbolic computation systems such as Scratchpad/AXIOM have acquired
    special importance. They provide various possibilities of manipulating
    typed mathematical objects, including objects of complex hierarchical
    structure. This is a natural requirement when working with algebraic
    objects. In particular, the properties of many algebraic structures
    (such as groups, rings, fields, etc.) are naturally
    hierarchical-modular.
    
    The Institute of Cybernetics and the Kherson Teachers’ College have
    developed an instruction-oriented computer algebra system AIST. The
    AIST kernel is a hierarchical structure of mathematical concepts
    described in the APS language. However, construction of new
    applications on the basis of this hierarchical structure has proved
    difficult. The system kernel can be made more flexible by providing
    tools for flexible description of hierarchical structures of
    mathematical concepts.
    
    In this article, we describe an extension of the language APLAN, which
    provides tools for the object-oriented style of programming. This is
    one of the possible ways of introducing types in APS. The
    object-oriented technology also can be used to develop a hierarchical
    system of mathematical objects."
}

\end{chunk}

\index{Schwarzweller, Christoph} 
\begin{chunk}{axiom.bib}
@phdthesis{Schw97,
  author = "Schwarzweller, Christoph",
  title = "MIZAR verification of generic algebraic algorithms",
  school = "University of Tubingen",
  year = "1997",
  paper = "Schw97.pdf",
  keywords = "axiomref",
  abstract =
    "Although generic programming founds more and more attention –
    nowadays generic programming languages as well as generic libraries
    exist – there are hardly approaches for the verification of generic
    algorithms or generic libraries. This thesis deals with generic
    algorithms in the field of computer algebra. We propose the Mizar
    system as a theorem prover capable of verifying generic algorithms on
    an appropriate abstract level. The main advantage of the MIZAR theorem
    prover is its special input language that enables textbook style
    presentation of proofs. For generic versions of Brown/Henrici addition
    and of Euclidean’s algorithm we give complete correctness proofs
    written in the MIZAR language.
    
    Moreover, we do not only prove algorithms correct in the usual
    sense. In addition we show how to check, using the MIZAR system, that
    a generic algebraic algorithm is correctly instantiated with a
    particular domain. Answering this question that especially arises if
    one wants to implement generic programming languages, in the field of
    computer algebra requires nontrivial mathematical knowledge.
    
    To build a verification system using the MIZAR theorem prover, we also
    implemented a generator which almost automatically computes for a
    given algorithm a set of theorems that imply the correctness of this
    algorithm."
}

\end{chunk}

\index{Zenger, Christoph}
\begin{chunk}{axiom.bib}
@article{Zeng97,
  article = "Zenger, Christoph",
  title = "Indexed types",
  journal = "Theor. Comput. Sci.",
  volume = "187",
  numbers = "1-2",
  pages = "147-165",
  year = "1997",
  keywords = "axiomref",
  paper = "Zeng97.pdf",
  abstract =
    "A new extension of the Hindley/Milner type system is proposed. The
    type system has algebraic types, that have not only type parameters
    but also value parameters (indices). This allows for example to
    parameterize matrices and vectors by their size and to check size
    compatibility statically. This is especially of interest in computer
    algebra."
}

\end{chunk}

\index{Bernardin, Laurent}
\begin{chunk}{axiom.bib}
@article{Bern96,
  author = "Benardin, Laurent",
  title = "A review of symbolic solvers",
  journal = "SIGSAM Bull.",
  volume = "30",
  number = "1",
  pages = "9-20",
  year = "1996",
  keywords = "axiomref",
  paper = "Bern96.pdf",
  abstract =
    "Solving equations and systems of equations symbolically is a key
    feature of every Computer Algebra System. This review examines the
    capabilities of the six best known general purpose systems to date in
    the area of general algebraic and transcendental equation
    solving. Areas explicitly not covered by this review are differential
    equations and numeric or polynomial system solving as special purpose
    systems exist for these kinds of problems. The aim is to provide a
    benchmark for comparing Computer Algebra Systems in a specific
    domain. We do not intend to give a rating of overall capabilities as
    for example in [9]. 1 The Contestants We compare six major Computer
    Algebra Systems. Axiom 2.0 [7], Derive 3.06 [1], Macsyma 420 [8],
    Maple V R4 [3], Mathematica 2.2 [10], MuPAD 1.2.9 [5] and Reduce 3.6
    [6]. When available, we tried to use the latest shipping version of
    each system. 2 The Problem Set The following table presents the set of
    80 problems that we used to evaluate the different solvers..."
}

\end{chunk}

\index{Wester, Michael J.}
\begin{chunk}{axiom.bib}
@misc{Westxx,
  author = "Wester, Michael J.",
  title = "Computer Algebra Synonyms",
  keywords = "axiomref",
  url = "http://math.unm.edu/~wester/cas/synonyms.pdf",
  paper = "Westxx.pdf",
  abstract = 
    "The following is a collection of synonyms for various operations in
    the seven general purpose computer algebra systems {\bf Axiom}, {\bf
    Derive}, {\bf Macsyma}, {\bf Maple}, {\bf Mathematica}, {\bf MuPAD},
    and {\bf Reduce}. This collection does not attempt to be
    comprehensive, but hopefully it will be useful in giving an indication
    of how to translate between the syntaxes used by the different systems
    in many common situations. Note that for a blank entry means that
    there is no exact translation of a particular operation for the
    indicated system, but it may still be possible to work around this
    lack with a related functionality."
}

\end{chunk}

\index{Wester, Michael J.}
\begin{chunk}{axiom.bib}
@misc{West95,
  author = "Wester, Michael J.",
  title = "A Review of CAS Mathematical Capabilities",
  year = "1995",
  keywords = "axiomref",
  paper = "West95.pdf",
  url = "http://math.unm.edu/~wester/cas/Paper.ps",
  abstract =
    "Computer algebra systems (CASs) have become an important
    computational tool in the last decade. General purpose CASs, which are
    designed to solve a wide variety of problems, have gained special
    prominance. In this paper, the capabilities of seven major general
    purpose CASs (Axiom, Derive, Macsyma, Maple, Mathematica, MuPAD, and
    Reduce) are reviewed on 131 short problems covering a broad range of
    (primarily) symbolic mathematics.
    
    A demo was developed for each CAS, run and the results
    evaluated. Problems were graded in terms of whether it was easy or
    difficult or possible to produce an answer and if an answer was
    produced, whether it was correct. It is the author's hope that this
    review will encourage the development of a comprehensive CAS test
    suite."
}

\end{chunk}

\index{Apel, Joachim}
\index{Klaus, Uwe}
\begin{chunk}{axiom.bib}
@misc{Apel94,
  author = "Apel, Joachim and Klaus, Uwe",
  title = "Representing Polynomials in Computer Algebra Systems",
  year = "1994",
  paper = "Apel94.pdf",
  abstract =
    "There are discussed implementational aspects of the special-purpose
    computer algebra system FELIX designed for computations in
    constructive algebra. In particular, data types developed for the
    representation of and computation with commutative and non-commuative
    polynomials are described. Furthermore, comparison of time and memory
    requirements of different polynomial representations are reported."
}

\end{chunk}

\index{Stoutemyer, David R.}
\begin{chunk}{axiom.bib}
@article{Stou91,
  author = "Stoutemyer, David R.",
  title = "Crimes and misdemeanors in the computer algebra trade",
  journal = "Notices of the American Mathematical Society",
  volume = "38",
  number = "7",
  pages = "778-785",
  year = "1991"
}

\end{chunk}

\index{Sangwin, Chris}
\begin{chunk}{axiom.bib}
@misc{Sang10,
  author = "Sangwin, Chris",
  title = "Intriguing Integrals: Part I and II",
  year = "2010",
  url1 = 
   "https://plus.maths.org/issue54/features/sangwin/2pdf/index.html/op.pdf",
  paper1 = "Sang10a.pdf",
  url2 = 
   "https://plus.maths.org/issue54/features/sangwin2/2pdf/index.html/op.pdf",
  paper2 = "Sang10b.pdf"
}

\end{chunk}

\index{Evans, Brian}
\begin{chunk}{axiom.bib}
@misc{Evanxx,
  author = "Evans, Brian",
  title = "History of CA Systems",
  url = "http://felix.unife.it/Root/d-Mathematics/d-The-mathematician/d-History-of-mathematics/t-History-of-computer-algebra",
  paper = "Evanxx.txt"
}

\end{chunk}

\index{Martin, Ursula}
\index{Shand, D.}
\begin{chunk}{axiom.bib}
@misc{Mart97,
  author = "Martin, Ursula and  Shand, D",
  title = "Investigating some Embedded Verification Techniques for 
           Computer Algebra Systems",
  url = "http://www.risc.jku.at/conferences/Theorema/papers/shand.ps.gz",
  paper = "Mart97.ps",
  abstract = "
    This paper reports some preliminary ideas on a collaborative project
    between St. Andrews University in the UK and NAG Ltd. The project aims
    to use embedded verification techniques to improve the reliability and
    mathematical soundness of computer algebra systems. We give some
    history of attempts to integrate computer algebra systems and
    automated theorem provers and discuss possible advantages and
    disadvantages of these approaches. We also discuss some possible case
    studies."
}

\end{chunk}

\index{Tonisson, Eno}
\begin{chunk}{axiom.bib}
@article{Tonixx,
  author = "Tonisson, Eno",
  title = "Branch Completeness in School Mathematics and in Computer Algebra
           Systems",
  journal = "The Electronic Journal of Mathematics and Technology",
  volume = "1",
  number = "1",
  issn = "1933-2823",
  paper = "Tonixx.pdf",
  url = "https://php.radford.edu/~ejmt/deliveryBoy.php?paper=eJMT_v1n3p5",
  abstract =
    "In many cases when solving school algebra problems (e.g. simplifying
    an expression, solving an equation), the solution is separable into
    branches in some manner. The paper describes some approaches to
    branches that are used in school textbooks and computer algebra
    systems and compares them with mathematically branch-complete
    solutions. It tries to identify possible reasons behind different
    approaches and also indicate some ideas how such differences could be
    explained to the students."
}

\end{chunk}

\index{Beeson, Michael}
\begin{chunk}{axiom.bib}
@misc{Beesxx,
  author = "Beeson, Michael",
  title = "Automatic Generation of Epsilon-Delta Proofs of Continuity",
  url = "http://www.michaelbeeson.com/research/papers/aisc.pdf",
  paper = "Beesxx.pdf",
  abstract =
    "As part of a project on automatic generation of proofs involving both
    logic and computation, we have automated the production of some proofs
    involving epsilon-delta arguments. These proofs involve two or three
    quantifiers on the logical side, and on the computational side, they
    involve algebra, trigonometry, and some calculus. At the border of
    logic and computation, they involve several types of arguments
    involving inequalities, including transitivity chaining and several
    types of bounding arguments, in which bounds are sought that do not
    depend on certain variables. Control mechanisms have been developed
    for intermixing logical deduction steps with computational steps and
    with inequality reasoning. Problems discussed here as examples involve
    the continuity and uniform continuity of various specific functions."
}

\end{chunk}

\index{Ballarin, Clemens}
\index{Paulson, Lawrence C.}
\begin{chunk}
@misc{Ball98,
  author = "Ballarin, Clemens and Paulson, Lawrence C.",
  title = "Reasoning about Coding Theory: The Benefits We Get from
           Computer Algebra",
  year = "1998",
  url = http://www21.in.tum.de/~ballarin/publications/aisc98.pdf",
  paper = "Ball98.pdf",
  abstract =
    "The use of computer algebra is usually considered beneficial for
    mechanised reasoning in mathematical domains. We present a case study,
    in the application domain of coding theory, that supports this claim:
    the mechanised proof depends on non-trivial algorithms from computer
    algebra and increase the reasoning power of the theorem prover. The
    unsoundness of computer algebra systems is a major problem in
    interfacing them to theorem provers. Our approach to obtaining a sound
    overall system is not blanket distrust but based on the distinction
    between algorithms we call sound and {\sl ad hoc} respectively. This
    distinction is blurred in most computer algebra systems OUr
    experimental interface therefore uses a computer algebra library. It
    is based on theorem templates, which provide formal specifications for
    the algorithms."
}

\end{chunk}

\index{Aslaksen, Helmer}
\begin{chunk}{axiom.bib}
@article{Asla96,
  author = "Aslaksen, Helmer",
  title = "Multiple-valued complex functions and computer algebra",
  journal = "SIGSAM Bulletin",
  volume = "30",
  number = "2",
  year = "1996",
  pages = "12-20",
  paper = "Asla96.pdf",
  url = "http://www.math.nus.edu.sg/aslaksen/papers/cacas.pdf",
  abstract =
    "I recently taught a course on complex analysis. That forced me to
    think more carefully about branches. Being interested in computer
    algebra, it was only natural that I wanted to see how such programs
    dealt with these problems. I was also inspired by a paper by
    Stoutemyer.
    
    While programs like Derive, Maple, Mathematica and Reduce are very
    powerful, they also have their fair share of problems. In particular,
    branches are somewhat of an Achilles' heel for them. As is well-known,
    the complex logarithm function is properly defined as a
    multiple-valued function. And since the general power and exponential
    functions are defined in terms of the logarithm function, they are
    also multiple-valued. But for actual computations, we need to make
    them single valued, which we do by choosing a branch. In Section 2, we
    will consider some transformation rules for branches of
    multiple-valued complex functions in painstaking detail.
    
    The purpose of this short article is not to do a comprehensive
    comparative study of different computer algebra systems. My goal is
    simply to make the readers aware of some of the problems, and to
    encourage the readers to sit down and experiment with their favourite
    programs."
}

\end{chunk}

\index{Fateman, Richard J.}
\begin{chunk}{axiom.bib}
@InProceedings{Fate96,
  author = "Fateman, Richard J.",
  title = "A Review of Symbolic Solvers",
  booktitle = "Proc 1996 ISSAC",
  series = "ISSAC 96",
  year = "1996",
  pages = "86-94",
  keywords = "axiomref",
  keywords = "axiomref",
  paper = "Fate96.pdf",
  url = "http://http.cs.berkeley.edu/~fateman/papers/eval.ps",
  abstract =
    "``Evaluation'' of expressions and programs in a computer algebra
    system is central to every system, but inevitably fails to provide
    complete satisfaction. Here we explain the conflicting requirements,
    describe some solutions from current systems, and propose alternatives
    that might be preferable sometimes. We give examples primarily from
    Axiom, Macsyma, Maple, Mathematica, with passing metion of a few other
    systems."
}

\end{chunk}

\index{Fateman, Richard J.}
\begin{chunk}{axiom.bib}
@misc{Fate05,
  author = "Fateman, Richard J.",
  title = "An incremental approach to building a mathematical 
           expert out of software",
  conference = "Axiom Computer Algebra Conference",
  location = "City College of New York, CAISS project",
  year = "2005",
  month = "April",
  day = "19",
  url = "http://www.cs.berkeley.edu/~fateman/papers/axiom.pdf",
  paper = "Fat05.pdf",
  keywords = "axiomref"
}

\end{chunk}

\index{Gr\"abe, Hans-Gert}
\begin{chunk}{axiom.bib}
@misc{Grab98,
  author = "Grabe, Hans-Gert",
  title = "About the Polynomial System Solve Facility of Axiom, Macsyma, 
           Maple Mathematica, MuPAD, and Reduce",
  paper = "Grab98.pdf",
  url = 
"https://www.informatik.uni-leipzig.de/~graebe/ComputerAlgebra/Publications/WesterBook.pdf",
  keywords = "axiomref",
  abstract = 
    "We report on some experiences with the general purpose Computer
    Algebra Systems (CAS) Axiom, Macsyma, Maple, Mathematica, MuPAD, and
    Reduce solving systems of polynomial equations and the way they
    present their solutions. This snapshot (taken in the spring of 1996)
    of the current power of the different systems in a special area
    concentrates on both CPU-times and the quality of the output."
}

\end{chunk}

\index{Gr\"abe, Hans-Gert}
\begin{chunk}{axiom.bib}
@misc{Grab06,
  author = "Grabe, Hans-Gert",
  title = "The Groebner Factorizer and Polynomial System Solving",
  year = "2006",
  keywords = "axiomref",
  report = "Special Semester on Groebner Bases",
  location = "Linz",
  paper = "Grab06.pdf",
  url = 
"https://www.ricam.oeaw.ac.at/specsem/srs/groeb/download/06\_02\_Solver.pdf",
  abstract =
    "Let $S := k[x_1,\ldots, x_n]$ be the polynomial ring in the
    variables $x_1,\ldots,x_n$ over the field $k$ and 
    $B := \{f_1,\ldots,f_m\} \subset S$
    be a finite system of polynomials. Denote by $I(B)$ the
    ideal generated by these polynomials. One of the major tasks of
    constructive commutative algebra is the derivation of information
    about the structure of 
    \[V(B):=\{a \in K^n : \forall f \in B{\rm\ such\ that\ }f(a)=0\}\]
    the set of common zeroes of the system $B$ over an
    algebraically closed extension $K$ of $k$.  Splitting the system into
    smaller ones, solving them separately, and patching all solutions
    together is often a good guess for a quick solution of even highly
    nontrivial problems. This can be done by several techniques, e.g.,
    characteristic sets, resultants, the Groebner factorizer or some ad
    hoc methods. Of course, such a strategy makes sense only for problems
    that really will split, i.e., for reducible varieties of
    solutions. Surprisingly often, problems coming from 11real life''
    fulfill this condition.  
    
    Among the methods to split polynomial systems into smaller pieces
    probably the Groebner factor- izer method attracted the most
    theoretical attention, see Czapor ([4, 5]), Davenport ([6]), Melenk, M
    ̈oller and Neun ([16, 17]) and Gr ̈abe ([13, 14]). General purpose
    Computer Algebra Systems (CAS) are well suited for such an approach,
    since they make available both a (more or less) well tuned
    implementation of the classical Groebner algorithm and an effective
    multivariate polynomial factorizer.
    
    Furthermore it turned out that the Groebner factorizer is not only a
    good heuristic approach for splitting, but its output is also usually
    a collection of almost prime components. Their description allows a
    much deeper understanding of the structure of the set of zeroes
    compared to the result of a sole Groebner basis computation.  
    
    Of course, for special purposes a general CAS as a multipurpose
    mathematical assistant can’t offer the same power as specialized
    software with efficiently implemented and well adapted algorithms and
    data types. For polynomial system solving, such specialized software
    has to implement two algorithmically complex tasks, solving and
    splitting, and until recently none of the specialized systems (as
    e.g., GB, Macaulay, Singular, CoCoA, etc.) did both
    efficiently. Meanwhile, being very efficient computing (classical)
    Groebner bases, development efforts are also directed, not only 
    for performance reasons, towards a better inclusion of factorization
    into such specialized systems.  Needless to remark that it needs some
    skill to force a special system to answer questions and the user will
    probably first try his ``home system'' for an answer. Thus the
    polynomial systems solving facility of the different CAS should behave
    especially well on such polynomial systems that are hard enough not to
    be done by hand, but not really hard to require special efforts. It
    should invoke a convenient interface to get the solutions in a form
    that is (correct and) well suited for further analysis in the familiar
    environment of the given CAS as the personal mathematical assistant."
}

\end{chunk}

\index{Corless, Robert M.}
\index{Jeffrey, David J.}
\index{Watt, Stephen M.}
\index{Bradford, Russell}
\index{Davenport, James H.}
\begin{chunk}{axiom.bib}
@misc{Corl0,
  author = "Corless, Robert M. and Jeffrey, David J. and Watt, Stephen M.
            and  Bradford, Russell and Davenport, James H.",
  title = "Reasoning about the elementary functions of complex analysis",
  url = "http://www.csd.uwo.ca/~watt/pub/reprints/2002-amai-reasoning.pdf",
  paper = "Corl05.pdf",
  abstract = "
    There are many problems with the simplification of elementary
    functions, particularly over the complex plane. Systems tend to make
    ``howlers'' or not to simplify enough. In this paper we outline the
    ``unwinding number'' approach to such problems, and show how it can be
    used to prevent errors and to systematise such simplification, even
    though we have not yet reduced the simplification process to a
    complete algorithm.  The unsolved problems are probably more amenable
    to the techniques of artificial intelligence and theorem proving than
    the original problem of complex-variable analysis."
}

\end{chunk}

\index{Touratier, Emmanuel}
\begin{chunk}{axiom.bib}
@misc{Tour98,
  author = "Touratier, Emmanuel",
  title = {Etude du typage dans le syst\`eme de calcul scientifique Aldor},
  comment = "Study of types in the Aldor scientific computation system",
  year = "1998",
  paper = "Tour98.pdf",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/Aldor-T1998_04.pdf",
  keywords = "axiomref"
}

\end{chunk}

\index{Seiler, Werner Markus}
\begin{chunk}{axiom.bib}
@misc{Seil95,
  author = "Seiler, Werner Markus",
  title = "Applying AXIOM to partial differential equations",
  institution = {Universit\"at Karlsruhe, Fakult\"at f\"ur Informatik},
  year = "1995",
  type = "Internal Report",
  number = "95-17",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/Axiom-pdf.pdf",
  paper = "Seil95.pdf",
  keywords = "axiomref",
  abstract = 
    "We present an Axiom environment called JET for geometric computations
    with partial differential equations within the framework of the jet
    bundle formalism. This comprises expecially the completion of a given
    differential equation to an involutive one according to the
    Cartan-Kuranishi Theorem and the setting up of the determining system
    for the generators of classical and non-classical Lie
    symmetries. Details of the implementations are described and
    applications are given. An appendix contains tables of all exported
    functions."
}

\end{chunk}

\index{Davenport, James H.}
\begin{chunk}{axiom.bib}
@misc{Dave84a,
  author = "Davenport, James H.",
  title = "A New Algebra System",
  paper = "Dave84a.pdf",
  keywords = "axiomref",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/Davenport-1984-a\_new\_algebra\_system.pdf",
  abstract =
    "Seminal internal paper discussing Axiom design decisions."
}

\end{chunk}

\index{Conrad, Marc}
\index{French, Tim}
\index{Maple, Carsten}
\index{Pott, Sandra}
\begin{chunk}{axiom.bib}
@misc{Conrxxa,
  author = "Conrad, Marc and French, Tim and Maple, Carsten and Pott, Sandra",
  title = "Approaching Inheritance from a Natural Mathematical Perspective 
           and from a Java Driven Viewpoint: a Comparative Review",
  keywords = "axiomref",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/McTfCmSp-axiom.pdf",
  paper = "Conrxxa.pdf",
  abstract = "
    It is well-known that few object-oriented programming languages allow
    objects to change their nature at run-time. There have been a number
    of reasons presented for this, but it appears that there is a real
    need for matters to change. In this paper we discuss the need for
    object-oriented programming languages to reflect the dynamic nature of
    problems, particularly those arising in a mathematical context. It is
    from this context that we present a framework that realistically
    represents the dynamic and evolving characteristic of problems and
    algorithms."
}

\end{chunk}

\index{Meijer, Erik}
\index{Fokkinga, Maarten}
\index{Paterson, Ross}
\begin{chunk}{axiom.bib}
@misc{Meij91,
  author = "Meijer, Erik and Fokkinga, Maarten and Paterson, Ross",
  title = "Functional Programming with Bananas, Lenses, Envelopes and 
           Barbed Wire",
  url = "http://eprints.eemcs.utwente.nl/7281/01/db-utwente-40501F46.pdf",
  paper = "Meij91.pdf",
  abstract = "
    We develop a calculus for lazy functional programming based on
    recursion operators associated with data type definitions. For these
    operators we derive various algebraic laws that are useful in deriving
    and manipulating programs. We shall show that all example functions in
    Bird and Wadler's ``Introduction to Functional Programming'' can be
    expressed using these operators."
}

\end{chunk}

\index{Robidoux, Nicolas}
\begin{chunk}{axiom.bib}
@misc{Robi93,
  author = "Robidoux, Nicolas",
  title = "Does Axiom Solve Systems of O.D.E's Like Mathematica?",
  year = "1993",
  paper = "Robi93.pdf",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/Robidoux.pdf",
  keywords = "axiomref",
  abstract = "
    If I were demonstrating Axiom and were asked this question, my reply
    would be ``No, but I am not sure that this is a bad thing''. And I
    would illustrate this with the following example.

    Consider the following system of O.D.E.'s
    \[
    \begin{array}{rcl}
    \frac{dx_1}{dt} & = & \left(1+\frac{cos t}{2+sin t}\right)x_1\\
    \frac{dx_2}{dt} & = & x_1 - x_2
    \end{array}
    \]
    This is a very simple system: $x_1$ is actually uncoupled from $x_2$"
}

\end{chunk}

\index{Davenport, James H.}
\index{Faure, Christ\'ele}
\begin{chunk}{axiom.bib}
@misc{Davexx,
  author = {Davenport, James; Faure, Christ\'ele},
  title = "The Unknown in Computer Algebra",
  url = 
"http://axiom-wiki.newsynthesis.org/public/refs/TheUnknownInComputerAlgebra.pdf",
  paper = "Davexx.pdf",
  keywords = "axiomref",
  abstract = "
    Computer algebra systems have to deal with the confusion between
    ``programming variables'' and ``mathematical symbols''. We claim that
    they should also deal with ``unknowns'', i.e. elements whose values
    are unknown, but whose type is known. For examples $x^p \ne x$ if $x$
    is a symbol, but $x^p = x$ if $x \in GF(p)$. We show how we have
    extended Axiom to deal with this concept."
}

\end{chunk}

\index{Davenport, James H.}
\begin{chunk}{axiom.bib}
@techreport{Dave92b,
  author = "Davenport, James H.",
  title = "How does one program in the AXIOM system?",
  institution = "Numerical Algorithms Group, Inc.",
  year = "1992",
  type = "technical report",
  number = "TR6/92 (ATR/4)(NP2493)",
  url = "http://www.nag.co.uk/doc/TechRep/axiomtr.html",
  paper = "Dave92b.pdf",
  keywords = "axiomref",
  abstract = 
    "Axiom is a computer algebra system superficially like many others, but
    fundamentally different in its internal construction, and therefore in
    the possibilities it offers to its users and programmers. In these
    lecture notes, we will explain, by example, the methodology that the
    author uses for programming substantial bits of mathematics in Axiom."
}

\end{chunk}

\index{Youssef, Saul}
\begin{chunk}{axiom.bib}
@misc{Yous04,
  author = "Youssef, Saul",
  title = "Prospects for Category Theory in Aldor",
  year = "2004",
  url = 
"http://axiom-wiki.newsynthesis.org/public/refs/Youssef-ProspectsForCategoryTheoryInAldor.pdf",
  paper = "Yous04.pdf",
  abstract = 
    "Ways of encorporating category theory constructions and results into
    the Aldor language are discussed. The main features of Aldor which
    make this possible are identified, examples of categorical
    constructions are provided and a suggestion is made for a foundation
    for rigorous results."
}

\end{chunk}

\index{Carpent, Quentin}
\index{Conil, Christophe}
\begin{chunk}{axiom.bib}
@misc{Carp04,
  author = "Carpent, Quentin and Conil, Christophe",
  title = "Utilisation de logiciels libres pour la r\'ealisation de TP MT26",
  year = "2004",
  paper = "Carp04.pdf",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/ac20.pdf",
  keywords = "axiomref",
  comment = "french",
  abstract = "radicalSolve(x**3+x**2-7=0,x)"
}

\end{chunk}

\index{Naylor, William A.}
\index{Padget, Julian}
\begin{chunk}{axiom.bib}
@InProceedings{Nayl06,
  author = "Naylor, William and Padget, Julian",
  title = "From Untyped to Polymorphically Typed Objects in Mathematical 
           Web Services",
  paper = "NPxx.pdf",
  series = Lecture Notes in Computer Science",
  volume = "4108",
  pages = "222-236",
  year = "2006",
  keywords = "axiomref",
  abstract = 
    "OpenMath is a widely recognized approach to the semantic markup of
    mathematics that is often used for communication between OpenMath
    compliant systems. The Aldor language has a sophisticated
    category-based type system that was specifically developed for the
    purpose of modelling mathematical structures, while the system itself
    supports the creation of small-footprint applications suitable for
    deployment as web services. In this paper we present our first results
    of how one may perform translations from generic OpenMath objects into
    values in specific Aldor domains, describing how the Aldor interfae
    domain ExpresstionTree is used to achieve this. We outline our Aldor
    implementation of an OpenMath translator, and describe an efficient
    extention of this to the Parser category. In addition, the Aldor
    service creation and invocation mechanism are explained. Thus we are
    in a position to develop and deploy mathematical web services whose
    descriptions may be directly derived from Aldor's rich type language."
}

\end{chunk}

\index{Watt, Stephen M.}
\index{Broadbery, Peter A.}
\index{Dooley, Sam}
\index{Iglio, Pietro}
\begin{chunk}{axiom.bib}
@techreport{Watt94,
  author = "Watt, Stephen M. and Broadbery, Peter A. and Dooley, Samuel S.
            and Iglio, Pietro",
  title = "A First Report on the A\# Compiler (including benchmarks)",
  institution = "IBM Research",
  year = "1994",
  type = "technical report",
  number = "RC19529 (85075)",
  paper = "Watt94.pdf",
  url = 
   "http://axiom-wiki.newsynthesis.org/public/refs/axiom-aldor-a-sharp.pdf",
  keywords = "axiomref",
  abstract = 
    "The $A^{#}$ compiler allows users of computer algebra to develop
    programs in a context where multiple programming languages are
    employed. The compiler translates programs written in the $A^{#}$
    programming language to a low-level intermediate language, Foam,
    from which it can generate stand-alone programs, native object
    libraries to be linked with other applications, or code to be read
    into closed environments. In addition, Foam code may be directly
    executed using an interpreter provided with the $A^{#}$ compiler.
    
    The $A^{#}$ programming language provides support for object-oriented
    and functional programming styles. It is ``higher-order'' in the sense
    that both types and functions are first class, and may be manipulated
    in the same ways as any other values. The primary considerations in
    the formulation of the language have been generality, composibility,
    and efficiency. The language has been designed to admit a number of
    important optimizations, allowing compilation to machine code which is
    in many instances of efficiency comparable to that produced by a C or
    Fortran compiler.
    
    The original motivation for $A^{#}$ comes from the field of computer
    algebra: to provide an improved extension language for the Axiom
    computer algebra system."
}

\end{chunk}

\index{Lambe, Larry A.}
\index{Luczak, Richard}
\begin{chunk}{axiom.bib}
@article{Lamb93a,
  article = "Lambe, Larry and Luczak, Richard",
  title = "Object-Oriented Mathematical Programming and 
           Symbolic/Numeric Interface",
  journal = "3rd Int. Conf. on Expert Systems in Numerical Computing",
  year = "1993",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/axiom-fem.pdf",
  paper = "Lamb93a.pdf",
  keywords = "axiomref",
  abstract = 
    "The Axiom language is based on the notions of ``categories'',
    ``domains'', and ``packages''. These concepts are used to build an
    interface between symbolic and numeric calculations. In particular, an
    interface to the NAG Fortran Library and Axiom's algebra and graphics
    facilities is presented. Some examples of numerical calculations in a
    symbolic computational environment are also included using the finite
    element method. While the examples are elementary, we believe that
    they point to very powerful methods for combining numeric and symbolic
    computational techniques."
}

\end{chunk}

\index{Griesmer, James H.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@InProceedings{Grie71,
  author = "Griesmer, James H. and Jenks, Richard D.",
  title = "SCRATCHPAD/1 -- an interactive facility for symbolic mathematics",
  booktitle = "Proc. second ACM Symposium on Symbolic and Algebraic
               Manipulation",
  series = "SYMSAC 71",
  year = "1971",
  pages = "42-58",
  url = "http://delivery.acm.org/10.1145/810000/806266/p42-griesmer.pdf",
  paper = "GJ71.pdf",
  keywords = "axiomref",
  abstract = "
    The SCRATCHPAD/1 system is designed to provide an interactive symbolic
    computational facility for the mathematician user. The system features
    a user language designed to capture the style and succinctness of
    mathematical notation, together with a facility for conveniently
    introducing new notations into the language. A comprehensive system
    library incorporates symbolic capabilities provided by such systems as
    SIN, MATHLAB, and REDUCE."
}

\end{chunk}

\index{Seiler, Werner Markus}
\index{Calmet, J.}
\begin{chunk}{axiom.bib}
@misc{Seil95a,
  author = "Seiler, Werner Markus and Calmet, J.",
  title = "JET -- An Axiom Environment for Geometric Computations with 
           Differential Equations",
  paper = "Seil95a.pdf",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/axiom-jet95.pdf",
  keywords = "axiomref",
  abstract = 
    "JET is an environment within the computer algebra system Axiom to
    perform such computations. The current implementation emphasises the
    two key concepts involution and symmetry. It provides some packages
    for the completion of a given system of differential equations to an
    equivalent involutive one based on the Cartan-Kuranishi theorem and
    for setting up the determining equations for classical and
    non-classical point symmetries."
}

\end{chunk}

