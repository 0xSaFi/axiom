books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@techReport{Jenk71,
  author = "Jenks, Richard D.",
  title = "META/PLUS: The syntax extension facility for SCRATCHPAD",
  type = "Research Report",
  number = "RC 3259",
  institution = "IBM Research",
  year = "1971",
  keywords = "axiomref"
}

\end{chunk}

\index{Griesmer, James H.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@techreport{Grie72,
  author = "Griesmer, James H. and Jenks, Richard D.",
  title = "Experience with an online symbolic math system SCRATCHPAD",
  year = "1972",
  isbn = "0-903796-02-3",
  keywords = "axiomref"
}

\end{chunk}

\index{Griesmer, James H.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@article{Grie72,
  author = "Griesmer, James H. and Jenks, Richard D.",
  title = "SCRATCHPAD: A capsule view",
  journal = "ACM SIGPLAN Notices",
  volume = "7",
  number = "10",
  pages = "93-102",
  year = "1972",
  comment = "Proc. Symp. Two-dimensional man-machine communications",
  keywords = "axiomref",
  doi = "http://dx.doi.org/10.1145807019",
  abstract =
    "SCRATCHPAD is an interactive system for algebraic manipulation
    available under the CP/CMS time-sharing system at Yorktown Heights. It
    features an extensible declarative language for the interactive
    formulation of symbolic computations. The system is a large and
    complex body of LISP programs incorporating significant portions of
    other symbolic systems. Here we present a capsule view of SCRATCHPAD,
    its language and its capabilities. This is followed by an example
    which illustrates its use in an application involving the solution of
    an integral equation."
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@article{Jenk74,
  author = "Jenks, Richard D.",
  title = "The SCRATCHPAD language",
  journal = "ACM SIGPLAN Notices",
  comment = "reprinted in SIGSAM Bulletin, Vol 8, No. 2, May 1974",
  volume = "9",
  number = "4",
  pages = "101-111",
  year = "1974",
  doi = "http://dx.doi.org/10.1145807051",
  keywords = "axiomref",
  abstract =
    "SCRATCHPAD is an interactive system for symbolic mathematical
    computation. Its user language, originally intended as a
    special-purpose non-procedural language, was designed to capture the
    style and succinctness of common mathematical notations, and to serve
    as a useful, effective tool for on-line problem solving. This paper
    describes extensions to the language which enable it to serve also as
    a high-level programming language, both for the formal description of
    mathematical algorithms and their efficient implementation."
}

\end{chunk}

\index{Norman, Arthur C.}
\begin{chunk}{axiom.bib}
@article{Norm75,
  author = "Norman, Arthur C.",
  title = "Computing with Formal Power Series",
  journal = "ACM Transactions on Mathematical Software",
  volume = "1",
  number = "4",
  pages = "346-356",
  year = "1975",
  keywords = "axiomref",
  doi = "10.1145/355656.355660"
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@inproceedings{Jenk76,
  author = "Jenks, Richard D.",
  title = "A pattern compiler",
  booktitle = "Proc. 1976 ACM Symposium on Symbolic and Algebraic Computation",
  series = "SYMSAC '76",
  year = "1976",
  publisher = "ACM Press",
  keywords = "axiomref",
  doi = "http://dx.doi.org/10.1145806324",
  abstract =
    "A pattern compiler for the SCRATCHPAD system provides an efficient
    implementation of sets of user-defined pattern-replacement rules for
    symbolic mathematical computation such as tables of integrals or
    summation identities. Rules are compiled together, with common search
    paths merged and factored out and with the resulting code optimized
    for efficient recognition over all patterns. Matching principally
    involves structural comparison of expression trees and evaluation of
    predicates. Pattern recognizers are ``fully compiled''; if values of 
    match variables can be determined by solving equations at compile time. 
    Recognition times for several pattern matchers are compared."
}

\end{chunk}

\index{Lueken, E.}
\begin{chunk}{axiom.bib}
@mastersthesis{Luek77,
  author = "Lueken, E.",
  title = "Ueberlegungen zur Implementierung eines Formelmanipulationssystems",
  school = {Technischen Universit{\"{a}}t Carolo-Wilhelmina zu Braunschweig}, 
  address = "Braunschweig, Germany",
  year = "1977",
  keywords = "axiomref"
}

\end{chunk}

\index{Kanigel, Robert}
\begin{chunk}{axiom.bib}
  author = "Kanigel, Robert",
  title = "OldQuotes",
  url = "http://www.oldquotes.com",
  year = "2016",
  abstract =
    "Sometimes in studying Ramanujan's work, George Andrews said at
    another time, ``I have wondered how much Ramanujan could have done if
    he had had MACSYMA or SCRATCHPAD or some other symbolic algebra package"
}

\end{chunk}

\index{Andrews, George}
\index{Baxter, R.J.}
\begin{chunk}{axiom.bib}
@inproceedings{Andr90,
  author = "Andrews, George and Baxter, R.J.",
  title = "SCRATCHPAD explorations for elliptic theta functions",
  booktitle = "Computers in Mathematics",
  series = "Lecture Notes in Pure and Appl. Math 125",
  pages = "17-33",
  year = "1990",
  keywords = "axiomref"
}

\end{chunk}

\index{Koepf, Wolfram}
\begin{chunk}{axiom.bib}
@article{Koep92,
  author = "Koepf, Wolfram",
  title = "Power Series in Computer Algebra",
  journal = "J. Symbolic Computation",
  volume = "13",
  pages = "581-603",
  year = "1992",
  paper = "Koep92.pdf",
  abstract = 
    "Formal power series (FPS) of the form
    $\sum_{k=0}^{\infty}{a_k(x-x_0)^k}$ are important in calculus and
    complex analysis.  In some Computer Algebra Systems (CASs) it is
    possible to define an FPS by direct or recursive definition of its
    coefficients.  Since some operations cannot be directly supported
    within the FPS domain, some systems generally convert FPS to finite
    truncated power series (TPS) for operations such as addition,
    multiplication, division, inversion and formal substitution.  This
    results in a substantial loss of information.  Since a goal of
    Computer Algebra is - in contrast to numerical programming - to work
    with formal objects and preserve such symbolic information, CAS should
    be able to use FPS when possible.

    There is a one-to-one correspondence between FPS with positive radius
    of convergence and corresponding analytic functions.  It should be
    possible to automate conversion between these forms.  Among CASs
    only MACSYMA provides a procedure {\tt powerseries} to calculate FPS from
    analytic expressions in certain special cases, but this is rather
    limited.
    
    Here we give an algorithmic approach for computing an FPS for a
    function from a very rich family of functions including all of the
    most prominent ones that can be found in mathematical dictionaries
    except those where the general coefficient depends on the Bernoulli,
    Euler, or Eulerian numbers.  The algorithm has been implemented by the
    author and A.  Rennoch in the CAS MATHEMATICA, and by D.  Gruntz in
    MAPLE.
    
    Moreover, the same algorithm can sometimes be reversed to calculate a
    function that corresponds to a given FPS, in those cases when a
    certain type of ordinary differential equation can be solved."
}

\end{chunk}

\index{Verstraete, Jacques}
\begin{chunk}{axiom.bib}
@misc{Vers16,
  author = "Verstraete, Jacques",
  title = "Combinatorial Calculus of Formal Power Series",
  comment = "264A Lecture B",
  url = "http://www.math.ucsd.edu/~jverstra/264A-LECTUREB.pdf",
  paper = "Vers16.pdf"
}  

\end{chunk}

\index{Lucks, Michael}
\begin{chunk}{axiom.bib}
@inproceedings{Luck86,
  author = "Lucks, Michael",
  title = "A fast implementation of polynomial factorization",
  booktitle = "Proc. 1986 Symposium on Symbolic and Algebraic Computation",
  series = "SYMSAC '86",
  year = "1986", 
  location = "Waterloo, Ontario",
  pages = "228-232",
  publisher = "ACM Press",
  isbn = "0-89791-199-7",
  keywords = "axiomref",
  abstract =
    "A new package for factoring polynomials with integer coefficients is
    described which yields significant improvements over previous
    implementations in both time and space requirements. For multivariate
    problems, the package features an inexpensive method for early
    detection and correction of spurious factors. This essentially solves
    the multivariate extraneous factor problem and eliminates the need to
    factor more than one univariate image, except in rare cases. Also
    included is an improved technique for coefficient prediction which is
    successful more frequently than prior versions at short-circuiting the
    expensive multivariate Hensel lifting stage. In addition some new
    approaches are discussed for the univariate case as well as for the
    problem of finding good integer substitution values. The package has
    been implemented both in Scratchpad II and in an experimental version
    of muMATH."
}

\end{chunk}

\index{Purtilo, J.}
\begin{chunk}{axiom.bib}
@inproceedings{Purt86,
  author = "Purtilo, J.",
  title = "Applications of a software interconnection system in 
           mathematical problem solving environments",
  booktitle = "Proc.1986 Symposium on Symbolic and Algebraic Computation",
  series = "SYMSAC '86",
  pages = "16-23",
  year = "1986",
  publisher = "ACM Press",
  isbn = "0-89791-199-7",
  keywords = "axiomref",
  doi = "http://dx.doi.org/10.1145/32439.32443"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{NTCI16,
  author = "NTCIR",
  title = "Axiom (computer algebra system)",
  url = 
   "http://ntcir11-wmc.nii.ac.jp/index.php/Axiom\_(computer_algebra_system)",
  keywords = "axiomref",
  year = "2016"
}

\end{chunk}

\index{Gebauer, R{\"u}diger}
\index{M{\"o}ller, H. Michael}
\begin{chunk}{axiom.bib}
@article{Geba88,
  author = "Gebauer, Rudiger and Moller, H. Michael",
  title = "On an installation of Buchberger's algorithm",
  journal = "Journal of Symbolic Computation", 
  volume = "6",
  number = "2-3",
  pages = "275-286",
  year = "1988",
  paper = "GM88.pdf",
  keywords = "axiomref",
  abstract = 
    "Buchberger's algorithm calculates Groebner bases of polynomial
    ideals. Its efficiency depends strongly on practical criteria for
    detecting superfluous reductions. Buchberger recommends two
    criteria. The more important one is interpreted in this paper as a
    criterion for detecting redundant elements in a basis of a module of
    syzygies. We present a method for obtaining a reduced, nearly minimal
    basis of that module. The simple procedure for detecting (redundant
    syzygies and )superfluous reductions is incorporated now in our
    installation of Buchberger's algorithm in SCRATCHPAD II and REDUCE
    3.3. The paper concludes with statistics stressing the good
    computational properties of these installations."
}

\end{chunk}

\index{Bronstein, Manuel}
\begin{chunk}{axiom.bib}
@inproceedings{Bron89,
  author = "Bronstein, Manuel",
  title = "Simplification of real elementary functions",
  booktitle = "Proc. ISSAC 1989",
  series = "ISSAC 1989",
  year = "1989",
  pages = "207-211",
  isbn = "0-89791-325-6",
  keywords = "axiomref",
  abstract = "
    We describe an algorithm, based on Risch's real structure theorem, that
    determines explicitly all the algebraic relations among a given set of
    real elementary functions. We also provide examples from its
    implementation that illustrate the advantages over the use of complex
    logarithms and exponentials."
}

\end{chunk}

\index{Dicrescenzo, C.}
\index{Duval, Dominique}
\begin{chunk}{axiom.bib}
@InProceedings{Dicr88,
  author = "Dicrescenzo, C. and Duval, D.",
  title = "Algebraic extensions and algebraic closure in Scratchpad II",
  booktitle = "Proc. ISSAC 1988",
  series = "ISSAC 1998",
  year = "1998",
  pages = "440-446",
  isbn = "3-540-51084-2",
  keywords = "axiomref",
  abstract =
    "Many problems in computer algebra, as well as in high-school
    exercises, are such that their statement only involves integers but
    their solution involves complex numbers. For example, the complex
    numbers $\sqrt{2}$ and $-\sqrt{2}$ appear in the solutions of
    elementary problems in various domains. 
    \begin{itemize}
    \item in {\bf integration}:
    \[\int{\frac{dx}{x^2-2}} = \frac{Log(x-\sqrt{2})}{2\sqrt{2}}
    +\frac{Log(x-(-\sqrt{2}))}{2(-\sqrt{2})}\]
    \item in {\bf linear algebra}: the eigenvalues of the matrix
    \[\left(\begin{array}{cc}
    1 & 1\\
    1 & -1
    \end{array}\right) = \sqrt{2} {\rm\ and\ }-\sqrt{2}\]
    \item in {\bf geometry}: the line $y=x$ intersects the circle
    $y^2+x^2=1$ at the points
    \[(\sqrt{2},\sqrt{2}) {\rm\ and\ }(-\sqrt{2},-\sqrt{2})\]
    \end{itemize}
    Of course, more ``complicated'' complex numbers appear in more
    complicated examples.

    But two facts have to be emphasized:
    \begin{itemize}
    \item in general, if a problem is stated over the integers (or over
    the field $\mathbb{Q}$ of rational numbers), the complex numbers that
    appear are {\sl algebraic} complex numbers, which means that they are
    roots of some polynomial with rational coefficients, like $\sqrt{2}$
    and $-\sqrt{2}$ are roots of $T^2-2$.
    \item Similar problems appear with base fields different from
    $mathbb{Q}$. For example finite fields, or fields of rational
    functions over $\mathbb{Q}$ or over a finite field. The general
    situation is that a given problem is stated over some ``small field''
    $K$, and its solution is expressed in an {\sl algebraci closure}
    $\overline{K}$ of $K$, which means that this solution involves numbers
    which are roots of polynomials with coefficients in $K$.
    \end{itemize}

    The aim of this paper is to describe an implementation of an algebraic
    closure domain constructor in the language Scratchpad II, simply
    called Scratchpad below. In the first part we analyze the problem, and
    in the second part we describe a solution based on the D5 system."
}

\end{chunk}

\index{Yun, David Y.Y}
\begin{chunk}{axiom.bib}
@inproceedings{Yunx76,
  author = "Yun, David Y.Y",
  title = "Algebraic Algorithms using p-adic Constructions",
  booktitle = "Proc. 1976 Symp. on Symbolic and Algebraic Computation",
  series = "SYMSAC '76",
  publisher = "ACM",
  year = "1976",
  pages = "248-259",
  keywords = "axiomref",
  paper = "Yunx76.djvu",
  url = 
  "http://lib.org/by/\_djvu\_Papers/Computer\_algebra/Algebraic\%20numbers",
}

\end{chunk}

\index{Gianni, Patrizia}
\index{Mora, T.}
\begin{chunk}{axiom.bib}
@inproceedings{Gian89,
  author = "Gianni, Patrizia and Mora, T.",
  title = "Algebraic solution of systems of polynomial equations 
           using Groebner bases.",
  booktitle = "Applied Algebra, Algebraic Algorithms and Error-Correcting
               Codes",
  series = "AAECC-5",
  pages = "247-257",
  year = "1989",
  isbn = "3-540-51082-6",
  keywords = "axiomref",
  paper = "Gian89.pdf",
  abstract =
    "One of the most important applications of Buchberger's algorithm for
    Groebner basis computation is the solution of systems of polynomial
    equations (having finitely many roots), i.e. the computation of zeros
    of 0-dimensional polynomial ideals. It is based on a relation between
    Groebner bases w.r.t. a lexicographical ordering and elimination
    ideals, which was discovered by Trinks.

    Packages for isolation of real roots of systems of polynomial
    equations using Groebner basis computation are currently available in
    different computer algebra systems, including SAC-2, Reduce,
    Scratchpad II, Maple.
    
    In principle, Buchberger-Trinks algorithm should allow to compute
    solutions of such systems in the algebraic closure of the coefficient
    field $k$ (usually the rational numbers), in the sense that it is
    possible to represent explicitly a finite extension of $k$ containing
    all solutions and to express the roots in this field.
    
    However, this requires several factorisations of polynomials over a
    tower of algebraic extensions of $k$, which is usually very costly, so
    that the resulting algorithm is not very feasible and, as far as we
    know, no implementation is available.
    
    The results of [GT2] on primary decomposition of ideals include a
    thorough study on the structure of Groebner bases for 0-dimensional
    ideals; in particular, the paper shows, that after a ``generic''
    linear change of coordinates, the roots of a system of polynomial
    equations can be expressed in a simple extension of $k$. Therefore, in
    this case, no factorisation of polynomials over towers of algebraic
    extensions is needed.
    
    However performing a change of coordinates has the undesirable effects
    of introducing dense polynomials and of increasing the size of
    coefficients.
    
    The problem then arises of producing strategies to compute Groebner
    bases for (0-dimensional) ideals, which at least are able to control
    the influence of these side-effects: two such strategies are presented
    in this paper, together with the application to the present problem of
    an algorithm by Gianni that computes the radical of a 0-dimensional
    ideal after a ``generic'' change of coordinates.
    
    A different approach, based on her ``splitting algorithm'', to compute
    solutions of systems of polynomial equations without the need of
    polynomial factorisations has been proposed by D. Duval; also her
    algorithm should be simplified by a ``generic'' change of coordinates.
    
    The algorithms discussed in this paper are implemented in SCRATCHPAD II.
    
    In the first section we recall some well-known properties of Groebner
    bases and properties on the structure of Groebner bases of
    zero-dimensional ideals from [GT2]; in the second section we recall
    the Groebner basis algorithm for solving systems of algebraic
    equations.
    
    The original results are contained in Sections 3 to 5; in Section 3 we
    take advantage of the obvious fact that density can be controlled by
    performing ``small'' changes of coordinates: we show that such
    approach is possible during a Groebner basis computation, in such a
    way that computations done before a change of coordinates are valid
    also after it; in Section 4 we propose a ``linear algebra'' approach
    to obtain the Groebner basis w.r.t the lexicographical ordering from
    the one w.r.t the total-degree ordering; in Section 5, we present a
    zero-dimensional radical algorithm and show how to apply it to the
    present problem."
}

\end{chunk}

\index{Sturmfels, Bernd}
\begin{chunk}{axiom.bib}
@misc{Stur00,
  author = "Sturmfels, Bernd",
  title = "Solving Systems of Polynomial Equations",
  url = "https://math.berkeley.edu/~bernd/cbms.pdf",
  paper = "Stur00.pdf",
  year = "2000",
  abstract =
    "One of the most classical problems of mathematics is to solve systems
    of polynomial equations in several unknowns. Today, polynomial
    models are ubiquitous and widely applied across the sciences. They
    arise in robotics, coding theory, optimization, mathematical
    biology, computer vision, game theory, statistics, machine learning,
    control theory, and numerous other areas.  The set of solutions to a
    system of polynomial equations is an algebraic variety, the basic
    object of algebraic geometry. The algorithmic study of algebraic 
    varieties is the central theme of computational algebraic
    geometry. Exciting recent developments in symbolic algebra and
    numerical software for geometric calculations have revolutionized
    the field, making formerly inaccessible problems tractable, and
    providing fertile ground for experimentation and conjecture.
    
    The first half of this book furnishes an introduction and represents a
    snapshot of the state of the art regarding systems of polynomial
    equations.  Afficionados of the well-known text books by Cox, Little,
    and O’Shea will find familiar themes in the first five chapters:
    polynomials in one variable, Groebner bases of zero-dimensional
    ideals, Newton polytopes and Bernstein’s Theorem, multidimensional
    resultants, and primary decomposition.
    
    The second half of this book explores polynomial equations from a
    variety of novel and perhaps unexpected angles. Interdisciplinary
    connections are introduced, highlights of current research are
    discussed, and the author’s hopes for future algorithms are
    outlined. The topics in these chapters include computation of Nash
    equilibria in game theory, semidefinite programming and the real
    Nullstellensatz, the algebraic geometry of statistical models, the
    piecewise-linear geometry of valuations and amoebas, and the
    Ehrenpreis-Palamodov theorem on linear partial differential equations
    with constant coefficients.
    
    Throughout the text, there are many hands-on examples and exercises,
    including short but complete sessions in the software systems maple,
    matlab, Macaulay 2, Singular, PHC, and SOStools . These examples
    will be particularly useful for readers with zero background in
    algebraic geometry or commutative algebra. Within minutes, anyone can
    learn how to type in polynomial equations and actually see some
    meaningful results on the computer screen."
}

\end{chunk}

\index{Monagan, Michael B.}
\index{Gonnet, Gaston H.}
\begin{chunk}{axiom.bib}
@misc{Mona94,
  author = "Monagan, Michael B. and Gonnet, Gaston H.",
  title = "Signature Functions for Algebraic Numbers",
  url = 
  "http://lib.org/by/\_djvu\_Papers/Computer\_algebra/Algebraic\%20numbers",
  paper = "Mona94.djvu",
  keywords = "axiomref",
  abstract = 
    "In 1980 Schwartz gave a fast {\sl probabilistic} method which tests
    if a matrix of polynomials of $\mathbb{Z}$ is singular or not. The
    method is based on the idea of {\sl signature functions} which are
    mappings of mathematical expressions into finite rings. In Schwartz's
    paper, they were polynomials over $\mathbb{Z}$ into GF($p$). Because
    computation in GF($p$) is very fast compared with computing with
    polynomials, Schwartz's method yields an enormous speedup both in
    theory and in practice. Therefore it is desirable to extend the class
    of expressions for which we can find effective signature functions. In
    the mid 80's Gonnet extended the class of expressions, for which
    signature functions can be found, to include a restricted class of
    elementary functions and integer roots. In this paper we present and
    compare methods for constructing signature functions for expressions
    containing {\sl algebraic numbers}. Some experimental results are
    given."
}  

\end{chunk}

\index{Kusche, K.}
\index{Kutzler, B.}
\index{Mayr, H.}
\begin{chunk}{axiom.bib}
@inproceedings{Kusc89,
  author = "Kusche, K. and Kutzler, B. and Mayr, H.",
  title = "Implementation of a geometry theorem proving package 
           in SCRATCHPAD II",
  booktitle = "Proc. of Eurocal '87",
  series = "Lecture Notes in Computer Science 378",
  pages = "246-257",
  isbn = "3-540-51517-8",
  year = "1987",
  keywords = "axiomref",
  abstract = 
    "The problem of automatically proving geometric theorems has gained a
    lot of attention in the last two years. Following the general approach
    of translating a given geometric theorem into an algebraic one,
    various powerful provers based on characteristic sets and Groebner
    bases have been implemented by groups at Academia Sinica Bejing
    (China), U. Texas at Austin (USA), General Electric Schenectady (USA),
    and Research Institute for Symbolic Computation Linz (Austria). So ar,
    fair comparisons of the various provers were not possible, because the
    underlying hardware and the underlying algebra systems differed
    greatly. This paper reports on the first uniform implementation of all
    of these provers in the computer algebra system and language
    SCRATCHPAD II. We summarize the recent achievements in the area of
    automated geometry theorem proving, shortly review the SCRATCHPAD II
    system, describe the implementation of the geometry theorem proving
    package, and finally give a computing time statistics of 24 examples."
}

\end{chunk}

\index{El-Alfy, Hazem Mohamed}
\begin{chunk}{axiom.bib}
@mastersthesis{ElAl01,
  author = "El-Alfy, Hazem Mohamed",
  title = "Computer Algebra and its Applications",
  school = "Alexandria University, Department of Engineering, Mathematics, 
            and Physics",
  year = "2001",
  url = "http://www.umiacs.umd.edu/~helalfy/pub/mscthesis01.pdf",
  file = "ElAl01.pdf",
  keywords = "axiomref",
  abstract = 
    "In the recent decades, it has been more and more realized that
    computers are of enormous importance for numerical
    computations. However, these powerful general-purpose machines can
    also be used for transforming, combining and computing symbolic
    algebraic expressions. In other words, computers can not only deal
    with numbers, but also with abstract symbols representing mathematical
    formulas. This fact has been realized much later and is only now
    gaining acceptance among mathematicians and engineers. [Franz Winkler,
    1996].
    
    Computer Algebra is that field of computer science and mathematics,
    where computation is performed on symbols representing mathematical
    objects rather than their numeric values.
    
    This thesis attempts to present a definition of computer algebra by
    means of a survey of its main topics, together with its major
    application areas. The survey includes necessary algebraic basics and
    fundamental algorithms, essential in most computer algebra problems,
    together with some problems that rely heavily on these algorithms. The
    set of applications, presented from a range of fields of engineering
    and science, although very short, indicates the applied nature of
    computer algebra systems.
    
    A recent research area, central in most computer algebra software
    packages and in geometric modeling, is the implicitization
    problem. Curves and surfaces are naturally reperesented either
    parametrically or implicitly. Both forms are important and have their
    uses, but many design systems start from parametric
    representations. Implicitization is the process of converting curevs
    and surfaces from parametric form into implicit form.
    
    We have surveyed the problem of implicitization and investigated its
    currently available methods. Algorithms for such methods have been
    devised, implemented and tested for practical examples. In addition, a
    new method has been devised for curves for which a direct method is
    not available. The new method has been called {\sl near implicitization}
    since it relies on an approximation of the input problem. Several
    variants of the method try to compromise between accuracy and
    complexity of the designed algorithms.
    
    The problem of implicitization is an active topic where research is
    still taking place.  Examples of further research points are included
    in the conclusion"
}

\end{chunk}

\index{Chou, Shang-Ching}
\index{Gao, Xiao-Shan}
\index{Zhang, Jing-Zhong}
\begin{chunk}{axiom.bib}
@book{Chou94,
  author = "Chou, Shang-Ching and Gao, Xiao-Shan and Zhang, Jing-Zhong",
  title = "Machine Proofs in Geometry: Automated Production of Readable
           Proofs for Geometry Theorems",
  publisher = "World Scientific",
  url = "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.374.11778",
  paper = "Chou94.pdf",
  year = "1994"
}  

\end{chunk}

\index{Chou, Shang-Ching}
\index{Gao, Xiao-Shan}
\begin{chunk}{axiom.bib}
@techreport{Chou89,
  author = "Chou, Shang-Ching and Gao, Xiao-Shan",
  title = "A Collection of 120 Computer Solved Geometry Problems in
           Mechanical Formula Derivation",
  institution = "University of Texas, Austin",
  url = "http://www.cs.utexas.edu/ftp/techreports/tr89-22.pdf",
  paper = "Chou89.pdf",
  type = "technical report",
  number = "tr-89-22",
  year = "1989"
  abstract = 
    "This is a collection of 120 geometric problems mechanically solved by
    a program based on the methods introduced by us. Researchers can use
    this collection to experiment with their methods/programs similar to
    ours. It consists of two parts: the exact specification of the input
    to our program and a collection of 120 examples. A typical example
    consists of an informal description of the geometric problem, the
    input to the program which is the exact specification of the problem,
    the result of the problem, and a diagram."
}  

\end{chunk}

