books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Carette, Jacques}
\begin{chunk}{axiom.bib}
@article{Care06,
  author = "Carette, Jacques",
  title = "Gaussian elimination: a case study in efficient genericity
           with MetaOCaml",
  journal = "Sci. Comput. Program.",
  volume = "62",
  number = "1",
  pages = "3-24",
  year = "2006",
  keywords = "axiomref",
  url = "http://www.cas.mcmaster.ca/~carette/publications/ge.pdf",
  paper = "Care06.pdf",
  abstract =
    "The Gaussian Elimination algorithm is in fact an algorithm family –
    common implementations contain at least six (mostly independent)
    ``design choices''. A generic implementation can easily be parametrized
    by all these design choices, but this usually leads to slow and
    bloated code. Using MetaOCaml’s staging facilities, we show how we can
    produce a natural and type-safe implementation of Gaussian Elimination
    which exposes its design choices at code-generation time, so that
    these choices can effectively be specialized away, and where the
    resulting code is quite efficient."
}

\end{chunk}

\index{Li, Xin}
\begin{chunk}{axiom.bib}
@phdthesis{Lixx05,
  author = "Li, Xin",
  title = "Efficient Management of Symbolic Computation with Polynomials",
  school = "University of Western Ontario",
  year = "2005",
  paper = "Lixx05.pdf",
  keywords = "axiomref",
  url = 
   "http://www.csd.uwo.ca/~moreno//Publications/XinLi-MSThesis-2005.pdf.gz",
  abstract = 
    "Symbolic polynomial computation is widely used to solve many applied
    or abstract mathematical problems. Some of them, such as solving
    systems of polynomial equations, have exponential complexity. Their
    implementation is, therefore, a challenging task.

    By using adapted data structures, asymptotically fast algorithms and
    effective code optimization techniques, we show how to reduce the
    practical and theoretical complexity of these computations. Our effort
    is divided into three categories: integrting the best known techniques
    into our implementation, investigating new directions, and measuring
    the interactions between numerous techniques.

    We chose AXIOM and ALDOR as our implementation and experimentation
    environment, since they are both strongly typed and highly efficient
    Computer Algebra Systems (CAS). Our implementation results show that
    our methods have great potential to improve the efficiency of exact
    polynomial computations with the selected CASs. The performance of our
    implementation is comparable to that of (often outperforming) the best
    available packages for polynomial computations."
}

\end{chunk}

\index{Li, Xin}
\begin{chunk}{axiom.bib}
@phdthesis{Lixx09a,
  author = "Li, Xin",
  title = "Toward High-Performance Polynomial System Solvers Based On
           Triangluar Decompositions",
  school = "University of Western Ontario",
  year = "2009",
  paper = "Lixx09a.pdf",
  keywords = "axiomref",
  url = "http://www.csd.uwo.ca/~moreno/Publications/XinLiPhDThesis-2008.pdf",
  abstract = 
    "This thesis is devoted to the design and implementation of polynomial
    system solvers based on symbolic computation. Solving systems of
    non-linear, algebraic or differential equations, is a fundamental
    problem in mathematical sciences. It has been studied for centuries
    and still stimulates many research developments, in particular on the
    front of high-performance computing.

    Triangular decompositions are a highly promising technique with the
    potential to produce high-performance polynomial system solvers. This
    thesis makes several contributions to this effort.

    We propose asymptotically fast algorithms for the core operati ons on
    which triangular decompositions rely. Complexity results and comparati
    ve implementation show that these new algorithms provide substantial
    performance improvements.

    We present a fundamental software library for polynomial arithmetic in
    order to support the implementation of high-performance solvers based
    on triangular decompositions. We investigate strategies for the
    integration of this library in high-level programming environments
    where triangular decompositions are usually implemented.

    We obtain a high performance library combining highly optimized C
    routines and solving procedures written in the Maple computer algebra
    system. The experimental result shows that our approaches are very
    effective, since our code often outperforms pre-existing solvers in a
    significant manner."
}

\end{chunk}

\index{Li, Xin}
\index{Moreno Maza, Marc}
\begin{chunk}{axiom.bib}
@InProceedings{{Lixx06,
  author = "Li, Xin and Moreno Maza, Marc",
  title = "Efficient implementation of polynomial arithmetic in a 
           multiple-level programming environment",
  booktitle = "Mathematical Software",
  series = "ICMS 2006",
  year = "2006",
  isbn = "978-3-540-38084-9",
  location = "Spain",
  pages = "12-23",
  keywords = "axiomref",
  paper = "Lixx06.pdf",
  url = "http://www.math.kobe-u.ac.jp/icms2006/icms2006-video/slides/046.pdf",
  abstract =
    "The purpose of this study is to investigate implementation techniques
    for polynomial arithmetic in a multiple-level programming
    environment. Indeed, certain polynomial data types and algorithms can
    further take advantage of the features of lower level languages, such
    as their specialized data structures or direct access to machine
    arithmetic. Whereas, other polynomial operations, like Groebner basis
    over an arbitrary field, are suitable for generic programming in a
    high-level language.

    We are interested in the integration of polynomial data type
    implementations realized at different language levels, such as Lisp, C
    and Assembly. In particular, we consider situations for which code
    from different levels can be combined together within the same
    application in order to achieve high-performance.  We have developed
    implementation techniques in the multiple-level programming
    environment provided by the computer algebra system AXIOM. For a given
    algorithm realizing a polynomial operation, available at the user
    level, we combine the strengths of each language level and the
    features of a specific machine architecture. Our experimentations show
    that this allows us to improve performances of this operation in a
    significant manner."
}

\end{chunk}

\index{Rubey, Martin}
\begin{chunk}{axiom.bib}
@InProceedings{Rube06,
  author = "Rubey, Martin",
  title = "Extented rate, more GFUN",
  booktitle = "4th Colloquium on mathematics and computer science",
  series = "DMTCS",
  year = "2006",
  location = "Nancy, France",
  pages = "431-434",
  paper = "Rube06.pdf",
  url = "http://mathinfo06.iecn.u-nancy.fr/papers/dmAG431-434.pdf",
  abstract =
    "We present a software package that guesses formulas from sequences
    of, for example, rational numbers or rational functions, given the
    first few terms. Thereby we extend and complement C. Krattenthaler's
    program RATE [RATE: a Mathematics guessing machine] and the relevant
    parts of B. Salvy and P. Zimmermann's GFUN."
}

\end{chunk}

\index{Hebisch, Waldemar}
\index{Rubey, Martin}
\begin{chunk}{axiom.bib}
@article{Hebi10,
  author = "Hebisch, Waldemar and Rubey, Martin",
  title = "Extended Rate, more GFUN",
  year = "2010",
  url = "https://arxiv.org/abs/math/0702086v2",
  paper = "Hebi10.pdf",
  comment = "\newline\refto{package GUESS Guess}
             \newline\refto{package GUESSAN GuessAlgebraicNumber}
             \newline\refto{package GUESSF GuessFinite}
             \newline\refto{package GUESSF1 GuessFiniteFunctions}
             \newline\refto{package GUESSINT GuessInteger}
             \newline\refto{package GUESSP GuessPolynomial}
             \newline\refto{package GUESSUP GuessUnivariatePolynomial}",
  abstract = 
    "We present a software package that guesses formulae for sequences of,
    for example, rational numbers or rational functions, given the first
    few terms. We implement an algorithm due to Bernhard Beckermann and
    George Labahn, together with some enhancements to render our package
    efficient. Thus we extend and complement Christian Krattenthaler's
    program Rate, the parts concerned with guessing of Bruno Salvy and
    Paul Zimmermann's GFUN, the univariate case of Manuel Kauers' Guess.m
    and Manuel Kauers' and Christoph Koutschan's qGeneratingFunctions.m."
}

\end{chunk}

\index{Fortuna, E.}
\index{Gianni, P.}
\index{Luminati, D.}
\index{Parenti, P.}
\begin{chunk}{axiom.bib}
@article{Fort05,
  author = "Fortuna, E. and Gianni, P. and Luminati, D. and Parenti, P.",
  title = "The adjacency graph of a real algebraic surface",
  journal = "Appl. Algebra Eng. Commun. Comput.",
  volume = "16",
  number = "5",
  pages = "271-292",
  year = "2005",
  keywords = "axiomref",
  url = "http://eprints.biblio.unitn.it/788/1/UTM671.pdf",
  paper = "Fort05.pdf",
  abstract =
    "The paper deals with the question of recognizing the mutual positions
    of the connected components of a non-singular real projective surface
    $S$ in the real projective 3-space. We present an algorithm that
    answers this question through the computation of the adjacency graph
    of the surface; it also allows to decide whether each connected
    component is contractible or not. The algorithm, combined with a
    previous one returning as an output the topology of the surface,
    computes a set of data invariant up to ambient-homeomorphism which,
    though not sufficient to determine the pair $(\mathbb{R}\mathbb{P}^3,S)$, 
    give information about the nature of the surface as an embedded object."
}

\end{chunk}

