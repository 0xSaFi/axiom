books/bookvolbib add references

Goal: Proving Axiom Correct -- Coercion in CAS-Proof Systesms

\index{Sozeau, Matthieu}
\begin{chunk}{axiom.bib}
\incollection{Soze06,
  author = "Sozeau, Matthieu",
  title = {{Subset Coercions in Coq}},
  booktitle = "TYPES: Int. Workshop on Types for Proofs and Programs",
  journal = "LNCS",
  volume = "4502",
  pages = "237-252",
  year = "2006",
  abstract =
    "We propose a new language for writing programs with dependent types
    on top of the Coq proof assistant. This language permits to establish
    a phase distinction between writing and proving algorithms in the Coq
    environment. Concretely, this means allowing to write algorithms as
    easily as in a practical functional programming language whilst giving
    them as rich a specification as desired and proving that the code
    meets the specification using the whole Coq proof apparatus.  This is
    achieved by extending conversion to an equivalence which relates
    types and subsets based on them, a technique originating from the
    ``Predicate subtyping'' featureof PVS and following mathematical 
    convention. The typing judgements can be translated to the Calculus of
    (Co-)Inductive Constructions (Cic) by means of an interpretation
    which inserts coercions at the appropriate places.These coercions
    can contain existential variables representing the propositional 
    parts of the final term, corresponding to proof obligations (or 
    PVS type-checking conditions). A prototype implementation of this 
    process is integrated with the Coq environment.",
  paper = "Soze06.pdf"
}

\end{chunk}

\index{Pierce, Benjamin}
\begin{chunk}{axiom.bib}
@misc{Pier17,
  author = "Pierce, Benjamin",
  title = "DeepSpec Summer School, Coq Intensive, Part 1 (July 13,2017)",
  year = "2017",
  link = "\url{https://www.youtube.com/watch?v=jG61w5pOc2A}"
}

\end{chunk}

\index{Haftmann, Florian}
\index{Wenzel, Makarius}
\begin{chunk}{axiom.bib}
@article{Haft06,
  author = "Haftmann, Florian and Wenzel, Makarius",
  title = {{Constructive Type Classes in Isabelle}},
  journal = "LNCS",
  volume = "4502",
  year = "2006",
  abstract =
    "We reconsider the well-known concept of Haskell-style type classes
    within the logical framework of Isabelle. So far, axiomatic type
    classes in Isabelle merely account for the logical aspect as
    predicates over types, while the opera- tional part is only a
    convention based on raw overloading. Our more elaborate approach to
    constructive type classes provides a seamless integration with
    Isabelle locales, which are able to manage both operations and logical
    properties uniformly. Thus we combine the convenience of type
    classes and the flexibility of locales. Furthermore, we construct
    dictionary terms derived from notions of the type system. This
    additional internal structure provides satisfactory foundations of
    type classes, and supports further applications, such as code
    generation and export of theories and theorems to environments without
    type classes.",
  paper = "Haft06.pdf"
}

\end{chunk}

\index{Kiessling, Robert}
\index{Luo, Zhaohui}
\begin{chunk}{axiom.bib}
@article{Kies03,
  author = "Kiessling, Robert and Luo, Zhaohui",
  title = {{Coercions in Hindley-Milner Systems}},
  journal = "LNCS",
  volume = "3085",
  year = "2003",
  abstract = 
    "Coercive subtyping is a theory of abbreviation for dependent type
    theories. In this paper, we incorporate the idea of coercive subtyping
    into the traditional Hindley-Milner type systems in functional
    programming languages. This results in a typing system with coercions,
    an extension of the Hindley-Milner type system. A type inference 
    algorithm is developed and shown to be sound and complete with respect 
    to the typing system. A notion of derivational coherence is developed 
    to deal with the problem of ambiguity and the corresponding type
    inference algorithm is shown to be sound and complete.",
  paper = "Kies03.pdf"
}

\end{chunk}

\index{Wiedijk, Freek}
\begin{chunk}{axiom.bib}
@article{Wied03,
  author = "Wiedijk, Freek",
  title = {{Formal Proof Sketches}},
  journal = "LNCS",
  volume = "3085",
  year = "2003",
  pages = "378-393",
  abstract = 
    "Formalized mathematics currently does not look much like informal
    mathematics. Also, formalizing mathematics currently seems far too
    much work to be worth the time of the working mathematician. To
    address both of these problems we introduce the notion of a formal
    proof sketch . This is a proof representation that is in between a
    fully checkable formal proof and a statement without any proof at
    all. Although a formal proof sketch is too high level to be checkable
    by computer, it has a precise notion of correctness (hence the
    adjective formal ).  We will show through examples that formal proof
    sketches can closely mimic already existing mathematical
    proofs. Therefore, although a formal proof sketch contains gaps in
    the reasoning from a formal point of view (which is why we call it a
    sketch ), a mathematician probably would call such a text just a
    ‘proof’.",
  paper = "Wied03.pdf"
}

\end{chunk}

\index{Coquand, Thierry}
\index{Persson, Henrik}
\begin{chunk}{axiom.bib}
@article{Coqu98,
  author = "Coquand, Thierry and Persson, Henrik",
  title = {{Groebner Bases in Type Theory}},
  journal = "LNCS",
  volume = "1657",
  year = "1998",
  pages = "33-46",
  abstract =
    "We describe how the theory of Groebner bases, an important part
    of computational algebra, can be developed within Martin- Lof’s
    type theory. In particular, we aim for an integrated development
    of the algorithms for computing Groebner bases: we want to prove,
    constructively in type theory, the existence of Groebner bases and
    from such proofs extract the algorithms. Our main contribution is
    a reformulation of the standard theory of Groebner bases which
    uses generalised inductive definitions. We isolate the main
    non–constructive part, a minimal bad sequence argument, and use
    the open induction principle [Rao88,Coq92] to interpret it by
    induction. This leads to short constructive proofs of Dickson’s
    lemma and Hilbert’s basis theorem, which are used to give an
    integrated development of Buchberger’s algorithm. An important
    point of this work is that the elegance and brevity of the
    original proofs are maintained while the new proofs also have a
    direct constructive content.  In the appendix we present a
    computer formalisation of Dickson’s lemma and an abstract
    existence proof of Groebner bases.",
  paper = "Coqu98.pdf"
}

\end{chunk}

\index{Filliatre, Jean-Christophe}
\begin{chunk}{axiom.bib}
@article{Fill98,
  author = "Filliatre, Jean-Christophe",
  title = {{Proof of Imperative Programs in Type Theory}},
  journal = "LNCS",
  volume = "1657",
  year = "1998",
  pages = "78-92",
  abstract = 
    "We present a new approach to certifying functional programs with
    imperative aspects, in the context of Type Theory. The key is a
    functional translation of imperative programs, based on a combination
    of the type and effect discipline and monads. Then an incomplete proof
    of the specification is built in the Type Theory, whose gaps would
    corre- spond to proof obligations. On sequential imperative programs,
    we get the same proof obligations as those given by Floyd-Hoare
    logic. Compared to the latter, our approach also includes functional
    constructions in a straight-forward way. This work has been
    implemented in the Coq Proof Assistant and applied on non-trivial
    examples.",
  paper = "Fill98.pdf"
}

\end{chunk}

\index{Nipkow, Tobias}
\begin{chunk}{axiom.bib}
@article{Nipk02,
  author = "Nipkow, Tobias",
  title = {{Structured Proofs in Isar/HOL}},
  journal = "LNCS",
  volume = "2646",
  year = "2002",
  pages = "259-278",
  abstract =
    "Isar is an extension of the theorem prover Isabelle with a language
    for writing human-readable structured proofs. This paper is an
    introduction to the basic constructs of this language.",
  paper = "Nipk02.pdf"
}

\end{chunk}

\index{Carlstrom, Jesper}
\begin{chunk}{axiom.bib}
@article{Carl02,
  author = "Carlstrom, Jesper",
  title = {{Subsets, Quotients, and Partial Functions in Martin-L\"of's
            Type Theory}},
  journal = "LNCS",
  volume = "2646",
  year = "2002",
  pages = "78-94",
  abstract =
    "We treat subsets, equivalence relations, and partial functions,
    with subsets as propositional functions .In order for these three
    notions to work well together, we propose some changes to the theory
    of subsets as propositional functions .The method used is not to make
    any changes to the type theory itself, but to view the new concepts as
    defined ones.",
  paper = "Carl02.pdf"
}

\end{chunk}

\index{Bove, Ana}
\begin{chunk}{axiom.bib}
@article{Bove02,
  author = "Bove, Ana",
  title = {{General Recursion in Type Theory}},
  journal = "LNCS",
  volume = "2646",
  pages = "39-58",
  abstract =
    "In this work, a method to formalise general recursive algorithms in
    constructive type theory is presented throughout examples.  The method
    separates the computational and logical parts of the definitions. As
    a consequence, the resulting type-theoretic algorithms are clear,
    compact and easy to understand. They are as simple as their
    equivalents in a functional programming language, where there is no
    restriction on recursive calls. Given a general recursive algorithm,
    the method consists in defining an inductive special-purpose
    accessibility predicate that characterises the inputs on which the
    algorithm terminates. The type-theoretic version of the algorithm can
    then be defined by structural recursion on the proof that the input
    values satisfy this predicate. When formalising nested algorithms, the
    special-purpose accessibility predicate and the type-theoretic version
    of the algorithm must be defined simultaneously because they depend on
    each other. Since the method separates the computational part from
    the logical part of a definition, formalising partial functions
    becomes also possible.",
  paper = "Bove02.pdf"
}

\end{chunk}

\index{Coen, Claudio Sacerdoti}
\index{Tassi, Enrico}
\begin{chunk}{axiom.bib}
@article{Coen07,
  author = "Coen, Claudio Sacerdoti and Tassi, Enrico",
  title = {{Working with Mathematical Structures in Type Theory}},
  journal = "LNCS",
  volume = "4941",
  year = "2007",
  pages = "157-172",
  abstract =
    "We address the problem of representing mathematical structures in a
    proof assistant which: 1) is based on a type theory with depen- dent
    types, telescopes and a computational version of Leibniz equality; 2)
    implements coercive subtyping, accepting multiple coherent paths 
    between type families; 3) implements a restricted form of higher order
    unification and type reconstruction. We show how to exploit the
    previous quite common features to reduce the ``syntactic'' gap between
    pen and paper and formalised algebra. However, to reach our goal we need
    to propose unification and type reconstruction heuristics that are
    slightly different from the ones usually implemented. We have
    implemented them in Matita.",
  paper = "Coen07.pdf"
}

\end{chunk}

\index{Coquand, Thierry}
\begin{chunk}{axiom.bib}
@article{Coqu93,
  author = "Coquand, Thierry",
  title = {{Infinite Objects in Type Theory}},
  journal = "LNCS",
  volume = "806",
  year = "1993",
  pages = "62-78",
  abstract =
    "We show that infinite objects can be constructively understood
    without the consideration of partial elements, or greatest fixed-
    points, through the explicit consideration of proof objects.  We
    present then a proof system based on these explanations.  According to
    this analysis, the proof expressions should have the same structure
    as the program expressions of a pure functional lazy language:
    variable, constructor, application, abstraction, case expressions,
    and local let expressions.",
  paper = "Coqu93.pdf"
}

\end{chunk}

\index{Barthe, Gilles}
\begin{chunk}{axiom.bib}
@article{Bart95,
  author = "Barthe, Gilles",
  title = {{Implicit Coercions in Type Systems}},
  journal = "LNCS",
  volume = "1158",
  year = "1995",
  pages = "1-15",
  abstract =
    "We propose a notion of pure type system with implicit coercions. In
    our framework, judgements are extended with a context of coercions Δ
    and the application rule is modified so as to allow coercions to be
    left implicit. The setting supports multiple inheritance and can be
    applied to all type theories with $\Pi$-types. One originality of our work
    is to propose a computational interpretation for implicit
    coercions. In this paper, we demonstrate how this interpretation
    allows a strict control on the logical properties of pure type systems
    with implicit coecions.",
  paper = "Bart95.pdf"
}

\end{chunk}

\index{Berger, U.}
\index{Schwichtenberg, H.}
\begin{chunk}{axiom.bib}
@article{Berg95,
  author = "Berger, U. and Schwichtenberg, H.",
  title = {{The Greatest Common Divisor: A Case Study for Program
            Extraction from Classical Proofs}},
  journal = "LNCS",
  volume = "1158",
  year = "1995",
  pages = "36-46",
  paper = "Berg95.pdf"
}

\end{chunk}

\index{Magaud, Nicolas}
\index{Bertot, Yves}
\begin{chunk}{axiom.bib}
@article{Maga00,
  author = "Magaud, Nicolas and Bertot, Yves",
  title = {{Changing Data Structures in Type Theory: A Study of
            Natural Numbers}},
  journal = "LNCS",
  volume = "2277",
  pages = "181-196",
  year = "2000",
  abstract =
    "In type-theory based proof systems that provide inductive
    structures, computation tools are automatically associated to
    inductive definitions. Choosing a particular representation for a
    given concept has a strong influence on proof structure. We
    propose a method to make the change from one representation to
    another easier, by systematically translating proofs from one
    context to another. We show how this method works by using it on
    natural numbers, for which a unary representation (based on Peano
    axioms) and abinary representation are available. This method
    leads to an automatic translation tool that we have implemented in
    Coq and successfully applied to several arithmetical theorems.",
  paper = "Maga00.pdf"
}

\end{chunk}

\index{Bailey, Anthony}
\begin{chunk}{axiom.bib}
@article{Bail96,
  author = "Bailey, Anthony",
  title = {{Coercion Synthesis in Computer Implementations of 
            Type-Theoretic Frameworks}},
  journal = "LNCS",
  year = "1996",
  pages = "9-27",
  abstract =
    "A coercion is a function that acts on a representation of some object
    in order to alter its type.  The idea is that although applying a
    coercion to an object changes its type, the result still represents
    the ``same'' abject in some sense; perhaps it is some essential
    underlying part of the original object, or a different representation
    of that object.  This paper examines some of the issues involved in
    the computer implementation of systems that allow a user to define
    coercions that may then be left implicit in the syntax of expressions
    and synthesised automatically.  From a type-theoretic perspective,
    coercions are often left implicit in mathematical texts, so they can
    be used to improve the readability of a formalisation, and to
    implement other tricks of syntax if so desired.",
  paper = "Bail96.pdf"
}

\end{chunk}

\index{Barras, Bruno}
\begin{chunk}{axiom.bib}
@article{Barr96,
  author = "Barras, Bruno",
  title = {{Verification of the Interface of a Small Proof System in Coq}},
  journal = "LNCS",
  volume = "1512",
  pages = "28-45",
  year = "1996",
  abstract =
    "This article describes the formalization of the interface of a
    proof-checker.  The latter is based on a kernel consisting of
    type-checking functions for the Calculus of Constructions, but it
    seems the ideas can generalize to other type systems, as fax as they
    axe based on the proofs- as-terms principle.  We suppose that the
    metatheory of the corresponding type system is proved (up to type
    decidability).  We specify and certify the toplevel loop, the system
    invariant, and the error messages.",
  paper = "Barr96.pdf"
}

\end{chunk}

\index{Dowek, Gilles}
\begin{chunk}{axiom.bib}
@article{Dowe96,
  author = "Dowek, Gilles",
  title = {{A Type-Free Formalization of Mathematics Where Proofs are
            Objects}},
  journal = "LNCS",
  volume = "1512",
  year = "1996",
  pages = "88-111",
  abstract =
    "We present a first-order type-free axiomatization of mathematics
    where proofs are objects in the sense of Heyting-Kolmogorov functional
    interpretation.  The consistency of this theory is open.",
  paper = "Dowe96.pdf"
}

\end{chunk}

\index{Harrison, John}
\begin{chunk}{axiom.bib}
@article{Harr06,
  author = "Harrison, John",
  title = {{Proof Style}},
  journal = "LNCS",
  volume = "1512",
  year = "2006",
  pages = "154-172",
  abstract =
    "We are concerned with how computer theorem provers should expect
    users to communicate proofs to them.  There are many stylistic choices
    that still allow the machine to generate a completely formal proof
    object.  The most obvious choice is the amount of guidance required
    from the user, or from the machine perspective, the degree of
    automation provided.  But another important consideration, which we
    consider particularly significant, is the bias towards a
    'procedural' or 'declarative' proof style.  We will explore this
    choice in depth, and discuss the strengths and weaknesses of
    declarative and procedural styles for proofs in pure mathematics and
    for verification applications.  We conclude with a brief summary of
    our own experiments in trying to combine both approaches.",
  paper = "Harr06.pdf"
}

\end{chunk}

\index{Jones, Alex}
\index{Luo, Zhaohui}
\index{Soloviev, Sergei}
\begin{chunk}{axiom.bib}
@article{Jone96,
  author = "Jones, Alex and Luo, Zhaohui and Soloviev, Sergei",
  title = {{Some Algorithmic and Proof-Theoretical Aspects of
            Coercive Subtyping}},
  journal = "LNCS",
  volume = "1512",
  year = "1996",
  pages = "173-195",
  abstract =
    "Coercive subtyping offers a conceptually simple but powerful
    framework to understand subtyping and subset relationships in type
    theory.  In this paper we study some of its proof-theoretic and
    computational properties.",
  paper = "Jone96.pdf"
}

\end{chunk}

\index{Naraschewski, Wolfgang}
\index{Nipkow, Tobias}
\begin{chunk}{axiom.bib}
@article{Nara99,
  author = "Naraschewski, Wolfgang and Nipkow, Tobias",
  title = {{Type Inference Verified: Algorithm W in Isabelle/HOL}},
  journal = "LNCS",
  volume = "1512",
  year = "1999",
  pages = "317-332",
  paper = "Nara99.pdf"
}

\end{chunk}

\index{Constable, R.L.}
\index{Knoblock, T.B.}
\index{Gates, J.L.}
\begin{chunk}{axiom.bib}
@article{Cons85a,
  author = "Constable, R.L. and Knoblock, T.B. and Gates, J.L.",
  title = {{Writing Programs that Construct Proofs}},
  journal = "J. of Automated Reasoning",
  volume = "1",
  number = "3",
  pages = "285-326",
  year = "1985",
  abstract =
    "When we learn mathematics, we learn more than definitions and
    theorems. We learn techniques of proof. In this paper, we describe
    a particular way to express these techniques and incorporate them
    into formal theories and into computer systems used to build such
    theories. We illustrate the methods as they were applied in the
    $\lambda$-PRL system, essentially using the ML programming
    language from Edinburgh LCF [23] as the formalised
    metalanguage. We report our experience with such an approach
    emphasizing the ideas that go beyond the LCF work, such as
    transformation tactics and special purpose reasoners. We also show
    how the validity of tactics can be guaranteed. The introduction
    places the work in historical context and the conclusion briefly
    describes plans to carry the methods further. The majority of the
    paper presents the $\lambda$-PRL approach in detail.",
  paper = "Cons85a.pdf"
}

\end{chunk}

\index{Trybulec, Zinaida}
\index{Swieczkowska, Halina}
\begin{chunk}{axiom.bib}
@article{Tryb92,
  author = "Trybulec, Zinaida and Swieczkowska, Halina",
  title = {{Some Remarks on The Language of Mathematical Texts}},
  journal = "Studies in Logic, Grammar and Rhetoric",
  volume = "10/11",
  pages = "103-124",
  year = "1992",
  paper = "Tryb92.pdf"
}  

\end{chunk}

\index{Traytel, Bmytro}
\begin{chunk}{axiom.bib}
@misc{Tray10,
  author = "Traytel, Bmytro",
  title = {{Extensions of a Type Inference Algorithm with Coerce Subtyping}},
  school = "Der Technischen Universitat Munchen",
  year = "2010",
  abstract =
    "Subtyping with coercion semantics allows a type inference system to
    correct some ill-typed programs by the automatic insertion of
    implicit type conversions at run-time. This simplifies programmer’s
    life but has its price: the general typability problem for given base
    type subtype dependencies is NP-complete.  Nevertheless, if the given
    coercions define an order on types with certain properties, the
    problem behaves in a sane way in terms of complexity.  This thesis
    presents an algorithm that can be used to extend Hindley-Milner type
    inference with coercive subtyping assuming a given partial order on
    base types. Especially, we discuss restrictions on the subtype
    dependencies that are necessary to achieve an efficient
    implementation. Examples of problems that occur if these restrictions
    are not met are given. The result of these considerations is that the
    algorithm is complete if the given base type poset is a disjoint union
    of lattices. Furthermore, the interaction of subtyping with type
    classes is addressed.  The algorithm that is extended to deal with
    type classes requires even a stronger restriction to assure
    completeness.  An ML-implementation of the presented algorithm is used
    in the generic proof assistant Isabelle.",
  paper = "Tray10.pdf"
}

\end{chunk}

\index{Luo, Zhaohui}
\index{Soloviev, Sergei}
\begin{chunk}{axiom.bib}
@article{Luox99,
  author = "Luo, Zhaohui and Soloviev, Sergei",
  title = {{Dependent Coercions}},
  journal = "Electr. Notes Theor. Comput. Sci.",
  volume = "29",
  year = "1999",
  pages = "152-168",
  abstract =
    "A notion of dependent coercion is introduced and studied in the
    context of depen- dent type theories. It extends our earlier work on
    coercive subtyping into a uniform framework which increases the
    expressive power with new applications.  A dependent coercion
    introduces a subtyping relation between a type and a family of types
    in that an object of the type is mapped into one of the types in the
    family.  We present the formal framework, discuss its meta-theory, and
    consider applications such as its use in functional programming with
    dependent types.",
  paper = "Luox99.pdf"
}

\end{chunk}
