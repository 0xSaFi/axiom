books/bookvolbib Martin Baker's PERMGRP documentation

Goal: Literate Programming

\index{Baker, Martin}
\begin{chunk}{axiom.bib}
@misc{Bake17,
  author = "Baker, Martin",
  title = "Finite Group Implementation",
  link = "\url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/finiteGroup/}",
  year = "2017"
}

\end{chunk}

\index{Baker, Martin}
\begin{chunk}{axiom.bib}
@misc{Bake16b,
  author = "Baker, Martin",
  title = "add coerce from PermutationGroup to GroupPresentation",
  link = "\url{https://groups.google.com/forum/?hl=en\#!topic/fricas-devel/EtLwgd2dWNU}",
  year = "2016"
}

\end{chunk}

\index{Cannon, John J.}
\index{Dimino, Lucien A.}
\index{Havas, George}
\index{Watson, Jane M.}
\begin{chunk}{axiom.bib}
@article{Cann73,
  author = "Cannon, John J. and Dimino, Lucien A. and Havas, George and Watson, Jane M.",
  title = "Implementation and Analysis of the Todd-Coxeter Algorithm",
  year = "1973",
  journal = "Mathematics of Computation",
  volume = "27",
  number = "123",
  pages = "463-490",
  abstract =
    "A recent form of the Todd-Coxeter algorithm, known as the lookahead
    algorithm, is described. The time and space requirements for this
    algorithm are shown experimentally to be usually either equivalent or
    superior to the Felsch and Haselgrove-Leech-Trotter algorithms. Some
    finding from an experimental study of the behaviour of Todd-Coxeter
    programs in a variety of situations is given.",
  paper = "Cann73.pdf"
}

\end{chunk}

\begin{chunk}{axiom.bib}
\cite{Schr17,
  author = "Wikipedia",
  title = "Schreier-Sims algorithm",
  year = "2017",
  link = "\url{https://en.wikipedia.org/wiki/Schreier%E2%80%93Sims_algorithm}",
  abstract =
    "The Schreier-Sims algorithm is an algorithm in computational group
    theory named after mathematicians Otto Schreier and Charles Sims. Once
    performed, it allows a linear time computation of the order of a
    finite permuation group, group membership test (is a given permutation
    contained in a group?), and many other tasks. The algorith was
    introduced by Sims in 1970, based on Schreier's subgroup lemma. The
    timing was subsequently improved by Donald Knuth in 1991. Later, an
    even faster randomized version of the algorithm was developed.
    
    The algorithm is an efficient method of computing a base and strong
    generating set (BSGS) of a permutation group. In particular, an SGS
    determines the order of a group and makes it easy to test membership
    in the group. Since the SGS is critical for many algorithms in
    computational group theory, computer algebra systems typically rely on
    the Schreier-Sims algorithm for efficient calculations in groups"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Wiki17a,
  author = "Wikipedia",
  title = "Group Action",
  year = "2017",
  link = "\url{https://en.wikipedia.org/wiki/Group\_action}",
  abstract =
    "In mathematics, an action of a group is a way of interpreting the
    elements of the group as ``acting'' on some space in a way that
    preserves the structure of that space. Common examples of spaces that
    groups act on are sets, vector spaces, and topological spaces. Actions
    of groups on vector stacces are called representations of the group."
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Wiki17b,
  author = "Wikipedia",
  title = "Strong generating set",
  year = "2017",
  link = "\url{http://en.wikipedia.org/wiki/Strong\_generating\_set}",
  abstract =
    "In abstract algebra, especially in the area of group theory, a strong
    generating set of a permutation group is a generating set that clearly
    exhibits the permutation structure as described by a stabilizer
    chain. A stabilizer chain is a sequence of subgroups, each containing
    the next and each stabilizing one more point."
}

\end{chunk}

\index{Fijalkow, Nathanael}
\begin{chunk}{axiom.bib}
@misc{Fija17,
  author = "Fijalkow, Nathanael",
  title = "Computing using the generators of a group: the Schreier-Sims' algorithm",
  year = "2017",
  link = "\url{https://www.cs.ox.ac.uk/blogs/nathanael-fijalkow/2016/01/27/computing-using-the-generators-of-a-group/}"
}

\end{chunk}

\index{Gowers, Timothy}
\begin{chunk}{axiom.bib}
@misc{Gowe17,
  author = "Gowers, Timothy",
  title = "Group actions II: the orbit-stabilizer theorem",
  year = "2017",
  link = "\url{https://gowers.wordpress.com/2011/11/09/group-actions-ii-the-orbit-stabilizer-theorem/}"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Stac17,
  author = "StackExchange",
  title = "How do Gap generate the elements in permutation groups",
  year = "2017",
  link = "\url{http://math.stackexchange.com/questions/1705277/how-do-gap-generate-the-elements-in-permutation-groups}"
}

\end{chunk}
\index{Judson, Thomas W.}
\begin{chunk}{axiom.bib}
@misc{Juds16,
  author = "Judson, Thomas W.",
  title = "Abstract Algebra: Theory and Applications",
  link = "\url{http://abstract.ups.edu/download/aata-20160809-sage-7.3.pdf}",
  year = "2016"
}

\end{chunk}

\index{Liskov, Barbara}
\index{Synder, Alan}
\index{Atkinson, Russell}
\index{Schaffert, Craig}
\begin{chunk}{axiom.bib}
@article{Lisk77,
  author = "Liskov, Barbara and Synder, Alan and Atkinson, Russell and
            Schaffert, Craig",
  title = "Abstraction Mechanisms in CLU",
  journal = "CACM",
  volume = "20",
  number = "8",
  year = "1977",
  link = "\url{https://www.cs.virginia.edu/~weimer/615/reading/liskov-clu-abstraction.pdf}",
  abstract =
    "CLU is a new programming language designed to support the use of
    abstractions in program construction. Work in programming methodology
    has led to the realization that three kinds of abstractions --
    procedural, control, and especially data abstractions -- are useful in
    the programming process. Of these, only the procedural abstraction is
    supported well by conventional languages, through the procedure or
    subroutine. CLU provides, in addition to procedures, novel linguistic
    mechanisms that support the use of data and control abstractions. This
    paper provides an introduction to the abstraction mechanisms of
    CLU. By means of programming examples, the utility of the three kinds
    of abstractions in program construction is illustrated, and it is
    shown how CLU programs may be written to use and implement
    abstractions. The CLU library, which permits incremental program
    development with complete type checking performed at compile time, is
    also discussed.",
  paper = "Lisk77.pdf"
}

\end{chunk}

