books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Schwardmann, Ulrich}
\begin{chunk}{axiom.bib}
@book{Schw95,
  author = "Schwardmann, Ulrich",
  title = "Computer algebra systems",
  comment = "Computeralgebra-Systeme, German",
  publisher = "Addison-Wesley",
  year = "1995",
  keywords = "axiomref"
}

\end{chunk}

\index{Storme, L.}
\index{van Maldeghem, H.}
\begin{chunk}{axiom.bib}
@article{Stor95,
  author = "Storme, L. and van Maldeghem, H.",
  title = "Cyclic caps in PG(3,q)",
  journal = "Geom. Dedicata",
  volume = "56",
  number = "3",
  pages = "271-284",
  year = "1995",
  keywords = "axiomref",
  url = "https://cage.ugent.be/~hvm/artikels/44.pdf",
  paper = "Stor95.pdf",
  abstract =
    "A $k$-cap $K$ on $PG(n,q)$ is a set of $k$ points, no three of which
    are collinear. $K$ is complete if it cannot be extended to a $k+1$
    cap. If $K$ is invariant under a cyclic subgroup (which acts regularly
    on $K$) of $PGL(n+1,q)$, the $K$ is cyclic.

    This article investigates cyclic complete $k$-caps in
    $PG(3,q). Namely, the different types of complete $k$-caps $K$ in
    $PG(3,q)$ stabilized by a cyclic projective group $G$ of order $k$,
    acting regularly on the points of $K$, are determined. We show that in
    $PG(3,q)$, $q$ even, the elliptic quadric is the only cyclic complete
    $k$-cap. For $q$ odd, it is shown that besides the elliptic quadric,
    there also exist cyclic $k$-caps containing $k/2$ points of two
    disjoint elliptic quadrics or two disjoint hyperbolic quadrics and
    that there exist cyclic $k$-caps stabilized by a transitive cyclic
    group $G$ fixed precisely one point and one plane of
    $PG(3,q)$. Concrete examples of such caps, found using AXIOM and
    CAYLEY, are presented."
}

\end{chunk}

\index{Weber, Andreas}
\begin{chunk}{axiom.bib}
@article{Webe95,
  author = "Weber, Andreas",
  title = "On coherence in computer algebra",
  journal = "J. Symb. Comput.",
  volume = "19",
  number = "1-3",
  pages = "25-38",
  year = "1995",
  url = 
"http://cg.cs.uni-bonn.de/personal-pages/weber/publications/pdf/WeberA/Weber94e.pdf",
  paper = "Webe95.pdf",
  keywords = "axiomref",
  abstract = "
    Modern computer algebra systems (e.g. AXIOM) support a rich type
    system including parameterized data types and the possibility of
    implicit coercions between types. In such a type system it will be
    frequently the case that there are different ways of building
    coercions between types. An important requirement is that all
    coercions between two types coincide, a property which is called {\sl
    coherence}. We will prove a coherence theorem for a formal type system
    having several possibilities of coercions covering many important
    examples. Moreover, we will give some informal reasoning why the
    formally defined restrictions can be satisfied by an actual system."
}

\end{chunk}

\index{Williamson, Clifton J.}
\begin{chunk}{axiom.bib}
@InProceedings{Will95,
  author = "Williamson, Clifton J.",
  title = "On the algebraic construction of tri-diagonal matrices with given
           characteristic polynomial",
  booktitle = "4th Conf. of Canadian Number Theory Association",
  year = "1995",
  location = "Halifax, Nova Scotia, Canada",
  pages = "417-431",
  keywords = "axiomref",
  paper = "Will95.pdf",
  abstract =
    "Let $K$ be a field of characteristic zero and assume 
    \[f(x)=x^n-s_1x^{n-1}+\cdots+s_n \in L[x]\] 
    where $L=K(s_1,\cdots,s_n)$. Call, for the purposes of this review, an
    $n\times n$ matrix 1-tridiagonal if its entries above and below the
    main diagonal are all 1, the entries on it are $d_1,\cdots,d_n$, and
    all other entries are 0. Under which conditions can 
    $d_1,d_2,\cdots,d_n$ be chosen in a radical extension of $L$ such that 
    the resulting 1-tridiagonal matrix has $f$ as its characteristic 
    polynomial?  The author’s answer: for $n=3$ always. The $d_i,s_i$
    are related by a system of algebraic equations of the form
    $\overline{f}_i(d_1,d_2,d_3)=s_i$. If this is satisfied, then by 
    a resultant- or Groebner basis computation with respect to the 
    lexicographic order, $d_3$ (say) must be a root of a certain 
    irreducible polynomial $\varphi$ of degree 6. Joining this
    with a Galois group computation for $\varphi$ over $L$, it is shown 
    that a solvable and necessarily transitive Gal($\varphi$) will be a 
    necessary and sufficient condition for expressibility of $d_3$ (clear) 
    and, thanks to the form of the Groebner basis, also of $d_1,d_2$ in 
    radicals. Upon a discriminant computation of $\varphi$ and use of 
    results of G. Butler and J. McKay [Commun. Algebra 11,
    863-911 (1983; Zbl 0518.20003)] and J. McKay and L. Soicher [J. Number
    Theory 20, 273-281 (1985; Zbl 0579.12006)], this allows the author to
    deduce the mentioned result. For $n=4$, though the author cannot get as
    complete information about Galois groups etc., he can deduce e.g. that
    if $s_1,\cdots,s_4$ are algebraically independent over $\mathbb{Q}$, 
    then $d_1,\cdots,d_4$ are not expressible in radicals over 
    $\mathbb{Q}(s_1,\cdots,s_4)$. He mentions, however, a solvable subcase."
}

\end{chunk}

\index{Bosma, Wieb}
\index{Cannon, John}
\index{Matthews, Graham}
\begin{chunk}{axiom.bib}
@InProceedings{Bosm94,
  author = "Bosma, Wieb and Cannon, John and Matthews, Graham",
  title = "Programming with algebraic structures: Design of the Magma
           language",
  booktitle = "Proc. ISSAC 94",
  series = "ISSAC 94",
  year = "1994",
  publisher = "ACM Press",
  location = "Baltimore, MD",
  pages = "52-57",
  keywords = "axiomref",
  paper = "Bosm94.pdf",
  url = "http://www.math.ru.nl/~bosma/pubs/ISSAC94.pdf",
  abstract =
    "MAGMA is a new software system for computational algebra, number
    theory and geometry whose design is centred on the concept of
    algebraic structure (magma). The use of algebraic structure as a
    design paradigm provides a natural strong typing mechanism. Further,
    structures and their morphisms appear in the language as first class
    objects. Standard mathematical notions are used for the basic data
    types. The result is a powerful, clean language which deals with
    objects in a mathematically rigorous manner. The conceptual and
    implementation ideas behind MAGMA will be examined in this paper. This
    conceptual base differs significantly from those underlying other
    computer algebra systems."
}

\end{chunk}

\index{Dingle, Adam}
\index{Fateman, Richard J.}
\begin{chunk}{axiom.bib}
@InProceedings{Ding94,
  author = "Dingle, Adam and Fateman, Richard",
  title = "Branch Cuts in Computer Algebra",
  year = "1994",
  booktitle = "Proc. ISSAC 1994",
  series = "ISSAC 94",
  url = "http://www.cs.berkeley.edu/~fateman/papers/ding.ps",
  paper = "Ding94.pdf",
  keywords = "axiomref",
  abstract = 
    "Many standard functions, such as the logarithms and square root
    functions, cannot be defined continuously on the complex
    plane. Mistaken assumptions about the properties of these functions
    lead computer algebra systems into various conundrums. We discuss how
    they can manipulate such functions in a useful fashion."
}

\end{chunk}

\index{Duval, Dominique}
\index{Senechaud, Pascale}
\begin{chunk}{axiom.bib}
@article{Duva94d,
  author = "Duval, Dominique and Senechaud, Pascale",
  title = "Sketches and parametrization",
  journal = "Theor. Comput. Sci.",
  volume = "123",
  number = "1",
  pages = "117-130",
  year = "1994",
  keywords = "axiomref",
  abstract =
    "The paper deals with problems about conception and design of
    high-level computer algebra systems. Here we use a categorical
    approach given by the notion of sketches. Sketches allow to describe
    computation mechanisms in a syntactic way, well adapted to
    implementation.
    
    A computer algebra system must allow the manipulation of algebraic
    structures, in particular, the construction of new structures from
    known ones. In the paper we give a definition, at the sketch level, of
    parametrization of a structure by another one."
}

\end{chunk}

\index{Duval, Dominique}
\begin{chunk}{axiom.bib}
@misc{Duva94e,
  author = "Duval, Dominique",
  title = "Symbolic or algebraic computation?",
  booktitle = "Publication du LACO",
  year = "1995",
  location = "Madrid Spain",
  comment = "NAG conference",
  keywords = "axiomref"
}

\end{chunk}

\index{Duval, Dominique}
\index{Reynaud, J.C.}
\begin{chunk}{axiom.bib}
@article{Duva94a,
  author = "Duval, D. and Reynaud, J.C.",
  title = "Sketches and Computation (Part I): 
           Basic Definitions and Static Evaluation",
  journal = "Mathematical Structures in Computer Science",
  volume = "4",
  pages = "185-238",
  publisher =  "Cambridge University Press",
  year = "1994",
  url = "http://journals.cambridge.org/abstract_S0960129500000438",
  paper = "Duva94a.pdf",
  abstract = 
    "We define a categorical framework, based on the notion of {\sl
    sketch}, for specification and evaluation in the sense of algebraic
    specifications and algebraic programming. This framework goes far
    beyond our initial motivations, which was to specify computation with
    algebraic numbers. We begin by redefining sketches in order to deal
    explicitly with programs. Expressions and terms are carefully defined
    and studied, then {\sl quasi-projective sketches} are introduced. We
    describe {\sl static evaluation} in these sketches: we propose a
    rigorous basis for evaluation in the corresponding structures. These
    structures admit an initial model, but are not necessarily
    equational. In Part II (Duval and Reynaud 1994), we study a more
    general process, called {\sl dynamic evaluation}, for structures that
    may have no initial model."
}

\end{chunk}

\index{Duval, Dominique}
\index{Reynaud, Jean-Claude}
\begin{chunk}{axiom.bib}
@article{Duva94b,
  author = "Duval, Dominique and Reynaud, Jean-Claude",
  title = "Sketches and Computation (Part II): 
           Dynamic Evaluation and Applications",
  journal = "Mathematical Structures in Computer Science",
  volume = "4", 
  pages = "239-271",
  publisher = "Cambridge University Press",
  year = "1994",
  url = "http://journals.cambridge.org/abstract_S096012950000044X",
  paper = "Duva94b.pdf",
  abstract = 
    "In the first part of this paper (Duval and Reynaud 1994), we defined a
    categorical framework, based on the notion of {\sl sketch}, for
    specification and evaluation in the senses of algebraic specification
    and algebraic programming. {\sl Static evaluation} in {\sl
    quasi-projective sketches} was defined in Part I; in this paper, {\sl
    dynamic evaluation} is introduced. It deals with more general
    structures, which may have no initial model. Until now, this process
    has not been used in algebraic specification systems, but computer
    algebra systems are beginning to use it as a basic tool. Finally, we
    give some applications of dynamic evaluation to computation in field
    extensions."
}

\end{chunk}

\index{Duval, Dominique}
\begin{chunk}{axiom.bib}
@article{Duva94c,
  author = "Duval, Dominique",
  title = "Algebraic Numbers: An Example of Dynamic Evaluation",
  journal = "J. Symbolic Computation",
  volume = "18",
  pages = "429-445",
  year = "1994",
  url = "http://www.sciencedirect.com/science/article/pii/S0747717106000551",
  paper = "Duva94c.pdf",
  keywords = "axiomref",
  abstract = "
    Dynamic evaluation is presented through examples: computations
    involving algebraic numbers, automatic case discussion according to
    the characteristic of a field. Implementation questions are addressed
    too. Finally, branches are presented as ``dual'' to binary functions,
    according to the approach of sketch theory."
}

\end{chunk}

\index{Duval, Dominique}
\index{Reynaud, Jean-Claude}
\begin{chunk}{axiom.bib}
@article{Duva96,
  author = "Duval, D. and Reynaud, Jean-Claude",
  title = "Sketches and Computations over Fields",
  journal = "Mathematics and Computers in Simulation",
  volume = "42",
  pages = "363-373",
  year = "1996",
  paper = "Duva96.pdf",
  abstract = 
    "The goal of this short paper is to describe one possible use of
    sketches in computer algebra. We show that sketches are a powerful
    tool for the description of mathematical structures and for the
    description of computations."
}

\end{chunk}

\index{Duval, Dominique}
\index{Gonz\'alez-Vega, L.}
\begin{chunk}{axiom.bib}
@article{Duva96a,
  author = {Duval, Dominique and Gonz\'alez-Vega, L.},
  title = "Dynamic Evaluation and Real Closure",
  journal = "Mathematics and Computers in Simulation",
  volume = "42",
  pages = "551-560",
  year = "1996",
  paper = "Duva96a.pdf",
  abstract = "
    The aim of this paper is to present how the dynamic evaluation method
    can be used to deal with the real closure of an ordered field. Two
    kinds of questions, or tests, may be asked in an ordered field:
    equality tests $(a=b?)$ and sign tests $(a > b?)$. Equality tests are
    handled through splittings, exactly as in the algebraic closure of a
    field. Sign tests are handled throug a structure called ``Tarski data
    type''."
}

\end{chunk}

\index{Fritzson, D.}
\index{Fritzson, P.}
\index{Viklund, L.}
\index{Herber, J.}
\begin{chunk}{axiom.bib}
@article{Frit94,
  author = "Fritzson, D. and Fritzson, P. and Viklund, L. and Herber, J.",
  title = "Object-oriented mathematical modelling - applied to machine
           elements",
  journal = "Comput. Struct.",
  volume = "51",
  number = "3",
  pages = "241-253",
  year = "1994",
  keywords = "axiomref",
  paper = "Frit94.pdf",
  abstract =
    "Machine element analysis has a goal of describing function and other
    aspects of machine elements in a theoretical form. This paper shows
    how ideas from object-oriented modelling can be applied to machine
    elment analysis. The models thus obtained are both easier to
    understand, better structured, and allow a higher degree of re-use
    than conventional models. An object-oriented model description is
    natural and suitable for machine element analysis. As a realistic
    example an equational model of rolling bearings is presented. The
    structure of the model is general, and applies to many types of
    rolling bearings. The model and one solution require approximately
    200+200 equations. The model is extensible, e.g. simple submodels of
    detailed properties can be made more complex without altering the
    overall structure. The example model has been implemented in a
    language of our own design. ObjectMath (Object-oriented Mathematical
    language for scientific computing). Using ObjectMath, it is possible
    to model classes of equation objects, to support multiple and single
    inheritance of equations, to support composition of equations, and to
    solve systems of equations. Algebraic transformations can conveniently
    be done since ObjectMath models are translated into the Mathematica
    computer algebra language. When necessary, equations can be
    transformed int C++ code for efficient numerical solution. The re-use
    of equations through inheritance reduced the size of the model by a
    factor of two, compared to a direct representation of the model in the
    Mathematica computer algebra language."
}

\end{chunk}

\index{Ioakimidis, N.I.}
\begin{chunk}{axiom.bib}
@article{Ioak94,
  author = "Ioakimidis, N.I.",
  title = "Symbolic computations for the solution of inverse/design
           problems with Maple",
  journal = "Comput. Struct.",
  volume = "53",
  number = "1",
  pages = "63-68",
  year = "1994",
  keywords = "axiomref"
}

\end{chunk}

\index{Jenks, Richard D.}
\index{Trager, Barry M.}
\begin{chunk}{axiom.bib}
@InProceedings{Jenk94,
  author = "Jenks, Richard D. and Trager, Barry M.",
  title = "How to make AXIOM into a scratchpad",
  booktitle = "Proceedings of the ACM-SIGSAM 1989 International
           Symposium on Symbolic and Algebraic Computation, ISSAC '94",
  series = "ISSAC 94",
  year = "1994",
  pages = "32-40",
  isbn = "0-89791-638-7",
  keywords = "axiomref",
  publisher = "ACM Press",
  address = "New York, NY, USA",
  paper = "Jenk94.pdf",
  abstract =
    "Scratchpad [GrJe71] was a computer algebra system developed in the
    early 1970s.  Like M\&M (Maple [CGG91ab] and Mathematical [W01S92]) and
    other systems today, Scratchpad had one principal representation for
    mathematical formulae based on ``expression trees''.  Its user interface
    design was based on a pattern-matching paradigm with infinite rewrite-
    rule semantics, providing what we believe to be the most natural
    paradigm for interactive symbolic problem solving.  Like M\&M, however,
    user programs were interpreted, often resulting in poor performance
    relative to similar facilities coded in standard programming languages
    such as FORTRAN and C.  
    
    Scratchpad development stopped in 1976 giving way to a new system
    design ([JenR79], [JeTr81]) that evolved into AXIOM [JeSu92].
    AXIOM has a strongly-typed programming language for building a library
    of parameterized types and algorithms, and a type-inferencing
    interpreter that accesses the library and can build any of an infinite
    number of types for interactive use.
    
    We suggest that the addition of an expression tree type to AXIOM can
    allow users to operate with the same freedom and convenience of
    untyped systems without giving up the expressive power and run-time
    efficiency provided by the type system.  We also present a design that
    supports a multiplicity of programming styles, from the Scratchpad
    pattern-matching paradigm to functional programming to more
    conventional procedural programming.  The resulting design seems to us
    to combine the best features of Scratchpad with current AXIOM and to
    offer a most attractive, flexible, and user-friendly environment for
    interactive problem solving.
    
    Section 2 is a discussion of design issues contrasting AXIOM with
    other symbolic systems.  Sections 3 and 4 is an assessment of AXIOM’s
    current design for building libraries and interactive use.  Section 5
    describes a new interface design for AXIOM, its resulting paradigms,
    and its underlying semantic model.  Section 6 compares this work with
    others."
}

\end{chunk}

\index{Bernard, Joey}
\begin{chunk}{axiom.bib}
@misc{Bern14,
  author = "Bernard, Joey",
  title = "Open Axiom",
  url = "http://www.linuxjournal.com/content/open-axiom",
  keywords = "axiomref",
  year = "2014"
}

\end{chunk}

\index{Davenport, James H.}
\index{Trager, Barry M.}
\begin{chunk}{axiom.bib}
@InProceedings{Dave90,
  author = "Davenport, James H. and Trager, Barry M.",
  title = "Scratchpad's view of algebra I: Basic commutative algebra",
  booktitle = "Design and Implementation of Symbolic Computation Systems",
  year = "1990",
  series = "DISCO '90",
  location = "Capri, Italy",
  publisher = "Springer-Verlag",
  isbn = "0-387-52531-9",
  keywords = "axiomref",
  url = "http://opus.bath.ac.uk/32336/1/Davenport\_DISCO\_1990.pdf",
  paper = "Dave90.pdf",
  comment = "AXIOM Technical Report, ATR/1, NAG Ltd., Oxford, 1992",
  keywords = "axiomref",
  abstract =
    "While computer algebra systems have dealt with polynomials and
    rational functions with integer coefficients for many years, dealing
    with more general constructs from commutative algebra is a more recent
    problem. In this paper we explain how one system solves this problem,
    what types and operators it is necessary to introduce and, in short,
    how one can construct a computational theory of commutative
    algebra. Of necessity, such a theory is rather different from the
    conventional, non-constructive, theory. It is also somewhat different
    from the theories of Seidenberg [1974] and his school, who are not
    particularly concerned with practical questions of efficiency."
}

\end{chunk}

\index{Jenks, Richard D.}
\index{Trager, Barry M.}
\begin{chunk}{axiom.bib}
@article{Jenk81,
  author = "Jenks, Richard D. and Trager, Barry M.",
  title = "A Language for Computational Algebra",
  year = "1981",
  booktitle = "Proc. Symp. on Symbolic and Algebraic Manipulation",
  series = "SYMSAC 1981",
  location = "Snowbird, Utah",
  keywords = "axiomref",
  comment = "IBM Research Report 8930",
  abstract =
    "This paper reports ongoing research at the IBM Research Center on the
    development of a language with extensible parameterized types and
    generic operators for computational algebra. The language provides an
    abstract data type mechanism for defining algorithms which work in as
    general a setting as possible. The language is based on the notions of
    domains and categories. Domains represent algebraic
    structures. Categories designate collections of domains having common
    operations with stated mathematical properties. Domains and categories
    are computed objects which may be dynamically assigned to variables,
    passed as arguments, and returned by functions. Although the language
    has been carefully tailored for the application of algebraic
    computation, it actually provides a very general abstract data type
    mechanism. Our notion of a category to group domains with common
    properties appears novel among programming languages (cf. image
    functor of RUSSELL) and leads to a very powerful notion of abstract
    algorithms missing from other work on data types known to the authors."
}

\end{chunk}

\index{Kapur, D.}
\index{Musser, D.R.}
\index{Stepanov, A.A.}
\begin{chunk}{axiom.bib}
@misc{Kapu81,
  author = "Kapur, D. and Musser, D.R. and Stepanov, A.A.",
  title = "Operators and Algebraic Structures",
  url = "http://www.stepanovpapers.com/p59-kapur.pdf",
  paper = "Kapu81.pdf",
  year = "1981",
  abstract =
    "Operators in functional languages such as APL and FFP are a useful
    programming concept.  However, this concept cannot be ful- ly
    exploited in these languages because of certain constraints.  It is
    proposed that an operator should be associated with a structure hav-
    ing the algebraic properties on which the operator's behavior depends.
    This is illustrated by introducing a language that provides mechanisms
    for defining structures and operators on them.  Using this language,
    it is possible to describe algorithms abstractly, thus empliasizing
    the algebraic properties on which the algorithms depend.  The role
    that formal representation of mathematical knowledge can play in the
    development of programs is illustrated through an example.  An
    approach for associating complexity mea- sures with a structure and
    operators is also suggested.  This ap- proach is useful in analyzing
    the complexity of algorithms in an abstract setting."
}

\end{chunk}

\index{Jenks, Richard D.}
\index{Sutor, Robert S.}
\index{Watt, Stephen M.}
\begin{chunk}{axiom.bib}
@techreport{Jenk86,
  author = "Jenks, Richard D. and Sutor, Robert S. and Watt, Stephen M.",
  title = "Scratchpad II: An Abstract Datatype System for Mathematical 
           Computation",
  institution = "IBM Research",
  year = "1986",
  type = "Research Report",
  number = "RC 12327 (\#55257)",
  url = "http://www.csd.uwo.ca/~watt/pub/reprints/1987-ima-spadadt.pdf",
  paper = "Jenk86.pdf",
  keywords = "axiomref",
  abstract = "
    Scratchpad II is an abstract datatype language and system that is
    under development in the Computer Algebra Group, Mathematical Sciences
    Department, at the IBM Thomas J. Watson Research Center. Some features
    of APL that made computation particularly elegant have been borrowed.
    Many different kinds of computational objects and data structures are
    provided. Facilities for computation include symbolic integration,
    differentiation, factorization, solution of equations and linear
    algebra.  Code economy and modularity is achieved by having
    polymorphic packages of functions that may create datatypes. The use
    of categories makes these facilities as general as possible."
}

\end{chunk}

\index{Lloyd, Michael}
\index{Oancea, Cosmin}
\index{Watt, Stephen}
\begin{chunk}{axiom.bib}
@misc{Chic04,
  author = "Chicha, Yannis and Lloyd, Michael Oancea, Cosmin",
  title = "Parametric Polymorphism for Computer Algebra Software Components",
  booktitle = "6th Int. Symp. on Symbolic and Numeric Algorithms for 
               Scientific Computing",
  series = "SYNASC 04",
  location = "Imisoara, Romania",
  keywords = "axiomref",
  year = "2004",
  paper = "Chic04.pdf",
  url = "http://www.csd.uwo.ca/~watt/pub/reprints/2004-synasc-ppca.pdf",
  abstract = 
    "This paper presents our experiments in providing mechanisms for
    parametric polymorphism for computer algebra software components.
    Specific interfaces between Aldor and C++ and between Aldor and Maple
    are described. We then present a general solution, Generic IDL (GIDL),
    an extension to CORBA IDL supporting generic types. We describe our
    language bindings for C++, Java 1.5 and Aldor as well as aspects of
    our implementation, consisting of a GIDL to IDL compiler and tools for
    generating interface code for the various language bindings."
}

\end{chunk}

\index{Watt, Stephen}
\begin{chunk}{axiom.bib}
@InProceedings{Watt07,
  author = "Watt, Stephen",
  title = "What Happened to Languages for Symolic Mathematical Computation?",
  booktitle = "Proc. Prog. Lang. for Mechanized Mathematics",
  series = "PLMMS 07",
  year = "2007",
  location = "RISC-Linz, Austria",
  pages = "81-90",
  keywords = "axiomref",
  paper = "Watt07.pdf",
  url = 
    "http://www.csd.uwo.ca/~watt/pub/reprints/2007-plmms-what\_happened.pdf",
  abstract =
    "While the state of the art is relatively sophisticated in programming
    language support for computer algebra, there has been less development
    in programming language support for symbolic computation over the past
    two decades. We summarize certain advances in programming languages
    for computer algebra and propose a set of directions and challenges
    for programming languages for symbolic computation."
}

\end{chunk}

\index{Santas, Philip S.}
\begin{chunk}{axiom.bib}
@inproceedings{Sant96,
  author = "Santas, Philip S.",
  title = "Conditional Categories and Domains",
  keywords = "axiomref",
  booktitle = "Proc. DISCO 1996",
  year = "1996",
  pages = "112-125",
  isbn = "3-540-61697-7"
}

\end{chunk}


\index{Santas, Philip S.}
\begin{chunk}{axiom.bib}
@book{Sant05,
  author = "Santas, Philip S.",
  title = "Conditional Categories and Domains",
  keywords = "axiomref",
  booktitle = "Design and Implementation of Symbolic Computation Systems",
  year = "2005",
  series = "Lecture Notes in Computer Science",
  volume = "1128",
  publisher = "Springer",
  abstract =
    "We extend the Type system defined in [Sant95] with Axiom-like
    Conditional Categories with the additional property of Static Typing
    and Checking. Categories and Domains may contain conditionals in their
    bodies, which are elaborated by our compiler by techniques used in
    standard typing. We define an appropriate calculus and discuss its
    properties. Examples inspired by the Axiom library illustrate the
    power of our apprach and its application in constructing algebraic
    concepts. The full calculus has been implemented and tested with our
    LA compiler which generated executable files."
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Gute16,
  author = "Gutenberg Self-Publishing Press",
  title = "OpenAxiom",
  keywords = "axiomref",
  url = "http://self.gutenberg.org/articles/openaxiom",
  year = "2016"
}

\end{chunk}

\index{Baker, Martin}
\begin{chunk}{axiom.bib}
@misc{Bake16,
  author = "Baker, Martin",
  title = "Axiom Maths Program",
  keywords = "axiomref",
  year = "2016",
  url = "http://www.euclideanspace.com/prog/scratchpad/axiom/index.htm"
}

\end{chunk}

\index{Caviness, Bob}
\index{Trager, Barry}
\index{Gianni, Patrizia}
\begin{chunk}{axiom.bib}
@misc{Cavi03,
  author = "Caviness, Bob and Trager, Barry and Gianni, Patrizia",
  title = "Dedicated to the Memory of Richard Dimick Jenks",
  year = "2003",
  url = "https://www.eecis.udel.edu/~caviness/jenks/issac-ded.pdf",
  keywords = "axiomref",
  paper = "Cavi03.pdf",
  abstract =
    "On December 30, 2003, Dick Jenks died at the age of 66, after an
    extended and courageous battle with multiple system atrophy.
    
    He received his PhD in mathematics from the University of Illinois at
    Urbana-Champaign in 1966. The title of his dissertation was
    “Quadratic Differential Systems for Mathematical Models” and was
    written under the supervision of Donald Gilles. After completing his
    PhD, he was a post-doctoral fellow at Brookhaven National Laboratory
    on Long Island. In 1968 he joined IBM Research where he worked until
    his retirement in 2002.

    At IBM he was one of the principal architects of the Scratchpad
    system, one of the earliest computer algebra systems(1971). Dick
    always believed that natural user interfaces were essential and
    developed a user-friendly rule-based system for Scratchpad. Although
    this rule-based approach was easy to use, as algorithms for computer
    algebra became more complicated, he began to understand that an
    abstract data type approach would give sophisticated algorithm
    development considerably more leverage. In 1977 he began the Axiom
    development (originally called Scratchpad II) with the design of
    MODLISP, a merger of Lisp with types (modes). In 1980, with the help
    of many others, he completed an initial prototype design based on
    categories and domains that were intended to be natural for
    mathematically sophisticated users.
    
    During this period many researchers in computer algebra visited IBM
    Research in Yorktown Heights and contributed to the development of
    the Axiom system. All this activity made the computer algebra group at
    IBM one of the leading centers for research in this area and Dick was
    always there to organize the visits and provide a stimulating and
    pleasant working environment for everyone. He had a good perspective
    on the most important research directions and worked to attract
    world-renowned experts to visit and interact with his group. He was an
    ideal manager for whom to work, one who always put the project and the
    needs of the group members first. It was a joy to work in such a
    vibrant and stimulating environment.
    
    After many years of development, a decision was made to rename
    Scratch- pad II to Axiom and to release it as a product. Dick and
    Robert Sutor were the primary authors of the book {\sl Axiom: The
    Scientific Computation System}.  In the foreword of the book, written
    by David and Gregory Chudnovsky, it is stated that ``The Scratchpad
    system took its time to blossom into the beautiful Axiom
    product. There is no rival to this powerful environment in its scope
    and, most importantly, in its structure and organization.'' Axiom was
    recently made available as free software. See
    http://savannah.nongnu.org/projects/axiom
    
    Dick was active in service to the computer algebra community as
    well. Here are some highlights. He served as Chair of ACM SIGSAM
    (1979-81) and Conference Co-chair (with J. A. van Hulzen) of EUROSAM
    ’84, a precursor of the ISSAC meetings. Dick also had a long period of
    service on the editorial board of the {\sl Journal of Symbolic
    Computation}. At ISSAC ’95 in Montreal, Dick was elected to the
    initial ISSAC Steering Committee and was elected as the second Chair
    of the Committee in 1997. He, along with David Chudnovsky, organized
    the highly successful meetings on Computers and Mathematics that were
    held at Stanford in 1986 and MIT in 1989. As a legacy of those
    meetings, the Jenks Prize for outstanding contributions to software 
    engineering in computer algebra has been established.
    
    Dick had many interests outside of his professional pursuits including
    reading, travel, physical fitness, and especially music. Dick was an
    accomplished pianist, organist, and vocalist. At one point he was the
    organist and choir master of the Church of the Holy Communion in
    Mahopac, NY. In the 1980s and 1990s, he sang in choral groups under
    the direction of Dr. Dennis Keene that performed at Lincoln Center in
    New York city.
    
    Personally, Dick was warm, generous, and outgoing with many
    friends. He will be missed for his technical accomplishments, his
    artist talents, and most of all for his positive, gentle, charming
    spirit."
}

\end{chunk}

\index{Davenport, James H.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@article{Dave81,
  author = "Davenport, James H. and Jenks, Richard D.",
  title = "MODLISP",
  year = "1981",
  journal = "ACM SIGSAM Bulletin",
  volume = "15",
  issue = "1",
  pages = "11-20",
  publisher = "ACM",
  keywords = "axiomref",
  abstract =
    "This paper discusses the design and implementation of MODLISP, a
    LISP-like language enhanced with the idea of MODes. This extension
    permits, but does not require, the user to declare the types of
    various variables, and to compile functions with the arguments
    declared to be of a particular type. It is possible to declare several
    functions of the same name, with arguments of different type
    (e.g. PLUS could be declared for Integer arguments, or Rational, or
    Real, or even Polynomial arguments) and the system will apply the
    correct function for the types of the arguments."
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@inproceedings{Jenk79,
  author = "Jenks, Richard D.",
  title = "MODLISP: An Introduction",
  booktitle = "Proc. ISSAC 1979",
  series = "EUROSAM 79", 
  pages = "466-480",
  year = "1979",
  publisher = "Springer-Verlag",
  isbn = "3-540-09519-5",
  comment = "IBM Research Report RC 8073 Jan 1980",
  keywords = "axiomref"
}

\end{chunk}

\index{Davenport, James H.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@techreport{Dave80,
  author = "Davenport, James H. and Jenks, Richard D.",
  title = "MODLISP: A Preliminary Design",
  institution = "IBM Research",
  type = "Research Report",
  year = "1980",
  number = "RC 8073",
  keywords = "axiomref"
}

\end{chunk}

\index{Davenport, James H.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@techreport{Dave80,
  author = "Davenport, James H. and Jenks, Richard D.",
  title = "MODLISP",
  institution = "IBM Research",
  type = "Research Report",
  year = "1980",
  number = "RC 8537 (\#37198)",
  keywords = "axiomref",
  comment = "http://www.computerhistory.org/collections/catalog/102719109"
}

\end{chunk}

\index{Hoeven, Joris van der}
\index{Lecerf, Gregoire}
\begin{chunk}{axiom.bib}
@misc{Hoev15,
  author = "Hoeven, Joris van der and Lecerf, Gregoire",
  title = "Interfacing Mathemagix with C++",
  keywords = "axiomref",
  url = "http://www.texmacs.org/joris/mmxcpp/mmxcpp.html",
  abstract =
    "In this paper, we give a detailed description of the interface 
    between the Mathemagix language and C++. In particular, we describe
    the mechanism which allows us to import a C++ template library
    (which only permits static instantiation) as a fully generic
    Mathemagix template library."
}

\end{chunk}

\index{Fortenbacher, A.}
\index{Jenks, Richard}
\index{Lucks, Michael}
\index{Sutor, Robert}
\index{Trager, Barry}
\index{Watt, Stephen}
\begin{chunk}{axiom.bib}
@techreport{Fort85,
  author = "Fortenbacher, A. and Jenks, Richard and Lucks, Michael and
            Sutor, Robert and Trager, Barry and Watt, Stephen",
  title = "An Overview of the Scratchpad II Language and System",
  year = "1985",
  type = "Research Report",
  publisher = "IBM Research Computer Algebra Group",
  keywords = "axiomref"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Maxi16,
  author = "Maxima",
  title = "Other Free Computer Algebra Systems",
  url = "http://maxima.sourceforge.net/compalg.html",
  year = "2016",
  keywords = "axiomref",
  abstract = 
    “Axiom is a general purpose Computer Algebra system. It is useful for
    doing mathematics by computer and for research and development of
    mathematical algorithms. It defines a strongly typed, mathematically
    correct type hierarchy. It has a programming language and a built-in
    compiler.
    
    There is also an interesting Rosetta Stone which offers translations
    of many basic operations for several computer algebra systems,
    including Maxima."
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@inproceedings{Jenk84b,
  author = "Jenks, Richard D.",
  title = "A primer: 11 keys to New Scratchpad",
  booktitle = "Proc. EUROSAM ISSAC 1984",
  year = "1984",
  publisher = "Springer-Verlag",
  pages = "123-147",
  isbn = "0-387-13350-X",
  keywords = "axiomref",
  abstract =
    "This paper is an abbreviated primer for the language of new
    SCRATCHPAD, a new implementation of SCRATCHPAD which has been under
    design and development by the Computer Algebra Group at the IBM
    Research Center during the past 6 years. The basic design goals of the
    new SCRATCHPAD language and interface to the user are to provde:
    \begin{itemize}
    \item a ``typeless'' interactive language suitable for on-line solution
    of mathematical problems by novice users with little or no programming
    required, and
    \item a programming language suitable for the formal description of
    algorithms and algebraic structures which can be compiled into run-time
    efficient object code.
    \end{itemize}
    
    The new SCRATCHPAD language is introduced by 11 keys with each
    successive key introducing an additional capability of the
    language. The language is thus described as a ``concentric'' language
    with each of the 11 levels corresponding to a language subset. These
    levels are more than just a pedagogic device, since they correspond to
    levels at which the system can be effectively used. Level 1 is
    sufficient for naive interactive use; levels 2-8 progressively
    introduce interactive users to capabilities of the language; levels
    9-11 are for system programmers and advanced users. Levesl 2, 4, 6,
    and 7 give users the full power of LISP with a high-level language;
    level 8 introduces ``type declarations;'' level 9 allows polymorphic
    functions to be defined and compiled; levels 10-11 give users an
    Ada-like facility for defining types and packages (those of new
    SCRATCHPAD are dynamically constructable, however). One language is
    used for both interactive and system programming language use,
    although several freedomes such as abbreviation and optional
    type-declarations allowed at top-level are not permitted in system
    code. The interactive language (levels 1-8) is a blend of original
    SCRATCHPAD [GRJY75], some proposed extensions [JENK74], work by Loos
    [LOOS74], SETL [DEWA79], SMP [COWO81], and new ideas; the system
    programming language (levels 1-11) superficially resembles Ada but is
    more similar to CLU [LISK74] in its semantic design.
    
    This presentation of the language in this paper omits many details to
    be covered in the SCRATCHPAD System Programming Manual [SCRA84] and an
    expanded version of this paper will serve as a primer for SCRATCHPAD
    users [JESU84]."
}

\end{chunk}

\index{Griesmer, James H.}
\index{Jenks, Richard D.}
\index{Yun, David Y.Y}
\begin{chunk}{axiom.bib}
@techreport{Grie75,
  author = "Griesmer, James H. and Jenks, Richard D. and Yun, David Y.Y",
  title = "SCRATCHPAD User's Manual",
  year = "1975",
  type = "Research Report",
  number = "RA70",
  keywords = "axiomref"
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@article{Jenk74,
  author = "Jenks, Richard D.",
  title = "The SCRATCHPAD language",
  journal = "ACM SIGPLAN Notices",
  comment = "reprinted in SIGSAM Bulletin, Vol 8, No. 2, May 1974",
  volume = "9",
  number = "4",
  pages = "101-111",
  year = "1974",
  keywords = "axiomref"
}

\end{chunk}

\index{Jenks, Richard D.}
\index{Sundaresan, Christine J.}
\begin{chunk}{axiom.bib}
@misc{Jenk84c,
  author = "Jenks, Richard D. and Sundaresan, Christine J.",
  title = "The 11 Keys to SCRATCHPAD: A Primer",
  year = "1984",
  keywords = "axiomref"
}

\index{Davenport, James H.}
\index{Gianni, Patrizia}
\index{Jenks, Ricard D.}
\index{Miller, Victor}
\index{Morrison, Scott}
\index{Rothstein, Michael}
\index{Sundaresan, Christine J.}
\index{Sutor, Robert S.}
\index{Trager, Barry M.}
\begin{chunk}{axiom.bib}
@misc{Dave84b,
  author = "Davenport, James H. and Gianni, Patrizia and Jenks, Ricard D. and
            Miller, Victor and Morrison, Scott and Rothstein, Michael and
            Sundaresan, Christine J. and Sutor, Robert S. and Trager, Barry",
  title = "SCRATCHPAD System Programming Language Manual",
  year = "1984",
  keywords = "axiomref",
}

\end{chunk}

\index{Constable, Robert L.}
\index{Jackson, Paul B.}
\begin{chunk}{axiom.bib}
@misc{Cons98,
  author = "Constable, Robert L. and Jackson, Paul B.",
  title = "Towards Integrated Systems for Symbolic Algebra and Formal
           Constructive Mathematics",
  url = "http://www.nuprl.org/documents/Constable/towardsintegrated.pdf",
  paper = "Cons98.pdf",
  year = "1998",
  abstract = 
    "The purpose of this paper is to report on our efforts to give e a
    formal account of some of the algebra used in Computer Algebra Systems
    (CAS). In particular, we look at the concepts used in the so called
    3rd generation algebra systems, such as Axiom[4] and Weyl[9].  It is
    our claim that the Nuprl proof development system is especially well
    suited to support this kind of mathematics."
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Acad16,
  author = "Academic Search",
  title = "A Primer: 11 Keys to New Scratchpad",
  url = 
 "http://libra.msra.cn/publication/645035/a-primer-11-keys-to-new-scratchpad",
  year = "2016",
  keywords = "axiomref"
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@misc{Jenk86a,
  author = "Jenks, Richard D.",
  title = "Basic Algebraic Facilities of the Scratchpad II Computer 
           Algebra System",
  institution = "IBM Research",
  year = "1986",
  keywords = "axiomref"
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@misc{Jenk86b,
  author = "Jenks, Richard D.",
  title = "Scratchpad II Examples from INPUT files",
  institution = "IBM Research",
  year = "1986",
  keywords = "axiomref"
}

\end{chunk}

\index{Davenport, James H.}
\begin{chunk}{axiom.bib}
@article{Dave85,
  author = "Davenport, James H.",
  title = "The LISP/VM Foundation of Scratchpad II",
  journal = "The Scratchpad II Newsletter",
  volume = "1",
  number = "1",
  year = "1985",
  month = "September",
  institution = "IBM Research",
  keywords = "axiomref"
}

\end{chunk}

\index{Wityak, Sandra}
\begin{chunk}{ignore}
@misc{Wity85,
  author = "Wityak, Sandra",
  title = "The Scratchpad II Newsletter",
  volume = "1",
  number = "1",
  year = "1985",
  month = "September",
  institution = "IBM Research",
  keywords = "axiomref"
}

\end{chunk}

\index{Wityak, Sandra}
\begin{chunk}{ignore}
@misc{Wity86,
  author = "Wityak, Sandra",
  title = "The Scratchpad II Newsletter",
  volume = "1",
  number = "2",
  year = "1986",
  month = "January",
  institution = "IBM Research",
  keywords = "axiomref"
}

\end{chunk}

\index{Wityak, Sandra}
\begin{chunk}{ignore}
@misc{Wity86a,
  author = "Wityak, Sandra",
  title = "The Scratchpad II Newsletter",
  volume = "1",
  number = "3",
  year = "1986",
  month = "May",
  institution = "IBM Research",
  keywords = "axiomref"
}

\end{chunk}

\index{Watt, Stephen M.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@misc{Watt87,
  author = "Watt, Stephen M. and Jenks, Richard D.",
  title = "Abstract Datatypes, Multiple Views and Multiple Inheritance in
           Scratchpad II",
  keywords = "axiomref",
  year = "1987",
  url = "https://cs.uwaterloo.ca/~smatt/pub/reprints/1987-itl-spadviews.pdf",
  paper = "Watt87.pdf",
  abstract =
    "Scratchpad II is an abstract datatype language developed at Yorktown
    Heights for the implementation of a new computer algebra system. It
    provides packages of polymorphic functions and parameterized, abstract
    datatypes with operator overloading and multiple inheritance. To
    express the intricate inter-relationships between the datatypes
    necessary for the description of mathematical objects, a number of
    techniques based on the notion of {\sl category} have been
    used. Categories are used to enforce relationships between type
    parameters and to provide the mechanism for multiple inheritance. They
    also allow the language to be statically type checked and the
    generation of efficient code. This paper describes the role of
    categories in Scratchpad II."
}

\end{chunk}

\index{Watt, Stephen M.}
\index{Jenks, Richard D.}
\index{Sutor, Robert S.}
\index{Trager, Barry M.}
\begin{chunk}{axiom.bib}
@inproceedings{Watt90,
  author = "Watt, Stephen M. and Jenks, Richard D. and Sutor, Robert S. and
            Trager, Barry M.",
  title = "The Scratchpad II type system: Domains and Subdomains",
  booktitle = "Computing Tools for Scientific Problem Solving",
  year = "1990",
  publisher = "Academic Press",
  url = 
    "https://cs.uwaterloo.ca/~smwatt/pub/reprints/1990-miola-spadtypes.pdf",
  paper = "Watt90.pdf",
  keywords = "axiomref",
  abstract =
    "Scratchpad II is a language developed at Yorktown Heights for the
    implementation of a new computer algebra system. The need to model the
    intricate relationships among the datatypes representing mathematical
    objects has provided a number of challenges in the design of a type
    system for the programming language.
    
    In languages in which a datatype constructor may take multiple
    parameters, ensuring compatibility between them is extremely
    important. Scratchpad II addresses this issue by basing its
    implementation of abstract datatypes on {\cl categories}. Categories
    provide a convenient and useful method for specifying requirements on
    operations from datatypes. These requirements can be very complex when
    modelling mathematics.
    
    We show how categories provide multiple inheritance and how
    inheritance of specification is separated from inheritance of
    implementation. We also present implications of the type system on
    compilation of efficient code and flexibility of a weakly typed
    interactive user interface.
    
    Finally, the mechanisms of Scratchpad II are compared with those of
    traditional abstract datatype and object-oriented programming
    languages."
}  

\end{chunk}

\index{Zippel, Richard}
\begin{chunk}{axiom.bib}
@misc{Zipp93,
  author = "Zippel, Richard",
  title = "The Weyl Computer Algebra Substrate",
  paper = "Zipp93.pdf",
  keywords = "axiomref",
  booktitle = "Proc. of DISCO 1993",
  series = "DISCO 93",
  pages = "303=307",
  year = "1993"
}

\end{chunk}

\index{Sutor, Robert S.}
\begin{chunk}{axiom.bib}
@inproceedings{Suto85,
  author = "Sutor, Robert S.",
  title = "The Scratchpad II computer algebra language and system",
  booktitle = "Research Contributions from the Euro. Conf. on Comp. Alg.",
  series = "Lecture Notes in Computer Science Volume 204",
  volume = "2",
  pages = "32-33",
  year = "1985",
  isbn = "0-387-15983-5 (vol. 1),0-387-15984-3 (vol. 2)",
  keywords = "axiomref"
}

\end{chunk}

\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@article{Jenk88d,
  author = "Jenks, Richard D.",
  title = "Scratchpad II: A computer algebra language and system",
  journal = "The Journal of the Acoustical Society of America",
  year = "1988",
  volume = "83",
  number = "S1",
  pages = "S106",
  keywords = "axiomref",
  abstract =
    "The Scratchpad II system represents a new generation of systems for
    doing symbolic mathematics, based on modern algebra and abstract data
    types. A large number of facilities are provided, for example:
    symbolic integration, ``infinite'' power series, differential operators,
    Cartesian tensors, and solution of nonlinear systems. Scratchpad II
    has been designed from the outset to be extendible. The system
    introduces a new data abstraction notion, the ``category,'' to express
    intricate interrelationships between data types. The result design
    permits the compilation of algorithms described in their most natural
    mathematical setting. The use of categories guarantees user defined
    types and packages are compatible with each other and with built in
    facilities. This system provides a single high‐level language with an
    intepreter and compiler. The language can be used by the naive user
    for convenient interactive mathematics calculations and by the
    advanced user for the efficient implementation of
    algorithms. Scratchpad II is built on Lisp/VM and runs on IBM/370
    class mainframes. An implementation of the system on the RT/PC is
    expected soon."
}  

\end{chunk}

\index{Jenks, Richard D.}
\index{Sutor, Robert S.}
\index{Watt, Stephen M.}
\begin{chunk}{axiom.bib}
@book{Jenk88e,
  author = "Jenks, Richard D. and Sutor, Robert S. and Watt, Stephen M.",
  title = "Scratchpad II: An Abstract Datatype System for Mathematical 
           Computation",
  booktitle = "Mathematical Aspects of Scientific Software",
  year = "1988",
  pages = "157-182",
  publisher = "Springer",
  isbn = "0-387-18928-9",
  keywords = "axiomref",
  abstract =
    "Scratchpad II is an abstract datatype language and system that is
    under development in the Computer Algebra Group, Mathematical Sciences
    Department, at the IBM Thomas J. Watson Research Center. Many
    different kinds of computational objects and data structures are
    provided. Facilities for computation include symbolic integration,
    differentation, factorization, solution of equations and linear
    algebra. Code economy and modularity is achieved by having polymorphic
    packages of functions that may create datatypes. The use of categories
    makes these facilities as general as possible."
}

\end{chunk}

