books/bookvol10.5 add chapter on optimizations

Goal: Axiom Literate Programming


\chapter{Optimizations}
This code was generated using Raymond Toy's Fortran to Lisp conversion
program. Thus the code contains whatever optimizations were in the 
original Fortran. 

That said, we quote from Chellappa, et al. \cite{Chel06}:
\label{Chellappa}
\begin{quote}
... the task of achieving the highest performance with an
implementation usually lies to a great extent with the programmer. For
a given problem, he or she has to carefully consider different
algorithms and possibly restructure them to adapt to the given
platform's memory hierarchy and available parallelism. This is very
difficult, time-consuming, and requires interdisciplinary knowledge
about algorithms, software optimizations, and the hardware
architecture. Further, the tuning process is platform-dependent: an
implementation optimized for one computer will not necessarily be the
fastest one on another, since performance depends on many
microarchitectural features including but not restricted to the
details of the memory hierarchy. Consequently, to achieve highest
performance, tuning has to be repeated with the release of each new
platform. Since the times of a free speedup (due to frequency scaling)
are over, this retuning has become mandatory if any performance gains
are desired. Needless to say, the problem is not merely an academic
one, but one that affects the software industry as a whole.
\end{quote}

The Axiom implementation is intended for prototyping work, not for
production code. We maintain compatible API calls so prototype work
can be easily ported to native optimized libraries if so desired.

An additional motivation is to research the use of Gustafson's \cite{Gust16}
unum ideas, which promises to reduce and/or eliminate overflow and
underflow issues.
