books/bookvolbib add references

Goal: Proving Axiom Correct

\index{Pierce, Benjamin C.}
\index{Turner, David N.}
\begin{chunk}{axiom.bib}
@techreport{Pier97,
  author = "Pierce, Benjamin C. and Turner, David N.",
  title = {{Local Type Inference}},
  institution = "Indiana University",
  year = "1997",
  type = "CSCI Technical Report",
  number = "493",
  abstract =
    "We study two partial type inference methods for a language combining
    subtyping and impredicative polymorphism. Both methods are {\sl local}
    in the sense that missing annotations are recovered using only
    information from adjacent nodes in the syntax tree, without long
    distance constraints such as unification variables. One method infers
    type arguments in polymorphic applications using a local constraint
    solver. The other infers annotations on bound variables in function
    abstractions by propagating type constraints downward from enclosing
    application nodes. We motivate our design choices by a statistical
    analysis of the uses of type inference in a sizable body of existing
    ML code.",
  paper = "Pier97.pdf"
}

\end{chunk}

\index{Ruzicka, Peter}
\index{Privara, Igor}
\begin{chunk}{axiom.bib}
@article{Ruzi89,
  author = "Ruzicka, Peter and Privara, Igor",
  title = {{An Almost Linear Robinson Unification Algorithm}},
  journal = "Acta Informatica",
  volume = "27",
  pages = "61-71",
  year = "1989",
  abstract =
    "Further asymptotical improvement of original Robinson's unification
    idea is presented.  By postponing the so-called occur-check in Corbin
    and Bidoit's quadratic rehabilitation of the Robinson algorithm at the
    end of unification an almost linear unification algorithm is obtained.
    In the worst case, the resulting algorithm has the time complexity
    O(p.A(p)), where p is the size of input terms and A is the inverse to
    the Ackermann function.  Moreover, the practical experiments are
    summarized comparing Corbin and Bidoit's quadratic algorithm with the
    resulting almost linear unification algorithm based on Robinson's
    principle. ",
  paper = "Ruzi89.pdf"
}

\end{chunk}

\index{Robinson, J.A.}
\begin{chunk}{axiom.bib}
@article{Robi65,
  author = "Robinson, J.A.",
  title = {{A Machine-Oriented Logic Based on the Resolution Principle}},
  journal = "ACM",
  volume = "12",
  pages = "23-41",
  year = "1965",
  abstract =
    "Theorem-proving on the computer, using procedures based on the 
    fundamental theorem of Herbrand concerning the first-order predicate
    calculus, is examined with a view towards improving the efficiency and
    widening the range of practical applicability of these procedures.  A
    elose analysis of the process of substitution (of terms for
    variables), and the process of truth-functional analysis of the
    results of such substitutions, reveals that both processes can be
    combined into a single new process (called resolution), iterating
    which is vastty more effieient than the older cyclic procedures
    consisting of substitution stages alternating with truth-functional
    analysis stages.

    The theory of the resolution process is presented in the form of a
    system of first-order logic with .just one inference principle (the
    resolution principle).  The completeness of the system is proved; the
    simplest proof-procedure based on the system is then the direct 
    implementation of the proof of completeness.  Howewer, this procedure is
    quite inefficient, and the paper concludes with a discussion of
    several principles (called search principles) which are applicable to
    the design of efficient proof-procedures employing resolution as the
    basic logical process.",
  paper = "Robi65.pdf"
}

\end{chunk}

\index{van Lamsweerde, Axel}
\begin{chunk}{axiom.bib}
@incollection{Lams00,
  author = "van Lamsweerde, Axel",
  title = {{Formal Specification: A Roadmap}},
  booktitle = "The Future of Software Engineering",
  publisher = "ACM Press",
  year = "2000",
  abstract =
    "Formal specifications have been a focus of software engineering
    research for many years and have been applied in a wide variety of
    settings. Their industrial use is still limited but has been steadily
    growing. After recalling the essence, role, usage, and pitfalls of
    formal specification, the paper reviews the main specification
    paradigms to date and discuss their evaluation criteria. It then
    provides a brief assessment of the current strengths and weaknesses of
    today's formal specification technology. This provides a basis for
    formulating a number of requirements for formal specification to
    become a core software engineering activity in the future.",
  paper = "Lams00.pdf"
}

\end{chunk}
