books/bookvolbib add references

Goal: Proving Axiom Correct

\index{Harper, Robert}
\begin{chunk}{axiom.bib}
@book{Harp11,
  author = "Harper, Robert",
  title = {{Programming in Standard ML}},
  year = "2011",
  publisher = "CMU",
  keywords = "printed"
}

\end{chunk}

\index{Zippel, Richard}
\begin{chunk}{axiom.bib}
@book{Zipp92,
  author = "Zippel, Richard",
  title = {{Algebraic Computation}},
  publisher = "Cornell University",
  comment = "Unpublished",
  year = "1992",
  keywords = "axiomref, printed"
}

\end{chunk}

\index{Schwarz, Fritz}
\begin{chunk}{axiom.bib}
@article{Schw88,
  author = "Schwarz, Fritz",
  title = {{Symmetries of Differential Equations: From Sophus Lie to
            Computer Algebra}},
  journal = "SIAM Review",
  volume = "30",
  number = "3",
  year = "1988",
  abstract =
    "The topic of this article is the symmetry analysis of
    differential equations and the applications of computer algebra to
    th extensive analytical calculations which are usually involved in
    it. The whole area naturally decomposes into two parts depending
    on whether ordinary or partial differential equations are
    considered. We show how a symmetry may be applied to lower the
    order of an ordinary differential equation or to obtain similarity
    solutions of partial differential equations. The computer algebra
    packages SODE and SPDE, respectively, which have been developed to
    perform almost all algebraic manipulations necessary to determine
    the symmetry group of a given differential equation, are
    presented. Futhermore it is argued that the application of
    computer algebra systems has qualitatively changed this area of
    applied mathematics",
  keywords = "axiomref, printed"
}

\end{chunk}

\index{Garcia, Ronald}
\index{Clark, Alison M.}
\index{Tanter, Eric}
\begin{chunk}{axiom.bib}
@inproceedings{Garc16,
  author = "Garcia, Ronald and Clark, Alison M. and Tanter, Eric",
  title = {{Abstracting Gradual Typing}},
  booktitle = "POPL 16",
  publisher = "ACM",
  year = "2016",
  pages = "429-442",
  abstract =
    "Language researchers and designers have extended a wide variety
    of type systems to support {\sl gradual typing}, which enables
    languages to seemlessly combine dynamic and static checking. These
    efforts consistently demonstrate that designing a satisfactory
    gradual counterpart to a static type system is challenging, and
    this challenge only increases with the sophistication of the type
    system. Graudal type system designers need more formal tools to
    help them conceptualize, structure, and evaluate their designs.

    In this paper, we propose a new formal foundation for graudal
    typing, drawing on principles from abstract interpretation to give
    gradual types a semantics in terms of pre-existing static
    types. Abstracting Gradual Typing (AGT for short) yields a formal
    account of {\sl consistency} -- one of the cornerstones of the
    gradual typing approach -- that subsumes existing notions of
    consistency, which were developed through intuition and ad hoc
    reasoning. 

    Given a syntax-directed static typing judgment, the AGT approach
    induces a corresponding gradual typing judgment. Then the type
    safety proof for the underlying static discipline induces a
    dynamic semantics for gradual programs defined over
    source-language typing derivations. The AGT approach does not
    resort to an externally justified cast calculus; instead, run-time
    check naturally arise by deducing evidence for consistent
    judgements during proof reduction.

    To illustrate the approach, we develop a novel gradually-typed
    counterpart for a language with record subtyping. Gradual
    languages designed with the AGT approach satisfy {\sl by
    construction} the refined criteria for gradual typing set forth by
    Siek and colleagues.",
  keywords = "printed"
}

\end{chunk}

\index{Garcia, Ronald}
\index{Cimini, Matteo}
\begin{chunk}{axiom.bib}
@inproceedings{Garc17,
  author = "Garcia, Ronald and Cimini, Matteo",
  title = {{Principal Type Schemes for Gradual Programs}},
  booktitle = "POPL 15",
  comment = "Updated paper",
  year = "2017",
  abstract =
    "Gradual typing is a discipline for integrating dynamic checking
    into a static type system. Since its introduction in functional
    languages, it has been adapted to a variety of type systems,
    including object-oriented, security, and substructural. This work
    studies its application to implictly typed languages based on type
    inference. Siek and Vachharajani designed a gradual type inference
    system and algorithm that infers gradual types but still rejects
    ill-typed static programs. However, the type system requires local
    reasoning about type substitutions, an imperative inference
    algorithm, and a subtle correctness statement.

    This paper introduces a new approach to gradual type inference,
    driven by the principle that gradual inference should only produce
    static types. We present a static implicitly typed language, its
    gradual counterpart, and a type inference procedure. The gradual
    system types the same programs as Siek and Vachharajani, but has a
    modular structure amenable to extension. The language admits
    let-polymorphism, and its dynamics are defined by translation to
    the Polymorphic Blame Calculus (Ahmed et al. 2009, 2011).

    The principal types produced by our initial type system mask the
    distinction between static parametric polymorphism and
    polymorphism that can be attributed to gradual typing. To expose
    this difference, we distinguish static type parameters from
    gradual type parameters and reinterpret gradual type consistency
    accordingly. The resulting extension enables programs to be
    interpreted using either the polymorphic or monomorphic Blame
    Calculi.",
  keywords = "printed"
}

\end{chunk}

\index{Brady, Edwin}
\begin{chunk}{axiom.bib}
@article{Brad13,
  author = "Brady, Edwin",
  title = {{Idris, a General Purpose Dependently Typed Programming
            Language: Design and Implementation}},
  journal = "J. Functional Programming",
  volume = "23",
  number = "5",
  year = "2013",
  pages = "552-593",
  abstract =
    "Many components of a dependently typed programming language are by
    now well understood, for example, the underlying type theory, type
    checking, unification and evaluation. How to combine these components
    into a realistic and usable high-level language is, however, folklore,
    discovered anew by successive language implementors. In this paper, I
    describe the implementation of Idris, a new dependently typed
    functional programming language. Idris is intended to be a
    general-purpose programming language and as such provides high-level
    concepts such as implicit syntax, type classes and do notation. I
    describe the high-level language and the underlying type theory, and
    present a tactic-based method for elaborating concrete high-level
    syntax with implicit arguments and type classes into a fully explicit
    type theory. Furthermore, I show how this method facilitates the
    implementation of new high-level language constructs.",
  keywords = "printed"
}

\end{chunk}
