books/bookvolbib Axiom Citations in the Literature

Goal: Axiom Literate Programming

\index{Petitjean, S.}
\begin{chunk}{axiom.bib}
@article{Peti99,
  author = "Petitjean, S.",
  title = "Algebraic Geometry and Computer Vision: Polynomial Systems, Real
           and Complex Roots",
  journal = "J. of Mathematical Imaging and Vision",
  volume = "10",
  number = "1",
  year = "1999",
  keywords = "axiomref",
  paper = "Peti99.pdf",
  url = "http://www.loria.fr/~petitjea/papers/jmiv99.pdf",
  abstract = 
    "We review the different techniques known for doing exact computations
    on polynomial systems. Some are based on the use of Groebner bases and
    linear algebra, others on the more classical resultants and its modern
    counterparts. Many theoretical examples of the use of these techniques
    are given. Furthermore, a full set of examples of applications in the
    domain of artificial vision, where many constraints boil down to
    polynomial systems, are presented. Emphasis is also put on very recent
    methods for determining the number of (isolated) real and complex
    roots of such systems."
}

\end{chunk}

\index{Kreuzer, Edwin}
\begin{chunk}{axiom.bib}
@book{Kreu14,
  author = "Kreuzer, Edwin",
  title = "Computerized Symbolic Manipulation in Mechanics",
  publisher = "Springer",
  year = "2014",
  abstract =
    "The aim of this book is to present important software tools, basic
    concepts, methods, and highly sophisticated applications of
    computerized symbolic manipulation to mechanics problems. An overview
    about general-purpose symbolic software is followed by general
    guidelines how to develop and implement high-quality computer algebra
    code. The theoretical background including modeling techniques for
    mechanical systems is provided which allows for the computer aided
    generation of the symbolic equation of motion for multibody
    systems. It is shown how the governing equations for different types
    of problems in structural mechanics can be automatically derived and
    how to implement finite element techniques via computer algebra
    software. Perturbation methods as a very powerful approach for
    nonlinear problems are discussed in detail and are demonstrated for a
    number of applications. The applications covered in this book
    represent some of the most advanced topics in the rapidly growing
    field of research on symbolic computation."
}

\end{chunk}

\index{Dom\'inguez, C\'esar}
\index{Rubio, Julio}
\begin{chunk}{axiom.bib}
@InProceedings{Domi01,
  author = {Dom\'inguez, C\'esar; Rubio, Julio},
  title = "Modeling Inheritance as Coercion in a Symbolic Computation System",
  booktitle = "Proc. ISSAC 2001",
  series = "ISSAC 2001",
  year = "2001",
  keywords = "axiomref",
  paper = "Domi01.pdf",
  abstract = 
    "In this paper the analysis of the data structures used in a symbolic
    computation system, called Kenzo, is undertaken. We deal with the
    specification of the inheritance relationship since Kenzo is an
    object-oriented system, written in CLOS, the Common Lisp Object
    System. We focus on a particular case, namely the relationship between
    simplicial sets and chain complexes, showing how the order-sorted
    algebraic specifications formalisms can be adapted, through the
    ``inheritance as coercion'' metaphor, in order to model this Kenzo
    fragment."
}

\end{chunk}

\index{Weber, Andreas}
\begin{chunk}{axiom.bib}
@InProceedings{Webe94,
  author = "Weber, Andreas",
  title = "Algorithms for Type Inference with Coercions",
  booktitle = "Proc ISSAC 94",
  series = "ISSAC 94",
  year = "1994",
  keywords = "axiomref",
  paper = "Webe94.pdf",
  abstract =
    "This paper presents algorithms that perform a type inference for a
    type system occurring in the context of computer algebra. The type
    system permits various classes of coercions between types and the
    algorithms are complete for the precisely defined system, which can be
    seen as a formal description of an important subset of the type system
    supported by the computer algebra program Axiom.

    Previously only algorithms for much more restricted cases of coercions
    have been described or the frameworks used have been so general that
    the corresponding type inference problems were known to be
    undecidable."
}

\end{chunk}

\index{Sutor, Robert S.}
\index{Jenks, Richard D.}
\begin{chunk}{axiom.bib}
@article{Suto87,
  author = "Sutor, Robert S. and Jenks, Richard D.",
  title = "The type inference and coercion facilities in the Scratchpad II 
           interpreter",
  journal = "SIGPLAN Notices",
  volume = "22",
  number = "7",
  pages = "56-63",
  year = "1987",
  isbn = "0-89791-235-7",
  paper = "Suto87.pdf",
  keywords = "axiomref",
  abstract = 
    "The Scratchpad II system is an abstract datatype programming
    language, a compiler for the language, a library of packages of
    polymorphic functions and parametrized abstract datatypes, and an
    interpreter that provides sophisticated type inference and coercion
    facilities . Although originally designed for the implementation of
    symbolic mathematical algorithms, Scratchpad 11 is a general purpose
    programming language . This paper discusses aspects of the
    implementation of the interpreter and how it attempts to provide a
    user friendly and relatively weakly typed front end for the strongly
    typed programming language."
}

\end{chunk}

\index{van Leeuwen, Andr\'e M.A.}
\begin{chunk}{axiom.bib}
@misc{Leeuxx,
  author = {van Leeuwen, Andr\'e M.A.},
  title = "Representation of mathematical object in interactive books",
  paper = "Leeuxx.pdf",
  abstract = "
    We present a model for the representation of mathematical objects in
    structured electronic documents, in a way that allows for interaction
    with applications such as computer algebra systems and proof checkers.
    Using a representation that reflects only the intrinsic information of
    an object, and storing application-dependent information in so-called
    {\sl application descriptions}, it is shown how the translation from
    the internal to an external representation and {\sl vice versa} can be
    achieved. Hereby a formalisation of the concept of {\sl context} is
    introduced. The proposed scheme allows for a high degree of
    application integration, e.g., parallel evaluation of subexpressions
    (by different computer algebra systems), or a proof checker using a
    computer algebra system to verify an equation involving a symbolic
    computation."
}

\end{chunk}

\index{Jenks, Richard D.}
\index{Trager, Barry M.}
\begin{chunk}{ignore}
@InProceedings{Jenk94,
  author = "Jenks, Richard D. and Trager, Barry M.",
  booktitle = "Proceedings of the ACM-SIGSAM 1989 International
           Symposium on Symbolic and Algebraic Computation, ISSAC '94",
  series = "ISSAC 94",
  year = "1994",
  pages = "32-40",
  isbn = "0-89791-638-7",
  keywords = "axiomref",
  publisher = "ACM Press",
  address = "New York, NY, USA",
  paper = "Jenk94.pdf",
  abstract =
    "Scratchpad [GrJe71] was a computer algebra system developed in the
    early 1970s.  Like M\&M (Maple [CGG91ab] and Mathematical [W01S92]) and
    other systems today, Scratchpad had one principal representation for
    mathematical formulae based on ``expression trees''.  Its user interface
    design was based on a pattern-matching paradigm with infinite rewrite-
    rule semantics, providing what we believe to be the most natural
    paradigm for interactive symbolic problem solving.  Like M\&M, however,
    user programs were interpreted, often resulting in poor performance
    relative to similar facilities coded in standard programming languages
    such as FORTRAN and C.  
    
    Scratchpad development stopped in 1976 giving way to a new system
    design ([JenR79], [JeTr81]) that evolved into AXIOM [JeSu92].
    AXIOM has a strongly-typed programming language for building a library
    of parameterized types and algorithms, and a type-inferencing
    interpreter that accesses the library and can build any of an infinite
    number of types for interactive use.
    
    We suggest that the addition of an expression tree type to AXIOM can
    allow users to operate with the same freedom and convenience of
    untyped systems without giving up the expressive power and run-time
    efficiency provided by the type system.  We also present a design that
    supports a multiplicity of programming styles, from the Scratchpad
    pattern-matching paradigm to functional programming to more
    conventional procedural programming.  The resulting design seems to us
    to combine the best features of Scratchpad with current AXIOM and to
    offer a most attractive, flexible, and user-friendly environment for
    interactive problem solving.
    
    Section 2 is a discussion of design issues contrasting AXIOM with
    other symbolic systems.  Sections 3 and 4 is an assessment of AXIOMâ€™s
    current design for building libraries and interactive use.  Section 5
    describes a new interface design for AXIOM, its resulting paradigms,
    and its underlying semantic model.  Section 6 compares this work with
    others."
}

\end{chunk}

\index{Poll, Erik}
\index{Thompson, Simon}
\begin{chunk}{axiom.bib}
@misc{Poll99a,
  author = "Poll, Erik and Thompson, Simon",
  title = "The Type System of Aldor",
  url = "http://www.cs.kent.ac.uk/pubs/1999/874/content.ps",
  paper = "Poll99a.pdf",
  keywords = "axiomref",
  abstract = 
    "This paper gives a formal description of -- at least a part of --
    the type system of Aldor, the extension language of the Axiom.
    In the process of doing this a critique of the design of the system
    emerges."
}

\end{chunk}

\index{Boulanger, Jean-Louis}
\begin{chunk}{axiom.bib}
@misc{Boul93b,
  author = "Boulanger, Jean-Louis",
  title = "AXIOM, A Functional Language with Object Oriented Development",
  year = "1993",
  paper = "Boul93b.pdf",
  keywords = "axiomref",
  abstract = 
    "We present in this paper, a study about the computer algebra system
    Axiom, which gives us many very interesting Software engineering
    concepts.  This language is a functional language with an Object
    Oriented Development.  This feature is very important for modeling the
    mathematical world (Hierarchy) and provides a running with
    mathematical sense. (All objects are functions). We present many
    problems of running and development in Axiom. We can note that Aiom is
    the only system of this category."
}

\end{chunk}

\index{Brown, Ronald}
\index{Dreckmann, Winfried}
\begin{chunk}{axiom.bib}
@misc{Brow95,
  author = "Brown, Ronald and Dreckmann, Winfried",
  title = "Domains of data and domains of terms in AXIOM",
  year = "1995",
  keywords = "axiomref",
  url = "http://axiom-wiki.newsynthesis.org/public/refs/brown-free-c-g.pdf",
  paper = "Brow95.pdf",
  abstract = "
    The main new concept we wish to illustrate in this paper is a
    distinction between ``domains of data'' and ``domains of terms'', and
    its use in the programming of certain mathematical structures.
    Although this distinction is implicit in much of the programming work
    that has gone into the construction of Axiom categories and domains,
    we believe that a formalisation of this is new, that standards and
    conventions are necessary and will be useful in various other
    contexts. We shall show how this concept may be used for the coding of
    free categories and groupoids on directed graphs."
}

\end{chunk}

\index{Danielsson, Nils Anders}
\index{Hughes, John}
\index{Jansson, Patrik}
\index{Gibbons, Jeremy}
\begin{chunk}{axiom.bib}
@InProceedings{Dani06,
  author = "Danielsson, Nils Anders and Hughes, John and Jansson, Patrik and
            Gibbons, Jeremy",
  title = "Fast and Loose Reasoning is Morally Correct",
  booktitle = "Proc. of ACM POPL '06",
  series = "POPL '06",
  year = "2006",
  location = "Charleston, South Carolina",
  keywords = "axiomref",
  paper = "Dani06.pdf",
  abstract = 
    "Functional programmers often reason about programs as if they were
    written in a total language, expecting the results to carry over to
    non-toal (partial) languages. We justify such reasoning.

    Two languages are defined, one total and one partial, with identical
    syntax. The semantics of the partial language includes partial and
    infinite values, and all types are lifted, including the function
    spaces. A partial equivalence relation (PER) is then defined, the
    domain of which is the total subset of the partial language. For types
    not containing function spaces the PER relates equal values, and
    functions are related if they map related values to related values.

    It is proved that if two closed terms have the same semantics in the
    total language, then they have related semantics in the partial
    language. It is also shown that the PER gives rise to a bicartesian
    closed category which can be used to reason about values in the domain
    of the relation."
}

\end{chunk}

\index{Doye, Nicolas James}
\begin{chunk}{axiom.bib}
@phdthesis{Doye97,
  author = "Doye, Nicolas James",
  title = "Order Sorted Computer Algebra and Coercions",
  school = "University of Bath",
  year = "1997",
  keywords = "axiomref",
  paper = "Doye97.pdf",
  abstract = 
    "Computer algebra systems are large collections of routines for solving
    mathematical problems algorithmically, efficiently and above all,
    symbolically. The more advanced and rigorous computer algebra systems
    (for example, Axiom) use the concept of strong types based on
    order-sorted algebra and category theory to ensure that operations are
    only applied to expressions when they ``make sense''.

    In cases where Axiom uses notions which are not covered by current
    mathematics we shall present new mathematics which will allow us to
    prove that all such cases are reducible to cases covered by the
    current theory. On the other hand, we shall also point out all the
    cases where Axiom deviates undesirably from the mathematical ideal.
    Furthermore we shall propose solutions to these deviations.

    Strongly typed systems (especially of mathematics) become unusable
    unless the system can change the type in a way a user expects. We wish
    any change expected by a user to be automated, ``natural'', and
    unique. ``Coercions'' are normally viewed as ``natural type changing
    maps''. This thesis shall rigorously define the word ``coercion'' in
    the context of computer algebra systems.

    We shall list some assumptions so that we may prove new results so
    that all coercions are unique. This concept is called ``coherence''.

    We shall give an algorithm for automatically creating all coercions in
    type system which adheres to a set of assumptions. We shall prove that
    this is an algorithm and that it always returns a coercion when one
    exists. Finally, we present a demonstration implementation of this
    automated coerion algorithm in Axiom."
}

\end{chunk}

\index{Dunstan, Martin}
\index{Kelsey, Tom}
\index{Martin, Ursula}
\index{Linton, Steve A.}
\begin{chunk}{axiom.bib}
@InProceedings{Duns99,
  author = "Dunstan, Martin and Kelsey, Tom and Martin, Ursula and 
            Linton, Steve A.",
  title = "Formal Methods for Extensions to CAS",
  booktitle = "Proc. of FME'99",
  series = "FME'99",
  location = "Toulouse, France",
  year = "1999",
  pages = "1758-1777",
  url = "http://tom.host.cs.st-andrews.ac.uk/pub/fm99.ps",
  paper = "Duns99.pdf",
  keywords = "axiomref",
  abstract = 
    "We demonstrate the use of formal methods tools to provide a semantics
    for the type hierarchy of the AXIOM computer algebra system, and a
    methodology for Aldor program analysis and verification. We give a
    case study of abstract specifications of AXIOM primitives, and provide
    an interface between these abstractions and Aldor code."
}

\end{chunk}

\index{Boehm, Hans-J.}
\index{Cartwright, Robert}
\index{Riggle, Mark}
\index{O'Donnell, Michael J.}
\begin{chunk}{axiom.bib}
  author = "Boehm, Hans-J. and Cartwright, Robert and Riggle, Mark and
            O'Donnell, Michael J.",
  title = "Exact Real Arithmetic: A Case Study in Higher Order Programming",
  url = "http://dev.acm.org/pubs/citations/proceedings/lfp/319838/p162-boehm",
  paper = "Boeh86.pdf",
  abstract =
    "Two methods for implementing {\sl exact} real arithmetic are explored
    One method is based on formulating real numbers as functions that map
    rational tolerances to rational approximations.  This approach, which
    was developed by constructive mathematicians as a concrete
    formalization of the real numbers, has lead to a surpris- ingly
    successful implementation.  The second method formulates real numbers
    as potentially infinite sequences of digits, evaluated on demand.
    This approach has frequently been advocated by proponents of lazy
    functional languages in the computer science community.  Ironically,
    it leads to much less satisfactory implementations.  We discuss the
    theoretical problems involved m both methods, give algortthms for the
    basic arithmetic operations, and give an empirical comparison of the
    two techniques.  We conclude wtth some general observations about the
    lazy evaluation paradigm and its implementation."
}

\end{chunk}

\index{Gruntz, Dominik}
\begin{chunk}{axiom.bib}
@phdthesis{Grun96,
  author = "Gruntz, Dominik",
  title = "On Computing Limits in a Symbolic Manipulation System",
  school = "Swiss Federal Institute of Technology Zurich",
  year = "1996",
  paper = "Grun96.pdf",
  url = "http://www.cybertester.com/data/gruntz.pdf",
  keywords = "axiomref",
  abstract = "
    This thesis presents an algorithm for computing (one-sided) limits
    within a symbolic manipulation system. Computing limtis is an
    important facility, as limits are used both by other functions such as
    the definite integrator and to get directly some qualitative
    information about a given function.

    The algorithm we present is very compact, easy to understand and easy
    to implement. It overcomes the cancellation problem other algorithms
    suffer from. These goals were achieved using a uniform method, namely
    by expanding the whole function into a series in terms of its most
    rapidly varying subexpression instead of a recursive bottom up
    expansion of the function. In the latter approach exact error terms
    have to be kept with each approximation in order to resolve the
    cancellation problem, and this may lead to an intermediate expression
    swell. Our algorithm avoids this problem and is thus suited to be
    implemented in a symbolic manipulation system."
}

\end{chunk}

\index{Boulm\'e, S.}
\index{Hardin, T.}
\index{Rioboo, Renaud}
\begin{chunk}{axiom.bib}
@misc{Boul00,
  author = "Boulme, S. and Hardin, T. and Rioboo, R.",
  title = "Polymorphic Data Types, Objects, Modules and Functors,: 
           is it too much?",
  url = "ftp://ftp.lip6.fr/lip6/reports/2000/lip6.2000.014.ps.gz",
  paper = "Boul00.pdf",
  keywords = "axiomref",
  abstract = "
    Abstraction is a powerful tool for developers and it is offered by
    numerous features such as polymorphism, classes, modules, and
    functors, $\ldots$ A working programmer may be confused by this
    abundance. We develop a computer algebra library which is being
    certificed. Reporting this experience made with a language (Ocaml)
    offering all these features, we argue that the are all needed
    together. We compare several ways of using classes to represent
    algebraic concepts, trying to follow as close as possible mathematical
    specification. Then we show how to combine classes and modules to
    produce code having very strong typing properties.  Currently, this
    library is made of one hundred units of functional code and behaves
    faster than analogous ones such as Axiom."
}

\end{chunk}

\index{Conrad, Marc}
\index{French, Tim}
\index{Maple, Carsten}
\index{Pott, Sandra}
\begin{chunk}{axiom.bib}
@misc{Conrxxb,
  author = "Conrad, Marc and French, Tim and Maple, Carsten and Pott, Sandra",
  title = "Mathematical Use Cases lead naturally to non-standard Inheritance 
         Relationships: How to make them accessible in a mainstream language?",
  paper = "Conrxxb.pdf",
  keywords = "axiomref",
  abstract = "
    Conceptually there is a strong correspondence between Mathematical
    Reasoning and Object-Oriented techniques. We investigate how the ideas
    of Method Renaming, Dynamic Inheritance and Interclassing can be used
    to strengthen this relationship. A discussion is initiated concerning
    the feasibility of each of these features."
}

\end{chunk}

\index{Dunstan, Martin N.}
\begin{chunk}{axiom.bib}
@phdthesis{Duns99a,
  author = "Dunstan, Martin N.",
  title = "Larch/Aldor - A Larch BISL for AXIOM and Aldor",
  school = "University of St. Andrews",
  year = "1999",
  paper = "Duns99a.pdf",
  keywords = "axiomref",
  abstract = "
    In this thesis we investigate the use of lightweight formal methods
    and verification conditions (VCs) to help improve the reliability of
    components constructed within a computer algebra system. We follow the
    Larch approach to formal methods and have designed a new behavioural
    interface specification language (BISL) for use with Aldor: the
    compiled extension language of Axiom and a fully-featured programming
    language in its own right. We describe our idea of lightweight formal
    methods, present a design for a lightweight verification condition
    generator and review our implementation of a prototype verification
    condition generator for Larch/Aldor."
}

\end{chunk}

\index{Thompson, Simon}
\index{Timochouk, Leonid}
\begin{chunk}{axiom.bib}
@misc{Thomxx,
  author = "Thompson, Simon and  Timochouk, Leonid",
  title = "The Aldor\-\- language",
  paper = "Thomxx.pdf",
  keywords = "axiomref",
  abstract = "
    This paper introduces the \verb|Aldor--| language, which is a
    functional programming language with dependent types and a powerful,
    type-based, overloading mechanism. The language is built on a subset
    of Aldor, the 'library compiler' language for the Axiom computer
    algebra system. \verb|Aldor--| is designed with the intention of
    incorporating logical reasoning into computer algebra computations.
    
    The paper contains a formal account of the semantics and type system
    of \verb|Aldor--|; a general discussion of overloading and how the
    overloading in \verb|Aldor--| fits into the general scheme; examples
    of logic within \verb|Aldor--| and notes on the implementation of the
    system."
}

\end{chunk}

\index{Davenport, James H.}
\index{Fitch, John}
\begin{chunk}{axiom.bib}
@misc{Dave07,
  author = "Davenport, James H. and Fitch, John",
  title = "Computer Algebra and the three 'E's: Efficiency, Elegance, and
           Expressiveness",
  url = "http://staff.bath.ac.uk/masjhd/Drafts/PLMMS2007",
  paper = "Dave07.pdf",
  keywords = "axiomref",
  abstract =
    "What author of a programming language would not claim that the 3 'E's
    were the goals? Nevertheless, we claim that computer algebra does lead
    to particular emphases, and constraints, in these areas.
    
    We restrict ``efficiency'' to mean machine efficiency, since the other
    'E's cover programmer efficiency. For the sake of clarity, we describe
    as ``expressiveness'', what can be expressed in the language, and
    ``elegance'' as how it can be expressed."
}

\end{chunk}

\index{Jager, Bram De}
\index{van Asch, Bram}
\begin{chunk}{axiom.bib}
@article{Jage96,
  author = "Jager, Bram De and van Asch, Bram",
  title = "Symbolic Solutions for a Class of Partial Differential Equations",
  journal = "J. Symbolic Computation",
  volume = "22",
  pages = "459-468",
  paper = "Jage96.pdf",
  url = "http://www.mate.tue.nl/mate/pdfs/1610.pdf",
  keywords = "axiomref",
  abstract =
    "An algorithm to generate solutions for members of a class of
    completely integrable partial differential equations has been derived
    from a constructive proof of Frobenius' Theorem. The algorithm is
    implemented as a procedure in the computer algebra system
    Maple. Because the implementation uses the facilities of Maple for
    solving sets of ordinary differential equations and for sets of
    nonlinear equations, and those facilities are limited, the problems
    that actually can be solved are restricted in size and
    complexity. Several examples, some derived from industrial practice,
    are presented to illustrate the use of the algorithm and to
    demonstrate the advantages and shortcomings of the implementation."
}

\end{chunk}

\index{Hereman, Willy}
\begin{chunk}{axiom.bib}
@article{Here97,
  author = "Hereman, Willy",
  title = "Review of Symbolic Software for Lie Symmetry Analysis",
  journal = "Math. Comput. Modelling",
  volume = "25",
  number = "8/9",
  pages = "115-132",
  year = "1997",
  keywords = "axiomref",
  paper = "Here97.pdf",
  abstract =
    "Sophus Lie (1842-1899) pioneered the study of continuous
    transformation groups that leave systems of differential equations
    invariant.  Lieâ€™s work [l-3] brought diverse and ad hoc integration
    methods for solving special classes of differential equations under a
    common conceptual umbrella.  Indeed, Lieâ€™s infinitesimal
    transformation method provides a widely applicable technique to find
    closed form solutions of ordinary differential equations (ODES).
    Standard solution methods for first-order or linear ODES can be
    characterized in terms of symmetries.  Through the group
    classification of ODES, Lie succeeded in identifying all ODES that can
    either be reduced to lower-order ones or be completely integrated via
    group theoretic techniques.  
    
    Applied to partial differential equations (PDEs), Lieâ€™s method [2]
    leads to group-invariant solutions and conservation laws.  Exploiting
    the symmetries of PDEs, new solutions can be derived from known ones,
    and PDEs can be classified into equivalence classes.  Furthermore,
    group-invariant solutions obtained via Lieâ€™s approach may provide
    insight into the physical models themselves, and explicit solutions
    can serve as benchmarks in the design, accuracy testing, and
    comparison of numerical algorithms.
    
    Nowadays, the concept of symmetry plays a key role in the study and
    development of mathematics and physics.  Indeed, the theory of Lie
    groups and Lie algebras is applied to diverse fields of mathematics
    including differential geometry, algebraic topology, bifurcation
    theory, to name a few.  Lieâ€™s original ideas greatly influenced the
    study of physically important systems of differential equations in
    classical and quantum mechanics, fluid dynamics, elasticity, and many
    other applied areas [4-81].
    
    The application of Lie group methods to concrete physical systems
    involves tedious computations.  Even the calculation of the
    continuous symmetry group of a modest system of differential equations
    is prone to errors, if done with pencil and paper.  Computer algebra
    systems (CAS) such as Mathematica, MACSYMA, Maple, REDUCE, AXIOM and
    MuPAD are extremely useful for such computations.  Symbolic packages
    [9-11], written in the language of these GAS, can find the determining
    equations of the Lie symmetry group.  The most sophisticated packages
    then reduce these into an equivalent but more suitable system,
    subsequently solve that system in closed form, and go on to calculate
    the infinitesimal generators that span the Lie algebra of symmetries.
    
    In Section 2, we discuss methods and algorithms used in the
    computation of Lie symmetries.  We address the computation of
    determining systems, their reduction to standard form, solution
    techniques, and the computation of the size of the symmetry group.
    In Section 3, we look beyond Lie-point symmetries, addressing contact
    and generalized symmetries, as well as nonclassical or conditional
    symmetries.  
    
    Section 4 is devoted to a review of modern Lie symmetry
    programs, classified according to the underlying CAS.  The review
    focuses on Lie symmetry software for classical Lie-point symmetries,
    contact (or dynamical), generalized (or Lie-Backlund) symmetries,
    nonclassical (or conditional) symmetries.  Most of these packages were
    written in the last decade.  Researchers interested in details about
    pioneering work should consult [9,10,12].  In Section 5, two examples
    illustrate results that can be obtained with Lie symmetry software.
    In Section 6 we draw some conclusions.  
    
    Lack of space forces us to give only a few key references for the Lie
    symmetry packages.  A comprehensive survey of the literature devoted
    to theoretical as well as computational aspects of Lie symmetries,
    with over 300 references, can be found elsewhere [11]."
}

\end{chunk}

\index{Minoiu, N.}
\index{Netto, M}
\index{Mammar, S}
\begin{chunk}{axiom.bib}
@misc{Mino07,
  author = "Minoiu, N. and Netto, M and Mammar, S",
  title = "Assistance control based on a composite Lyapunov function for
           lane departure avoidance",
  booktitle = "Proc. 15 Med. Conf. on Control \& Automation",
  year = "2007",
  keywords = "axiomref",
  abstract =
    "This paper presents a vehicle steering assistance designed to avoid
    lane departure during driver inattention periods. Activated for a
    driver loss of concentration during a lane keeping maneuver the
    steering assistance drives the vehicle back to the center of the
    lane. In order to ensure a vehicle trajectory as close as possible to
    the centerline, the control law has been developed based on invariant
    sets theory and on composite Lyapunov functions. The computation has
    been performed using LMI methods, which allow in addition imposing a
    maximum bound for the control steering angle."
}

\end{chunk}

\index{Davenport, James H.}
\begin{chunk}{ignore}
@misc{Dave12a,
  author = "Davenport, James H.",
  title = "Computer Algebra or Computer Mathematics?",
  year = "2012",
  url = "http://people.bath.ac.uk/masjhd/Slides/CalculemusSchool2002.pdf",
  paper = "Dave12a.pdf",
  abstract =
    "Scope: ``polynomial-type'' systems: Axiom, Macsyma/Maxima, Maple,
     Mathematica, and Reduce."
}

\index{Dicrescenzo, C.}
\index{Duval, Dominique}
\begin{chunk}{axiom.bib}
@InProceedings{Dicr88,
  author = "Dicrescenzo, C. and Duval, D.",
  title = "Algebraic extensions and algebraic closure in Scratchpad II",
  booktitle = "Proc. ISSAC 1988",
  series = "ISSAC 1998",
  year = "1998",
  pages = "440-446",
  isbn = "3-540-51084-2",
  keywords = "axiomref"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Unkn16,
  title = "Computer Algebra Systems",
  url = "http://www.mhtlab.uwaterloo.ca/courses/me755/web\_intro.pdf",
  paper = "Unkn16.pdf"
}

\end{chunk}

\index{Wang, Dongming}
\begin{chunk}{axiom.bib}
@InProceedings{Wang02,
  author = "Wang, Dongming",
  title = "Epsilon: A Library of Software Tools for Polynomial Elimination",
  booktitle = "Proc. 1st Int. Congress of Mathematical Software",
  series = "ICMS 2002",
  year = "2002",
  location = "Beijing China",
  pages = "379-389",
  keywords = "axiomref",
  paper = "Wang02.pdf",
  url = "https://hal.inria.fr/inria-00107607/file/A02-R-314.pdf",
  abstract =
    "This article presents a Maple library of functions for decomposing
    systems of multivariate polynomials into triangular systems of
    various kinds (regular, simple, or irreducible), with an application
    package for manipulating and proving geometric theorems."
}

\end{chunk}

\index{Gr\"abe, Hans-Gert}
\begin{chunk}{axiom.bib}
@InProceedings{Grab02,
  author = "Grabe, Hans-Gert",
  title = "The SymbolicData Benchmark Problems Collection of Polynomial 
           Systems",
  booktitle = "Workshop on Under- and Overdetermined Systems of Algebraic or
               Differential Equations",
  location = "Karlsruhe, Germany",
  pages = "57-76",
  url = "http://symbolicdata.org/Papers/karlsruhe-02.pdf",
  paper = "Grab02.pdf",
  keywords = "axiomref"
}

\end{chunk}

\index{Norman, Arthur C.}
\begin{chunk}{axiom.bib}
@misc{Norm94,
  author = "Norman, Arthur C.",
  title = "Algebraic Manipulation",
  paper = "Norm94.pdf",
  keywords = "axiomref"
}

\end{chunk}

\index{Joyner, David}
\begin{chunk}{axiom.bib}
@misc{Joyn16,
  author = "Joyner, David",
  title = "Links to some open source mathematical programs",
  keywords = "axiomref",
  url = "http://www.opensourcemath.org/opensource\_math.html"
}

\end{chunk}

\index{Cohen, Joel S.}
\begin{chunk}{axiom.bib}
@book{Cohe03b,
  author = "Cohen, Joel S.",
  title = "Computer algebra and symbolic computation. Elementary Algorithms",
  year = "2003",
  publisher = "A. K. Peters",
  isbn = "1-56881-159-4",
  keywords = "axiomref",
  paper = "Cohe03b.pdf"
}

\end{chunk}

\index{Decker, Wolfram}
\begin{chunk}{axiom.bib}
@misc{Deckxx,
  author = "Decker, Wolfram",
  title = "Some Introductory Remarks on Computer Algebra",
  url = 
"https://www.math.uni-bielefeld.de/~rehmann/ECM/cdrom/3ecm/pdfs/pant3/decker.pdf",
  paper = "Deckxx.pdf",
  keywords = "axiomref",
  abstract = 
    "Computer algebra is a relatively young but rapidly growing field. In
    this introductory note to the mini-symposium on computer algebra
    organized as part of the third European Congress of Mathematics I will
    not even attempt to adress all major streams of research and the many
    applications of computer algebra. I will concentrate on a few aspects,
    mostly from a mathematical point of view, and I will discuss a few
    typical applications in mathematics. I will present a couple of
    examples which underline the fact that computer algebra systems
    provide easy access to powerful computing tools. And, I will quote
    from and refer to a couple of survey papers, textbooks and web-pages
    which I recommend for further reading."
}

\end{chunk}

\index{Chew, Paul}
\index{Constable, Robert L.}
\index{Pingali, Keshav}
\index{Vavasis, Steve}
\index{Zippel, Richard}
\begin{chunk}{axiom.bib}
@misc{Chew95,
  author = "Chew, Paul and Constable, Robert L. and Pingali, Keshav and
            Vavasis, Steve and Zippel, Richard",
  title = "Collaborative Mathematics Environment",
  url = "http://www.cs.cornell.edu/rz/MathBus95/TechSummary.html",
  keywords = "axiomref"
}

\end{chunk}

\index{Simon, Barry}
\begin{chunk}{axiom.bib}
@misc{Simo97,
  author = "Simon, Barry",
  title = "The PC Is Now Axiomatic",
  publisher = "PC Mag",
  year = "1997",
  month = "March",
  day = "25",
  keywords = "axiomref"
}

\end{chunk}

\index{Batut, C.}
\index{Belabas, K.}
\index{Bernardi, D.}
\index{Cohen, H.}
\index{Olivier, M.}
\begin{chunk}{axiom.bib}
@misc{Batu03,
  author = "Batut, C. and Belabas, K. and Bernardi, D. and Cohen, H. and
            Olivier, M.",
  title = "User's Guide to PARI/GP",
  url = "http://math.mit.edu/~brubaker/PARI/PARIusers.pdf",
  paper = "Batu03.pdf",
  keywords = "axiomref"
}

\end{chunk}

\index{Gianni, Patrizia}
\index{Trager, Barry M.}
\index{Zacharias, Gail}
\begin{chunk}{axiom.bib}
@article{Gian88,
  author = "Gianni, Patrizia. and Trager, Barry. and Zacharias, Gail",
  title = "Groebner Bases and Primary Decomposition of Polynomial Ideals",
  journal = "J. Symbolic Computation",
  volume = "6", 
  pages = "149-167",
  year = "1988",
  url = "http://www.sciencedirect.com/science/article/pii/S0747717188800403/pdf?md5=40c29b67947035884904fd4597ddf710&pid=1-s2.0-S0747717188800403-main.pdf",
  paper = "Gian88.pdf"
}

\end{chunk}

\begin{chunk}{axiom.bib}
@misc{Wikixx,
  title = "List of open-source software for mathematics",
  url = "https://en.wikipedia.org/wiki/List\_of\_open-source\_software\_for\_mathematics",
  keywords = "axiomref"
}

\end{chunk}

\index{Joyner, David}
\index{Stein, William}
\begin{chunk}{axiom.bib}
@misc{Joyn08,
  author = "Joyner, David and Stein, William",
  title = "Open Source Mathematical Software: A White Paper",
  year = "2008",
  url = 
"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.124.7499&rep=rep1&type=pdf",
  paper = "Joyn08.pdf",
  keywords = "axiomref",
  abstract =
    "Open source software has had a profound effect on computing during
    the last decade, especially on web servers (Apache), web browsers 
    (Firefox), operating systems (Linux and OS X), and programming
    languages (GC C, Java, Python, Perl, etc.). The purpose of this paper
    is to put forward the case that open source development methodologies
    might also have a positive effect on mathematical software,
    especially if the National Science Foundation (NSF) increases their
    support of open source mathematical software de velopment.  We argue
    that careful funding of open source mathematical software may lead to
    a lower total cost of ownership in the research and education 
    community, and to more efficient and trustworthy mathematical software."
}

\end{chunk}

\index{Nguyen, Minh Van}
\begin{chunk}{axiom.bib}
@phdthesis{Nguy09,
  author = "Nguyen, Minh Van",
  title = "Exploring Cryptography Using the Sage Computer Algebra System",
  school = "Victoria University",
  year = "2009",
  keywords = "axiomref",
  paper = "Nguy09.pdf",
  abstract = 
    "Cryptography has become indispensable in areas such as e-commerce,
    the legal safe-guarding of medical records, and secure electronic
    communication. Hence, it is incumbent upon software engineers to
    understand the concepts and techniques underlying the cryptosystems
    that they implement. An educator needs to consider which topics to
    cover in a course on cryptography as well as how to present the
    concepts and techniques to be covered in the course. This thesis
    contributes to the field of cryptography pedagogy by discussing and
    implementing small-scale cryptosystems whose encryption and
    decryption processes can be stepped through by hand. Our
    implementation has been accepted and integrated into the code base of
    the computer algebra system Sage. As Sage is free and open source,
    students and educators of cryptology need not worry about paying
    license fees in order to use Sage, but can instead concentrate on
    exploring cryptography using Sageâ€™s built-in support for cryptography."
}

\end{chunk}

\index{Hoeven, Joris van der}
\index{Lecerf, Gregoire}
\begin{chunk}{axiom.bib}
@misc{Hoev13,
  author = "Hoeven, Joris van der and Lecerf, Gregoire",
  title = "Interfacing Mathemagix with C++",
  keywords = "axiomref",
  url = "http://www.texmacs.org/joris/mmxcpp/mmxcpp.pdf",
  paper = "Hoev13.pdf",
  abstract =
    "In this paper, we give a detailed description of the interface 
    between the Mathemagix language and C++. In particular, we describe
    the mechanism which allows us to import a C++ template library
    (which only permits static instantiation) as a fully generic
    Mathemagix template library."
}

\end{chunk}

\index{Fateman, Richard J.}
\begin{chunk}{axiom.bib}
@misc{Fate94,
  author = "Fateman, Richard J.",
  title = "On the Design and Construction of Algebraic Manipulation Systems",
  keywords = "axiomref",
  url = "http://www.cs.berkeley.edu/~fateman/papers/asmerev94.ps",
  paper = "Fate94.pdf",
  abstract =
    "We compare and contrast several techniques for the implementation of
    components of an algebraic manipulation system. On one hand is the
    mathematical-algebraic approach which characterizes (for example)
    IBM's Axiom. On the other hand is the more {\sl ad-hoc} approach which
    characterizes many other popular systems (for example, Macsyma,
    Reduce, Maple, and Mathematica). While the algebraic approach has
    generally positive results, careful examination suggests that there
    are significant remaining problems, especially in the representation
    and manipulation of analytical, as opposed to algebraic,
    mathematics. We describe some of these problems and some general
    approaches for solutions."
}

\end{chunk}


