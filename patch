books/bookvol10.3 standardize Axiom code

Goal: Axiom Literate Programming

A book needs to be "written by one hand". Books with multiple
authors (and Axiom has many) require an edit to have a common
format. This change moves all of the packages to a common format.

A common format allows lint programs and editors to parse the
code at the syntax level without knowing the full range of Axiom's
language. Later automation will take advantage of this to improve
documentation tools.

Axiom allows variation in almost every possible way and each
author has made stylistic choices. All of the many choices were
collected and reviewed. A uniform syntax was chosen. Note that
the compiler does not enforce these choices and they are quite
arbitrary.

The syntax change is uniform. Every package is now:

)abbrev domain CON Constructor                      (1)
++ comment                                          (2)
++ comment
       -- blank line --                             (3)
Constructor(A,B) : SIG == CODE where                (4a) (4b) (4c)
  A : type declaration                              (5)
  B : type declaration
       -- blank line --                             (6)
  M1 ==> macro definition 1                         (7)
  M2 ==> macro definition 2
       -- blank line --                             (8)
  SIG ==> Constructor1() with                       (9)
       -- blank line --                             (10)
    fn1 : A -> %                                    (11)
      ++ fn1(a) comment                             (12)
      ++                                            (13)
      ++X fn1(a)                                    (14)
       -- blank line --                             (15)
  CODE ==> Constructor2() add                       (16)
       -- blank line                                (17)
    fn1(a) ==                                       (18)

In a few cases the ":" and SIG tokens are missing

Constructor1(A) == CODE where
  A: Integer

  CODE ==> Constructor2(A)

which is a standard form of

Constructor1(A) == Constructor2(A)

In general

  (a) indentation is 2 spaces from the enclosing block
  (b) the ":" is always surrounded by a space on either side.
  (c) there is only one space used between syntax element, do not write:
          f(x)              ==  x * x


(1) The )abbrev line always is spelled ")abbrev"

(2) The top level ++ comments follow immediately after )abbrev

(3) There is a blank line ending the top level comments

(4a) The constructor line uses symbols without type decorations
     in the argument list. If there is no argument list then
     the constructor is followed by () as in:
         Constructor() 

(4b) The constructor is followed by a space-delimited colon
     per the overall standard

(4c) The line ends with "SIG == CODE where". These names were
     chosen as the smallest meaningful symbols to save space.   

(5) The constructor argument types follow immediately after
    the Constructor line. Sometimes a type declaration uses a
    macro so you see
       A : OneType()
       B ==> MacroTypeRename
       C : OtherType(A,B)
    Type order introduces types so they are defined before use.
    Otherwise, type order follows Constructor argument order.    

(6) There is a blank line ending the Constructor type declarations

(7) Macros are introduced

(8) There is a blank line ending the macro section

(9) "SIG ==> with" is a macro containing the signatures of the type

(10) There is a blank line after the "SIG" macro start line

(11) signatures are indented 2 spaces from the enclosing block 
     The ":" is space-delimited.
     The rest of the line uses single spacing

(12) The first word in a signature comment is the function name

(13) Signature comments have a single ++ blank line

(14) Signature comments have one or several ++X example lines
     which will appear as part of the )describe command output

(15) There is a blank line between signatures

(16) There is a "CODE ==> add" macro 

(17) The CODE macro is followed by a blank line

(18) The functions are two-space indented from the enclosing block.
     Two-space indentation is used within the function.






