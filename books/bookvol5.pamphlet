\documentclass[dvipdfm]{book}
\usepackage{hyperref}
\usepackage{axiom}
\usepackage{makeidx}
\makeindex
\usepackage{graphicx}
%%
%% Note that this file will eventually generate a dvi file
%% which will eventually be processed by dvipdfm to create a pdf.
%% The categories/domains/packages will be placed in a graphviz graph.
%% The graphviz dot syntax allows an href parameter.
%% The href parameter will reference this file. 
%% pdf href syntax allows named destinations.
%% This macro creates a named destination using \special
%% Thus, you reference http://thispdf#nameddest=ABBREV 
%% and you end up at the right page.
%% This macro is called implicitly by \pagehead so every 
%% category/domain/package can be referenced by fullname or abbrev.
%%
%% dest will give the ability to use nameddest= in html pdfs
%%
\newcommand{\dest}[1]{% e.g. \dest{abb}
\special{pdf:dest (#1) [ @thispage /FitH @ypos ]}}

%%
%% cmdhead consolidates standard command page setup
%%
\newcommand{\cmdhead}[1]{% e.g. \cmdhead{name}
\chapter{)#1~Command}%
\label{#1}%
\index{#1}%
\section{#1 man page}%
\index{mapage!#1}%
\index{#1!manpage}}

%%
%% defun marks a function definition and adds it to the index
%%
\newcommand{\defun}[2]{% e.g. \defun{functionname}{functionname}
\subsection{defun #2}%
\label{#1}%
\index{#1}%
\index{defun!#1}%
\index{#1!defun}}

%%
%% defunsec marks a function definition and adds it to the index
%% It assumes that the second argument is a section title.
%%
\newcommand{\defunsec}[2]{% e.g. \defunsec{functionname}{section title}
\subsection{#2}%
\label{#1}%
\index{#1}%
\index{defun!#1}%
\index{#1!defun}}

%%
%% defmacro marks a macro definition and adds it to the index
%%
\newcommand{\defmacro}[1]{% e.g. \defmacro{functionname}
\subsection{defmacro {#1}}%
\label{#1}%
\index{#1}%
\index{defmacro!#1}%
\index{#1!defmacro}}

%%
%% defvar marks a var definition and adds it to the index
%%
\newcommand{\defvar}[1]{% e.g. \defvar{varname}
\subsection{defvar \${#1}}%
\label{#1}%
\index{#1}%
\index{defvar!#1}%
\index{#1!defvar}}

%%
%% defstruct marks a struct definition and adds it to the index
%%
\newcommand{\defstruct}[1]{% e.g. \defstruct{varname}
\subsection{defstruct \${#1}}%
\label{#1}%
\index{#1}%
\index{defstruct!#1}%
\index{#1!defstruct}}

%%
%% defdollar marks a var definition (with leading $) and adds it to the index
%%
\newcommand{\defdollar}[1]{% e.g. \defdollar{functionname}
\subsection{defvar \${#1}}%
\label{#1}%
\index{\${#1}}%
\index{defvar!\${#1}}%
\index{\${#1}!defvar}}

%%
%% defconst marks a constant definition and adds it to the index
%%
\newcommand{\defconstant}[1]{% e.g. \defconst{varname}
\subsection{defconstant \${#1}}%
\label{#1}%
\index{#1}%
\index{defconstant!#1}%
\index{#1!defconstant}}

%%
%% defdollar marks a var definition (with leading $) and adds it to the index
%%
\newcommand{\defdollarconstant}[1]{% e.g. \defdollarconstant{functionname}
\subsection{defconstant \${#1}}%
\label{#1}%
\index{\${#1}}%
\index{defconstant!\${#1}}%
\index{\${#1}!defconstant}}

%%
%% pagehead consolidates standard page indexing
%%
\newcommand{\pagehead}[2]{% e.g. \pagehead{name}{abb}
\dest{#1}%
\dest{#2}%
\subsection{#1 (#2)}
\label{#1}%
\label{#2}%
\index{{#1}}%
\index{{#2}}}%

%%
%% calls marks a call from this function to another
%%
\newcommand{\calls}[2]{% e.g. \calls{thisfunc}{thatfunc}
[#2 p\pageref{#2}]\\%
\index{#2!{calledby #1}}%
\index{#1!{calls #2}}}%

%%
%% uses marks use of a throw tagvar
%%
\newcommand{\throws}[2]{% e.g. \throws{thisfunc}{tagvar}
[#2 p\pageref{#2}]\\%
\index{throws!#1}%
\index{#1!throws}}

%%
%% uses marks use of a catch tagvar
%%
\newcommand{\catches}[2]{% e.g. \catches{thisfunc}{tagvar}
[#2 p\pageref{#2}]\\%
\index{catches!#1}%
\index{#1!catches}}

%%
%% uses marks a special variable use
%%
\newcommand{\uses}[2]{% e.g. \calls{thisfunc}{specialvar}
[#2 p\pageref{#2}]\\%
\index{#2!{usedby #1}}%
\index{#1!{uses #2}}}%

%%
%% calls marks a call from this function to another 
%% if the called function starts with dollar we need to fake it
%%
\newcommand{\callsdollar}[2]{% e.g. \calls{thisfunc}{thatfunc}
[\$#2 p\pageref{#2}]\\%
\index{\$#2!{calledby \$#1}}%
\index{#1!{calls \$#2}}}%

%%
%% uses marks a special variable use
%% if the special variable starts with dollar we need to fake it
%%
\newcommand{\usesdollar}[2]{% e.g. \calls{thisfunc}{specialvar}
[\$#2 p\pageref{#2}]\\%
\index{\${#2}!{usedby #1}}%
\index{#1!{uses \${#2}}}}%

%%
%% uses marks items that need attention
%%
\newcommand{\tpdhere}[1]{% e.g. \tpdhere{Some note}
{\bf TPDHERE: #1}%
\index{TPDHERE!{#1}}}

%%
%% pagepic adds an image and an index entry
%%
\newcommand{\pagepic}[3]{% e.g. \pagepic{pathandfile}{abb}{scale}
\includegraphics[scale=#3]{#1}\\%
\index{images!#2}}

%%
%% \refto is a link to a referenced page that returns it arg
%%
\newcommand{\refto}[1]{% e.g. \refto{name}
(p\pageref{#1}) #1}

%%
%% pageto is a forward link to a referenced page
%%
\newcommand{\pageto}[2]{% e.g. \pageto{abb}{name}
\ \\${\bf\Rightarrow{}}${``#1''} (#2) \ref{#1} on page~\pageref{#1}}

%%
%% pagefrom is a backward link to a referencing page
%%
\newcommand{\pagefrom}[2]{% e.g. \pagefrom{name}{abb}
\ \\${\bf\Leftarrow{}}${``#1''} (#2) \ref{#1} on page~\pageref{#1}}


%%
%% fnref sets a reference link
%%
\newcommand{\fnref}[1]{% e.g. \fnref{functionname}
``#1'' (\ref{#1} p~\pageref{#1})}

%%
%% varref sets a reference link
%%
\newcommand{\varref}[1]{% e.g. \varref{variablename}
``#1'' (\ref{#1} p~\pageref{#1})}

%% cross will put the category and function in the index
%% cross will leave the funcname so it can be put inline.
%%
\newcommand{\cross}[2]{% e.g. \pagefrom{cat}{funcname}
\index{#1!#2}%
\index{#2!#1}%
#2}

%% these commands are used in the man page descriptions for each command
%% they should probably be replaced by other equivalents
\newcommand{\lanb}{{\tt [}}
\newcommand{\ranb}{{\tt ]}}
\newcommand{\vertline}{$|$}

% struggle with latex figure-floating behavior
\renewcommand\floatpagefraction{.9}
\renewcommand\topfraction{.9}
\renewcommand\bottomfraction{.9}
\renewcommand\textfraction{.1}
\setcounter{totalnumber}{50}
\setcounter{topnumber}{50}
\setcounter{bottomnumber}{50}

\begin{document}
\begin{titlepage}
\center{\includegraphics{ps/axiomfront.ps}}
\vskip 0.1in
\includegraphics{ps/bluebayou.ps}\\
\vskip 0.1in
{\Huge{The 30 Year Horizon}}
\vskip 0.1in
$$
\begin{array}{lll}
Manuel\ Bronstein      & William\ Burge   & Timothy\ Daly \\
James\ Davenport       & Michael\ Dewar   & Martin\ Dunstan \\
Albrecht\ Fortenbacher & Patrizia\ Gianni & Johannes\ Grabmeier \\
Jocelyn\ Guidry        & Richard\ Jenks   & Larry\ Lambe \\
Michael\ Monagan       & Scott\ Morrison  & William\ Sit \\
Jonathan\ Steinbach    & Robert\ Sutor    & Barry\ Trager \\
Stephen\ Watt          & Jim\ Wen         & Clifton\ Williamson
\end{array}
$$
\center{\large{Volume 5: Axiom Interpreter}}
\end{titlepage}
\pagenumbering{roman}
\tableofcontents
\vfill
\eject
\setlength{\parindent}{0em}
\setlength{\parskip}{1ex}
{\Large{\bf New Foreword}}
\vskip .25in

On October 1, 2001 Axiom was withdrawn from the market and ended
life as a commercial product.
On September 3, 2002 Axiom was released under the Modified BSD
license, including this document.
On August 27, 2003 Axiom was released as free and open source
software available for download from the Free Software Foundation's
website, Savannah.

Work on Axiom has had the generous support of the Center for 
Algorithms and Interactive Scientific Computation (CAISS) at
City College of New York. Special thanks go to Dr. Gilbert 
Baumslag for his support of the long term goal.

The online version of this documentation is roughly 1000 pages.
In order to make printed versions we've broken it up into three
volumes. The first volume is tutorial in nature. The second volume
is for programmers. The third volume is reference material. We've
also added a fourth volume for developers. All of these changes
represent an experiment in print-on-demand delivery of documentation.
Time will tell whether the experiment succeeded.

Axiom has been in existence for over thirty years. It is estimated to
contain about three hundred man-years of research and has, as of
September 3, 2003, 143 people listed in the credits. All of these
people have contributed directly or indirectly to making Axiom
available.  Axiom is being passed to the next generation. I'm looking
forward to future milestones.

With that in mind I've introduced the theme of the ``30 year horizon''.
We must invent the tools that support the Computational Mathematician
working 30 years from now. How will research be done when every bit of
mathematical knowledge is online and instantly available? What happens
when we scale Axiom by a factor of 100, giving us 1.1 million domains?
How can we integrate theory with code? How will we integrate theorems
and proofs of the mathematics with space-time complexity proofs and
running code? What visualization tools are needed? How do we support
the conceptual structures and semantics of mathematics in effective
ways? How do we support results from the sciences? How do we teach
the next generation to be effective Computational Mathematicians?

The ``30 year horizon'' is much nearer than it appears.

\vskip .25in
%\noindent
Tim Daly\\
CAISS, City College of New York\\
November 10, 2003 ((iHy))
\vfill
\eject
\pagenumbering{arabic}
\setcounter{chapter}{0} % Chapter 1
\chapter{Credits}
Axiom has a very long history and many people have contributed to the
effort, some in large ways and some in small ways. Any and all effort
deserves recognition. There is no other criteria than contribution
of effort. We would like to acknowledge and thank the following people:
\defvar{credits}
<<initvars>>=
(defvar credits '(
"An alphabetical listing of contributors to AXIOM:"
"Cyril Alberga          Roy Adler              Christian Aistleitner"
"Richard Anderson       George Andrews         S.J. Atkins"
"Henry Baker            Stephen Balzac         Yurij Baransky"
"David R. Barton        Gerald Baumgartner     Gilbert Baumslag"
"Michael Becker         Nelson H. F. Beebe     Jay Belanger"
"David Bindel           Fred Blair             Vladimir Bondarenko"
"Mark Botch             Alexandre Bouyer       Peter A. Broadbery"
"Martin Brock           Manuel Bronstein       Stephen Buchwald"
"Florian Bundschuh      Luanne Burns           William Burge"
"Quentin Carpent        Robert Caviness        Bruce Char"
"Ondrej Certik          Cheekai Chin           David V. Chudnovsky"
"Gregory V. Chudnovsky  Josh Cohen             Christophe Conil"
"Don Coppersmith        George Corliss         Robert Corless"
"Gary Cornell           Meino Cramer           Claire Di Crescenzo"
"David Cyganski"
"Nathaniel Daly         Timothy Daly Sr.       Timothy Daly Jr."
"James H. Davenport     Didier Deshommes       Michael Dewar"
"Jean Della Dora        Gabriel Dos Reis       Claire DiCrescendo"
"Sam Dooley             Lionel Ducos           Lee Duhem"
"Martin Dunstan         Brian Dupee            Dominique Duval"
"Robert Edwards         Heow Eide-Goodman      Lars Erickson"
"Richard Fateman        Bertfried Fauser       Stuart Feldman"
"John Fletcher          Brian Ford             Albrecht Fortenbacher"
"George Frances         Constantine Frangos    Timothy Freeman"
"Korrinn Fu"
"Marc Gaetano           Rudiger Gebauer        Kathy Gerber"
"Patricia Gianni        Samantha Goldrich      Holger Gollan"
"Teresa Gomez-Diaz      Laureano Gonzalez-Vega Stephen Gortler"
"Johannes Grabmeier     Matt Grayson           Klaus Ebbe Grue"
"James Griesmer         Vladimir Grinberg      Oswald Gschnitzer"
"Jocelyn Guidry"
"Steve Hague            Satoshi Hamaguchi      Mike Hansen"
"Richard Harke          Bill Hart              Vilya Harvey"
"Martin Hassner         Arthur S. Hathaway     Dan Hatton"
"Waldek Hebisch         Karl Hegbloom          Ralf Hemmecke"
"Henderson              Antoine Hersen         Gernot Hueber"
"Pietro Iglio"
"Alejandro Jakubi       Richard Jenks"
"Kai Kaminski           Grant Keady            Tony Kennedy"
"Ted Kosan              Paul Kosinski          Klaus Kusche"
"Bernhard Kutzler"
"Tim Lahey              Larry Lambe            Franz Lehner"
"Frederic Lehobey       Michel Levaud          Howard Levy"
"Liu Xiaojun            Rudiger Loos           Michael Lucks"
"Richard Luczak"
"Camm Maguire           Francois Maltey        Alasdair McAndrew"
"Bob McElrath           Michael McGettrick     Ian Meikle"
"David Mentre           Victor S. Miller       Gerard Milmeister"
"Mohammed Mobarak       H. Michael Moeller     Michael Monagan"
"Marc Moreno-Maza       Scott Morrison         Joel Moses"
"Mark Murray"
"William Naylor         C. Andrew Neff         John Nelder"
"Godfrey Nolan          Arthur Norman          Jinzhong Niu"
"Michael O'Connor       Summat Oemrawsingh     Kostas Oikonomou"
"Humberto Ortiz-Zuazaga"  
"Julian A. Padget       Bill Page              Susan Pelzel"
"Michel Petitot         Didier Pinchon         Ayal Pinkus"
"Jose Alfredo Portes"
"Claude Quitte"
"Arthur C. Ralfs        Norman Ramsey          Anatoly Raportirenko"
"Michael Richardson     Renaud Rioboo          Jean Rivlin"
"Nicolas Robidoux       Simon Robinson         Raymond Rogers"
"Michael Rothstein      Martin Rubey"
"Philip Santas          Alfred Scheerhorn      William Schelter"
"Gerhard Schneider      Martin Schoenert       Marshall Schor"
"Frithjof Schulze       Fritz Schwarz          Steven Segletes"
"Nick Simicich          William Sit            Elena Smirnova"
"Jonathan Steinbach     Fabio Stumbo           Christine Sundaresan"
"Robert Sutor           Moss E. Sweedler       Eugene Surowitz"
"Max Tegmark            James Thatcher         Balbir Thomas"
"Mike Thomas            Dylan Thurston         Steve Toleque"
"Barry Trager           Themos T. Tsikas"
"Gregory Vanuxem"
"Bernhard Wall          Stephen Watt           Jaap Weel"
"Juergen Weiss          M. Weller              Mark Wegman"
"James Wen              Thorsten Werther       Michael Wester"
"John M. Wiley          Berhard Will           Clifton J. Williamson"
"Stephen Wilson         Shmuel Winograd        Robert Wisbauer"
"Sandra Wityak          Waldemar Wiwianka      Knut Wolf"
"Clifford Yapp          David Yun"
"Vadim Zhytnikov        Richard Zippel         Evelyn Zoernack"
"Bruno Zuercher         Dan Zwillinger"
))

@

\chapter{The Interpreter}
The Axiom interpreter is a large common lisp program. 
It has several forms of interaction and run from
terminal in a standalone fashion, run under the control of a
session handler program, run as a web server, or run in a unix
pipe. 
\chapter{The Fundamental Data Structures}
Axiom currently depends on a lot of global variables. These are generally
listed here along with explanations.

\section{The global variables}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{current-directory}

The \verb|$current-directory| variable is set to the current directory 
at startup. This is used by the \verb|)cd| function and some of the 
compile routines. This is the result of the \refto{get-current-directory}
function. This variable is used to set \verb|*default-pathname-defaults*|.
The \refto{reroot} function resets it to \verb|$spadroot|.

An example of a runtime value is:
\begin{verbatim}
$current-directory = "/research/test/"
\end{verbatim}

<<initvars>>=
(defvar $current-directory nil)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{defaultMsgDatabaseName}

The \verb|$defaultMsgDatabaseName| variable contains the location of the
international message database. This can be changed to use a translated
version of the messages. It defaults to the United States English version.
The relative pathname used as the default is hardcoded in the 
\refto{reroot} function.
This value is prefixed with the \verb|$spadroot| to make the path absolute.

In general, all Axiom message text should be stored in this file to 
enable internationalization of messages.

An example of a runtime value is:
\begin{verbatim}
|$defaultMsgDatabaseName| =
  #p"/research/test/mnt/ubuntu/doc/msgs/s2-us.msgs"
\end{verbatim}

<<initvars>>=
(defvar |$defaultMsgDatabaseName| nil)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{directory-list}

The \verb|$directory-list| is a runtime list of absolute pathnames.
This list is generated by the \refto{reroot} function from the list of
relative paths held in the variable
\verb|$relative-directory-list|. Each entry will be prefixed by
\verb|$spadroot|.

An example of a runtime value is:
\begin{verbatim}
$directory-list =
  ("/research/test/mnt/ubuntu/../../src/input/" 
   "/research/test/mnt/ubuntu/doc/msgs/" 
   "/research/test/mnt/ubuntu/../../src/algebra/" 
   "/research/test/mnt/ubuntu/../../src/interp/" 
   "/research/test/mnt/ubuntu/doc/spadhelp/")
\end{verbatim}

<<initvars>>=
(defvar $directory-list nil)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{InitialModemapFrame}

The \verb|$InitialModemapFrame| is used as the initial value.

See the function \fnref{makeInitialModemapFrame}.

An example of a runtime value is:
\begin{verbatim}
$InitialModemapFrame = '((nil))
\end{verbatim}

<<initvars>>=
(defvar |$InitialModemapFrame| '((nil)))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{library-directory-list}

The \verb|$library-directory-list| variable is the system-wide search
path for library files.  It is set up in the \refto{reroot} function by
prepending the \verb|$spadroot| variable to the 
\verb|$relative-library-directory-list| variable.

An example of a runtime value is:
\begin{verbatim}
$library-directory-list =  ("/research/test/mnt/ubuntu/algebra/")
\end{verbatim}

<<initvars>>=
(defvar $library-directory-list '("/algebra/"))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{msgDatabaseName}

The \verb|$msgDatabaseName| is a locally shared variable among the
message database routines.

An example of a runtime value is:
\begin{verbatim}
|$msgDatabaseName| = nil
\end{verbatim}

<<initvars>>=
(defvar |$msgDatabaseName| nil)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{openServerIfTrue}

The \verb|$openServerIfTrue| It appears to control whether the interpreter
will be used as an open server, probably for OpenMath use.

If an open server is not requested then this variable to NIL

See the function \fnref{openserver}.

An example of a runtime value is:
\begin{verbatim}
$openServerIfTrue = nil
\end{verbatim}

<<initvars>>=
(defvar $openServerIfTrue nil)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{relative-directory-list}

The \verb|$relative-directory-list| variable contains a hand-generated
list of directories used in the Axiom system.  The relative directory
list specifies a search path for files for the current directory
structure. It has been changed from the NAG distribution back to the
original form.

This list is used by the \refto{reroot} function to generate the absolute list
of paths held in the variable \verb|$directory-list|. Each entry will be
prefixed by \verb|$spadroot|.

An example of a runtime value is:
\begin{verbatim}
$relative-directory-list =
  ("/../../src/input/" 
   "/doc/msgs/" 
   "/../../src/algebra/" 
   "/../../src/interp/" 
   "/doc/spadhelp/")
\end{verbatim}

<<initvars>>=
(defvar $relative-directory-list
  '("/../../src/input/"
    "/doc/msgs/"
    "/../../src/algebra/"
    "/../../src/interp/"  ; for lisp  files (helps fd)
    "/doc/spadhelp/" ))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{relative-library-directory-list}

The \verb|$relative-library-directory-list| is a hand-generated list of 
directories containing algebra. The \refto{reroot} function will prefix every
path in this list with the value of the \verb|$spadroot| variable
to construct the \verb|$library-directory-list| variable.

An example of a runtime value is:
\begin{verbatim}
$relative-library-directory-list = ("/algebra/")
\end{verbatim}

<<initvars>>=
(defvar $relative-library-directory-list '("/algebra/"))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{spadroot}

The \verb|$spadroot| variable is the internal name for the AXIOM shell
variable.  It is set in reroot to the value of the argument. The value
is expected to be a directory name.  The \refto{initroot} function
uses this variable if the AXIOM shell variable is not set.  The
\refto{make-absolute-filename} function uses this path as a prefix to all of
the relative filenames to make them absolute.

An example of a runtime value is:
\begin{verbatim}
$spadroot = "/research/test/mnt/ubuntu"
\end{verbatim}

<<initvars>>=
(defvar $spadroot nil)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{SpadServer}

The \verb|$SpadServer| determines whether Axiom acts as a remote server.

See the function \fnref{openserver}.

An example of a runtime value is:
\begin{verbatim}
$SpadServer = nil
\end{verbatim}

<<initvars>>=
(defvar $SpadServer nil "t means Axiom acts as a remote server")

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defdollar{SpadServerName}

The \verb|$SpadServerName| defines the name of the spad server socket.
In unix these exist in the tmp directory as names.

See the function \fnref{openserver}.

An example of a runtime value is:
\begin{verbatim}
$SpadServerName = "/tmp/.d"
\end{verbatim}

<<initvars>>=
(defvar $SpadServerName "/tmp/.d" "the name of the spad server socket")

@

\chapter{Starting Axiom}
Axiom starts by invoking a function value of the lisp symbol
\verb|*top-level-hook*|. The function invocation path to from this
point until the prompt is approximates (skipping initializations):
\begin{verbatim}
  lisp -> restart
       -> |spad|
       -> |runspad|
       -> |ncTopLevel|
       -> |ncIntLoop|
       -> |intloop|
       -> |SpadInterpretStream|
       -> |intloopReadConsole|
\end{verbatim}
The |intloopReadConsole| function does tail-recursive calls to
itself (don't break this) and never exits.
\section{Variables Used}
\section{Data Structures}
\section{Functions}
\defunsec{set-restart-hook}{Set the restart hook}
When a lisp image containing code is reloaded there is a hook to
allow a function to be called. In our case it is the restart
function which is the entry to the Axiom interpreter.
<<defun set-restart-hook>>=
(defun set-restart-hook ()
  "Set the restart hook"
  #+KCL (setq system::*top-level-hook* 'restart)
  #+Lucid (setq boot::restart-hook 'restart)
  'restart
 )

@
\pagehead{restart function}{The restart function}
\pagepic{ps/v5restart.ps}{Restart}{1.00}
The restart function is the real root of the world. It sets up memory
if we are working in a GCL/akcl version of the system. 

The \verb|compiler::*compile-verbose*| flag has been set to nil globally.
We do not want to know about the microsteps of GCL's compile facility.

The \verb|compiler::*suppress-compiler-warnings*| flag has been set to t.
We do not care that certain generated variables are not used.

The \verb|compiler::*suppress-compiler-notes*| flag has been set to t.
We do not care that tail recursion occurs.

It sets the
current package to be the ``BOOT'' package which is the standard
package in which the interpreter runs. 

The \fnref{initroot} function sets global variables that depend on the
AXIOM shell variable. These are needed to find basic files like s2-us.msgs,
which contains the error message text.

The \fnref{openserver} function tried to set up the socket connection
used for things like hyperdoc. The \verb|$openServerIfTrue| variable
starts true, which implies trying to start a server.

The \verb|$IOindex| variable is the number associated with the input prompt.
Every successful expression evaluated increments this number until a
\verb|)clear all| resets it. Here we set it to the initial value.

Axiom has multiple frames that contain independent information about a
computation. There can be several frames at any one time and you can 
shift back and forth between the frames. By default, the system starts
in ``frame0'' (try the \verb|)frame names| command). See the Frame
Mechanism chapter (\ref{TheFrameMechanism} page~\pageref{TheFrameMechanism}).

The \verb|$InteractiveFrame| variable contains the state information
related to the current frame, which includes things like the last value,
the value of all of the variables, etc.

The \varref{printLoadMsgs} variable controls whether load messages will
be output as library routines are loaded. We disnable this by default.
It can be changed by using \verb|)set message autoload|.

The \varref{current-directory} variable is set to the current directory.
This is used by the \verb|)cd| function and some of the compile routines.

The \fnref{statisticsInitialization} function initializes variables
used to collect statistics. Currently, only the garbage collector
information is initialized.


\calls{restart}{init-memory-config}
\calls{restart}{initroot}
\calls{restart}{openserver}
\calls{restart}{makeInitialModemapFrame}
\calls{restart}{get-current-directory}
\calls{restart}{statisticsInitialization}
\calls{restart}{initHist}
\calls{restart}{initializeInterpreterFrameRing}
\calls{restart}{spadStartUpMsgs}
\calls{restart}{restart0}
\calls{restart}{readSpadProfileIfThere}
\calls{restart}{spad}
\usesdollar{restart}{openServerIfTrue}
\usesdollar{restart}{SpadServername}
\usesdollar{restart}{SpadServer}
\usesdollar{restart}{IOindex}
\usesdollar{restart}{InteractiveFrame}
\usesdollar{restart}{printLoadMsgs}
\usesdollar{restart}{current-directory}
\usesdollar{restart}{displayStartMsgs}
\usesdollar{restart}{currentLine}
<<defun restart>>=
(defun restart ()
  (declare (special $openServerIfTrue $SpadServerName |$SpadServer|
    |$IOindex| |$InteractiveFrame| |$printLoadMsgs| $current-directory
    |$displayStartMsgs| |$currentLine|))
#+:akcl
  (init-memory-config :cons 500 :fixnum 200 :symbol 500 :package 8
    :array 400 :string 500 :cfun 100 :cpages 3000 :rpages 1000 :hole 2000)
#+:akcl (setq compiler::*compile-verbose* nil)
#+:akcl (setq compiler::*suppress-compiler-warnings* t)
#+:akcl (setq compiler::*suppress-compiler-notes* t)
  (in-package "BOOT")
  (initroot)
#+:akcl
  (when (and $openServerIfTrue (zerop (openserver $SpadServerName)))
    (setq $openServerIfTrue nil) 
    (setq |$SpadServer| t))
  (setq |$IOindex| 1)
  (setq |$InteractiveFrame| (|makeInitialModemapFrame|))
  (setq |$printLoadMsgs| nil)
  (setq $current-directory (get-current-directory))
  (setq *default-pathname-defaults* (pathname $current-directory))
  (|statisticsInitialization|)
  (|initHist|)
  (|initializeInterpreterFrameRing|)
  (when |$displayStartMsgs| (|spadStartUpMsgs|))
  (setq |$currentLine| nil)
  (restart0)
  (|readSpadProfileIfThere|)
  (|spad|))

@

\defun{restart0}{Non-interactive restarts}
\calls{restart0}{compressopen}
\calls{restart0}{interpopen}
\calls{restart0}{operationopen}
\calls{restart0}{categoryopen}
\calls{restart0}{browseopen}
\calls{restart0}{getEnv}
<<defun restart0>>=
(defun restart0 ()
  (compressopen)    ;; set up the compression tables
  (interpopen)      ;; open up the interpreter database
  (operationopen)   ;; all of the operations known to the system
  (categoryopen)    ;; answer hasCategory question
  (browseopen))

@

\defun{spadStartUpMsgs}{The startup banner messages}
\calls{spadStartUpMsgs}{fillerSpaces}
\calls{spadStartUpMsgs}{specialChar}
\calls{spadStartUpMsgs}{sayKeyedMsg}
\calls{spadStartUpMsgs}{sayMSG}
\usesdollar{spadStartUpMsgs}{msgAlist}
\usesdollar{spadStartUpMsgs}{opSysName}
\usesdollar{spadStartUpMsgs}{linelength}
\uses{spadStartUpMsgs}{*yearweek*}
\uses{spadStartUpMsgs}{*build-version*}
<<defun spadStartUpMsgs>>=
(defun |spadStartUpMsgs| ()
 (let (bar)
 (declare (special |$msgAlist| |$opSysName| $linelength *yearweek*
                    *build-version*))
  (when (> $linelength 60)
   (setq bar (|fillerSpaces| $linelength (|specialChar| '|hbar|)))
   (|sayKeyedMsg| 'S2GL0001 (list *build-version* *yearweek*))
   (|sayMSG| bar)
   (|sayKeyedMsg| 'S2GL0018C nil)
   (|sayKeyedMsg| 'S2GL0018D nil)
   (|sayKeyedMsg| 'S2GL0003B (list |$opSysName|))
   (say "   Visit http://axiom-developer.org for more information")
   (|sayMSG| bar)
   (setq |$msgAlist| nil)
   (|sayMSG| '| |))))

@

\defun{fillerSpaces}{Make a vector of filler characters}
\calls{fillerSpaces}{ifcar}
<<defun fillerSpaces>>=
(defun |fillerSpaces| (&rest arglist &aux charPart n)
 (dsetq (n . charPart) arglist)
 (if (<= n 0) 
  ""
  (make-string n :initial-element (character (or (ifcar charPart) " ")))))

@

\defunsec{spad}{Starts the interpreter but do not read in profiles}
\calls{spad}{setOutputAlgebra}
\calls{spad}{runspad}
\usesdollar{spad}{PrintCompilerMessageIfTrue}
<<defun spad>>=
(defun |spad| () 
 "Starts the interpreter but do not read in profiles"
 (let (|$PrintCompilerMessageIfTrue|) 
  (declare (special |$PrintCompilerMessageIfTrue|)) 
  (setq |$PrintCompilerMessageIfTrue| nil) 
  (|setOutputAlgebra| '|%initialize%|) 
  (|runspad|) 
  '|EndOfSpad|))

@
\defdollar{quitTag}
<<initvars>>=
(defvar |$quitTag| system::*quit-tag*)

@
\defun{runspad}{runspad}
\catches{runspad}{quitTag}
\catches{runspad}{coerceFailure}
\catches{runspad}{top-level}
\calls{runspad}{seq}
\calls{runspad}{exit}
\calls{runspad}{resetStackLimits}
\calls{runspad}{ncTopLevel}
\usesdollar{runspad}{quitTag}
<<defun runspad>>=
(defun |runspad| () 
 (prog (mode) 
 (declare (special |$quitTag|))
  (return 
   (seq 
    (progn 
     (setq mode '|restart|) 
     (do () 
         ((null (eq mode '|restart|)) nil)
      (seq 
       (exit 
        (progn 
         (|resetStackLimits|) 
         (catch |$quitTag| 
          (catch '|coerceFailure| 
           (setq mode (catch '|top_level| (|ncTopLevel|))))))))))))))

@
\defun{resetStackLimits}{Reset the stack limits}
\calls{resetStackLimits}{reset-stack-limits}
<<defun resetStackLimits>>=
(defun |resetStackLimits| () 
 "Reset the stack limits"
 (system:reset-stack-limits))

@
\chapter{Handling Terminal Input}
\section{Streams}
\defvar{curinstream}
The curinstream variable is set to the value of the 
\verb|*standard-input*| common lisp
variable in ncIntLoop. While not using the
``dollar'' convention this variable is still ``global''.
<<initvars>>=
(defvar curinstream (make-synonym-stream '*standard-input*))

@
\defvar{curoutstream}
The curoutstream variable is set to the value of the 
\verb|*standard-output*| common lisp variable in ncIntLoop.
While not using the ``dollar'' convention this variable is still ``global''.
<<initvars>>=
(defvar curoutstream (make-synonym-stream '*standard-output*))

@
\defvar{errorinstream}
<<initvars>>=
(defvar errorinstream (make-synonym-stream '*terminal-io*))

@
\defvar{erroroutstream}
<<initvars>>=
(defvar erroroutstream (make-synonym-stream '*terminal-io*))

@
\defvar{*eof*}
<<initvars>>=
(defvar *eof* nil)

@
\defvar{*whitespace*}
<<initvars>>=
(defvar *whitespace*
 '(#\Space #\Newline #\Tab #\Page #\Linefeed #\Return #\Backspace)
 "A list of characters used by string-trim considered as whitespace")

@

\defdollar{InteractiveMode}
<<initvars>>=
(defvar |$InteractiveMode| t)

@

\defdollar{boot}
<<initvars>>=
(defvar $boot nil)

@

\defunsec{ncTopLevel}{Top-level read-parse-eval-print loop}
Top-level read-parse-eval-print loop for the interpreter.  Uses
the Bill Burge's parser.
\calls{ncTopLevel}{ncIntLoop}
\usesdollar{ncTopLevel}{e}
\usesdollar{ncTopLevel}{spad}
\usesdollar{ncTopLevel}{newspad}
\usesdollar{ncTopLevel}{boot}
\usesdollar{ncTopLevel}{InteractiveMode}
\usesdollar{ncTopLevel}{InteractiveFrame}
\uses{ncTopLevel}{*eof*}
\uses{ncTopLevel}{in-stream}
<<defun ncTopLevel>>=
(defun |ncTopLevel| ()
 "Top-level read-parse-eval-print loop"
 (let (|$e| $spad $newspad $boot |$InteractiveMode| *eof* in-stream) 
  (declare (special |$e| $spad $newspad $boot |$InteractiveMode| *eof*
             in-stream |$InteractiveFrame|)) 
   (setq in-stream curinstream) 
   (setq *eof* nil) 
   (setq |$InteractiveMode| t) 
   (setq $boot nil) 
   (setq $newspad t) 
   (setq $spad t) 
   (setq |$e| |$InteractiveFrame|) 
   (|ncIntLoop|)))

@
\defun{ncIntLoop}{ncIntLoop}
\calls{ncIntLoop}{intloop}
\uses{ncIntLoop}{curinstream}
\uses{ncIntLoop}{curoutstream}
<<defun ncIntLoop>>=
(defun |ncIntLoop| ()
  (let ((curinstream *standard-output*)
	(curoutstream *standard-input*))
    (declare (special curinstream curoutstream))
    (|intloop|)))

@

\defdollar{intTopLevel}
<<initvars>>=
(defvar |$intTopLevel| '|top_level|)

@

\defdollar{intRestart}
<<initvars>>=
(defvar |$intRestart| '|restart|)

@

\defun{intloop}{intloop}
Note that the SpadInterpretStream function uses a list of 
three strings as an argument. The values in the list seem to have
no use and can eventually be removed. 
\catches{intloop}{intTopLevel}
\calls{intloop}{SpadInterpretStream}
\calls{intloop}{resetStackLimits}
\usesdollar{intloop}{intTopLevel}
\usesdollar{intloop}{intRestart}
<<defun intloop>>=
(defun |intloop| () 
 (prog (mode) 
  (declare (special |$intTopLevel| |$intRestart|)) 
   (return 
    (progn 
     (setq mode |$intRestart|) 
     ((lambda () 
       (loop 
        (cond 
         ((not (equal mode |$intRestart|))
           (return nil))
         (t
           (progn 
             (|resetStackLimits|) 
             (setq mode 
               (catch |$intTopLevel| 
                 (|SpadInterpretStream| 1 
                   (list 'tim  'daly '?) t)))))))))))))

@
\defun{SpadInterpretStream}{SpadInterpretStream}
The SpadInterpretStream function takes three arguments
\begin{list}{}
\item str This is passed as an argument to intloopReadConsole
\item source This is the name of a source file but appears not
to be used. It is set to the list \verb|(tim daly ?)|.
\item \verb|interactive?| If this is false then various messages are 
suppressed and input does not use piles. If this is true then the
library loading routines might output messages and piles are expected
on input (as from a file).
\end{list}
The system commands are handled by the function kept in the ``hook''
variable \verb|$systemCommandFunction| which
has the default function \verb|InterpExecuteSpadSystemCommand|.
Thus, when a system command is entered this function is called.

The \verb|$promptMsg| variable is set to the constant S2CTP023. This 
constant points to a message in src/doc/msgs/s2-us.msgs. This message
does nothing but print the argument value.
\defdollar{promptMsg}
<<initvars>>=
(defvar |$promptMsg| 'S2CTP023)

@

\defdollar{newcompMode}
<<initvars>>=
(defvar |$newcompMode| nil)

@

\calls{SpadInterpretStream}{mkprompt}
\calls{SpadInterpretStream}{intloopReadConsole}
\calls{SpadInterpretStream}{intloopInclude}
\usesdollar{SpadInterpretStream}{promptMsg}
\usesdollar{SpadInterpretStream}{systemCommandFunction}
\usesdollar{SpadInterpretStream}{ncMsgList}
\usesdollar{SpadInterpretStream}{erMsgToss}
\usesdollar{SpadInterpretStream}{lastPos}
\usesdollar{SpadInterpretStream}{inclAssertions}
\usesdollar{SpadInterpretStream}{okToExecuteMachineCode}
\usesdollar{SpadInterpretStream}{newcompErrorCount}
\usesdollar{SpadInterpretStream}{newcompMode}
\usesdollar{SpadInterpretStream}{libQuiet}
\usesdollar{SpadInterpretStream}{fn}
\usesdollar{SpadInterpretStream}{nopos}
<<defun SpadInterpretStream>>=
(defun |SpadInterpretStream| (str source interactive?) 
 (let (|$promptMsg| |$systemCommandFunction| 
       |$ncMsgList| |$erMsgToss| |$lastPos| |$inclAssertions| 
       |$okToExecuteMachineCode| |$newcompErrorCount| |$newcompMode| 
       |$libQuiet| |$fn|)
  (declare (special |$promptMsg| 
            |$systemCommandFunction| |$ncMsgList| |$erMsgToss| |$lastPos| 
            |$inclAssertions| |$okToExecuteMachineCode| |$newcompErrorCount| 
            |$newcompMode| |$libQuiet| |$fn| |$nopos|))
  (setq |$fn| source) 
  (setq |$libQuiet| (null interactive?)) 
  (setq |$newcompMode| nil) 
  (setq |$newcompErrorCount| 0) 
  (setq |$okToExecuteMachineCode| t) 
  (setq |$inclAssertions| (list 'aix '|CommonLisp|)) 
  (setq |$lastPos| |$nopos|) 
  (setq |$erMsgToss| nil) 
  (setq |$ncMsgList| nil) 
  (setq |$systemCommandFunction| #'|InterpExecuteSpadSystemCommand|) 
  (setq |$promptMsg| 's2ctp023) 
  (if interactive? 
   (progn 
     (princ (mkprompt)) 
     (|intloopReadConsole| "" str))
   (|intloopInclude| source 0))))

@

\section{The Read-Eval-Print Loop}
\defun{intloopReadConsole}{intloopReadConsole}
Note that this function relies on the fact that lisp can do tail-recursion.
The function recursively invokes itself.

The serverReadLine function is a special readline function that handles
communication with the session manager code, which is a separate process
running in parallel. 

We read a line from standard input.
\begin{itemize}
\item If it is a null line then we exit Axiom.
\item If it is a zero length line we prompt and recurse
\item If \$dalymode and open-paren we execute lisp code, prompt and recurse
The \$dalymode will interpret any input that begins with an open-paren
as a lisp expression rather than Axiom input. This is useful for debugging
purposes when most of the input lines will be lisp. Setting \$dalymode
non-nil will certainly break user expectations and is to be used with 
caution.
\item If it is ``)fi'' or ``)fin'' we drop into lisp. Use the (restart)
      function to return to the interpreter loop.
\item If it starts with ``)'' we process the command, prompt, and recurse
\item If it is a command then we remember the current line, process the
      command, prompt, and recurse.
\item If the input has a trailing underscore (Axiom line-continuation)
      then we cut off the continuation character and pass the truncated
      string to ourselves, prompt, and recurse
\item otherwise we process the input, prompt, and recurse.
\end{itemize}
Notice that all but two paths (a null input or a ``)fi'' or a ``)fin'')
will end up as a recursive call to ourselves.
\throws{intloopReadConsole}{top-level}
\calls{intloopReadConsole}{serverReadLine}
\calls{intloopReadConsole}{leaveScratchpad}
\calls{intloopReadConsole}{mkprompt}
\calls{intloopReadConsole}{intloopReadConsole}
\calls{intloopReadConsole}{intloopPrefix?}
\calls{intloopReadConsole}{intnplisp}
\calls{intloopReadConsole}{setCurrentLine}
\calls{intloopReadConsole}{ncloopCommand}
\calls{intloopReadConsole}{concat}
\calls{intloopReadConsole}{ncloopEscaped}
\calls{intloopReadConsole}{intloopProcessString}
\usesdollar{intloopReadConsole}{dalymode}
<<defun intloopReadConsole>>=
(defun |intloopReadConsole| (b n) 
 (declare (special $dalymode)) 
 (let (c d pfx input) 
   (setq input (|serverReadLine| *standard-input*)) 
   (when (null (stringp input)) (|leaveScratchpad|)) 
   (when (eql (length input) 0) 
     (princ (mkprompt)) 
     (|intloopReadConsole| "" n))
   (when (and $dalymode (|intloopPrefix?| "(" input))
     (|intnplisp| input) 
     (princ (mkprompt)) 
     (|intloopReadConsole| "" n))
   (setq pfx (|intloopPrefix?| ")fi" input))
   (when (and pfx (or (string= pfx ")fi") (string= pfx ")fin")))
     (throw '|top_level| nil))
   (when (and (equal b "") (setq d (|intloopPrefix?| ")" input)))
     (|setCurrentLine| d) 
     (setq c (|ncloopCommand| d n)) 
     (princ (mkprompt)) 
     (|intloopReadConsole| "" c))
   (setq input (concat b input)) 
   (when (|ncloopEscaped| input) 
     (|intloopReadConsole| (subseq input 0 (- (length input) 1)) n))
   (setq c (|intloopProcessString| input n)) 
   (princ (mkprompt)) 
   (|intloopReadConsole| "" c)))

@
\section{Helper Functions}
\defunsec{getenviron}{Get the value of an evironment variable}
\calls{getenviron}{getenv}
<<defun getenviron>>=
(defun getenviron (var)
 "Get the value of an evironment variable"
 #+allegro (sys::getenv (string var))
 #+clisp (ext:getenv (string var))
 #+(or cmu scl)
  (cdr 
   (assoc (string var) ext:*environment-list* :test #'equalp :key #'string))
 #+(or kcl akcl gcl) (si::getenv (string var))
 #+lispworks (lw:environment-variable (string var))
 #+lucid (lcl:environment-variable (string var))
 #+mcl (ccl::getenv var)
 #+sbcl (sb-ext:posix-getenv var)
 )
@

\defdollar{intCoerceFailure}
<<initvars>>=
(defvar |$intCoerceFailure| '|coerceFailure|)

@

\defdollar{intSpadReader}
<<initvars>>=
(defvar |$intSpadReader| 'SPAD_READER)

@
\defun{InterpExecuteSpadSystemCommand}{InterpExecuteSpadSystemCommand}
\catches{InterpExecuteSpadSystemCommand}{intCoerceFailure}
\catches{InterpExecuteSpadSystemCommand}{intSpadReader}
\calls{InterpExecuteSpadSystemCommand}{ExecuteInterpSystemCommand}
\usesdollar{InterpExecuteSpadSystemCommand}{intSpadReader}
\usesdollar{InterpExecuteSpadSystemCommand}{intCoerceFailure}
<<defun InterpExecuteSpadSystemCommand>>=
(defun |InterpExecuteSpadSystemCommand| (string)
 (declare (special |$intSpadReader| |$intCoerceFailure|))
  (catch |$intCoerceFailure|
   (catch |$intSpadReader|
    (|ExecuteInterpSystemCommand| string))))

@

\defun{ExecuteInterpSystemCommand}{ExecuteInterpSystemCommand}
\calls{ExecuteInterpSystemCommand}{intProcessSynonyms}
\calls{ExecuteInterpSystemCommand}{substring}
\calls{ExecuteInterpSystemCommand}{doSystemCommand}
\usesdollar{ExecuteInterpSystemCommand}{currentLine}
<<defun ExecuteInterpSystemCommand>>=
(defun |ExecuteInterpSystemCommand| (string)
 (let (|$currentLine|)
 (declare (special |$currentLine|))
  (setq string (|intProcessSynonyms| string))
  (setq |$currentLine| string)
  (setq string (substring string 1 nil))
  (unless (equal string "") (|doSystemCommand| string))))

@

\defun{intProcessSynonyms}{Handle Synonyms}
\calls{intProcessSynonyms}{processSynonyms}
\uses{intProcessSynonyms}{line}
<<defun intProcessSynonyms>>=
(defun |intProcessSynonyms| (str)
 (let ((line str))
 (declare (special line))
  (|processSynonyms|)
  line))

@

\defun{processSynonyms}{Synonym File Reader}
\calls{processSynonyms}{strpos}
\calls{processSynonyms}{substring}
\calls{processSynonyms}{string2id-n}
\calls{processSynonyms}{lassoc}
\calls{processSynonyms}{nequal}
\calls{processSynonyms}{strconc}
\calls{processSynonyms}{size}
\calls{processSynonyms}{concat}
\calls{processSynonyms}{rplacstr}
\calls{processSynonyms}{processSynonyms}
\usesdollar{processSynonyms}{CommandSynonymAlist}
\uses{processSynonyms}{line}
<<defun processSynonyms>>=
(defun |processSynonyms| ()
 (let (fill p aline synstr syn to opt fun cl chr)
 (declare (special |$CommandSynonymAlist| line))
  (setq p (strpos ")" line 0 nil))
  (setq fill "")
  (cond
   (p
    (setq aline (substring line p nil))
    (when (> p 0) (setq fill (substring line 0 p))))
   (t
    (setq p 0)
    (setq aline line)))
  (setq to (strpos " " aline 1 nil))
  (cond (to (setq to (1- to))))
  (setq synstr (substring aline 1 to))
  (setq syn (string2id-n synstr 1))
  (when  (setq fun (lassoc syn |$CommandSynonymAlist|))
   (setq to (strpos ")" fun 1 nil))
   (cond
    ((and to (nequal to (1- (size fun))))
     (setq opt (strconc " " (substring fun to nil)))
     (setq fun (substring fun 0 (1- to ))))
    (t (setq opt " ")))
   (when (> (size synstr) (size fun))
    (do ((G167173 (size synstr)) (i (size fun) (1+ i)))
        ((> i G167173) nil)
     (setq fun (concat fun " "))))
   (setq cl (strconc fill (rplacstr aline 1 (size synstr) fun) opt))
   (setq line cl)
   (setq chr (elt line (1+ p)))
   (|processSynonyms|))))

@

\defun{init-memory-config}{init-memory-config}
Austin-Kyoto Common Lisp (AKCL), now known as Gnu Common Lisp (GCL)
requires some changes to the default memory setup to run Axiom efficently.
This function performs those setup commands. 
\calls{init-memory-config}{allocate}
\calls{init-memory-config}{allocate-contiguous-pages}
\calls{init-memory-config}{allocate-relocatable-pages}
\calls{init-memory-config}{set-hole-size}
<<defun init-memory-config>>=
(defun init-memory-config (&key
			   (cons 500)
			   (fixnum 200)
			   (symbol 500)
			   (package 8)
			   (array 400)
			   (string 500)
			   (cfun 100)
			   (cpages 3000)
			   (rpages 1000)
			   (hole 2000) )
  ;; initialize AKCL memory allocation parameters
  #+:AKCL
  (progn
    (system:allocate 'cons cons)
    (system:allocate 'fixnum fixnum)
    (system:allocate 'symbol symbol)
    (system:allocate 'package package)
    (system:allocate 'array array)
    (system:allocate 'string string)
    (system:allocate 'cfun cfun)
    (system:allocate-contiguous-pages cpages)
    (system:allocate-relocatable-pages rpages)
    (system:set-hole-size hole))
  #-:AKCL
  nil)

@

\defunsec{initroot}{Set spadroot to be the AXIOM shell variable}
Sets up the system to use the {\bf AXIOM} shell variable if we can
and default to the {\bf \$spadroot} variable (which was the value
of the {\bf AXIOM} shell variable at build time) if we can't.

\calls{initroot}{reroot}
\calls{initroot}{getenviron}
\usesdollar{initroot}{spadroot}
<<defun initroot>>=
(defun initroot (&optional (newroot (getenviron "AXIOM")))
 "Set spadroot to be the AXIOM shell variable"
  (declare (special $spadroot))
  (reroot (or newroot $spadroot (error "setenv AXIOM or (setq $spadroot)"))))

@

\defunsec{intloopPrefix?}{Does the string start with this prefix?}
If the prefix string is the same as the whole string initial characters
--R(ignoring spaces in the whole string) then we return the whole string
minus any leading spaces.
<<defun intloopPrefix?>>=
(defun |intloopPrefix?| (prefix whole)
 "Does the string start with this prefix?"
 (let ((newprefix (string-left-trim '(#\space) prefix))
       (newwhole  (string-left-trim '(#\space) whole)))
  (when (<= (length newprefix) (length newwhole))
   (when (string= newprefix newwhole :end2 (length prefix))
    newwhole))))

@

\defun{intnplisp}{Interpret a line of lisp code}
This is used to hande {\tt )lisp} top level commands
\calls{intnplisp}{nplisp}
\usesdollar{intnplisp}{currentLine}
<<defun intnplisp>>=
(defun |intnplisp| (s)
 (declare (special |$currentLine|))
 (setq |$currentLine| s)
 (|nplisp| |$currentLine|))

@

\defunsec{get-current-directory}{Get the current directory}
<<defun get-current-directory>>=
(defun get-current-directory ()
 "Get the current directory"
  (namestring (truename "")))

@ 

\defunsec{make-absolute-filename}{Prepend the absolute path to a filename}
Prefix a filename with the {\bf AXIOM} shell variable.
\usesdollar{make-absolute-filename}{spadroot}
<<defun make-absolute-filename>>=
(defun make-absolute-filename (name)
 "Prepend the absolute path to a filename"
 (declare (special $spadroot))
 (concatenate 'string $spadroot name))

@

\defunsec{makeInitialModemapFrame}{Make the initial modemap frame}
\calls{makeInitialModemapFrame}{copy}
\usesdollar{makeInitialModemapFrame}{InitialModemapFrame}
<<defun makeInitialModemapFrame>>=
(defun |makeInitialModemapFrame| ()
  "Make the initial modemap frame"
  (declare (special |$InitialModemapFrame|)) 
  (copy |$InitialModemapFrame|)) 

@

\defun{ncloopEscaped}{ncloopEscaped}
The ncloopEscaped function will return true if the last non-blank
character of a line is an underscore, the Axiom line-continuation
character. Otherwise, it returns nil.
<<defun ncloopEscaped>>=
(defun |ncloopEscaped| (x)
 (let ((l (length x)))
  (dotimes (i l)
   (when (char= (char x (- l i 1)) #\_) (return t))
   (unless (char= (char x (- l i 1)) #\space) (return nil)))))

@

\defun{intloopProcessString}{intloopProcessString}
\calls{intloopProcessString}{setCurrentLine}
\calls{intloopProcessString}{intloopProcess}
\calls{intloopProcessString}{next}
\calls{intloopProcessString}{incString}
<<defun intloopProcessString>>=
(defun |intloopProcessString| (s n)
 (|setCurrentLine| s)
 (|intloopProcess| n t
  (|next| #'|ncloopParse|
   (|next| #'|lineoftoks| (|incString| s)))))

@

\defun{ncloopParse}{ncloopParse}
\calls{ncloopParse}{ncloopDQlines}
\calls{ncloopParse}{npParse}
\calls{ncloopParse}{dqToList}
<<defun ncloopParse>>=
(defun |ncloopParse| (s)
 (let (cudr lines stream dq t1)
  (setq t1 (car s))
  (setq dq (car t1))
  (setq stream (cadr t1))
  (setq t1 (|ncloopDQlines| dq stream))
  (setq lines (car t1))
  (setq cudr (cadr t1))
  (cons (list (list lines (|npParse| (|dqToList| dq)))) (cdr s))))

@

\defun{next}{next}
\calls{next}{Delay}
\calls{next}{next1}
<<defun next>>=
(defun |next| (f s)
 (|Delay| #'|next1| (list f s)))

@

\defun{next1}{next1}
\calls{next1}{StreamNull}
\calls{next1}{incAppend}
\calls{next1}{next}
<<defun next1>>=
(defun |next1| (&rest z)
 (let (h s f)
  (setq f (car z))
  (setq s (cadr z))
  (cond
   ((|StreamNull| s) |StreamNil|)
   (t
    (setq h (apply f (list s)))
    (|incAppend| (car h) (|next| f (cdr h)))))))

@

\defun{incString}{incString}
\calls{incString}{incRenumber}
\calls{incString}{incLude}
\uses{incString}{Top}
<<defun incString>>=
(defun |incString| (s)
 (declare (special |Top|))
 (|incRenumber| (|incLude| 0 (list s) 0 (list "strings") (list |Top|))))

@

\defunsec{reclaim}{Call the garbage collector}
Call the garbage collector on various platforms.
<<defun reclaim>>=
#+abcl 
(defun reclaim () "Call the garbage collector" (ext::gc))
#+:allegro
(defun reclaim () "Call the garbage collector" (excl::gc t))
#+:CCL
(defun reclaim () "Call the garbage collector" (gc))
#+clisp
(defun reclaim () 
 "Call the garbage collector" 
 (#+lisp=cl ext::gc #-lisp=cl lisp::gc))
#+(or :cmulisp :cmu)
(defun reclaim () "Call the garbage collector" (ext:gc))
#+cormanlisp
(defun reclaim () "Call the garbage collector" (cl::gc))
#+(OR IBCL KCL GCL)
(defun reclaim () "Call the garbage collector" (si::gbc t))
#+lispworks 
(defun reclaim () "Call the garbage collector" (hcl::normal-gc))
#+Lucid
(defun reclaim () "Call the garbage collector" (lcl::gc))
#+sbcl
(defun reclaim () "Call the garbage collector" (sb-ext::gc))
@

\defun{reroot}{reroot}
The reroot function is used to reset the important variables used by
the system. In particular, these variables are sensitive to the
{\bf AXIOM} shell variable. That variable is renamed internally to
be {\bf \$spadroot}. The {\bf reroot} function will change the
system to use a new root directory and will have the same effect
as changing the {\bf AXIOM} shell variable and rerunning the system
from scratch. Note that we have changed from the
NAG distribution back to the original form. If you need the NAG
version you can push {\bf :tpd} on the {\bf *features*} variable
before compiling this file. A correct call looks like:
\begin{verbatim}
  (in-package "BOOT")
  (reroot "/spad/mnt/${SYS}")
\end{verbatim}
where the \verb|${SYS}| variable is the same one set at build time.

For the example call:
\begin{verbatim}
  (REROOT "/research/test/mnt/ubuntu")
\end{verbatim}
the variables are set as:
\begin{verbatim}
$spadroot = "/research/test/mnt/ubuntu"

$relative-directory-list =
  ("/../../src/input/" 
   "/doc/msgs/" 
   "/../../src/algebra/" 
   "/../../src/interp/" 
   "/doc/spadhelp/")

$directory-list =
  ("/research/test/mnt/ubuntu/../../src/input/" 
   "/research/test/mnt/ubuntu/doc/msgs/" 
   "/research/test/mnt/ubuntu/../../src/algebra/" 
   "/research/test/mnt/ubuntu/../../src/interp/" 
   "/research/test/mnt/ubuntu/doc/spadhelp/")

$relative-library-directory-list = ("/algebra/")

$library-directory-list =  ("/research/test/mnt/ubuntu/algebra/")

|$defaultMsgDatabaseName| = #p"/research/test/mnt/ubuntu/doc/msgs/s2-us.msgs"

|$msgDatabaseName| = nil

$current-directory = "/research/test/"
\end{verbatim}

\calls{reroot}{make-absolute-filename}
\usesdollar{reroot}{spadroot}
\usesdollar{reroot}{directory-list}
\usesdollar{reroot}{relative-directory-list}
\usesdollar{reroot}{library-directory-list}
\usesdollar{reroot}{relative-library-directory-list}
\usesdollar{reroot}{defaultMsgDatabaseName}
\usesdollar{reroot}{msgDatabaseName}
\usesdollar{reroot}{current-directory}
<<defun reroot>>=
(defun reroot (dir)
  (declare (special $spadroot $directory-list $relative-directory-list
     $library-directory-list $relative-library-directory-list
     |$defaultMsgDatabaseName| |$msgDatabaseName| $current-directory))
  (setq $spadroot dir)
  (setq $directory-list
   (mapcar #'make-absolute-filename $relative-directory-list))
  (setq $library-directory-list
   (mapcar #'make-absolute-filename $relative-library-directory-list))
  (setq |$defaultMsgDatabaseName|
	(pathname (make-absolute-filename "/doc/msgs/s2-us.msgs")))
  (setq |$msgDatabaseName| ())
  (setq $current-directory $spadroot))

@

\defun{setCurrentLine}{setCurrentLine}
Remember the current line. The cases are:
\begin{itemize}
\item If there is no \$currentLine set it to the input
\item Is the current line a string and the input a string?
      Make them into a list
\item Is \$currentLine not a cons cell? Make it one.
\item Is the input a string? Cons it on the end of the list.
\item Otherwise stick it on the end of the list
\end{itemize}
Note I suspect the last two cases do not occur in practice since
they result in a dotted pair if the input is not a cons. However,
this is what the current code does so I won't change it.
\usesdollar{setCurrentLine}{currentLine}
<<defun setCurrentLine>>=
(defun |setCurrentLine| (s)
 (declare (special |$currentLine|))
 (cond 
  ((null |$currentLine|) (setq |$currentLine| s))
  ((and (stringp |$currentLine|) (stringp s))
    (setq |$currentLine| (list |$currentLine| s)))
  ((not (consp |$currentLine|)) (setq |$currentLine| (cons |$currentLine| s)))
  ((stringp s) (rplacd (last |$currentLine|) (cons s nil)))
  (t (rplacd (last |$currentLine|) s)))
 |$currentLine|)

@

\defunsec{mkprompt}{Show the Axiom prompt}
\calls{mkprompt}{concat}
\calls{mkprompt}{substring}
\calls{mkprompt}{currenttime}
\usesdollar{mkprompt}{inputPromptType}
\usesdollar{mkprompt}{IOindex}
\usesdollar{mkprompt}{interpreterFrameName}
<<defun mkprompt>>=
(defun mkprompt ()
 "Show the Axiom prompt"
 (declare (special |$inputPromptType| |$IOindex| |$interpreterFrameName|))
 (case |$inputPromptType|
  (|none| "")
  (|plain| "-> ")
  (|step|  (concat "(" (princ-to-string |$IOindex|) ") -> "))
  (|frame|
   (concat (princ-to-string |$interpreterFrameName|) " ("
           (princ-to-string |$IOindex|) ") -> "))
  (t (concat (princ-to-string |$interpreterFrameName|) " ["
             (substring (currenttime) 8 nil) "] [" 
             (princ-to-string |$IOindex|) "] -> "))))

@

\defdollar{frameAlist}
<<initvars>>=
(defvar |$frameAlist| nil) 

@
\defdollar{frameNumber}
<<initvars>>=
(defvar |$frameNumber| 0) 

@
\defdollar{currentFrameNum}
<<initvars>>=
(defvar |$currentFrameNum| 0) 

@

\defdollar{EndServerSession}
<<initvars>>=
(defvar |$EndServerSession| nil) 

@

\defdollar{NeedToSignalSessionManager}
<<initvars>>=
(defvar |$NeedToSignalSessionManager| nil) 

@

\defdollar{sockBufferLength}
<<initvars>>=
(defvar |$sockBufferLength| 9217) 

@

\defunsec{serverReadLine}{READ-LINE in an Axiom server system}
\catches{serverReadLine}{coerceFailure}
\catches{serverReadLine}{top-level}
\catches{serverReadLine}{spad-reader}
\calls{serverReadLine}{read-line}
\calls{serverReadLine}{addNewInterpreterFrame}
\calls{serverReadLine}{sockSendInt}
\calls{serverReadLine}{sockSendString}
\calls{serverReadLine}{mkprompt}
\calls{serverReadLine}{sockGetInt}
\calls{serverReadLine}{lassoc}
\calls{serverReadLine}{changeToNamedInterpreterFrame}
\calls{serverReadLine}{sockGetString}
\calls{serverReadLine}{unescapeStringsInForm}
\calls{serverReadLine}{protectedEVAL}
\calls{serverReadLine}{executeQuietCommand}
\calls{serverReadLine}{parseAndInterpret}
\calls{serverReadLine}{is-console}
\calls{serverReadLine}{serverSwitch}
\usesdollar{serverReadLine}{KillLispSystem}
\usesdollar{serverReadLine}{NonSmanSession}
\usesdollar{serverReadLine}{SpadCommand}
\usesdollar{serverReadLine}{QuietSpadCommand}
\usesdollar{serverReadLine}{MenuServer}
\usesdollar{serverReadLine}{sockBufferLength}
\usesdollar{serverReadLine}{LispCommand}
\usesdollar{serverReadLine}{EndServerSession}
\usesdollar{serverReadLine}{EndSession}
\usesdollar{serverReadLine}{SwitchFrames}
\usesdollar{serverReadLine}{CreateFrameAnswer}
\usesdollar{serverReadLine}{currentFrameNum}
\usesdollar{serverReadLine}{frameNumber}
\usesdollar{serverReadLine}{frameAlist}
\usesdollar{serverReadLine}{CreateFrame}
\usesdollar{serverReadLine}{CallInterp}
\usesdollar{serverReadLine}{EndOfOutput}
\usesdollar{serverReadLine}{SessionManager}
\usesdollar{serverReadLine}{NeedToSignalSessionManager}
\usesdollar{serverReadLine}{EndServerSession}
\usesdollar{serverReadLine}{SpadServer}
\uses{serverReadLine}{*eof*}
\uses{serverReadLine}{in-stream}
<<defun serverReadLine>>=
(defun |serverReadLine| (stream)
 "used in place of READ-LINE in a Axiom server system."
 (let (in-stream *eof* l framename currentframe form stringbuf line action)
 (declare (special in-stream *eof* |$SpadServer| |$EndServerSession|
     |$NeedToSignalSessionManager| |$SessionManager| |$EndOfOutput|
     |$CallInterp| |$CreateFrame| |$frameAlist| |$frameNumber|
     |$currentFrameNum| |$CreateFrameAnswer| |$SwitchFrames| |$EndSession|
     |$EndServerSession| |$LispCommand| |$sockBufferLength| |$MenuServer|
     |$QuietSpadCommand| |$SpadCommand| |$NonSmanSession| |$KillLispSystem|))
  (force-output)
  (if (or (null |$SpadServer|) (null (is-console stream)))
   (|read-line| stream)
   (progn
    (setq in-stream stream)
    (setq *eof* nil)
    (setq line
     (do ()
         ((null (and (null |$EndServerSession|) (null *eof*))) nil)
         (when |$NeedToSignalSessionManager|
          (|sockSendInt| |$SessionManager| |$EndOfOutput|))
      (setq |$NeedToSignalSessionManager| nil)
      (setq action (|serverSwitch|))
      (cond 
       ((= action |$CallInterp|)
        (setq l (|read-line| stream))
        (setq |$NeedToSignalSessionManager| t)
        (return l))
       ((= action |$CreateFrame|)
        (setq framename (gentemp "frame"))
        (|addNewInterpreterFrame| framename)
        (setq |$frameAlist|
         (cons (cons |$frameNumber| framename) |$frameAlist|))
        (setq |$currentFrameNum| |$frameNumber|)
        (|sockSendInt| |$SessionManager| |$CreateFrameAnswer|)
        (|sockSendInt| |$SessionManager| |$frameNumber|)
        (setq |$frameNumber| (1+ |$frameNumber|))
        (|sockSendString| |$SessionManager| (mkprompt)))
       ((= action |$SwitchFrames|)
        (setq |$currentFrameNum| (|sockGetInt| |$SessionManager|))
        (setq currentframe (lassoc |$currentFrameNum| |$frameAlist|))
        (|changeToNamedInterpreterFrame| currentframe))
       ((= action |$EndSession|)
        (setq |$EndServerSession| t))
       ((= action |$LispCommand|)
        (setq |$NeedToSignalSessionManager| t)
        (setq stringbuf (make-string |$sockBufferLength|))
        (|sockGetString| |$MenuServer| stringbuf |$sockBufferLength|)
        (setq form (|unescapeStringsInForm| (read-from-string stringbuf)))
        (|protectedEVAL| form))
       ((= action |$QuietSpadCommand|)
        (setq |$NeedToSignalSessionManager| t)
        (|executeQuietCommand|))
       ((= action |$SpadCommand|)
        (setq |$NeedToSignalSessionManager| t)
        (setq stringbuf (make-string 512))
        (|sockGetString| |$MenuServer| stringbuf 512)
        (catch '|coerceFailure|
         (catch '|top_level|
          (catch 'spad_reader
           (|parseAndInterpret| stringbuf))))
        (princ (mkprompt))
        (finish-output))
       ((= action |$NonSmanSession|) (setq |$SpadServer| nil))
       ((= action |$KillLispSystem|) (bye))
       (t nil))))
    (cond
     (line line)
     (t '||))))))

@

\defun{protectedEVAL}{protectedEVAL}
\calls{protectedEVAL}{resetStackLimits}
\calls{protectedEVAL}{sendHTErrorSignal}
<<defun protectedEVAL>>=
(defun |protectedEVAL| (x)
 (let (val (error t))
  (unwind-protect
   (progn
    (setq val (eval x))
    (setq error nil))
   (when error
    (|resetStackLimits|)
    (|sendHTErrorSignal|)))
  (unless error val)))

@

\defdollar{QuietCommand}
<<initvars>>=
(defvar |$QuietCommand| nil "If true, produce no top level output") 

@

\defun{executeQuietCommand}{executeQuietCommand}
When \verb|$QuiteCommand| is true Spad will not produce any output from
a top level command
\catches{executeQuietCommand}{spad-reader}
\catches{executeQuietCommand}{coerceFailure}
\catches{executeQuietCommand}{toplevel}
\catches{executeQuietCommand}{spadreader}
\calls{executeQuietCommand}{make-string}
\calls{executeQuietCommand}{sockGetString}
\calls{executeQuietCommand}{parseAndInterpret}
\usesdollar{executeQuietCommand}{MenuServer}
\usesdollar{executeQuietCommand}{QuietCommand}
<<defun executeQuietCommand>>=
(defun |executeQuietCommand| ()
 (let (|$QuietCommand| stringBuf)
 (declare (special |$QuietCommand| |$MenuServer|))
  (setq |$QuietCommand| t)
  (setq stringBuf (make-string 512))
  (|sockGetString| |$MenuServer| stringBuf 512)
  (catch '|coerceFailure|
   (catch '|top_level|
    (catch 'spad_reader (|parseAndInterpret| stringBuf))))))

@

\defdollar{useNewParser}
<<initvars>>=
(defvar |$useNewParser| nil)

@

\defun{parseAndInterpret}{parseAndInterpret}
\calls{parseAndInterpret}{ncParseAndInterpretString}
\calls{parseAndInterpret}{oldParseAndInterpret}
\usesdollar{parseAndInterpret}{InteractiveMode}
\usesdollar{parseAndInterpret}{boot}
\usesdollar{parseAndInterpret}{spad}
\usesdollar{parseAndInterpret}{e}
\usesdollar{parseAndInterpret}{useNewParser}
\usesdollar{parseAndInterpret}{InteractiveFrame}
<<defun parseAndInterpret>>=
(defun |parseAndInterpret| (str)
 (let (|$InteractiveMode| $boot $spad |$e|)
 (declare (special |$InteractiveMode| $boot $spad |$e| |$useNewParser|
                   |$InteractiveFrame|))
  (setq |$InteractiveMode| t)
  (setq $boot nil)
  (setq $spad t)
  (setq |$e| |$InteractiveFrame|)
  (if |$useNewParser| 
   (|ncParseAndInterpretString| str))
   (|oldParseAndInterpret| str)))


@

\defun{oldParseAndInterpret}{oldParseAndInterpret}
\calls{oldParseAndInterpret}{string2SpadTree}
\calls{oldParseAndInterpret}{processInteractive}
\calls{oldParseAndInterpret}{parseTransform}
\calls{oldParseAndInterpret}{postTransform}
<<defun oldParseAndInterpret>>=
(defun |oldParseAndInterpret| (str)
 (let ((tree (|string2SpadTree| str)))
  (when tree
   (|processInteractive| (|parseTransform| (|postTransform| tree)) nil))))

@

\defdollar{interpOnly}
<<initvars>>=
(defvar |$interpOnly| nil)

@

\defdollar{minivectorNames}
<<initvars>>=
(defvar |$minivectorNames| nil)

@

\defdollar{domPvar}
<<initvars>>=
(defvar |$domPvar| nil)

@

\defun{processInteractive}{processInteractive}
Parser Output {\tt -->} Interpreter

Top-level dispatcher for the interpreter.  It sets local variables
and then calls processInteractive1 to do most of the work.
This function receives the output from the parser.
\calls{processInteractive}{initializeTimedNames}
\calls{processInteractive}{pairp}
\calls{processInteractive}{qcar}
\calls{processInteractive}{processInteractive1}
\calls{processInteractive}{reportInstantiations}
\calls{processInteractive}{clrhash}
\calls{processInteractive}{writeHistModesAndValues}
\calls{processInteractive}{updateHist}
\usesdollar{processInteractive}{op}
\usesdollar{processInteractive}{Coerce}
\usesdollar{processInteractive}{compErrorMessageStack}
\usesdollar{processInteractive}{freeVars}
\usesdollar{processInteractive}{mapList}
\usesdollar{processInteractive}{compilingMap}
\usesdollar{processInteractive}{compilingLoop}
\usesdollar{processInteractive}{interpOnly}
\usesdollar{processInteractive}{whereCacheList}
\usesdollar{processInteractive}{timeGlobalName}
\usesdollar{processInteractive}{StreamFrame}
\usesdollar{processInteractive}{declaredMode}
\usesdollar{processInteractive}{localVars}
\usesdollar{processInteractive}{analyzingMapList}
\usesdollar{processInteractive}{lastLineInSEQ}
\usesdollar{processInteractive}{instantCoerceCount}
\usesdollar{processInteractive}{instantCanCoerceCount}
\usesdollar{processInteractive}{instantMmCondCount}
\usesdollar{processInteractive}{fortVar}
\usesdollar{processInteractive}{minivector}
\usesdollar{processInteractive}{minivectorCode}
\usesdollar{processInteractive}{minivectorNames}
\usesdollar{processInteractive}{domPvar}
\usesdollar{processInteractive}{inRetract}
\usesdollar{processInteractive}{instantRecord}
\usesdollar{processInteractive}{reportInstantiations}
\usesdollar{processInteractive}{ProcessInteractiveValue}
\usesdollar{processInteractive}{defaultFortVar}
\usesdollar{processInteractive}{interpreterTimedNames}
\usesdollar{processInteractive}{interpreterTimedClasses}
<<defun processInteractive>>=
(defun |processInteractive| (form posnForm)
 (let (|$op| |$Coerce| |$compErrorMessageStack| |$freeVars|
             |$mapList| |$compilingMap| |$compilingLoop|
             |$interpOnly| |$whereCacheList| |$timeGlobalName|
             |$StreamFrame| |$declaredMode| |$localVars|
             |$analyzingMapList| |$lastLineInSEQ|
             |$instantCoerceCount| |$instantCanCoerceCount|
             |$instantMmCondCount| |$fortVar| |$minivector|
             |$minivectorCode| |$minivectorNames| |$domPvar|
             |$inRetract| object)
 (declare (special |$op| |$Coerce| |$compErrorMessageStack|
                   |$freeVars| |$mapList| |$compilingMap|
                   |$compilingLoop| |$interpOnly| |$whereCacheList|
                   |$timeGlobalName| |$StreamFrame| |$declaredMode|
                   |$localVars| |$analyzingMapList| |$lastLineInSEQ|
                   |$instantCoerceCount| |$instantCanCoerceCount|
                   |$instantMmCondCount| |$fortVar| |$minivector|
                   |$minivectorCode| |$minivectorNames| |$domPvar|
                   |$inRetract| |$instantRecord| |$reportInstantiations|
                   |$ProcessInteractiveValue| |$defaultFortVar|
                   |$interpreterTimedNames| |$interpreterTimedClasses|))
  (|initializeTimedNames| |$interpreterTimedNames| |$interpreterTimedClasses|)
  (if (pairp form)                        ; compute name of operator
   (setq |$op| (qcar form))
   (setq |$op| form))
  (setq |$Coerce| nil)
  (setq |$compErrorMessageStack| nil)
  (setq |$freeVars| nil)
  (setq |$mapList| nil)                   ; list of maps being type analyzed
  (setq |$compilingMap| nil)              ; true when compiling a map
  (setq |$compilingLoop| nil)             ; true when compiling a loop body
  (setq |$interpOnly| nil)                ; true when in interp only mode
  (setq |$whereCacheList| nil)            ; maps compiled because of where
  (setq |$timeGlobalName| '|$compTimeSum|); see incrementTimeSum
  (setq |$StreamFrame| nil)               ; used in printing streams
  (setq |$declaredMode| nil)              ; weak type propagation for symbols
  (setq |$localVars| nil)                 ; list of local variables in function
  (setq |$analyzingMapList| nil)       ; names of maps currently being analyzed
  (setq |$lastLineInSEQ| t)               ; see evalIF and friends
  (setq |$instantCoerceCount| 0)
  (setq |$instantCanCoerceCount| 0)
  (setq |$instantMmCondCount| 0)
  (setq |$defaultFortVar| 'x)             ; default FORTRAN variable name
  (setq |$fortVar| |$defaultFortVar|)     ; variable name for FORTRAN output
  (setq |$minivector| nil)
  (setq |$minivectorCode| nil)
  (setq |$minivectorNames| nil)
  (setq |$domPvar| nil)
  (setq |$inRetract| nil)
  (setq object (|processInteractive1| form posnForm))
  (unless |$ProcessInteractiveValue|
   (when |$reportInstantiations|
    (|reportInstantiations|) 
    (clrhash |$instantRecord|))
   (|writeHistModesAndValues|) 
   (|updateHist|))
  object))

@

\defdollar{ProcessInteractiveValue}
<<initvars>>=
(defvar |$ProcessInteractiveValue| nil "If true, no output or record") 

@

\defdollar{HTCompanionWindowID}
<<initvars>>=
(defvar |$HTCompanionWindowID| nil)

@

\defun{processInteractive1}{processInteractive1}
This calls the analysis and output printing routines
\calls{processInteractive1}{recordFrame}
\calls{processInteractive1}{startTimingProcess}
\calls{processInteractive1}{interpretTopLevel}
\calls{processInteractive1}{stopTimingProcess}
\calls{processInteractive1}{recordAndPrint}
\calls{processInteractive1}{objValUnwrap}
\calls{processInteractive1}{objMode}
\usesdollar{processInteractive1}{e}
\usesdollar{processInteractive1}{ProcessInteractiveValue}
\usesdollar{processInteractive1}{InteractiveFrame}
<<defun processInteractive1>>=
(defun |processInteractive1| (form posnForm)
 (let (|$e| object)
 (declare (special |$e| |$ProcessInteractiveValue| |$InteractiveFrame|))
  (setq |$e| |$InteractiveFrame|)
  (|recordFrame| '|system|)
  (|startTimingProcess| '|analysis|)
  (setq object (|interpretTopLevel| form posnForm))
  (|stopTimingProcess| '|analysis|)
  (|startTimingProcess| '|print|)
  (unless |$ProcessInteractiveValue|
    (|recordAndPrint| (|objValUnwrap| object) (|objMode| object)))
  (|recordFrame| '|normal|)
  (|stopTimingProcess| '|print|)
  object))

@

\defun{interpretTopLevel}{interpretTopLevel}
\catches{interpretTopLevel}{interpreter}
\calls{interpretTopLevel}{interpret}
\calls{interpretTopLevel}{stopTimingProcess}
\calls{interpretTopLevel}{peekTimedName}
\calls{interpretTopLevel}{interpretTopLevel}
\usesdollar{interpretTopLevel}{timedNameStack}
<<defun interpretTopLevel>>=
(defun |interpretTopLevel| (x posnForm)
 (let (savedTimerStack c)
 (declare (special |$timedNameStack|))
  (setq savedTimerStack (copy |$timedNameStack|))
  (setq c (catch '|interpreter| (|interpret| x posnForm)))
  (do ()
      ((equal savedTimerStack |$timedNameStack|) nil)
    (|stopTimingProcess| (|peekTimedName|)))
  (if (eq c '|tryAgain|) 
   (|interpretTopLevel| x posnForm)
   c)))

@

\defdollar{genValue}
If the \verb|$genValue| variable is true then evaluate generated code,
otherwise leave code unevaluated. If \verb|$genValue| is false then we
are compiling. This variable is only defined and used locally.
<<initvars>>=
(defvar |$genValue| nil "evaluate generated code if true")

@

\defun{interpret}{Type analyzes and evaluates expression x, returns object}
\calls{interpret}{pairp}
\calls{interpret}{interpret1}
\usesdollar{interpret}{env}
\usesdollar{interpret}{eval}
\usesdollar{interpret}{genValue}
<<defun interpret>>=
(defun |interpret| (&rest arg &aux restargs x)
 (dsetq (x . restargs) arg)
 (let (|$env| |$eval| |$genValue| posnForm)
 (declare (special |$env| |$eval| |$genValue|))
  (if (pairp restargs)
    (setq posnForm (car restargs))
    (setq posnForm restargs))
  (setq |$env| (list (list nil)))
  (setq |$eval| t)      ; generate code -- don't just type analyze
  (setq |$genValue| t)  ; evaluate all generated code
  (|interpret1| x nil posnForm)))

@

\defun{interpret1}{Dispatcher for the type analysis routines}
This is the dispatcher for the type analysis routines. It type analyzes and
evaluates the expression x in the rootMode (if non-nil)
which may be \verb|$EmptyMode|. It returns an object if evaluating, and a
modeset otherwise. It creates the attributed tree.
\calls{interpret1}{mkAtreeWithSrcPos}
\calls{interpret1}{putTarget}
\calls{interpret1}{bottomUp}
\calls{interpret1}{getArgValue}
\calls{interpret1}{objNew}
\calls{interpret1}{getValue}
\calls{interpret1}{interpret2}
\calls{interpret1}{keyedSystemError}
\usesdollar{interpret1}{genValue}
\usesdollar{interpret1}{eval}
<<defun interpret1>>=
(defun |interpret1| (x rootMode posnForm)
 (let (node modeSet newRootMode argVal val)
 (declare (special |$genValue| |$eval|))
  (setq node (|mkAtreeWithSrcPos| x posnForm))
  (when rootMode (|putTarget| node rootMode))
  (setq modeSet (|bottomUp| node))
  (if (null |$eval|)
   modeSet
   (progn
    (if (null rootMode)
     (setq newRootMode (car modeSet))
     (setq newRootMode rootMode))
    (setq argVal (|getArgValue| node newRootMode))
    (cond
     ((and argVal (null |$genValue|))
       (|objNew| argVal newRootMode))
     ((and argVal (setq val (|getValue| node)))
       (|interpret2| val newRootMode posnForm))
     (t
       (|keyedSystemError| 'S2IS0053 (list x))))))))

@

\defun{interpret2}{interpret2}
This is the late interpretCoerce. I removed the call to
coerceInteractive, so it only does the JENKS cases    ALBI
\calls{interpret2}{objVal}
\calls{interpret2}{objMode}
\calls{interpret2}{pairp}
\calls{interpret2}{member}
\calls{interpret2}{objNew}
\calls{interpret2}{systemErrorHere}
\calls{interpret2}{coerceInteractive}
\calls{interpret2}{throwKeyedMsgCannotCoerceWithValue}
\usesdollar{interpret2}{EmptyMode}
\usesdollar{interpret2}{ThrowAwayMode}
<<defun interpret2>>=
(defun |interpret2| (object m1 posnForm)
 (declare (ignore  posnForm))
 (let (x m op ans)
 (declare (special |$EmptyMode| |$ThrowAwayMode|))
  (cond
   ((equal m1 |$ThrowAwayMode|) object)
   (t
    (setq x (|objVal| object))
    (setq m (|objMode| object))
    (cond
     ((equal m |$EmptyMode|)
      (cond
        ((and (pairp x) 
              (progn (setq op (qcar x)) t)
              (|member| op '(map stream)))
          (|objNew| x m1))
        ((equal m1 |$EmptyMode|)
          (|objNew| x m))
        (t
          (|systemErrorHere| "interpret2"))))
     (m1
      (if (setq ans (|coerceInteractive| object m1)) 
       ans
       (|throwKeyedMsgCannotCoerceWithValue| x m m1)))
     (t object))))))

@

\defun{recordAndPrint}{Result Output Printing}
Prints out the value x which is of type m, and records the changes
in environment \verb|$e| into \verb|$InteractiveFrame|
\verb|$printAnyIfTrue| is documented in setvart.boot. 
It is controlled with the {\tt )se me any} command.
\calls{recordAndPrint}{nequal}
\calls{recordAndPrint}{output}
\calls{recordAndPrint}{putHist}
\calls{recordAndPrint}{objNewWrap}
\calls{recordAndPrint}{printTypeAndTime}
\calls{recordAndPrint}{printStorage}
\calls{recordAndPrint}{printStatisticsSummary}
\calls{recordAndPrint}{mkCompanionPage}
\calls{recordAndPrint}{recordAndPrintTest}
\usesdollar{recordAndPrint}{outputMode}
\usesdollar{recordAndPrint}{mkTestOutputType}
\usesdollar{recordAndPrint}{runTestFlag}
\usesdollar{recordAndPrint}{e}
\usesdollar{recordAndPrint}{mkTestFlag}
\usesdollar{recordAndPrint}{HTCompanionWindowID}
\usesdollar{recordAndPrint}{QuietCommand}
\usesdollar{recordAndPrint}{printStatisticsSummaryIfTrue}
\usesdollar{recordAndPrint}{printTypeIfTrue}
\usesdollar{recordAndPrint}{printStorageIfTrue}
\usesdollar{recordAndPrint}{printTimeIfTrue}
\usesdollar{recordAndPrint}{Void}
\usesdollar{recordAndPrint}{algebraOutputStream}
\usesdollar{recordAndPrint}{collectOutput}
\usesdollar{recordAndPrint}{EmptyMode}
\usesdollar{recordAndPrint}{printVoidIfTrue}
\usesdollar{recordAndPrint}{outputMode}
\usesdollar{recordAndPrint}{printAnyIfTrue}
<<defun recordAndPrint>>=
(defun |recordAndPrint| (x md)
 (let (|$outputMode| xp mdp mode)
 (declare (special |$outputMode| |$mkTestOutputType| |$runTestFlag| |$e|
                   |$mkTestFlag| |$HTCompanionWindowID| |$QuietCommand|
                   |$printStatisticsSummaryIfTrue| |$printTypeIfTrue|
                   |$printStorageIfTrue| |$printTimeIfTrue| |$Void|
                   |$algebraOutputStream| |$collectOutput| |$EmptyMode|
                   |$printVoidIfTrue| |$outputMode| |$printAnyIfTrue|))
  (cond
   ((and (equal md '(|Any|)) |$printAnyIfTrue|)
    (setq mdp (car x))
    (setq xp (cdr x)))
   (t
    (setq mdp md)
    (setq xp x)))
  (setq |$outputMode| md)
  (if (equal md |$EmptyMode|)
   (setq mode (|quadSch|))
   (setq mode md))
  (when (or (nequal md |$Void|) |$printVoidIfTrue|)
    (unless |$collectOutput| (terpri |$algebraOutputStream|))
    (unless |$QuietCommand| (|output| xp mdp)))
  (|putHist| '% '|value| (|objNewWrap| x md) |$e|)
  (when (or |$printTimeIfTrue| |$printTypeIfTrue|)
    (|printTypeAndTime| xp mdp))
  (when |$printStorageIfTrue| (|printStorage|))
  (when |$printStatisticsSummaryIfTrue| (|printStatisticsSummary|))
  (when (integerp |$HTCompanionWindowID|) (|mkCompanionPage| md))
  (cond
   (|$mkTestFlag| (|recordAndPrintTest| md))
   (|$runTestFlag|
    (setq |$mkTestOutputType| md) 
    '|done|)
   (t '|done|))))

@

\defun{printStatisticsSummary}{printStatisticsSummary}
\calls{printStatisticsSummary}{sayKeyedMsg}
\calls{printStatisticsSummary}{statisticsSummary}
\usesdollar{printStatisticsSummary}{collectOutput}
<<defun printStatisticsSummary>>=
(defun |printStatisticsSummary| ()
 (declare (special |$collectOutput|))
 (unless |$collectOutput| 
  (|sayKeyedMsg| 'S2GL0017 (list (|statisticsSummary|)))))

@

\defun{printStorage}{printStorage}
\calls{printStorage}{makeLongSpaceString}
\usesdollar{printStorage}{interpreterTimedClasses}
\usesdollar{printStorage}{collectOutput}
\usesdollar{printStorage}{interpreterTimedNames}
<<defun printStorage>>=
(defun |printStorage| ()
 (declare (special |$interpreterTimedClasses| |$collectOutput|
                   |$interpreterTimedNames|))
  (unless |$collectOutput|
   (|sayKeyedMsg| 'S2GL0016 
    (list 
     (|makeLongSpaceString|
       |$interpreterTimedNames|
       |$interpreterTimedClasses|)))))

@

\defun{printTypeAndTime}{printTypeAndTime}
\calls{printTypeAndTime}{printTypeAndTimeSaturn}
\calls{printTypeAndTime}{printTypeAndTimeNormal}
\usesdollar{printTypeAndTime}{saturn}
<<defun printTypeAndTime>>=
(defun |printTypeAndTime| (x m)
 (declare (special |$saturn|))
 (if |$saturn| 
  (|printTypeAndTimeSaturn| x m)
  (|printTypeAndTimeNormal| x m)))

@

\defun{printTypeAndTimeNormal}{printTypeAndTimeNormal}
\calls{printTypeAndTimeNormal}{qcar}
\calls{printTypeAndTimeNormal}{pairp}
\calls{printTypeAndTimeNormal}{retract}
\calls{printTypeAndTimeNormal}{objNewWrap}
\calls{printTypeAndTimeNormal}{objMode}
\calls{printTypeAndTimeNormal}{sameUnionBranch}
\calls{printTypeAndTimeNormal}{makeLongTimeString}
\calls{printTypeAndTimeNormal}{msgText}
\calls{printTypeAndTimeNormal}{sayKeyedMsg}
\calls{printTypeAndTimeNormal}{justifyMyType}
\usesdollar{printTypeAndTimeNormal}{outputLines}
\usesdollar{printTypeAndTimeNormal}{collectOutput}
\usesdollar{printTypeAndTimeNormal}{printTypeIfTrue}
\usesdollar{printTypeAndTimeNormal}{printTimeIfTrue}
\usesdollar{printTypeAndTimeNormal}{outputLines}
\usesdollar{printTypeAndTimeNormal}{interpreterTimedNames}
\usesdollar{printTypeAndTimeNormal}{interpreterTimedClasses}
<<defun printTypeAndTimeNormal>>=
(defun |printTypeAndTimeNormal| (x m)
 (let (xp mp timeString result)
 (declare (special |$outputLines| |$collectOutput| |$printTypeIfTrue|
                   |$printTimeIfTrue| |$outputLines|
                   |$interpreterTimedNames| |$interpreterTimedClasses|))
  (cond
   ((and (pairp m) (eq (qcar m) '|Union|))
    (setq xp (|retract| (|objNewWrap| x m)))
    (setq mp (|objMode| xp))
    (setq m
     (cons '|Union|
      (append
       (dolist (arg (qcdr m) (nreverse result))
         (when (|sameUnionBranch| arg mp) (push arg result)))
       (list "..."))))))
  (when |$printTimeIfTrue|
   (setq timeString
    (|makeLongTimeString|
     |$interpreterTimedNames|
     |$interpreterTimedClasses|)))
  (cond
   ((and |$printTimeIfTrue| |$printTypeIfTrue|)
    (if |$collectOutput|
     (push (|msgText| 'S2GL0012 (list m)) |$outputLines|)
     (|sayKeyedMsg| 'S2GL0014 (list m timeString ))))
   (|$printTimeIfTrue|
    (unless |$collectOutput| (|sayKeyedMsg| 'S2GL0013 (list timeString))))
   (|$printTypeIfTrue|
    (if |$collectOutput|
     (push (|justifyMyType| (|msgText| 'S2GL0012 (list m))) |$outputLines|)
     (|sayKeyedMsg| 'S2GL0012 (list m)))))))

@

\defun{printTypeAndTimeSaturn}{printTypeAndTimeSaturn}
\calls{printTypeAndTimeSaturn}{makeLongTimeString}
\calls{printTypeAndTimeSaturn}{form2StringAsTeX}
\calls{printTypeAndTimeSaturn}{devaluate}
\calls{printTypeAndTimeSaturn}{printAsTeX}
\usesdollar{printTypeAndTimeSaturn}{printTimeIfTrue}
\usesdollar{printTypeAndTimeSaturn}{printTypeIfTrue}
\usesdollar{printTypeAndTimeSaturn}{interpreterTimedClasses}
\usesdollar{printTypeAndTimeSaturn}{interpreterTimedNames}
<<defun printTypeAndTimeSaturn>>=
(defun |printTypeAndTimeSaturn| (x m)
 (declare (ignore x))
 (let (timeString typeString)
 (declare (special |$printTimeIfTrue| |$printTypeIfTrue|
                   |$interpreterTimedClasses| |$interpreterTimedNames|))
  (if |$printTimeIfTrue|
   (setq timeString
    (|makeLongTimeString| 
     |$interpreterTimedNames|
     |$interpreterTimedClasses|))
   (setq timeString ""))
  (if |$printTypeIfTrue|
   (setq typeString (|form2StringAsTeX| (|devaluate| m)))
   (setq typeString ""))
  (when |$printTypeIfTrue|
   (|printAsTeX| "\\axPrintType{")
   (if (consp typeString)
    (mapc #'|printAsTeX| typeString)
    (|printAsTeX| typeString))
   (|printAsTeX| "}"))
  (when |$printTimeIfTrue|
   (|printAsTeX| "\\axPrintTime{")
   (|printAsTeX| timeString)
   (|printAsTeX| "}"))))

@

\defun{printAsTeX}{printAsTeX}
\usesdollar{printAsTeX}{texOutputStream}
<<defun printAsTeX>>=
(defun |printAsTeX| (x)
 (declare (special |$texOutputStream|)) 
 (princ x |$texOutputStream|)) 

@

\defun{sameUnionBranch}{sameUnionBranch}
\begin{verbatim}
sameUnionBranch(uArg, m) ==
  uArg is [":", ., t] => t = m
  uArg = m
\end{verbatim}
<<defun sameUnionBranch>>=
(defun |sameUnionBranch| (uArg m)
 (let (t1 t2 t3)
 (cond
  ((and (pairp uArg) 
        (eq (qcar uArg) '|:|)
        (progn
         (setq t1 (qcdr uArg))
         (and (pairp t1)
              (progn
               (setq t2 (qcdr t1))
               (and (pairp t2)
                    (eq (qcdr t2) nil)
                    (progn (setq t3 (qcar t2)) t))))))
   (equal t3 m))
  (t (equal uArg m)))))


@

\defun{msgText}{msgText}
\calls{msgText}{segmentKeyedMsg}
\calls{msgText}{getKeyedMsg}
\calls{msgText}{substituteSegmentedMsg}
\calls{msgText}{flowSegmentedMsg}
\calls{msgText}{stringimage}
\usesdollar{msgText}{linelength}
\usesdollar{msgText}{margin}
<<defun msgText>>=
(defun |msgText| (key args)
 (let (msg)
 (declare (special $linelength $margin))
  (setq msg (|segmentKeyedMsg| (|getKeyedMsg| key)))
  (setq msg (|substituteSegmentedMsg| msg args))
  (setq msg (|flowSegmentedMsg| msg $linelength $margin))
  (apply #'concat (mapcar #'stringimage (cdar msg)))))

@

\defun{justifyMyType}{Right-justify the Type output}
\calls{justifyMyType}{fillerSpaces}
\usesdollar{justifyMyType}{linelength}
<<defun justifyMyType>>=
(defun |justifyMyType| (arg)
 (let (len)
 (declare (special $linelength))
  (setq len (|#| arg))
  (if (> len $linelength)
   arg
   (concat (|fillerSpaces| (- $linelength len)) arg))))

@

\defun{unescapeStringsInForm}{Destructively fix quotes in strings}
\calls{unescapeStringsInForm}{unescapeStringsInForm}
\usesdollar{unescapeStringsInForm}{funnyBacks}
\usesdollar{unescapeStringsInForm}{funnyQuote}
<<defun unescapeStringsInForm>>=
(defun |unescapeStringsInForm| (form)
 (let (str)
 (declare (special |$funnyBacks| |$funnyQuote|))
  (cond
   ((stringp form)
    (setq str (nsubstitute #\" |$funnyQuote| form))
    (nsubstitute #\\ |$funnyBacks| str))
   ((consp form) 
    (|unescapeStringsInForm| (car form))
    (|unescapeStringsInForm| (cdr form))
    form)
   (t form))))

@

\defunsec{intloopInclude}{Include a file into the stream}
\calls{intloopInclude}{ST}
\calls{intloopInclude}{intloopInclude0}
<<defun intloopInclude>>=
(defun |intloopInclude| (name n)
  "Include a file into the stream"
  (with-open-file (st name) (|intloopInclude0| st name n)))

@

\defun{intloopInclude0}{intloopInclude0}
\calls{intloopInclude0}{incStream}
\calls{intloopInclude0}{intloopProcess}
\calls{intloopInclude0}{next}
\calls{intloopInclude0}{intloopEchoParse}
\calls{intloopInclude0}{insertpile}
\calls{intloopInclude0}{lineoftoks}
\usesdollar{intloopInclude0}{lines}
<<defun intloopInclude0>>=
(defun |intloopInclude0| (|st| |name| |n|)
 (let (|$lines|)
 (declare (special |$lines|))
  (setq |$lines| (|incStream| |st| |name|))
  (|intloopProcess| |n| NIL 
   (|next| #'|intloopEchoParse|
    (|next| #'|insertpile|
     (|next| #'|lineoftoks|
      |$lines|))))))

@

\defun{intloopProcess}{intloopProcess}
\calls{intloopProcess}{StreamNull}
\calls{intloopProcess}{pfAbSynOp?}
\calls{intloopProcess}{setCurrentLine}
\calls{intloopProcess}{tokPart}
\calls{intloopProcess}{intloopProcess}
\calls{intloopProcess}{intloopSpadProcess}
\callsdollar{intloopProcess}{systemCommandFunction}
\usesdollar{intloopProcess}{systemCommandFunction}
<<defun intloopProcess>>=
(defun |intloopProcess| (n interactive s)
 (let (ptree lines t1)
 (declare (special |$systemCommandFunction|))
  (cond
   ((|StreamNull| s) n)
   (t
    (setq t1 (car s))
    (setq lines (car t1))
    (setq ptree (cadr t1))
    (cond
     ((|pfAbSynOp?| ptree '|command|)
       (when interactive (|setCurrentLine| (|tokPart| ptree)))
       (funcall |$systemCommandFunction| (|tokPart| ptree))
       (|intloopProcess| n interactive (cdr s)))
     (t
       (|intloopProcess|
         (|intloopSpadProcess| n lines ptree interactive)
         interactive (cdr s))))))))

@

\defun{intloopSpadProcess}{intloopSpadProcess}
\catches{intloopSpadProcess}{flung}
\catches{intloopSpadProcess}{SpadCompileItem}
\catches{intloopSpadProcess}{intCoerceFailure}
\catches{intloopSpadProcess}{intSpadReader}
\calls{intloopSpadProcess}{ncPutQ}
\calls{intloopSpadProcess}{CatchAsCan}
\calls{intloopSpadProcess}{Catch}
\calls{intloopSpadProcess}{intloopSpadProcess,interp}
\usesdollar{intloopSpadProcess}{currentCarrier}
\usesdollar{intloopSpadProcess}{ncMsgList}
\usesdollar{intloopSpadProcess}{intCoerceFailure}
\usesdollar{intloopSpadProcess}{intSpadReader}
\usesdollar{intloopSpadProcess}{prevCarrier}
\usesdollar{intloopSpadProcess}{stepNo}
\usesdollar{intloopSpadProcess}{NeedToSignalSessionManager}
\uses{intloopSpadProcess}{flung}
<<defun intloopSpadProcess>>=
(defun |intloopSpadProcess| (stepNo lines ptree interactive?)
 (let (|$stepNo| result cc)
 (declare (special |$stepNo| |$prevCarrier| |$intSpadReader| |flung|
                   |$intCoerceFailure| |$ncMsgList| |$currentCarrier|
                   |$NeedToSignalSessionManager|))
  (setq |$stepNo| stepNo)
  (setq |$currentCarrier| (setq cc (list '|carrier|)))
  (|ncPutQ| cc '|stepNumber| stepNo)
  (|ncPutQ| cc '|messages| |$ncMsgList|)
  (|ncPutQ| cc '|lines| lines)
  (setq |$ncMsgList| nil)
  (setq result
   (|CatchAsCan| |flung|
    (|Catch| '|SpadCompileItem|
     (catch |$intCoerceFailure|
      (catch |$intSpadReader|
       (|intloopSpadProcess,interp| cc ptree interactive?))))))
  (setq |$NeedToSignalSessionManager| t)
  (setq |$prevCarrier| |$currentCarrier|)
  (cond
    ((eq result '|ncEnd|) stepNo)
    ((eq result '|ncError|) stepNo)
    ((eq result '|ncEndItem|) stepNo)
    (t (1+ stepNo)))))

@

\defun{intloopSpadProcess,interp}{intloopSpadProcess,interp}
\calls{intloopSpadProcess,interp}{ncConversationPhase}
\calls{intloopSpadProcess,interp}{ncEltQ}
\calls{intloopSpadProcess,interp}{ncError}
<<defun intloopSpadProcess,interp>>=
(defun |intloopSpadProcess,interp| (cc ptree interactive?)
 (|ncConversationPhase| #'|phParse| (list cc ptree))
 (|ncConversationPhase| #'|phMacro| (list cc))
 (|ncConversationPhase| #'|phIntReportMsgs| (list cc interactive?))
 (|ncConversationPhase| #'|phInterpret| (list cc))
 (unless (eql (length (|ncEltQ| cc '|messages|)) 0) (|ncError|)))

@

\defun{phParse}{phParse}
\tpdhere{The pform function has a leading percent sign. fix this}
\begin{verbatim}
phParse: carrier[tokens,...] -> carrier[ptree, tokens,...]
\end{verbatim}
\calls{phParse}{phBegin}
\calls{phParse}{intSayKeyedMsg}
\calls{phParse}{pform}
\calls{phParse}{ncPutQ}
\usesdollar{phParse}{ncmParse}
<<defun phParse>>=
(defun |phParse| (carrier ptree)
 (declare (special |$ncmParse|))
  (|phBegin| '|Parsing|)
  (when |$ncmParse| (|intSayKeyedMsg| 'S2CTP003 (list (|%pform| ptree))))
  (|ncPutQ| carrier '|ptree| ptree)
  'ok)

@

\defun{intSayKeyedMsg}{intSayKeyedMsg}
\calls{intSayKeyedMsg}{sayKeyedMsg}
\calls{intSayKeyedMsg}{packageTran}
<<defun intSayKeyedMsg>>=
(defun |intSayKeyedMsg| (key args)
  (|sayKeyedMsg| (|packageTran| key) (|packageTran| args)))

@

\defun{packageTran}{packageTran}
\calls{packageTran}{packageTran}
<<defun packageTran>>=
(defun |packageTran| (sex)
 (cond
  ((symbolp sex)
   (cond
    ((eq *package* (symbol-package sex)) sex)
    (t (intern (string sex)))))
  ((consp sex)
    (rplaca sex (|packageTran| (car sex)))
    (rplacd sex (|packageTran| (cdr sex)))
    sex)
  (t sex)))

@

\defun{phIntReportMsgs}{phIntReportMsgs}
\begin{verbatim}
carrier[lines,messages,..]-> carrier[lines,messages,..]
\end{verbatim}
\calls{phIntReportMsgs}{ncEltQ}
\calls{phIntReportMsgs}{ncPutQ}
\calls{phIntReportMsgs}{processMsgList}
\calls{phIntReportMsgs}{intSayKeyedMsg}
\usesdollar{phIntReportMsgs}{erMsgToss}
<<defun phIntReportMsgs>>=
(defun |phIntReportMsgs| (carrier interactive?)
 (declare (ignore interactive?))
 (let (nerr msgs lines)
 (declare (special |$erMsgToss|))
  (cond
   (|$erMsgToss| 'ok)
   (t
     (setq lines (|ncEltQ| carrier '|lines|))
     (setq msgs (|ncEltQ| carrier '|messages|))
     (setq nerr (length msgs))
     (|ncPutQ| carrier '|ok?| (eql nerr 0))
     (cond
      ((eql nerr 0) 'ok)
      (t
       (|processMsgList| msgs lines)
       (|intSayKeyedMsg| 'S2CTP010 (list nerr))
       'ok))))))

@

\defun{phInterpret}{phInterpret}
\calls{phInterpret}{ncEltQ}
\calls{phInterpret}{intInterpretPform}
\calls{phInterpret}{ncPutQ}
<<defun phInterpret>>=
(defun |phInterpret| (carrier)
 (let (val ptree)
  (setq ptree (|ncEltQ| carrier '|ptree|))
  (setq val (|intInterpretPform| ptree))
  (|ncPutQ| carrier '|value| val)))

@

\defun{intInterpretPform}{intInterpretPform}
\calls{intInterpretPform}{processInteractive}
\calls{intInterpretPform}{zeroOneTran}
\calls{intInterpretPform}{packageTran}
\calls{intInterpretPform}{pf2Sex}
<<defun intInterpretPform>>=
(defun |intInterpretPform| (pf)
  (|processInteractive| (|zeroOneTran| (|packageTran| (|pf2Sex| pf))) pf))

@

\defun{zeroOneTran}{zeroOneTran}
\calls{zeroOneTran}{nsubst}
<<defun zeroOneTran>>=
(defun |zeroOneTran| (sex)
 (nsubst '|$EmptyMode| '? sex))

@

\defun{phBegin}{phBegin}
\calls{phBegin}{intSayKeyedMsg}
\usesdollar{phBegin}{ncmPhase}
\usesdollar{phBegin}{convPhase}
<<defun phBegin>>=
(defun |phBegin| (id)
 (declare (special |$ncmPhase| |$convPhase|))
 (setq |$convPhase| id)
 (when |$ncmPhase| (|intSayKeyedMsg| 'S2CTP021 (list id))))

@

\defun{ncConversationPhase}{ncConversationPhase}
\calls{ncConversationPhase}{ncConversationPhase,wrapup}
\usesdollar{ncConversationPhase}{convPhase}
\usesdollar{ncConversationPhase}{ncMsgList}
<<defun ncConversationPhase>>=
(defun |ncConversationPhase| (fn args)
 (let (|$convPhase| |$ncMsgList| carrier)
 (declare (special |$convPhase| |$ncMsgList|))
  (setq carrier (car args))
  (setq |$ncMsgList| nil)
  (setq |$convPhase| '|NoPhase|)
  (unwind-protect
   (apply fn args)
   (|ncConversationPhase,wrapup| carrier))))

@

\defun{ncConversationPhase,wrapup}{ncConversationPhase,wrapup}
\usesdollar{ncConversationPhase,wrapup}{ncMsgList}
<<defun ncConversationPhase,wrapup>>=
(defun |ncConversationPhase,wrapup| (carrier)
 (declare (special |$ncMsgList|))
  ((lambda (Var5 m)
   (loop
    (cond
     ((or (atom Var5) (progn (setq m (car Var5)) nil))
       (return nil))
     (t
      (|ncPutQ| carrier '|messages| (cons m (|ncEltQ| carrier '|messages|)))))
    (setq Var5 (cdr Var5))))
   |$ncMsgList| nil))

@

\defun{ncError}{ncError}
\throws{ncError}{SpadCompileItem}
<<defun ncError>>=
(defun |ncError| ()
 (throw '|SpadCompileItem| '|ncError|))

@

\defun{intloopEchoParse}{intloopEchoParse}
\calls{intloopEchoParse}{ncloopDQlines}
\calls{intloopEchoParse}{setCurrentLine}
\calls{intloopEchoParse}{mkLineList}
\calls{intloopEchoParse}{ncloopPrintLines}
\calls{intloopEchoParse}{npParse}
\calls{intloopEchoParse}{dqToList}
\usesdollar{intloopEchoParse}{EchoLines}
\usesdollar{intloopEchoParse}{lines}
<<defun intloopEchoParse>>=
(defun |intloopEchoParse| (s)
 (let (cudr lines stream dq t1)
 (declare (special |$EchoLines| |$lines|))
  (setq t1 (car s))
  (setq dq (car t1))
  (setq stream (cadr t1))
  (setq t1 (|ncloopDQlines| dq |$lines|))
  (setq lines (car t1))
  (setq cudr (cadr t1))
  (|setCurrentLine| (|mkLineList| lines))
  (when |$EchoLines| (|ncloopPrintLines| lines))
  (setq |$lines| cudr)
  (cons (list (list lines (|npParse| (|dqToList| dq)))) (cdr s))))

@

\defun{ncloopPrintLines}{ncloopPrintLines}
\begin{verbatim}
;ncloopPrintLines lines ==
;        for line in lines repeat WRITE_-LINE CDR line
;        WRITE_-LINE '" "
\end{verbatim}
<<defun ncloopPrintLines>>=
(defun |ncloopPrintLines| (lines)
 ((lambda (Var4 line)
  (loop
   (cond
    ((or (atom Var4) (progn (setq line (car Var4)) nil))
      (return nil))
    (t (write-line (cdr line))))
   (setq Var4 (cdr Var4))))
  lines nil)
 (write-line " "))

@

\defun{mkLineList}{mkLineList}
\begin{verbatim}
;mkLineList lines ==
;  l := [CDR line for line in lines | nonBlank CDR line]
;  #l = 1 => CAR l
;  l
\end{verbatim}
<<defun mkLineList>>=
(defun |mkLineList| (lines)
 (let (l)
  (setq l
   ((lambda (Var2 Var1 line)
     (loop
      (cond
       ((or (atom Var1) (progn (setq line (car Var1)) nil))
         (return (nreverse Var2)))
       (t
        (and (|nonBlank| (cdr line))
             (setq Var2 (cons (cdr line) Var2)))))
      (setq Var1 (cdr Var1))))
    nil lines nil))
  (cond 
   ((eql (length l) 1) (car l))
   (t l))))

@

\defun{nonBlank}{nonBlank}
\begin{verbatim}
;nonBlank str ==
;  value := false
;  for i in 0..MAXINDEX str repeat
;    str.i ^= char " " =>
;      value := true
;      return value
;  value
\end{verbatim}
<<defun nonBlank>>=
(defun |nonBlank| (str)
 (let (value)
  ((lambda (Var3 i)
   (loop
    (cond
     ((> i Var3) (return nil))
     (t
      (cond
       ((not (equal (elt str i) (|char| '| |)))
         (identity (progn (setq value t) (return value)))))))
    (setq i (+ i 1))))
   (maxindex str) 0)
  value))

@

\defun{ncloopDQlines}{ncloopDQlines}
\calls{ncloopDQlines}{StreamNull}
\calls{ncloopDQlines}{poGlobalLinePosn}
\calls{ncloopDQlines}{tokPosn}
\calls{ncloopDQlines}{streamChop}
<<defun ncloopDQlines>>=
(defun |ncloopDQlines| (dq stream)
 (let (b a)
  (|StreamNull| stream)
  (setq a (|poGlobalLinePosn| (|tokPosn| (cadr dq))))
  (setq b (|poGlobalLinePosn| (caar stream)))
  (|streamChop| (+ (- a b) 1) stream)))

@

\defun{poGlobalLinePosn}{poGlobalLinePosn}
\calls{poGlobalLinePosn}{lnGlobalNum}
\calls{poGlobalLinePosn}{poGetLineObject}
\calls{poGlobalLinePosn}{ncBug}
<<defun poGlobalLinePosn>>=
(defun |poGlobalLinePosn| (posn)
 (if posn 
  (|lnGlobalNum| (|poGetLineObject| posn))
  (|ncBug| "old style pos objects have no global positions" nil)))

@

\defun{streamChop}{streamChop}
Note that changing the name ``lyne'' to ``line'' will break the system.
I do not know why. The symptom shows up when there is a file with a large
contiguous comment spanning enough lines to overflow the stack.
\calls{streamChop}{StreamNull}
\calls{streamChop}{streamChop}
\calls{streamChop}{ncloopPrefix?}
<<defun streamChop>>=
(defun |streamChop| (n s)
 (let (d c lyne b a tmp1)
  (cond
   ((|StreamNull| s) (list nil nil))
   ((eql n 0) (list nil s))
   (t
     (setq tmp1 (|streamChop| (- n 1) (cdr s)))
     (setq a (car tmp1)) 
     (setq b (cadr tmp1))
     (setq lyne (car s))
     (setq c (|ncloopPrefix?| ")command" (cdr lyne)))
     (setq d (cons (car lyne) (cond (c c) (t (cdr lyne)))))
     (list (cons d a) b)))))

@

\defun{ncloopInclude0}{ncloopInclude0}
\calls{ncloopInclude0}{incStream}
\calls{ncloopInclude0}{ncloopProcess}
\calls{ncloopInclude0}{next}
\calls{ncloopInclude0}{ncloopEchoParse}
\calls{ncloopInclude0}{insertpile}
\calls{ncloopInclude0}{lineoftoks}
\usesdollar{ncloopInclude0}{lines}
<<defun ncloopInclude0>>=
(defun |ncloopInclude0| (st name n)
 (let (|$lines|)
 (declare (special |$lines|))
   (setq |$lines| (|incStream| st name))
   (|ncloopProcess| n nil
    (|next| #'|ncloopEchoParse|
     (|next| #'|insertpile|
      (|next| #'|lineoftoks|
       |$lines|))))))

@

\defun{incStream}{incStream}
\calls{incStream}{incRenumber}
\calls{incStream}{incLude}
\calls{incStream}{incRgen}
\uses{incStream}{Top}
<<defun incStream>>=
(defun |incStream| (st fn)
 (declare (special |Top|))
 (|incRenumber| (|incLude| 0 (|incRgen| st) 0 (list fn) (list |Top|))))

@

\defun{incRenumber}{incRenumber}
\calls{incRenumber}{incZip}
\calls{incRenumber}{incIgen}
<<defun incRenumber>>=
(defun |incRenumber| (ssx)
 (|incZip| #'|incRenumberLine| ssx (|incIgen| 0)))

@

\defun{incZip}{incZip}
\calls{incZip}{Delay}
\calls{incZip}{incZip1}
<<defun incZip>>=
(defun |incZip| (g f1 f2)
  (|Delay| #'|incZip1| (list g f1 f2)))

@

\defun{incZip1}{incZip1}
\calls{incZip1}{StreamNull}
\calls{incZip1}{incZip}
<<defun incZip1>>=
(defun |incZip1| (&rest z)
 (let (f2 f1 g)
  (setq g (car z))
  (setq f1 (cadr z))
  (setq f2 (caddr z))
  (cond
   ((|StreamNull| f1) |StreamNil|)
   ((|StreamNull| f2) |StreamNil|)
   (t 
     (cons
      (funcall g (car f1) (car f2))
      (|incZip| g (cdr f1) (cdr f2)))))))

@

\defun{incIgen}{incIgen}
\calls{incIgen}{Delay}
\calls{incIgen}{incIgen1}
<<defun incIgen>>=
(defun |incIgen| (n)
 (|Delay| #'|incIgen1| (list n)))

@

\defun{incIgen1}{incIgen1}
\calls{incIgen1}{incIgen}
<<defun incIgen1>>=
(defun |incIgen1| (&rest z)
 (let (n)
  (setq n (car z))
  (setq n (+ n 1))
  (cons n (|incIgen| n))))

@

\defun{incRenumberLine}{incRenumberLine}
\calls{incRenumberLine}{incRenumberItem}
\calls{incRenumberLine}{incHandleMessage}
<<defun incRenumberLine>>=
(defun |incRenumberLine| (xl gno)
 (let (l)
  (setq l (|incRenumberItem| (elt xl 0) gno))
  (|incHandleMessage| xl)
  l))

@
\defun{incRenumberItem}{incRenumberItem}
\calls{incRenumberItem}{lnSetGlobalNum}
<<defun incRenumberItem>>=
(defun |incRenumberItem| (f i)
 (let (l)
  (setq l (caar f))
  (|lnSetGlobalNum| l i) f))

@

\defun{incHandleMessage}{incHandleMessage}
\calls{incHandleMessage}{ncSoftError}
\calls{incHandleMessage}{ncBug}
<<defun incHandleMessage>>=
(defun |incHandleMessage| (x)
 "Message handling for the source includer"
 (let ((msgtype (elt (elt x 1) 1))
       (pos (car (elt x 0)))
       (key (car (elt (elt x 1) 0)))
       (args (cadr (elt (elt x 1) 0))))
       
 (cond
  ((eq msgtype '|none|)    0)
  ((eq msgtype '|error|)   (|ncSoftError| pos key args))
  ((eq msgtype '|warning|) (|ncSoftError| pos key args))
  ((eq msgtype '|say|)     (|ncSoftError| pos key args))
  (t                       (|ncBug| key args)))))

@

\defun{incLude}{incLude}
\calls{incLude}{Delay}
\calls{include}{incLude1}
<<defun incLude>>=
(defun |incLude| (eb ss ln ufos states) 
 (|Delay| #'|incLude1| (list eb ss ln ufos states)))

@

\defmacro{Rest}
<<defmacro Rest>>=
(defmacro |Rest| ()
 "used in incLude1 for parsing; s is not used."
 '(|incLude| eb (cdr ss) lno ufos states))

@

\defvar{Top}
<<initvars>>=
(defvar |Top| 1 "used in incLude1 for parsing")

@
\defvar{IfSkipToEnd}
<<initvars>>=
(defvar |IfSkipToEnd| 10 "used in incLude1 for parsing")

@
\defvar{IfKeepPart}
<<initvars>>=
(defvar |IfKeepPart| 11 "used in incLude1 for parsing")

@
\defvar{IfSkipPart}
<<initvars>>=
(defvar |IfSkipPart| 12 "used in incLude1 for parsing")

@
\defvar{ElseifSkipToEnd}
<<initvars>>=
(defvar |ElseifSkipToEnd| 20 "used in incLude1 for parsing")

@
\defvar{ElseifKeepPart}
<<initvars>>=
(defvar |ElseifKeepPart| 21 "used in incLude1 for parsing")

@
\defvar{ElseifSkipPart}
<<initvars>>=
(defvar |ElseifSkipPart| 22 "used in incLude1 for parsing")

@
\defvar{ElseSkipToEnd}
<<initvars>>=
(defvar |ElseSkipToEnd| 30 "used in incLude1 for parsing")

@
\defvar{ElseKeepPart}
<<initvars>>=
(defvar |ElseKeepPart| 31 "used in incLude1 for parsing")

@

\defvar{Top?}
\calls{Top?}{quotient}
<<defun Top?>>=
(defun |Top?| (|st|)
 "used in incLude1 for parsing"
 (eql (quotient |st| 10) 0))

@
\defvar{If?}
\calls{If?}{quotient}
<<defun If?>>=
(defun |If?| (|st|)
 "used in incLude1 for parsing"
 (eql (quotient |st| 10) 1))

@
\defvar{Elseif?}
\calls{Elseif?}{QUOTIENT}
<<defun Elseif?>>=
(defun |Elseif?| (|st|)
 "used in incLude1 for parsing"
 (eql (quotient |st| 10) 2))

@
\defvar{Else?}
\calls{Else?}{QUOTIENT}
<<defun Else?>>=
(defun |Else?| (|st|)
 "used in incLude1 for parsing"
 (eql (quotient |st| 10) 3))

@
\defvar{SkipEnd?}
\calls{SkipEnd?}{remainder}
<<defun SkipEnd?>>=
(defun |SkipEnd?| (|st|)
 "used in incLude1 for parsing"
 (eql (remainder |st| 10) 0))

@
\defvar{KeepPart?}
\calls{KeepPart?}{remainder}
<<defun KeepPart?>>=
(defun |KeepPart?| (|st|)
 "used in incLude1 for parsing"
 (eql (remainder |st| 10) 1))

@
\defvar{SkipPart?}
\calls{SkipPart?}{remainder}
<<defun SkipPart?>>=
(defun |SkipPart?| (|st|)
 "used in incLude1 for parsing"
 (eql (remainder |st| 10) 2))

@
\defvar{Skipping?}
\calls{Skipping?}{KeepPart?}
<<defun Skipping?>>=
(defun |Skipping?| (|st|)
 "used in incLude1 for parsing"
 (null (|KeepPart?| |st|)))

@

\defun{incLude1}{incLude1}
\calls{incLude1}{StreamNull}
\calls{incLude1}{Top?}
\calls{incLude1}{xlPrematureEOF}
\calls{incLude1}{Skipping?}
\calls{incLude1}{xlSkip}
\calls{incLude1}{Rest}
\calls{incLude1}{xlOK}
\calls{incLude1}{xlOK1}
\calls{incLude1}{concat}
\calls{incLude1}{incCommandTail}
\calls{incLude1}{xlSay}
\calls{incLude1}{xlNoSuchFile}
\calls{incLude1}{xlCannotRead}
\calls{incLude1}{incActive?}
\calls{incLude1}{xlFileCycle}
\calls{incLude1}{incLude}
\calls{incLude1}{incFileInput}
\calls{incLude1}{incAppend}
\calls{incLude1}{inclFname}
\calls{incLude1}{xlConActive}
\calls{incLude1}{xlConStill}
\calls{incLude1}{incConsoleInput}
\calls{incLude1}{incNConsoles}
\calls{incLude1}{xlConsole}
\calls{incLude1}{xlSkippingFin}
\calls{incLude1}{xlPrematureFin}
\calls{incLude1}{assertCond}
\calls{incLude1}{ifCond}
\calls{incLude1}{If?}
\calls{incLude1}{Elseif?}
\calls{incLude1}{xlIfSyntax}
\calls{incLude1}{SkipEnd?}
\calls{incLude1}{KeepPart?}
\calls{incLude1}{SkipPart?}
\calls{incLude1}{xlIfBug}
\calls{incLude1}{xlCmdBug}
\calls{incLude1}{expand-tabs}
\calls{incLude1}{incClassify}
<<defun incLude1>>=
(defun |incLude1| (&rest z)
 (let (pred s1 n tail head includee fn1 info str state lno states 
       ufos ln ss eb)
  (setq eb (car z))
  (setq ss (cadr . (z)))
  (setq ln (caddr . (z)))
  (setq ufos (cadddr . (z)))
  (setq states (car (cddddr . (z))))
  (setq lno (+ ln 1))
  (setq state (elt states 0))
  (cond
   ((|StreamNull| ss)
     (cond
      ((null (|Top?| state))
       (cons (|xlPrematureEOF| eb ")--premature end" lno ufos)
             |StreamNil|))
      (t |StreamNil|)))
   (t
    (progn
     (setq str (expand-tabs (car ss)))
     (setq info (|incClassify| str))
     (cond
      ((null (elt info 0))
       (cond
        ((|Skipping?| state)
         (cons (|xlSkip| eb str lno (elt ufos 0)) (|Rest|)))
        (t
         (cons (|xlOK| eb str lno (elt ufos 0)) (|Rest|)))))
      ((equal (elt info 2) "other")
       (cond
        ((|Skipping?| state)
         (cons (|xlSkip| eb str lno (elt ufos 0)) (|Rest|)))
        (t
         (cons
          (|xlOK1| eb str (concat ")command" str) lno (elt ufos 0))
          (|Rest|)))))
      ((equal (elt info 2) "say")
       (cond
        ((|Skipping?| state)
         (cons (|xlSkip| eb str lno (elt ufos 0)) (|Rest|)))
        (t
         (progn
          (setq str (|incCommandTail| str info))
          (cons (|xlSay| eb str lno ufos str)
           (cons (|xlOK| eb str lno (ELT ufos 0)) (|Rest|)))))))
      ((equal (elt info 2) "include")
       (cond
        ((|Skipping?| state)
         (cons (|xlSkip| eb str lno (elt ufos 0)) (|Rest|)))
        (t
         (progn
          (setq fn1 (|inclFname| str info))
          (cond
           ((null fn1)
            (cons (|xlNoSuchFile| eb str lno ufos fn1) (|Rest|)))
           ((null (probe-file fn1))
            (cons (|xlCannotRead| eb str lno ufos fn1) (|Rest|)))
           ((|incActive?| fn1 ufos)
            (cons (|xlFileCycle| eb str lno ufos fn1) (|Rest|)))
           (t
            (progn
             (setq includee
              (|incLude| (+ eb (elt info 1))
                         (|incFileInput| fn1)
                         0
                         (cons fn1 ufos)
                         (cons |Top| states)))
             (cons (|xlOK| eb str lno (elt ufos 0))
                   (|incAppend| includee (|Rest|))))))))))
      ((equal (elt info 2) "console")
       (cond
        ((|Skipping?| state)
         (cons (|xlSkip| eb str lno (elt ufos 0)) (|Rest|)))
        (t
         (progn
          (setq head
           (|incLude| (+ eb (elt info 1))
                      (|incConsoleInput|)
                      0
                      (cons "console" ufos)
                      (cons |Top| states)))
          (setq tail (|Rest|))
          (setq n (|incNConsoles| ufos))
          (cond
           ((< 0 n)
            (setq head
             (cons (|xlConActive| eb str lno ufos n) head))
            (setq tail
             (cons (|xlConStill| eb str lno ufos n) tail))))
          (setq head (cons (|xlConsole| eb str lno ufos) head))
          (cons (|xlOK| eb str lno (elt ufos 0))
                (|incAppend| head tail))))))
      ((equal (elt info 2) "fin")
       (cond
        ((|Skipping?| state)
         (cons (|xlSkippingFin| eb str lno ufos) (|Rest|)))
        ((null (|Top?| state))
         (cons (|xlPrematureFin| eb str lno ufos) |StreamNil|))
        (t
         (cons (|xlOK| eb str lno (elt ufos 0)) |StreamNil|))))
      ((equal (elt info 2) "assert")
       (cond
        ((|Skipping?| state)
         (cons (|xlSkippingFin| eb str lno ufos) (|Rest|)))
        (t
         (progn
          (|assertCond| str info)
          (cons (|xlOK| eb str lno (elt ufos 0))
                (|incAppend| includee (|Rest|)))))))
      ((equal (elt info 2) "if")
       (progn
        (setq s1
         (cond
          ((|Skipping?| state) |IfSkipToEnd|)
          (t
           (cond
            ((|ifCond| str info) |IfKeepPart|)
            (t |IfSkipPart|)))))
        (cons (|xlOK| eb str lno (elt ufos 0))
              (|incLude| eb (cdr ss) lno ufos (cons s1 states)))))
      ((equal (elt info 2) "elseif")
       (cond
        ((and (null (|If?| state)) (null (|Elseif?| state)))
         (cons (|xlIfSyntax| eb str lno ufos info states)
               |StreamNil|))
        (t
         (cond
          ((or (|SkipEnd?| state) 
               (|KeepPart?| state)
               (|SkipPart?| state))
           (setq s1
            (cond
             ((|SkipPart?| state)
              (setq pred (|ifCond| str info))
              (cond
               (pred |ElseifKeepPart|)
               (t |ElseifSkipPart|)))
             (t |ElseifSkipToEnd|)))
           (cons (|xlOK| eb str lno (elt ufos 0))
                 (|incLude| eb (cdr ss) lno ufos (cons s1 (cdr states)))))
          (t
           (cons (|xlIfBug| eb str lno ufos) |StreamNil|))))))
      ((equal (elt info 2) "else")
       (cond
        ((and (null (|If?| state)) (null (|Elseif?| state)))
         (cons (|xlIfSyntax| eb str lno ufos info states)
               |StreamNil|))
        (t
         (cond
          ((or (|SkipEnd?| state) 
               (|KeepPart?| state) 
               (|SkipPart?| state))
            (setq s1
             (cond ((|SkipPart?| state) |ElseKeepPart|) (t |ElseSkipToEnd|)))
            (cons (|xlOK| eb str lno (elt ufos 0))
                  (|incLude| eb (cdr ss) lno ufos (cons s1 (cdr states)))))
          (t
           (cons (|xlIfBug| eb str lno ufos) |StreamNil|))))))
      ((equal (elt info 2) "endif")
       (cond
        ((|Top?| state)
         (cons (|xlIfSyntax| eb str lno ufos info states)
               |StreamNil|))
        (t
         (cons (|xlOK| eb str lno (elt ufos 0))
               (|incLude| eb (cdr ss) lno ufos (cdr states))))))
      (t (cons (|xlCmdBug| eb str lno ufos) |StreamNil|))))))))

@

\defun{xlPrematureEOF}{xlPrematureEOF}
\calls{xlPrematureEOF}{xlMsg}
\calls{xlPrematureEOF}{inclmsgPrematureEOF}
<<defun xlPrematureEOF>>=
(defun |xlPrematureEOF| (eb str lno ufos)
 (|xlMsg| eb str lno (elt ufos 0)
          (list (|inclmsgPrematureEOF| (elt ufos 0)) '|error|)))

@

\defun{xlMsg}{xlMsg}
\calls{xlMsg}{incLine}
<<defun xlMsg>>=
(defun |xlMsg| (extrablanks string localnum fileobj mess)
 (let ((globalnum -1))
  (list (incLine extrablanks string globalnum localnum fileobj) mess)))

@

\defun{xlOK}{xlOK}
\calls{xlOK}{lxOK1}
<<defun xlOK>>=
(defun |xlOK| (extrablanks string localnum fileobj)
 (|xlOK1| extrablanks string string localnum fileobj))

@

\defun{xlOK1}{xlOK1}
\calls{xlOK1}{incLine1}
<<defun xlOK1>>=
(defun |xlOK1| (extrablanks string string1 localnum fileobj)
 (let ((globalnum -1))
  (list (incLine1 extrablanks string string1 globalnum localnum fileobj)
    (list nil '|none|))))

@

\defun{incAppend}{incAppend}
\calls{incAppend}{Delay}
\calls{incAppend}{incAppend1}
<<defun incAppend>>=
(defun |incAppend| (x y)
 (|Delay| #'|incAppend1| (list x y)))

@

\defun{incAppend1}{incAppend1}
\calls{incAppend1}{StreamNull}
\calls{incAppend1}{incAppend}
<<defun incAppend1>>=
(defun |incAppend1| (&rest z)
 (let (y x)
  (setq x (car z))
  (setq y (cadr z))
  (cond
   ((|StreamNull| x) 
    (cond ((|StreamNull| y) |StreamNil|) (t y)))
   (t 
    (cons (car x) (|incAppend| (cdr x) y))))))

@

\defun{incLine}{incLine}
\calls{incLine}{incLine1}
<<defun incLine>>=
(defun incLine (extrablanks string globalnum localnum fileobj)
 (incLine1 extrablanks string string globalnum localnum fileobj))

@

\defun{incLine1}{incLine1}
\calls{incLine1}{lnCreate}
<<defun incLine1>>=
(defun incLine1 (extrablanks string string1 globalnum localnum fileobj)
 (cons
  (cons (|lnCreate| extrablanks string globalnum localnum fileobj) 1) string1))

@

\defun{inclmsgPrematureEOF}{inclmsgPrematureEOF}
\calls{inclmsgPrematureEOF}{origin}
<<defun inclmsgPrematureEOF>>=
(defun |inclmsgPrematureEOF| (ufo)
 (list 'S2CI0002 (list (|theorigin| ufo))))

@

\defun{theorigin}{theorigin}
<<defun theorigin>>=
(defun |theorigin| (x) (list #'|porigin| x))

@

\defun{porigin}{porigin}
\calls{porigin}{stringp}
<<defun porigin>>=
(defun |porigin| (x)
 (if (stringp x)
  x
  (|pfname| x)))

@

\defun{ifCond}{ifCond}
\calls{ifCond}{MakeSymbol}
\calls{ifCond}{incCommandTail}
\calls{ifCond}{ListMemberQ?}
\usesdollar{ifCond}{inclAssertions}
<<defun ifCond>>=
(defun |ifCond| (s info)
 (let (word)
 (declare (special |$inclAssertions|))
  (setq word 
   (|MakeSymbol| (string-trim *whitespace* (|incCommandTail| s info))))
  (|ListMemberQ?| word |$inclAssertions|)))

@

\defun{xlSkip}{xlSkip}
\calls{xlSkip}{incLine}
\calls{xlSkip}{CONCAT}
<<defun xlSkip>>=
(defun |xlSkip| (extrablanks str localnum fileobj)
 (let ((string (concat "-- Omitting:" str)) (globalnum -1))
 (list 
  (incLine extrablanks string globalnum localnum fileobj)
  (list nil '|none|))))

@

\defun{xlSay}{xlSay}
\calls{xlSay}{xlMsg}
\calls{xlSay}{inclmsgSay}
<<defun xlSay>>=
(defun |xlSay| (eb str lno ufos x)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgSay| x) '|say|)))

@

\defun{inclmsgSay}{inclmsgSay}
\calls{inclmsgSay}{id}
<<defun inclmsgSay>>=
(defun |inclmsgSay| (str)
 (list 'S2CI0001 (list (|theid| str))))

@

\defun{theid}{theid}
<<defun theid>>=
(defun |theid| (a) (list identity a))

@

\defun{xlNoSuchFile}{xlNoSuchFile}
\calls{xlNoSuchFile}{xlMsg}
\calls{xlNoSuchFile}{inclmsgNoSuchFile}
<<defun xlNoSuchFile>>=
(defun |xlNoSuchFile| (eb str lno ufos fn)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgNoSuchFile| fn) '|error|)))

@

\defun{inclmsgNoSuchFile}{inclmsgNoSuchFile}
\calls{inclmsgNoSuchFile}{thefname}
<<defun inclmsgNoSuchFile>>=
(defun |inclmsgNoSuchFile| (fn)
 (list 'S2CI0010 (list (|thefname| fn))))

@

\defun{thefname}{thefname}
\calls{thefname}{pfname}
<<defun thefname>>=
(defun |thefname| (x) (list #'|pfname| x))

@

\defun{pfname}{pfname}
\calls{pfname}{PathnameString}
<<defun pfname>>=
(defun |pfname| (x) (|PathnameString| x))

@

\defun{xlCannotRead}{xlCannotRead}
\calls{xlCannotRead}{xlMsg}
\calls{xlCannotRead}{inclmsgCannotRead}
<<defun xlCannotRead>>=
(defun |xlCannotRead| (eb str lno ufos fn)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgCannotRead| fn) '|error|)))

@

\defun{inclmsgCannotRead}{inclmsgCannotRead}
\calls{inclmsgCannotRead}{thefname}
<<defun inclmsgCannotRead>>=
(defun |inclmsgCannotRead| (fn)
 (list 'S2CI0011 (list (|thefname| fn))))

@

\defun{xlFileCycle}{xlFileCycle}
\calls{xlFileCycle}{xlMsg}
\calls{xlFileCycle}{inclmsgFileCycle}
<<defun xlFileCycle>>=
(defun |xlFileCycle| (eb str lno ufos fn)
 (|xlMsg| eb str lno (elt ufos 0) 
  (list (|inclmsgFileCycle| ufos fn) '|error|)))

@

\defun{inclmsgFileCycle}{inclmsgFileCycle}
\begin{verbatim}
;inclmsgFileCycle(ufos,fn) ==
;    flist := [porigin n for n in reverse ufos]
;    f1    := porigin fn
;    cycle := [:[:[n,'"==>"] for n in flist], f1]
;    ['S2CI0004, [%id cycle, %id f1] ]

\end{verbatim}
\calls{inclmsgFileCycle}{porigin}
\calls{inclmsgFileCycle}{id}
<<defun inclmsgFileCycle>>=
(defun |inclmsgFileCycle| (ufos fn)
 (let (cycle f1 flist)
  (setq flist
   ((lambda (Var8 Var7 n)
     (loop
      (cond
       ((or (atom Var7) (progn (setq n (car Var7)) nil))
        (return (nreverse Var8)))
       (t
        (setq Var8 (cons (|porigin| n) Var8))))
      (setq Var7 (cdr Var7))))
    nil (reverse ufos) nil))
  (setq f1 (|porigin| fn))
  (setq cycle
   (append
    ((lambda (Var10 Var9 n)
      (loop
       (cond
        ((or (atom Var9) (progn (setq n (car Var9)) nil))
          (return (nreverse Var10)))
        (t
         (setq Var10 (append (reverse (list n "==>")) Var10))))
       (setq Var9 (cdr Var9))))
     nil flist nil)
    (cons f1 nil)))
  (list 'S2CI0004 (list (|theid| cycle) (|theid| f1)))))

@

\defun{xlConActive}{xlConActive}
\calls{xlConActive}{xlMsg}
\calls{xlConActive}{inclmsgConActive}
<<defun xlConActive>>=
(defun |xlConActive| (eb str lno ufos n)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgConActive| n) '|warning|)))

@

\defun{inclmsgConActive}{inclmsgConActive}
\calls{inclmsgConActive}{id}
<<defun inclmsgConActive>>=
(defun |inclmsgConActive| (n)
 (list 'S2CI0006 (list (|theid| n))))

@

\defun{xlConStill}{xlConStill}
\calls{xlConStill}{xlMsg}
\calls{xlConStill}{inclmsgConStill}
<<defun xlConStill>>=
(defun |xlConStill| (eb str lno ufos n)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgConStill| n) '|say|)))

@

\defun{inclmsgConStill}{inclmsgConStill}
\calls{inclmsgConStill}{id}
<<defun inclmsgConStill>>=
(defun |inclmsgConStill| (n)
 (list 'S2CI0007 (list (|theid| n))))

@

\defun{xlConsole}{xlConsole}
\calls{xlConsole}{xlMsg}
\calls{xlConsole}{inclmsgConsole}
<<defun xlConsole>>=
(defun |xlConsole| (eb str lno ufos)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgConsole|) '|say|)))

@

\defun{inclmsgConsole}{inclmsgConsole}
<<defun inclmsgConsole>>=
(defun |inclmsgConsole| ()
 (list 'S2CI0005 nil))

@

\defun{xlSkippingFin}{xlSkippingFin}
\calls{xlSkippingFin}{xlMsg}
\calls{xlSkippingFin}{inclmsgFinSkipped}
<<defun xlSkippingFin>>=
(defun |xlSkippingFin| (eb str lno ufos)
 (|xlMsg| eb str lno (elt ufos 0)
   (list (|inclmsgFinSkipped|) '|warning|)))

@

\defun{inclmsgFinSkipped}{inclmsgFinSkipped}
<<defun inclmsgFinSkipped>>=
(defun |inclmsgFinSkipped| ()
 (list 'S2CI0008 nil))

@

\defun{xlPrematureFin}{xlPrematureFin}
\calls{xlPrematureFin}{xlMsg}
\calls{xlPrematureFin}{inclmsgPrematureFin}
<<defun xlPrematureFin>>=
(defun |xlPrematureFin| (eb str lno ufos)
 (|xlMsg| eb str lno (elt ufos 0)
   (list (|inclmsgPrematureFin| (elt ufos 0)) '|error|)))

@

\defun{inclmsgPrematureFin}{inclmsgPrematureFin}
\calls{inclmsgPrematureFin}{origin}
<<defun inclmsgPrematureFin>>=
(defun |inclmsgPrematureFin| (ufo)
 (list 'S2CI0003 (list (|theorigin| ufo))))

@

\defun{assertCond}{assertCond}
\calls{assertCond}{MakeSymbol}
\calls{assertCond}{incCommandTail}
\calls{assertCond}{ListMemberQ?}
\usesdollar{assertCond}{inclAssertions}
\uses{assertCond}{*whitespace*}
<<defun assertCond>>=
(defun |assertCond| (s info)
 (let (word)
 (declare (special |$inclAssertions| *whitespace*))
  (setq word 
   (|MakeSymbol| (string-trim *whitespace* (|incCommandTail| s info))))
  (unless (|ListMemberQ?| word |$inclAssertions|)
    (setq |$inclAssertions| (cons word |$inclAssertions|)))))

@

\defun{xlIfSyntax}{xlIfSyntax}
\calls{xlIfSyntax}{Top?}
\calls{xlIfSyntax}{Else?}
\calls{xlIfSyntax}{xlMsg}
\calls{xlIfSyntax}{inclmsgIfSyntax}
<<defun xlIfSyntax>>=
(defun |xlIfSyntax| (eb str lno ufos info sts)
 (let (context found st)
  (setq st (elt sts 0))
  (setq found (elt info 2))
  (setq context
   (cond
    ((|Top?| st) '|not in an )if...)endif|)
    ((|Else?| st) '|after an )else|)
    (t '|but can't figure out where|)))
  (|xlMsg| eb str lno (elt ufos 0)
    (list (|inclmsgIfSyntax| (elt ufos 0) found context) '|error|))))

@

\defun{inclmsgIfSyntax}{inclmsgIfSyntax}
\calls{inclmsgIfSyntax}{concat}
\calls{inclmsgIfSyntax}{id}
\calls{inclmsgIfSyntax}{origin}
<<defun inclmsgIfSyntax>>=
(defun |inclmsgIfSyntax| (ufo found context)
 (setq found (concat ")" found))
 (list 'S2CI0009 (list (|theid| found)
                       (|theid| context)
                       (|theorigin| ufo))))

@

\defun{xlIfBug}{xlIfBug}
\calls{xlIfBug}{xlMsg}
\calls{xlIfBug}{inclmsgIfBug}
<<defun xlIfBug>>=
(defun |xlIfBug| (eb str lno ufos)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgIfBug|) '|bug|)))

@

\defun{inclmsgIfBug}{inclmsgIfBug}
<<defun inclmsgIfBug>>=
(defun |inclmsgIfBug| ()
  (list 'S2CB0002 nil))

@

\defun{xlCmdBug}{xlCmdBug}
\calls{xlCmdBug}{xlMsg}
\calls{xlCmdBug}{inclmsgCmdBug}
<<defun xlCmdBug>>=
(defun |xlCmdBug| (eb str lno ufos)
 (|xlMsg| eb str lno (elt ufos 0) (list (|inclmsgCmdBug|) '|bug|)))

@

\defun{inclmsgCmdBug}{inclmsgCmdBug}
<<defun inclmsgCmdBug>>=
(defun |inclmsgCmdBug| ()
 (list 'S2CB0003 nil))

@

\defvar{incCommands}
This is a list of commands that can be in an include file
<<postvars>>=
(eval-when (eval load)
(setq |incCommands|
 (list "say" "include" "console" "fin" "assert" "if" "elseif" "else" "endif")))

@

\defdollar{pfMacros}
The \$pfMacros variable is an alist [ [id, state, body-pform], ...]
where state is one of: mbody, mparam, mlambda

User-defined macros are maintained in a stack of definitions. This is the
stack sequence resulting from the command lines:
\begin{verbatim}
a ==> 3
a ==> 4
b ==> 7
(
 (|b| |mbody| ((|integer| (|posn| (0 "b ==> 7" 1 1 "strings") . 6)) . "7"))
 (|a| |mbody| ((|integer| (|posn| (0 "a ==> 4" 1 1 "strings") . 6)) . "4"))
 (|a| |mbody| ((|integer| (|posn| (0 "a ==> 3" 1 1 "strings") . 6)) . "3"))
)
\end{verbatim}
<<initvars>>=
(defvar |$pfMacros| nil))

@


\defun{incClassify}{incClassify}
\begin{verbatim}
;incClassify(s) ==
;            not incCommand? s => [false,0, '""]
;            i := 1; n := #s
;            while i < n and s.i = char " " repeat i := i + 1
;            i >= n => [true,0,'"other"]
;            eb := (i = 1 => 0; i)
;            bad:=true
;            for p in incCommands while bad repeat
;                incPrefix?(p, i, s) =>
;                    bad:=false
;                    p1 :=p
;            if bad then [true,0,'"other"] else [true,eb,p1]
\end{verbatim}
\calls{incClassify}{incCommand?}
\uses{incClassify}{incCommands}
<<defun incClassify>>=
(defun |incClassify| (s)
 (let (p1 bad eb n i)
  (declare (special |incCommands|))
  (if (null (|incCommand?| s)) 
   (list nil 0 "")
   (progn
    (setq i 1)
    (setq n (length s))
    ((lambda ()
      (loop
       (cond
        ((not (and (< i n) (char= (elt s i) #\space)))
         (return nil))
        (t (setq i (1+ i)))))))
    (cond
     ((not (< i n)) (list t 0 "other"))
     (t
      (if (= i 1) 
       (setq eb 0)
       (setq eb i))
      (setq bad t)
      ((lambda (tmp1 p)
        (loop
         (cond
          ((or (atom tmp1)
               (progn (setq p (car tmp1)) nil)
               (not bad))
            (return nil))
          (t
           (cond
            ((|incPrefix?| p i s)
             (identity
              (progn
               (setq bad nil)
               (setq p1 p)))))))
         (setq tmp1 (cdr tmp1))))
        |incCommands| nil)
      (if bad 
       (list t 0 "other")
       (list t eb p1))))))))

@

\defun{incCommand?}{incCommand?}
\calls{incCommand?}{char}
<<defun incCommand?>>=
(defun |incCommand?| (s)
  "does this start with a close paren?"
  (and (< 0 (length s)) (equal (elt s 0) (|char| '|)|))))

@

\defun{incPrefix?}{incPrefix?}
\begin{verbatim}
;incPrefix?(prefix, start, whole) ==
;            #prefix > #whole-start => false
;            good:=true
;            for i in 0..#prefix-1 for j in start.. while good repeat
;                good:= prefix.i = whole.j
;            good
\end{verbatim}
<<defun incPrefix?>>=
(defun |incPrefix?| (prefix start whole)
 (let (good)
  (cond
   ((< (- (length whole) start) (length prefix)) nil)
   (t
    (setq good t)
    ((lambda (Var i j)
      (loop
       (cond
        ((or (> i Var) (not good)) (return nil))
        (t (setq good (equal (elt prefix i) (elt whole j)))))
       (setq i (+ i 1))
       (setq j (+ j 1))))
      (- (length prefix) 1) 0 start)
    good))))

@

\defun{incCommandTail}{incCommandTail}
\calls{incCommandTail}{incDrop}
<<defun incCommandTail>>=
(defun |incCommandTail| (s info)
 (let ((start (elt info 1)))
  (when (= start 0) (setq start 1))
  (|incDrop| (+ start (length (elt info 2)) 1) s)))

@

\defun{incDrop}{incDrop}
\calls{incDrop}{substring}
<<defun incDrop>>=
(defun |incDrop| (n b)
 (if (>= n (length b)) 
  '||
  (substring b n nil)))

@

\defun{inclFname}{inclFname}
\calls{inclFname}{incFileName}
\calls{inclFname}{incCommandTail}
<<defun inclFname>>=
(defun |inclFname| (s info)
 (|incFileName| (|incCommandTail| s info)))

@

\defun{incFileInput}{incFileInput}
\calls{incFileInput}{incRgen}
\calls{incFileInput}{make-instream}
<<defun incFileInput>>=
(defun |incFileInput| (fn)
  (|incRgen| (make-instream fn)))

@

\defun{incConsoleInput}{incConsoleInput}
\calls{incConsoleInput}{incRgen}
\calls{incConsoleInput}{make-instream}
<<defun incConsoleInput>>=
(defun |incConsoleInput| ()
  (|incRgen| (make-instream 0)))

@

\defun{incNConsoles}{incNConsoles}
\calls{incNConsoles}{incNConsoles}
<<defun incNConsoles>>=
(defun |incNConsoles| (ufos)
 (let ((a (member "console" ufos)))
  (if a
   (+ 1 (|incNConsoles| (cdr a)))
   0)))

@

\defun{incActive?}{incActive?}
<<defun incActive?>>=
(defun |incActive?| (fn ufos)
 (member fn ufos))

@

\defun{incRgen}{incRgen}
Note that incRgen1 recursively calls this function.
\calls{incRgen}{Delay}
\calls{incRgen}{incRgen1}
<<defun incRgen>>=
(defun |incRgen| (s)
 (|Delay| #'|incRgen1| (list s)))

@

\defun{Delay}{Delay}
<<defun Delay>>=
(defun |Delay| (f x)
 (cons '|nonnullstream| (cons f x)))

@

<<initvars>>=
(defvar |StreamNil| (list '|nullstream|))

@

\defvar{StreamNil}
<<postvars>>=
(eval-when (eval load)
  (setq |StreamNil| (list '|nullstream|)))

@

\defun{incRgen1}{incRgen1}
This function reads a line from the stream and then conses it up
with a recursive call to incRgen.
Note that incRgen recursively wraps this function in a delay list.
\calls{incRgen1}{incRgen}
\uses{incRgen1}{StreamNil}
<<defun incRgen1>>=
(defun |incRgen1| (&rest z)
 (let (a s)
 (declare (special |StreamNil|))
  (setq s (car z))
  (setq a (read-line s nil nil))
  (if (null a)
   (progn
    (close s) 
    |StreamNil|)
   (cons a (|incRgen| s)))))

@

\chapter{The Token Scanner}

\defvar{space}
<<postvars>>=
(eval-when (eval load)
(defvar space (qenum "    " 0)))

@

\defvar{escape}
<<postvars>>=
(eval-when (eval load)
(defvar escape (qenum "_  " 0)))

@

\defvar{stringchar}
<<postvars>>=
(eval-when (eval load)
(defvar stringchar (qenum "\"  " 0)))

@

\defvar{pluscomment}
<<postvars>>=
(eval-when (eval load)
(defvar pluscomment (qenum "+   " 0)))

@

\defvar{minuscomment}
<<postvars>>=
(eval-when (eval load)
(defvar minuscomment (qenum "-   " 0)))

@

\defvar{radixchar}
<<postvars>>=
(eval-when (eval load)
(defvar radixchar (qenum "r   " 0)))

@

\defvar{dot}
<<postvars>>=
(eval-when (eval load)
(defvar dot (qenum ".   " 0)))

@

\defvar{exponent1}
<<postvars>>=
(eval-when (eval load)
(defvar exponent1 (qenum "E   " 0)))

@

\defvar{exponent2}
<<postvars>>=
(eval-when (eval load)
(defvar exponent2 (qenum "e   " 0)))

@

\defvar{closeparen}
<<postvars>>=
(eval-when (eval load)
(defvar closeparen (qenum ")   " 0)))

@

\defvar{closeangle}
<<postvars>>=
(eval-when (eval load)
(defvar closeangle (qenum ">   " 0)))

@

\defvar{question}
<<postvars>>=
(eval-when (eval load)
(defvar question (qenum "?   " 0)))

@

\defvar{scanKeyWords}
<<postvars>>=
(eval-when (eval load)
(defvar |scanKeyWords|
 (list
  (list "add" 'add)
  (list "and" 'and)
  (list "break" 'break)
  (list "by" 'by)
  (list "case" 'case)
  (list "default" 'default)
  (list "define" 'defn)
  (list "do" 'do)
  (list "else" 'else)
  (list "exit" 'exit)
  (list "export" 'export)
  (list "for" 'for)
  (list "free" 'free)
  (list "from" 'from)
  (list "has" 'has)
  (list "if" 'if)
  (list "import" 'import)
  (list "in" 'in)
  (list "inline" 'inline)
  (list "is" 'is)
  (list "isnt" 'isnt)
  (list "iterate" 'iterate)
  (list "local" '|local|)
  (list "macro" 'macro)
  (list "mod" 'mod)
  (list "or" 'or)
  (list "pretend" 'pretend)
  (list "quo" 'quo)
  (list "rem" 'rem)
  (list "repeat" 'repeat)
  (list "return" 'return)
  (list "rule" 'rule)
  (list "then" 'then)
  (list "where" 'where)
  (list "while" 'while)
  (list "with" 'with)
  (list "|" 'bar)
  (list "." 'dot)
  (list "::" 'coerce)
  (list ":" 'colon)
  (list ":-" 'colondash)
  (list "@" 'at)
  (list "@@" 'atat)
  (list "," 'comma)
  (list ";" 'semicolon)
  (list "**" 'power)
  (list "*" 'times)
  (list "+" 'plus)
  (list "-" 'minus)
  (list "<" 'lt)
  (list ">" 'gt)
  (list "<=" 'le)
  (list ">=" 'ge)
  (list "=" 'equal)
  (list "~=" 'notequal)
  (list "~" '~)
  (list "^" 'carat)
  (list ".." 'seg)
  (list "#" '|#|)
  (list "&" 'ampersand)
  (list "$" '$)
  (list "/" 'slash)
  (list "\\" 'backslash)
  (list "//" 'slashslash)
  (list "\\\\" 'backslashbackslash)
  (list "/\\" 'slashbackslash)
  (list "\\/" 'backslashslash)
  (list "=>" 'exit)
  (list ":=" 'becomes)
  (list "==" 'def)
  (list "==>" 'mdef)
  (list "->" 'arrow)
  (list "<-" 'larrow)
  (list "+->" 'gives)
  (list "(" '|(|)
  (list ")" '|)|)
  (list "(|" '|(\||)
  (list "|)" '|\|)|)
  (list "[" '[)
  (list "]" '])
  (list "[_]" '[])
  (list "{" '{)
  (list "}" '})
  (list "{_}" '{})
  (list "[|" '|[\||)
  (list "|]" '|\|]|)
  (list "[|_|]" '|[\|\|]|)
  (list "{|" '|{\||)
  (list "|}" '|\|}|)
  (list "{|_|}" '|{\|\|}|)
  (list "<<" 'oangle)
  (list ">>" 'cangle)
  (list "'" '|'|)
  (list "`" 'backquote))))

@

\defvar{infgeneric}
<<postvars>>=
(eval-when (eval load)
(prog ()
  (return
    ((lambda (var value)
       (loop
         (cond
           ((or (atom var) (progn (setq value (car var)) nil))
            (return nil))
           (t
            (setf (get (car value) 'infgeneric) (cadr value))))
         (setq var (cdr var))))
     (list
      (list 'equal '=)
      (list 'times '*)
      (list 'has '|has|)
      (list 'case '|case|)
      (list 'rem '|rem|)
      (list 'mod '|mod|)
      (list 'quo '|quo|)
      (list 'slash '/)
      (list 'backslash '|\\|)
      (list 'slashslash '//)
      (list 'backslashbackslash '|\\\\|)
      (list 'slashbackslash '|/\\|)
      (list 'backslashslash '|\\/|)
      (list 'power '**)
      (list 'carat '^)
      (list 'plus '+)
      (list 'minus '-)
      (list 'lt '<)
      (list 'gt '>)
      (list 'oangle '<<)
      (list 'cangle '>>)
      (list 'le '<=)
      (list 'ge '>=)
      (list 'notequal '~=)
      (list 'by '|by|)
      (list 'arrow '->)
      (list 'larrow '<-)
      (list 'bar '|\||)
      (list 'seg '|..|))
     nil))))
@

\defun{lineoftoks}{lineoftoks}
lineoftoks  bites off a token-dq from a line-stream
returning the token-dq and the rest of the line-stream
\begin{verbatim}
;lineoftoks(s)==
;   $f: local:=nil
;   $r:local :=nil
;   $ln:local :=nil
;   $linepos:local:=nil
;   $n:local:=nil
;   $sz:local := nil
;   $floatok:local:=true
;   if not nextline s
;   then CONS(nil,nil)
;   else
;     if null scanIgnoreLine($ln,$n) -- line of spaces or starts ) or >
;     then cons(nil,$r)
;     else
;      toks:=[]
;      a:= incPrefix?('"command",1,$ln)
;      a =>
;                 $ln:=SUBSTRING($ln,8,nil)
;                 b:= dqUnit constoken($ln,$linepos,["command",$ln],0)
;                 cons([ [b,s] ],$r)
;
;      while $n<$sz repeat toks:=dqAppend(toks,scanToken())
;      if null toks
;      then cons([],$r)
;      else cons([ [toks,s] ],$r)
\end{verbatim}
\calls{lineoftoks}{nextline}
\calls{lineoftoks}{scanIgnoreLine}
\calls{lineoftoks}{incPrefix?}
\calls{lineoftoks}{substring}
\calls{lineoftoks}{dqUnit}
\calls{lineoftoks}{constoken}
\usesdollar{lineoftoks}{floatok}
\usesdollar{lineoftoks}{f}
\usesdollar{lineoftoks}{sz}
\usesdollar{lineoftoks}{linepos}
\usesdollar{lineoftoks}{r}
\usesdollar{lineoftoks}{n}
\usesdollar{lineoftoks}{ln}
<<defun lineoftoks>>=
(defun |lineoftoks| (s)
 (let (|$floatok| |$sz| |$n| |$linepos| |$ln| |$r| |$f| |b| |a| |toks|)
 (declare (special |$floatok| |$f| |$sz| |$linepos| |$r| |$n| |$ln|))
  (setq |$f| nil)
  (setq |$r| nil)
  (setq |$ln| nil)
  (setq |$linepos| nil)
  (setq |$n| nil)
  (setq |$sz| nil)
  (setq |$floatok| t)
  (cond
   ((null (|nextline| s)) (cons nil nil))
   ((null (|scanIgnoreLine| |$ln| |$n|)) (cons nil |$r|))
   (t
    (setq |toks| nil)
    (setq |a| (|incPrefix?| "command" 1 |$ln|))
    (cond
     (|a|
      (setq |$ln| (substring |$ln| 8 nil))
      (setq |b|
       (|dqUnit| (|constoken| |$ln| |$linepos| (list '|command| |$ln|) 0)))
      (cons (list (list |b| s)) |$r|))
     (t
      ((lambda ()
        (loop
         (cond
          ((not (< |$n| |$sz|)) (return nil))
          (t (setq |toks| (|dqAppend| |toks| (|scanToken|))))))))
      (cond
       ((null |toks|) (cons nil |$r|))
       (t (cons (list (list |toks| s)) |$r|)))))))))

@

\defun{nextline}{nextline}
\calls{nextline}{npNull}
\calls{nextline}{strposl}
\usesdollar{nextline}{sz}
\usesdollar{nextline}{n}
\usesdollar{nextline}{linepos}
\usesdollar{nextline}{ln}
\usesdollar{nextline}{r}
\usesdollar{nextline}{f}
<<defun nextline>>=
(defun |nextline| (s)
 (declare (special |$sz| |$n| |$linepos| |$ln| |$r| |$f|))
 (cond
  ((|npNull| s) nil)
  (t
   (setq |$f| (car s))
   (setq |$r| (cdr s))
   (setq |$ln| (cdr |$f|))
   (setq |$linepos| (caar |$f|))
   (setq |$n| (strposl " " |$ln| 0 t)) ; spaces at beginning
   (setq |$sz| (length |$ln|))
   t)))

@

\defun{scanIgnoreLine}{scanIgnoreLine}
\calls{scanIgnoreLine}{qenum}
\calls{scanIgnoreLine}{incPrefix?}
<<defun scanIgnoreLine>>=
(defun |scanIgnoreLine| (ln n)
 (let (fst)
  (cond
   ((null n) n)
   (t
    (setq fst (qenum ln 0))
    (cond
     ((eq fst closeparen)
      (cond
        ((|incPrefix?| "command" 1 ln) t)
        (t nil)))
     (t n))))))

@

\defun{constoken}{constoken}
\calls{constoken}{ncPutQ}
<<defun constoken>>=
(defun |constoken| (ln lp b n)
 (declare (ignore ln))
 (let (a)
  (setq a (cons (elt b 0) (elt b 1)))
  (|ncPutQ| a '|posn| (cons lp n))
  a))

@

\defun{scanToken}{scanToken}
\calls{scanToken}{qenum}
\calls{scanToken}{startsComment?}
\calls{scanToken}{scanComment}
\calls{scanToken}{startsNegComment?}
\calls{scanToken}{scanNegComment}
\calls{scanToken}{lfid}
\calls{scanToken}{punctuation?}
\calls{scanToken}{scanPunct}
\calls{scanToken}{startsId?}
\calls{scanToken}{scanWord}
\calls{scanToken}{scanSpace}
\calls{scanToken}{scanString}
\calls{scanToken}{digit?}
\calls{scanToken}{scanNumber}
\calls{scanToken}{scanEscape}
\calls{scanToken}{scanError}
\calls{scanToken}{dqUnit}
\calls{scanToken}{constoken}
\calls{scanToken}{lnExtraBlanks}
\usesdollar{scanToken}{linepos}
\usesdollar{scanToken}{n}
\usesdollar{scanToken}{ln}
<<defun scanToken>>=
(defun |scanToken| ()
 (let (b ch n linepos c ln)
 (declare (special |$linepos| |$n| |$ln|))
  (setq ln |$ln|)
  (setq c (qenum |$ln| |$n|))
  (setq linepos |$linepos|)
  (setq n |$n|)
  (setq ch (elt |$ln| |$n|))
  (setq b
   (cond
    ((|startsComment?|) (|scanComment|) nil)
    ((|startsNegComment?|) (|scanNegComment|) nil)
    ((equal c question)
      (setq |$n| (+ |$n| 1))
      (|lfid| "?"))
    ((|punctuation?| c) (|scanPunct|))
    ((|startsId?| ch) (|scanWord| nil))
    ((equal c space) (|scanSpace|) nil)
    ((equal c stringchar) (|scanString|))
    ((|digit?| ch) (|scanNumber|))
    ((equal c escape) (|scanEscape|))
    (t (|scanError|))))
  (cond
    ((null b) nil)
    (t
     (|dqUnit|
      (|constoken| ln linepos b (+ n (|lnExtraBlanks| linepos))))))))

@

\defun{lfid}{lfid}
To pair badge and badgee
<<defun lfid>>=
(defun |lfid| (x)
 (list '|id| (intern x "BOOT")))

@

\defun{startsComment?}{startsComment?}
\calls{startsComment?}{qenum}
\usesdollar{startsComment?}{ln}
\usesdollar{startsComment?}{sz}
\usesdollar{startsComment?}{n}
\uses{startsComment?}{pluscomment}
<<defun startsComment?>>=
(defun |startsComment?| ()
 (let (www)
 (declare (special |$ln| |$sz| |$n| pluscomment))
  (cond
   ((< |$n| |$sz|)
    (cond
     ((equal (qenum |$ln| |$n|) pluscomment)
       (setq www (+ |$n| 1))
       (cond
        ((not (< www |$sz|)) nil)
        (t (equal (qenum |$ln| www) pluscomment))))
     (t nil)))
   (t nil))))

@

\defun{scanComment}{scanComment}
\calls{scanComment}{lfcomment}
\calls{scanComment}{substring}
\usesdollar{scanComment}{ln}
\usesdollar{scanComment}{sz}
\usesdollar{scanComment}{n}
<<defun scanComment>>=
(defun |scanComment| ()
 (let (n)
 (declare (special |$ln| |$sz| |$n|))
  (setq n |$n|)
  (setq |$n| |$sz|)
  (|lfcomment| (substring |$ln| n nil))))

@

\defun{lfcomment}{lfcomment}
<<defun lfcomment>>=
(defun |lfcomment| (x)
 (list '|comment| x))

@

\defun{startsNegComment?}{startsNegComment?}
\calls{startsNegComment?}{qenum}
\usesdollar{startsNegComment?}{ln}
\usesdollar{startsNegComment?}{sz}
\usesdollar{startsNegComment?}{n}
<<defun startsNegComment?>>=
(defun |startsNegComment?| ()
 (let (www)
 (declare (special |$ln| |$sz| |$n|))
  (cond
   ((< |$n| |$sz|)
    (cond
     ((equal (qenum |$ln| |$n|) minuscomment)
       (setq www (+ |$n| 1))
       (cond
        ((not (< www |$sz|)) nil)
        (t (equal (qenum |$ln| www) minuscomment))))
     (t nil)))
   (t nil))))

@

\defun{scanNegComment}{scanNegComment}
\calls{scanNegComment}{lfnegcomment}
\calls{scanNegComment}{substring}
\usesdollar{scanNegComment}{ln}
\usesdollar{scanNegComment}{sz}
\usesdollar{scanNegComment}{n}
<<defun scanNegComment>>=
(defun |scanNegComment| ()
 (let (n)
 (declare (special |$ln| |$sz| |$n|))
  (setq n |$n|)
  (setq |$n| |$sz|)
  (|lfnegcomment| (substring |$ln| n nil))))

@

\defun{lfnegcomment}{lfnegcomment}
<<defun lfnegcomment>>=
(defun |lfnegcomment| (x)
 (list '|negcomment| x))

@

\defun{punctuation?}{punctuation?}
<<defun punctuation?>>=
(defun |punctuation?| (c)
 (eql (elt |scanPun| c) 1))
@

\defun{scanPunct}{scanPunct}
\calls{scanPunct}{subMatch}
\calls{scanPunct}{scanError}
\calls{scanPunct}{scanKeyTr}
\usesdollar{scanPunct}{n}
\usesdollar{scanPunct}{ln}
<<defun scanPunct>>=
(defun |scanPunct| ()
 (let (a sss)
 (declare (special |$n| |$ln|))
  (setq sss (|subMatch| |$ln| |$n|))
  (setq a (length sss))
  (cond
   ((eql a 0) (|scanError|))
   (t (setq |$n| (+ |$n| a)) (|scanKeyTr| sss)))))

@

\defun{subMatch}{subMatch}
\calls{subMatch}{substringMatch}
<<defun subMatch>>=
(defun |subMatch| (a b)
 (|substringMatch| a |scanDict| b))

@

\defun{substringMatch}{substringMatch}
\begin{verbatim}
;substringMatch (l,d,i)==
;       h:= QENUM(l, i)
;       u:=ELT(d,h)
;       ll:=SIZE l
;       done:=false
;       s1:='""
;       for j in 0.. SIZE u - 1 while not done repeat
;          s:=ELT(u,j)
;          ls:=SIZE s
;          done:=if ls+i > ll
;                then false
;                else
;                 eql:= true
;                 for k in 1..ls-1 while eql repeat
;                    eql:= EQL(QENUM(s,k),QENUM(l,k+i))
;                 if eql
;                 then
;                   s1:=s
;                   true
;                 else false
;       s1
\end{verbatim}
\calls{substringMatch}{qenum}
\calls{substringMatch}{size}
<<defun substringMatch>>=
(defun |substringMatch| (l dict i)
 (let (equl ls s s1 done ll u h)
  (setq h (qenum l i))
  (setq u (elt dict h))
  (setq ll (size l))
  (setq s1 "")
  ((lambda (Var4 j)
    (loop
     (cond
      ((or (> j Var4) done) (return nil))
      (t
       (setq s (elt u j))
       (setq ls (size s))
       (setq done
        (cond
         ((< ll (+ ls i)) nil)
         (t
          (setq equl t)
          ((lambda (Var5 k)
           (loop
            (cond
             ((or (> k Var5) (not equl)) (return nil))
             (t
              (setq equl (eql (qenum s k) (qenum l (+ k i))))))
              (setq k (+ k 1))))
           (- ls 1) 1)
          (cond (equl (setq s1 s) t) (t nil)))))))
     (setq j (+ j 1))))
   (- (size u) 1) 0)
  s1))

@

\defun{scanKeyTr}{scanKeyTr}
\calls{scanKeyTr}{keyword}
\calls{scanKeyTr}{scanPossFloat}
\calls{scanKeyTr}{lfkey}
\calls{scanKeyTr}{scanCloser?}
\usesdollar{scanKeyTr}{floatok}
<<defun scanKeyTr>>=
(defun |scanKeyTr| (w)
 (declare (special |$floatok|))
 (cond
  ((eq (|keyword| w) 'dot)
    (cond
     (|$floatok| (|scanPossFloat| w))
     (t (|lfkey| w))))
  (t (setq |$floatok| (null (|scanCloser?| w))) (|lfkey| w))))

@

\defun{keyword}{keyword}
\calls{keyword}{hget}
<<defun keyword>>=
(defun |keyword| (st)
 (hget |scanKeyTable| st))

@

\defun{keyword?}{keyword?}
\calls{keyword?}{hget}
<<defun keyword?>>=
(defun |keyword?| (st)
 (null (null (hget |scanKeyTable| st))))

@

\defun{scanPossFloat}{scanPossFloat}
\calls{scanPossFloat}{digit?}
\calls{scanPossFloat}{lfkey}
\calls{scanPossFloat}{spleI}
\calls{scanPossFloat}{scanExponent}
\usesdollar{scanPossFloat}{ln}
\usesdollar{scanPossFloat}{sz}
\usesdollar{scanPossFloat}{n}
<<defun scanPossFloat>>=
(defun |scanPossFloat| (w)
 (declare (special |$ln| |$sz| |$n|))
 (cond
  ((or (not (< |$n| |$sz|)) (null (|digit?| (elt |$ln| |$n|))))
    (|lfkey| w))
  (t
    (setq w (|spleI| #'|digit?|)) (|scanExponent| "0" w))))

@

\defun{digit?}{digit?}
\calls{digit?}{digitp}
<<defun digit?>>=
(defun |digit?| (x)
 (digitp x))

@

\defun{lfkey}{lfkey}
\calls{lfkey}{keyword}
<<defun lfkey>>=
(defun |lfkey| (x)
 (list '|key| (|keyword| x)))

@

\defun{spleI}{spleI}
\calls{spleI}{spleI1}
<<defun spleI>>=
(defun |spleI| (dig)
 (|spleI1| dig nil))

@

\defun{spleI1}{spleI1}
\calls{spleI1}{qenum}
\calls{spleI1}{substring}
\calls{spleI1}{scanEsc}
\calls{spleI1}{spleI1}
\calls{spleI1}{concat}
\usesdollar{spleI1}{ln}
\usesdollar{spleI1}{sz}
\usesdollar{spleI1}{n}
<<defun spleI1>>=
(defun |spleI1| (dig zro)
 (let (bb a str l n)
 (declare (special |$ln| |$sz| |$n|))
  (setq n |$n|)
  (setq l |$sz|)
  ; while $n<l and FUNCALL(dig,($ln.$n)) repeat $n:=$n+1
  ((lambda ()
    (loop
     (cond
      ((not (and (< |$n| l) (funcall dig (elt |$ln| |$n|))))
       (return nil))
      (t
       (setq |$n| (+ |$n| 1)))))))
  (cond
   ((or (equal |$n| l) (not (equal (qenum |$ln| |$n|) escape)))
    (cond
      ((and (equal n |$n|) zro) "0")
      (t (substring |$ln| n (- |$n| n)))))
   (t                            ; escaped
    (setq str (substring |$ln| n (- |$n| n)))
    (setq |$n| (+ |$n| 1))
    (setq a (|scanEsc|))
    (setq bb (|spleI1| dig zro)) ; escape, any number of spaces are ignored
    (concat str bb)))))

@

\defun{scanEsc}{scanEsc}
\begin{verbatim}
;scanEsc()==
;     if $n>=$sz
;     then if nextline($r)
;          then
;             while null $n repeat nextline($r)
;             scanEsc()
;             false
;          else false
;     else
;           n1:=STRPOSL('" ",$ln,$n,true)
;           if null n1
;           then if nextline($r)
;                then
;                  while null $n repeat nextline($r)
;                  scanEsc()
;                  false
;                else false
;           else
;                if $n=n1
;                then true
;                else if QENUM($ln,n1)=ESCAPE
;                     then
;                       $n:=n1+1
;                       scanEsc()
;                       false
;                     else
;                       $n:=n1
;                       startsNegComment?() or startsComment?() =>
;                                 nextline($r)
;                                 scanEsc()
;                                 false
;                       false
\end{verbatim}
\calls{scanEsc}{nextline}
\calls{scanEsc}{scanEsc}
\calls{scanEsc}{strposl}
\calls{scanEsc}{qenum}
\calls{scanEsc}{startsNegComment?}
\calls{scanEsc}{startsComment?}
\usesdollar{scanEsc}{ln}
\usesdollar{scanEsc}{r}
\usesdollar{scanEsc}{sz}
\usesdollar{scanEsc}{n}
<<defun scanEsc>>=
(defun |scanEsc| ()
 (let (n1)
 (declare (special |$ln| |$r| |$sz| |$n|))
  (cond
   ((not (< |$n| |$sz|))
    (cond
     ((|nextline| |$r|)
      ((lambda ()
       (loop
        (cond 
         (|$n| (return nil))
         (t (|nextline| |$r|))))))
      (|scanEsc|)
      nil)
     (t nil)))
   (t 
    (setq n1 (strposl " " |$ln| |$n| t))
    (cond
     ((null n1)
      (cond
       ((|nextline| |$r|)
        ((lambda ()
          (loop
           (cond 
            (|$n| (return nil))
            (t (|nextline| |$r|))))))
         (|scanEsc|)
         nil)
        (t nil)))
     ((equal |$n| n1) t)
     ((equal (qenum |$ln| n1) escape)
       (setq |$n| (+ n1 1))
       (|scanEsc|)
       nil)
     (t (setq |$n| n1)
      (cond
       ((or (|startsNegComment?|) (|startsComment?|))
        (progn
         (|nextline| |$r|)
         (|scanEsc|)
         nil))
       (t nil))))))))

@

\defmacro{memq}
<<defmacro memq>>=
(defmacro memq (a b)
 `(member ,a ,b :test #'eq))

@

\defvar{scanCloser}
<<postvars>>=
(eval-when (eval load)
  (defvar |scanCloser| (list '|)| '} '] '|\|)| '|\|}| '|\|]|)))
@

\defun{scanCloser?}{scanCloser?}
\calls{scanCloser?}{memq}
\calls{scanCloser?}{keyword}
\uses{scanCloser?}{scanCloser}
<<defun scanCloser?>>=
(defun |scanCloser?| (w)
 (declare (special |scanCloser|))
 (memq (|keyword| w) |scanCloser|))

@

\defun{scanWord}{scanWord}
\calls{scanWord}{scanW}
\calls{scanWord}{lfid}
\calls{scanWord}{keyword?}
\calls{scanWord}{lfkey}
\usesdollar{scanWord}{floatok}
<<defun scanWord>>=
(defun |scanWord| (esp)
 (let (w aaa)
 (declare (special |$floatok|))
  (setq aaa (|scanW| nil))
  (setq w (elt aaa 1))
  (setq |$floatok| nil)
  (cond
   ((or esp (elt aaa 0))
    (|lfid| w))
   ((|keyword?| w)
    (setq |$floatok| t)
    (|lfkey| w))
   (t
    (|lfid| w)))))

@

\defun{scanExponent}{scanExponent}
\calls{scanExponent}{lffloat}
\calls{scanExponent}{qenum}
\calls{scanExponent}{digit?}
\calls{scanExponent}{spleI}
\calls{scanExponent}{concat}
\usesdollar{scanExponent}{ln}
\usesdollar{scanExponent}{sz}
\usesdollar{scanExponent}{n}
<<defun scanExponent>>=
(defun |scanExponent| (a w)
 (let (c1 e c n)
 (declare (special |$ln| |$sz| |$n|))
  (cond
   ((not (< |$n| |$sz|)) (|lffloat| a w "0"))
   (t
    (setq n |$n|)
    (setq c (qenum |$ln| |$n|))
    (cond
     ((or (equal c exponent1) (equal c exponent2))
      (setq |$n| (+ |$n| 1))
      (cond
       ((not (< |$n| |$sz|))
        (setq |$n| n)
        (|lffloat| a w "0"))
       ((|digit?| (elt |$ln| |$n|))
        (setq e (|spleI| #'|digit?|))
        (|lffloat| a w e))
       (t
        (setq c1 (qenum |$ln| |$n|))
        (cond
         ((or (equal c1 pluscomment) (equal c1 minuscomment))
           (setq |$n| (+ |$n| 1))
           (cond
            ((not (< |$n| |$sz|))
             (setq |$n| n)
             (|lffloat| a w "0"))
            ((|digit?| (elt |$ln| |$n|))
             (setq e (|spleI| #'|digit?|))
             (|lffloat| a w
              (cond
               ((equal c1 minuscomment)
                (concat "-" e))
               (t e))))
            (t
             (setq |$n| n)
             (|lffloat| a w "0"))))))))
     (t (|lffloat| a w "0")))))))

@

\defun{lffloat}{lffloat}
\calls{lffloat}{concat}
<<defun lffloat>>=
(defun |lffloat| (a w e)
 (list '|float| (concat a "." w "e" e)))

@

\defmacro{idChar?}
<<defmacro idChar?>>=
(defmacro |idChar?| (x)
 `(or (alphanumericp ,x) (member ,x '(#\? #\% #\' #\!) :test #'char=)))
 
@

\defun{scanW}{scanW}
\calls{scanW}{posend}
\calls{scanW}{qenum}
\calls{scanW}{substring}
\calls{scanW}{scanEsc}
\calls{scanW}{scanW}
\calls{scanW}{idChar?}
\calls{scanW}{concat}
\usesdollar{scanW}{ln}
\usesdollar{scanW}{sz}
\usesdollar{scanW}{n}
<<defun scanW>>=
(defun |scanW| (b)
 (let (bb a str endid l n1)
 (declare (special |$ln| |$sz| |$n|))
  (setq n1 |$n|)
  (setq |$n| (+ |$n| 1))
  (setq l |$sz|)
  (setq endid (|posend| |$ln| |$n|))
  (cond
   ((or (equal endid l) (not (equal (qenum |$ln| endid) escape)))
    (setq |$n| endid)
    (list b (substring |$ln| n1 (- endid n1))))
   (t
    (setq str (substring |$ln| n1 (- endid n1)))
    (setq |$n| (+ endid 1))
    (setq a (|scanEsc|))
    (setq bb
     (cond
      (a (|scanW| t))
      ((not (< |$n| |$sz|)) (list b ""))
      ((|idChar?| (elt |$ln| |$n|)) (|scanW| b))
      (t (list b ""))))
    (list (or (elt bb 0) b) (concat str (elt bb 1)))))))

@

\defun{posend}{posend}
\begin{verbatim}
;posend(line,n)==
;     while n<#line and idChar? line.n repeat n:=n+1
;     n
\end{verbatim}
NOTE: do not replace ``lyne'' with ``line''
<<defun posend>>=
(defun |posend| (lyne n)
 ((lambda ()
  (loop
   (cond
    ((not (and (< n (length lyne)) (|idChar?| (elt lyne n))))
     (return nil))
    (t (setq n (+ n 1)))))))
 n)

@

\defun{scanSpace}{scanSpace}
\calls{scanSpace}{strposl}
\calls{scanSpace}{lfspaces}
\usesdollar{scanSpace}{floatok}
\usesdollar{scanSpace}{ln}
\usesdollar{scanSpace}{n}
<<defun scanSpace>>=
(defun |scanSpace| ()
 (let (n)
 (declare (special |$floatok| |$ln| |$n|))
  (setq n |$n|)
  (setq |$n| (strposl " " |$ln| |$n| t))
  (when (null |$n|) (setq |$n| (length |$ln|)))
  (setq |$floatok| t)
  (|lfspaces| (- |$n| n))))

@

\defun{lfspaces}{lfspaces}
<<defun lfspaces>>=
(defun |lfspaces| (x)
 (list '|spaces| x))

@

\defun{scanString}{scanString}
\calls{scanString}{lfstring}
\calls{scanString}{scanS}
\usesdollar{scanString}{floatok}
\usesdollar{scanString}{n}
<<defun scanString>>=
(defun |scanString| ()
 (declare (special |$floatok| |$n|))
  (setq |$n| (+ |$n| 1))
  (setq |$floatok| nil)
  (|lfstring| (|scanS|)))

@

\defun{lfstring}{lfstring}
<<defun lfstring>>=
(defun |lfstring| (x)
 (if (eql (length x) 1)
  (list '|char| x)
  (list '|string| x)))

@

\defun{scanS}{scanS}
\calls{scanS}{ncSoftError}
\calls{scanS}{lnExtraBlanks}
\calls{scanS}{strpos}
\calls{scanS}{substring}
\calls{scanS}{scanEsc}
\calls{scanS}{concat}
\calls{scanS}{scanTransform}
\calls{scanS}{scanS}
\usesdollar{scanS}{ln}
\usesdollar{scanS}{linepos}
\usesdollar{scanS}{sz}
\usesdollar{scanS}{n}
<<defun scanS>>=
(defun |scanS| ()
 (let (b a str mn escsym strsym n)
 (declare (special |$ln| |$linepos| |$sz| |$n|))
 (cond
  ((not (< |$n| |$sz|))
   (|ncSoftError|
    (cons |$linepos| (+ (|lnExtraBlanks| |$linepos|) |$n|)) 'S2CN0001 nil) "")
  (t
   (setq n |$n|)
   (setq strsym (or (strpos "\"" |$ln| |$n| nil) |$sz|))
   (setq escsym (or (strpos "_" |$ln| |$n| nil) |$sz|))
   (setq mn (min strsym escsym))
   (cond
    ((equal mn |$sz|)
     (setq |$n| |$sz|)
     (|ncSoftError|
      (cons |$linepos| (+ (|lnExtraBlanks| |$linepos|) |$n|)) 'S2CN0001 nil)
       (substring |$ln| n nil))
    ((equal mn strsym)
     (setq |$n| (+ mn 1))
     (substring |$ln| n (- mn n)))
    (t 
     (setq str (substring |$ln| n (- mn n)))
     (setq |$n| (+ mn 1))
     (setq a (|scanEsc|))
     (setq b
      (cond
       (a 
        (setq str (concat str (|scanTransform| (elt |$ln| |$n|))))
        (setq |$n| (+ |$n| 1)) (|scanS|))
       (t (|scanS|))))
     (concat str b)))))))

@

\defun{scanTransform}{scanTransform}
<<defun scanTransform>>=
(defun |scanTransform| (x) x)

@

\defun{scanNumber}{scanNumber}
\calls{scanNumber}{spleI}
\calls{scanNumber}{lfinteger}
\calls{scanNumber}{qenum}
\calls{scanNumber}{spleI1}
\calls{scanNumber}{scanExponent}
\calls{scanNumber}{scanCheckRadix}
\calls{scanNumber}{lfrinteger}
\calls{scanNumber}{concat}
\usesdollar{scanNumber}{floatok}
\usesdollar{scanNumber}{ln}
\usesdollar{scanNumber}{sz}
\usesdollar{scanNumber}{n}
<<defun scanNumber>>=
(defun |scanNumber| ()
 (let (v w n a)
 (declare (special |$floatok| |$ln| |$sz| |$n|))
  (setq a (|spleI| #'|digit?|))
  (cond
   ((not (< |$n| |$sz|))
    (|lfinteger| a))
   ((not (equal (qenum |$ln| |$n|) radixchar))
    (cond
     ((and |$floatok| (equal (qenum |$ln| |$n|) dot))
      (setq n |$n|)
      (setq |$n| (+ |$n| 1))
      (cond
       ((and (< |$n| |$sz|) (equal (qenum |$ln| |$n|) dot))
        (setq |$n| n)
        (|lfinteger| a))
       (t
        (setq w (|spleI1| #'|digit?| t))
        (|scanExponent| a w))))
     (t (|lfinteger| a))))
   (t
    (setq |$n| (+ |$n| 1))
    (setq w (|spleI1| #'|rdigit?| t))
    (|scanCheckRadix| (parse-integer a) w)
    (cond
     ((not (< |$n| |$sz|))
      (|lfrinteger| a w))
      ((equal (qenum |$ln| |$n|) dot)
       (setq n |$n|)
       (setq |$n| (+ |$n| 1))
       (cond
        ((and (< |$n| |$sz|) (equal (qenum |$ln| |$n|) dot))
         (setq |$n| n)
         (|lfrinteger| a w))
        (t 
         (setq v (|spleI1| #'|rdigit?| t))
         (|scanCheckRadix| (parse-integer a) v)
         (|scanExponent| (concat a "r" w) v))))
      (t (|lfrinteger| a w)))))))

@

\defun{rdigit?}{rdigit?}
\calls{rdigit?}{strpos}
<<defun rdigit?>>=
(defun |rdigit?| (x)
 (strpos x "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" 0 nil))

@

\defun{lfinteger}{lfinteger}
<<defun lfinteger>>=
(defun |lfinteger| (x)
 (list '|integer| x))

@

\defun{lfrinteger}{lfrinteger}
\calls{lfrinteger}{concat}
<<defun lfrinteger>>=
(defun |lfrinteger| (r x)
 (list '|integer| (concat r (concat "r" x))))

@

\defun{scanCheckRadix}{scanCheckRadix}
\begin{verbatim}
;scanCheckRadix(r,w)==
;       ns:=#w
;       done:=false
;       for i in 0..ns-1  repeat
;         a:=rdigit? w.i
;         if null a or a>=r
;         then  ncSoftError(cons($linepos,lnExtraBlanks $linepos+$n-ns+i),
;                    "S2CN0002", [w.i])
\end{verbatim}
\usesdollar{scanCheckRadix}{n}
\usesdollar{scanCheckRadix}{linepos}
<<defun scanCheckRadix>>=
(defun |scanCheckRadix| (r w)
 (let (a ns)
 (declare (special |$n| |$linepos|))
  (setq ns (length w))
  ((lambda (Var1 i)
   (loop
    (cond
     ((> i Var1) (return nil))
     (t
      (setq a (|rdigit?| (elt w i)))
      (cond
       ((or (null a) (not (< a r)))
        (|ncSoftError|
         (cons |$linepos| (+ (- (+ (|lnExtraBlanks| |$linepos|) |$n|) ns) i))
          'S2CN0002 (list (elt w i)))))))
    (setq i (+ i 1))))
   (- ns 1) 0)))

@

\defun{scanEscape}{scanEscape}
\calls{scanEscape}{scanEsc}
\calls{scanEscape}{scanWord}
\usesdollar{scanEscape}{n}
<<defun scanEscape>>=
(defun |scanEscape| ()
 (declare (special |$n|))
  (setq |$n| (+ |$n| 1))
  (when (|scanEsc|) (|scanWord| t)))

@

\defun{scanError}{scanError}
\calls{scanError}{ncSoftError}
\calls{scanError}{lnExtraBlanks}
\calls{scanError}{lferror}
\usesdollar{scanError}{ln}
\usesdollar{scanError}{linepos}
\usesdollar{scanError}{n}
<<defun scanError>>=
(defun |scanError| ()
 (let (n)
 (declare (special |$ln| |$linepos| |$n|))
  (setq n |$n|)
  (setq |$n| (+ |$n| 1))
  (|ncSoftError|
   (cons |$linepos| (+ (|lnExtraBlanks| |$linepos|) |$n|))
    'S2CN0003 (list (elt |$ln| n)))
  (|lferror| (elt |$ln| n))))

@

\defun{lferror}{lferror}
<<defun lferror>>=
(defun |lferror| (x)
 (list '|error| x))

@

\defvar{scanKeyTable}
<<postvars>>=
(eval-when (eval load)
 (defvar |scanKeyTable| (|scanKeyTableCons|)))
@

\defun{scanKeyTableCons}{scanKeyTableCons}
This function is used to build the scanKeyTable
\begin{verbatim}
;scanKeyTableCons()==
;   KeyTable:=MAKE_-HASHTABLE("CVEC",true)
;   for st in scanKeyWords repeat
;      HPUT(KeyTable,CAR st,CADR st)
;   KeyTable
\end{verbatim}
<<defun scanKeyTableCons>>=
(defun |scanKeyTableCons| ()
 (let (KeyTable)
  (setq KeyTable (make-hash-table :test #'equal))
  ((lambda (Var6 st)
   (loop
    (cond
     ((or (atom Var6) (progn (setq st (car Var6)) nil))
      (return nil))
     (t
      (hput KeyTable (car st) (cadr st))))
    (setq Var6 (cdr Var6))))
   |scanKeyWords| nil)
  KeyTable))

@

\defvar{scanDict}
<<postvars>>=
(eval-when (eval load)
 (defvar |scanDict| (|scanDictCons|)))
@

\defun{scanDictCons}{scanDictCons}
\begin{verbatim}
;scanDictCons()==
;      l:= HKEYS scanKeyTable
;      d :=
;          a:=MAKE_-VEC(256)
;          b:=MAKE_-VEC(1)
;          VEC_-SETELT(b,0,MAKE_-CVEC 0)
;          for i in 0..255 repeat VEC_-SETELT(a,i,b)
;          a
;      for s in l repeat scanInsert(s,d)
;      d
\end{verbatim}
\calls{scanDictCons}{hkeys}
<<defun scanDictCons>>=
(defun |scanDictCons| ()
 (let (d b a l)
  (setq l (hkeys |scanKeyTable|))
  (setq d
   (progn
    (setq a (make-array 256))
    (setq b (make-array 1))
    (setf (svref b 0)
      (make-array 0 :fill-pointer 0 :element-type 'string-char))
    ((lambda (i)
     (loop
      (cond
       ((> i 255) (return nil))
       (t (setf (svref a i) b)))
      (setq i (+ i 1))))
     0)
    a))
  ((lambda (Var7 s)
   (loop
    (cond
     ((or (atom Var7) (progn (setq s (car Var7)) nil))
      (return nil))
     (t (|scanInsert| s d)))
    (setq Var7 (cdr Var7))))
   l nil)
  d))

@

\defun{scanInsert}{scanInsert}
\begin{verbatim}
;scanInsert(s,d) ==
;      l := #s
;      h := QENUM(s,0)
;      u := ELT(d,h)
;      n := #u
;      k:=0
;      while l <= #(ELT(u,k)) repeat
;          k:=k+1
;      v := MAKE_-VEC(n+1)
;      for i in 0..k-1 repeat VEC_-SETELT(v,i,ELT(u,i))
;      VEC_-SETELT(v,k,s)
;      for i in k..n-1 repeat VEC_-SETELT(v,i+1,ELT(u,i))
;      VEC_-SETELT(d,h,v)
;      s
\end{verbatim}
\calls{scanInsert}{qenum}
<<defun scanInsert>>=
(defun |scanInsert| (s d)
 (let (v k n u h l)
  (setq l (length s))
  (setq h (qenum s 0))
  (setq u (elt d h))
  (setq n (length u))
  (setq k 0)
  ((lambda ()
   (loop
    (cond
     ((< (length (elt u k)) l) (return nil))
     (t (setq k (+ k 1)))))))
  (setq v (make-array (+ n 1)))
  ((lambda (Var2 i)
   (loop
    (cond
     ((> i Var2) (return nil))
     (t (setf (svref v i) (elt u i))))
    (setq i (+ i 1))))
   (- k 1) 0)
  (setf (svref v k) s)
  ((lambda (Var3 i)
   (loop
    (cond
     ((> i Var3) (return nil))
     (t (setf (svref v (+ i 1)) (elt u i))))
    (setq i (+ i 1))))
   (- n 1) k)
  (setf (svref d h) v)
  s))

@

\defvar{scanPun}
<<postvars>>=
(eval-when (eval load)
 (defvar |scanPun| (|scanPunCons|)))

@

\defun{scanPunCons}{scanPunCons}
\begin{verbatim}
;scanPunCons()==
;    listing := HKEYS scanKeyTable
;    a:=MAKE_-BVEC 256
;    for i in 0..255 repeat BVEC_-SETELT(a,i,0)
;    for k in listing repeat
;       if not startsId? k.0
;       then BVEC_-SETELT(a,QENUM(k,0),1)
;    a
\end{verbatim}
\calls{scanPunCons}{hkeys}
<<defun scanPunCons>>=
(defun |scanPunCons| ()
 (let (a listing)
  (setq listing (hkeys |scanKeyTable|))
  (setq a (make-array (list 256) :element-type 'bit :initial-element 0))
  ((lambda (i)
   (loop
    (cond
     ((> i 255) (return nil))
     (t (setf (sbit a i) 0)))
    (setq i (+ i 1))))
   0)
  ((lambda (Var8 k)
   (loop
    (cond
     ((or (atom Var8) (progn (setq k (car Var8)) nil))
      (return nil))
     (t
      (cond
       ((null (|startsId?| (elt k 0)))
        (setf (sbit a (qenum k 0)) 1)))))
    (setq Var8 (cdr Var8))))
   listing nil)
  a))

@

\chapter{Input Stream Parser}

\defun{npParse}{Input Stream Parser}
\catches{npParse}{trappoint}
\calls{npParse}{npFirstTok}
\calls{npParse}{npItem}
\calls{npParse}{ncSoftError}
\calls{npParse}{tokPosn}
\calls{npParse}{pfWrong}
\calls{npParse}{pfDocument}
\calls{npParse}{pfListOf}
\usesdollar{npParse}{ttok}
\usesdollar{npParse}{stok}
\usesdollar{npParse}{stack}
\usesdollar{npParse}{inputStream}
<<defun npParse>>=
(defun |npParse| (stream)
 (let (|$ttok| |$stok| |$stack| |$inputStream| found)
 (declare (special |$ttok| |$stack| |$inputStream| |$stok|))
  (setq |$inputStream| stream)
  (setq |$stack| nil)
  (setq |$stok| nil)
  (setq |$ttok| nil)
  (|npFirstTok|)
  (setq found (catch 'trappoint (|npItem|)))
  (cond
   ((eq found 'trapped)
    (|ncSoftError| (|tokPosn| |$stok|) 's2cy0006 nil)
    (|pfWrong| (|pfDocument| "top level syntax error") (|pfListOf| nil)))
   ((null (null |$inputStream|))
    (|ncSoftError| (|tokPosn| |$stok|) 's2cy0002 nil)
    (|pfWrong|
     (|pfDocument| (list "input stream not exhausted"))
     (|pfListOf| nil)))
   ((null |$stack|)
    (|ncSoftError| (|tokPosn| |$stok|) 's2cy0009 nil)
    (|pfWrong| (|pfDocument| (list "stack empty")) (|pfListOf| nil)))
   (t (car |$stack|)))))

@

\defun{npItem}{npItem}
\calls{npItem}{npQualDef}
\calls{npItem}{npEqKey}
\calls{npItem}{npItem1}
\calls{npItem}{npPop1}
\calls{npItem}{pfEnSequence}
\calls{npItem}{npPush}
\calls{npItem}{pfNovalue}
<<defun npItem>>=
(defun |npItem| ()
 (let (c b a tmp1)
  (when (|npQualDef|)
    (if (|npEqKey| 'semicolon)
     (progn
      (setq tmp1 (|npItem1| (|npPop1|)))
      (setq a (car tmp1))
      (setq b (cadr tmp1))
      (setq c (|pfEnSequence| b))
      (if a
       (|npPush| c)
       (|npPush| (|pfNovalue| c))))
     (|npPush| (|pfEnSequence| (|npPop1|)))))))

@

\defun{npItem1}{npItem1}
\calls{npItem1}{npQualDef}
\calls{npItem1}{npEqKey}
\calls{npItem1}{npItem1}
\calls{npItem1}{npPop1}
<<defun npItem1>>=
(defun |npItem1| (c)
 (let (b a tmp1)
  (if (|npQualDef|)
   (if (|npEqKey| 'semicolon)
     (progn
      (setq tmp1 (|npItem1| (|npPop1|)))
      (setq a (car tmp1))
      (setq b (cadr tmp1))
      (list a (append c b)))
    (list t (append c (|npPop1|))))
   (list nil c))))

@

\defun{npFirstTok}{npFirstTok}
Sets the current leaf (\$stok) to the next leaf in the input stream.
Sets the current token (\$ttok) cdr of the leaf.
A leaf token looks like [head, token, position]
where head is either an id or (id . alist)
\calls{npFirstTok}{tokConstruct}
\calls{npFirstTok}{tokPosn}
\calls{npFirstTok}{tokPart}
\usesdollar{npFirstTok}{ttok}
\usesdollar{npFirstTok}{stok}
\usesdollar{npFirstTok}{inputStream}
<<defun npFirstTok>>=
(defun |npFirstTok| ()
 (declare (special |$ttok| |$stok| |$inputStream|))
 (if (null |$inputStream|)
  (setq |$stok| (|tokConstruct| 'error 'nomore (|tokPosn| |$stok|)))
  (setq |$stok| (car |$inputStream|)))
 (setq |$ttok| (|tokPart| |$stok|)))

@

\defun{npPush}{Push one item onto \$stack}
\usesdollar{npPush}{stack}
<<defun npPush>>=
(defun |npPush| (x)
 (declare (special |$stack|))
  (push x |$stack|))

@

\defun{npPop1}{Pop one item off \$stack}
\usesdollar{npPop1}{stack}
<<defun npPop1>>=
(defun |npPop1| ()
 (declare (special |$stack|))
 (pop |$stack|))

@

\defun{npPop2}{Pop the second item off \$stack}
\usesdollar{npPop2}{stack}
<<defun npPop2>>=
(defun |npPop2| ()
 (let (a) 
 (declare (special |$stack|))
  (setq a (cadr |$stack|))
  (rplacd |$stack| (cddr |$stack|))
  a))
@

\defun{npPop3}{Pop the third item off \$stack}
\usesdollar{npPop3}{stack}
<<defun npPop3>>=
(defun |npPop3| () 
 (let (a)
 (declare (special |$stack|))
  (setq a (caddr |$stack|))
  (rplacd (cdr |$stack|) (cdddr |$stack|)) a))

@

\defun{npQualDef}{npQualDef}
\calls{npQualDef}{npComma}
\calls{npQualDef}{npPush}
\calls{npQualDef}{npPop1}
<<defun npQualDef>>=
(defun |npQualDef| ()
 (and (|npComma|) (|npPush| (list (|npPop1|)))))

@

\defun{npEqKey}{Advance over a keyword}
Test for the keyword, if found advance the token stream
\calls{npEqKey}{npNext}
\usesdollar{npEqKey}{ttok}
\usesdollar{npEqKey}{stok}
<<defun npEqKey>>=
(defun |npEqKey| (keyword)
 (declare (special |$ttok| |$stok|))
 (and
  (eq (caar |$stok|) '|key|)
  (eq keyword |$ttok|)
  (|npNext|)))

@

\defun{npNext}{Advance the input stream}
This advances the input stream. The call to npFirstTok picks off the
next token in the input stream and updates the current leaf (\$stok)
and the current token (\$ttok)
\calls{npNext}{npFirstTok}
\usesdollar{npNext}{inputStream}
<<defun npNext>>=
(defun |npNext| ()
 (declare (special |$inputStream|))
  (setq |$inputStream| (cdr |$inputStream|))
  (|npFirstTok|))

@

\defun{npComma}{npComma}
\calls{npComma}{npTuple}
\calls{npComma}{npQualifiedDefinition}
<<defun npComma>>=
(defun |npComma| ()
 (|npTuple| #'|npQualifiedDefinition|))

@

\defun{npTuple}{npTuple}
\calls{npTuple}{npListofFun}
\calls{npTuple}{npCommaBackSet}
\calls{npTuple}{pfTupleListOf}
<<defun npTuple>>=
(defun |npTuple| (|p|)
 (|npListofFun| |p| #'|npCommaBackSet| #'|pfTupleListOf|))

@

\defun{npCommaBackSet}{npCommaBackSet}
\calls{npCommaBackSet}{npEqKey}
<<defun npCommaBackSet>>=
(defun |npCommaBackSet| ()
 (and
  (|npEqKey| 'comma)
  (or (|npEqKey| 'backset) t)))

@

\defun{npQualifiedDefinition}{npQualifiedDefinition}
\calls{npQualifiedDefinition}{npQualified}
\calls{npQualifiedDefinition}{npDefinitionOrStatement}
<<defun npQualifiedDefinition>>=
(defun |npQualifiedDefinition| ()
 (|npQualified| #'|npDefinitionOrStatement|))

@

\defun{npQualified}{npQualified}
\calls{npQualified}{npEqKey}
\calls{npQualified}{npDefinition}
\calls{npQualified}{npTrap}
\calls{npQualified}{npPush}
\calls{npQualified}{pfWhere}
\calls{npQualified}{npPop1}
\calls{npQualified}{npLetQualified}
<<defun npQualified>>=
(defun |npQualified| (f)
 (if (funcall f)
  (progn
   (do () ; while ... do
      ((not (and (|npEqKey| 'where) (or (|npDefinition|) (|npTrap|)))))
   (|npPush| (|pfWhere| (|npPop1|) (|npPop1|))))
   t)
  (|npLetQualified| f)))

@

\defun{npDefinitionOrStatement}{npDefinitionOrStatement}
\calls{npDefinitionOrStatement}{npBackTrack}
\calls{npDefinitionOrStatement}{npGives}
\calls{npDefinitionOrStatement}{npDef}
<<defun npDefinitionOrStatement>>=
(defun |npDefinitionOrStatement| ()
 (|npBackTrack| #'|npGives| 'def #'|npDef|))

@

\defun{npBackTrack}{npBackTrack}
\calls{npBackTrack}{npState}
\calls{npBackTrack}{npEqPeek}
\calls{npBackTrack}{npRestore}
\calls{npBackTrack}{npTrap}
<<defun npBackTrack>>=
(defun |npBackTrack| (p1 p2 p3)
 (let (a)
  (setq a (|npState|))
  (when (apply p1 nil)
    (cond
     ((|npEqPeek| p2)
       (|npRestore| a)
       (or (apply p3 nil) (|npTrap|)))
     (t t)))))

@

\defun{npGives}{npGives}
\calls{npGives}{npBackTrack}
\calls{npGives}{npExit}
\calls{npGives}{npLambda}
<<defun npGives>>=
(defun |npGives| ()
 (|npBackTrack| #'|npExit| 'gives #'|npLambda|))

@

\defun{npLambda}{npLambda}
\calls{npLambda}{npVariable}
\calls{npLambda}{npLambda}
\calls{npLambda}{npTrap}
\calls{npLambda}{npPush}
\calls{npLambda}{pfLam}
\calls{npLambda}{npPop2}
\calls{npLambda}{npPop1}
\calls{npLambda}{npEqKey}
\calls{npLambda}{npDefinitionOrStatement}
\calls{npLambda}{npType}
\calls{npLambda}{pfReturnTyped}
<<defun npLambda>>=
(defun |npLambda| ()
 (or
  (and
   (|npVariable|)
   (or (|npLambda|) (|npTrap|))
   (|npPush| (|pfLam| (|npPop2|) (|npPop1|))))
  (and
   (|npEqKey| 'gives)
   (or (|npDefinitionOrStatement|) (|npTrap|)))
  (and
   (|npEqKey| 'colon)
   (or (|npType|) (|npTrap|))
   (|npEqKey| 'gives)
   (or (|npDefinitionOrStatement|) (|npTrap|))
   (|npPush| (|pfReturnTyped| (|npPop2|) (|npPop1|))))))

@

\defun{npType}{npType}
\calls{npType}{npMatch}
\calls{npType}{npPop1}
\calls{npType}{npWith}
\calls{npType}{npPush}
<<defun npType>>=
(defun |npType| ()
 (and
  (|npMatch|)
  (let ((a (|npPop1|)))
   (or
    (|npWith| a)
    (|npPush| a)))))

@

\defun{npMatch}{npMatch}
\calls{npMatch}{npLeftAssoc}
\calls{npMatch}{npSuch}
<<defun npMatch>>=
(defun |npMatch| () 
 (|npLeftAssoc| '(is isnt) #'|npSuch|))

@

\defun{npSuch}{npSuch}
\calls{npSuch}{npLeftAssoc}
\calls{npSuch}{npLogical}
<<defun npSuch>>=
(defun |npSuch| () 
 (|npLeftAssoc| '(bar) #'|npLogical|))

@

\defun{npWith}{npWith}
\calls{npWith}{npEqKey}
\calls{npWith}{npState}
\calls{npWith}{npCategoryL}
\calls{npWith}{npTrap}
\calls{npWith}{npEqPeek}
\calls{npWith}{npRestore}
\calls{npWith}{npVariable}
\calls{npWith}{npCompMissing}
\calls{npWith}{npPush}
\calls{npWith}{pfWith}
\calls{npWith}{npPop2}
\calls{npWith}{npPop1}
\calls{npWith}{pfNothing}
<<defun npWith>>=
(defun |npWith| (extra)
 (let (a)
  (and
   (|npEqKey| 'with)
   (progn
    (setq a (|npState|))
    (or (|npCategoryL|) (|npTrap|))
    (if (|npEqPeek| 'in)
     (progn
       (|npRestore| a)
       (and
        (or (|npVariable|) (|npTrap|))
        (|npCompMissing| 'in)
        (or (|npCategoryL|) (|npTrap|))
        (|npPush| (|pfWith| (|npPop2|) (|npPop1|) extra))))
     (|npPush| (|pfWith| (|pfNothing|) (|npPop1|) extra)))))))

@

\defun{npCompMissing}{npCompMissing}
\calls{npCompMissing}{npEqKey}
\calls{npCompMissing}{npMissing}
<<defun npCompMissing>>=
(defun |npCompMissing| (s)
 (or (|npEqKey| s) (|npMissing| s)))

@

\defun{npMissing}{npMissing}
\throws{npMissing}{trappoint}
\calls{npMissing}{ncSoftError}
\calls{npMissing}{tokPosn}
\calls{npMissing}{pname}
\usesdollar{npMissing}{stok}
<<defun npMissing>>=
(defun |npMissing| (s)
 (declare (special |$stok|))
  (|ncSoftError| (|tokPosn| |$stok|) 'S2CY0007 (list (pname s)))
  (throw 'trappoint 'trapped)))))

@

\defun{npRestore}{npRestore}
\calls{npRestore}{npFirstTok}
\usesdollar{npRestore}{stack}
\usesdollar{npRestore}{inputStream}
<<defun npRestore>>=
(defun |npRestore| (x)
 (declare (special |$stack| |$inputStream|))
  (setq |$inputStream| (car x))
  (|npFirstTok|)
  (setq |$stack| (cdr x))
  t)

@

\defun{npEqPeek}{Peek for keyword s, no advance of token stream}
\usesdollar{npEqPeek}{ttok}
\usesdollar{npEqPeek}{stok}
<<defun npEqPeek>>=
(defun |npEqPeek| (s)
 (declare (special |$ttok| |$stok|))
  (and (eq (caar |$stok|) '|key|) (eq s |$ttok|)))

@

\defun{npCategoryL}{npCategoryL}
\calls{npCategoryL}{npCategory}
\calls{npCategoryL}{npPush}
\calls{npCategoryL}{pfUnSequence}
\calls{npCategoryL}{npPop1}
<<defun npCategoryL>>=
(defun |npCategoryL| ()
 (and 
  (|npCategory|)
  (|npPush| (|pfUnSequence| (|npPop1|)))))

@

\defun{npCategory}{npCategory}
\calls{npCategory}{npPP}
\calls{npCategory}{npSCategory}
<<defun npCategory>>=
(defun |npCategory| ()
 (|npPP| #'|npSCategory|))

@

\defun{npSCategory}{npSCategory}
\calls{npSCategory}{npWConditional}
\calls{npSCategory}{npCategoryL}
\calls{npSCategory}{npPush}
\calls{npSCategory}{npPop1}
\calls{npSCategory}{npDefaultValue}
\calls{npSCategory}{npState}
\calls{npSCategory}{npPrimary}
\calls{npSCategory}{npEqPeek}
\calls{npSCategory}{npRestore}
\calls{npSCategory}{npSignature}
\calls{npSCategory}{npApplication}
\calls{npSCategory}{pfAttribute}
\calls{npSCategory}{npTrap}
<<defun npSCategory>>=
(defun |npSCategory| ()
 (let (a)
  (cond
   ((|npWConditional| #'|npCategoryL|) (|npPush| (list (|npPop1|))))
   ((|npDefaultValue|) t)
   (t
    (setq a (|npState|))
    (cond
     ((|npPrimary|)
       (cond
        ((|npEqPeek| 'colon) (|npRestore| a) (|npSignature|))
        (t
         (|npRestore| a)
         (or
          (and (|npApplication|) (|npPush| (list (|pfAttribute| (|npPop1|)))))
          (|npTrap|)))))
      (t nil))))))

@

\defun{npSignature}{npSignature}
\calls{npSignature}{npSigItemlist}
\calls{npSignature}{npPush}
\calls{npSignature}{pfWDec}
\calls{npSignature}{pfNothing}
\calls{npSignature}{npPop1}
<<defun npSignature>>=
(defun |npSignature| ()
 (and (|npSigItemlist|) (|npPush| (|pfWDec| (|pfNothing|) (|npPop1|)))))

@

\defun{npSigItemlist}{npSigItemlist}
\calls{npSigItemlist}{npListing}
\calls{npSigItemlist}{npSigItem}
\calls{npSigItemlist}{npPush}
\calls{npSigItemlist}{pfListOf}
\calls{npSigItemlist}{pfAppend}
\calls{npSigItemlist}{pfParts}
\calls{npSigItemlist}{npPop1}
<<defun npSigItemlist>>=
(defun |npSigItemlist| ()
 (and
  (|npListing| #'|npSigItem|)
  (|npPush| (|pfListOf| (|pfAppend| (|pfParts| (|npPop1|)))))))

@

\defun{npListing}{npListing}
\calls{npListing}{npList}
\calls{npListing}{pfListOf}
<<defun npListing>>=
(defun |npListing| (p)
 (|npList| p 'comma #'|pfListOf|))

@

\defun{npList}{Always produces a list, fn is applied to it}
\calls{npList}{npEqKey}
\calls{npList}{npTrap}
\calls{npList}{npPush}
\calls{npList}{npPop3}
\calls{npList}{npPop2}
\calls{npList}{npPop1}
\usesdollar{npList}{stack}
<<defun npList>>=
(defun |npList| (f str1 fn)
 (let (a)
 (declare (special |$stack|))
  (cond
   ((apply f nil)
    (cond
     ((and (|npEqKey| str1) 
           (or (|npEqKey| 'backset) t)
           (or (apply f nil) (|npTrap|)))
       (setq a |$stack|)
       (setq |$stack| nil)
       (do ()                                ; while .. do nothing
           ((not 
             (and (|npEqKey| str1)
                  (or (|npEqKey| 'backset) t)
                  (or (apply f nil) (|npTrap|))))
            nil))
       (setq |$stack| (cons (nreverse |$stack|) a))
       (|npPush| (funcall fn (cons (|npPop3|) (cons (|npPop2|) (|npPop1|))))))
     (t (|npPush| (funcall fn (list (|npPop1|)))))))
   (t (|npPush| (funcall fn nil))))))

@

\defun{npSigItem}{npSigItem}
\calls{npSigItem}{npTypeVariable}
\calls{npSigItem}{npSigDecl}
\calls{npSigItem}{npTrap}
<<defun npSigItem>>=
(defun |npSigItem| ()
 (and (|npTypeVariable|) (or (|npSigDecl|) (|npTrap|))))

@

\defun{npTypeVariable}{npTypeVariable}
\calls{npTypeVariable}{npParenthesized}
\calls{npTypeVariable}{npTypeVariablelist}
\calls{npTypeVariable}{npSignatureDefinee}
\calls{npTypeVariable}{npPush}
\calls{npTypeVariable}{pfListOf}
\calls{npTypeVariable}{npPop1}
<<defun npTypeVariable>>=
(defun |npTypeVariable| ()
 (or
  (|npParenthesized| #'|npTypeVariablelist|)
  (and (|npSignatureDefinee|) (|npPush| (|pfListOf| (list (|npPop1|)))))))

@

\defun{npSignatureDefinee}{npSignatureDefinee}
\calls{npSignatureDefinee}{npName}
\calls{npSignatureDefinee}{npInfixOperator}
\calls{npSignatureDefinee}{npPrefixColon}
<<defun npSignatureDefinee>>=
(defun |npSignatureDefinee| ()
 (or (|npName|) (|npInfixOperator|) (|npPrefixColon|)))

@

\defun{npTypeVariablelist}{npTypeVariablelist}
\calls{npTypeVariablelist}{npListing}
\calls{npTypeVariablelist}{npSignatureDefinee}
<<defun npTypeVariablelist>>=
(defun |npTypeVariablelist| ()
 (|npListing| #'|npSignatureDefinee|))

@

\defun{npSigDecl}{npSigDecl}
\calls{npSigDecl}{npEqKey}
\calls{npSigDecl}{npType}
\calls{npSigDecl}{npTrap}
\calls{npSigDecl}{npPush}
\calls{npSigDecl}{pfSpread}
\calls{npSigDecl}{pfParts}
\calls{npSigDecl}{npPop2}
\calls{npSigDecl}{npPop1}
<<defun npSigDecl>>=
(defun |npSigDecl| () 
 (and
  (|npEqKey| 'colon)
  (or (|npType|) (|npTrap|))
  (|npPush| (|pfSpread| (|pfParts| (|npPop2|)) (|npPop1|)))))

@

\defun{npPrimary}{npPrimary}
\calls{npPrimary}{npPrimary1}
\calls{npPrimary}{npPrimary2}
<<defun npPrimary>>=
(defun |npPrimary| ()
 (or (|npPrimary1|) (|npPrimary2|)))

@

\defun{npPrimary2}{npPrimary2}
\calls{npPrimary2}{npEncAp}
\calls{npPrimary2}{npAtom2}
\calls{npPrimary2}{npAdd}
\calls{npPrimary2}{pfNothing}
\calls{npPrimary2}{npWith}
<<defun npPrimary2>>=
(defun |npPrimary2| ()
 (or
  (|npEncAp| #'|npAtom2|)
  (|npAdd| (|pfNothing|))
  (|npWith| (|pfNothing|))))

@

\defun{npADD}{npADD}
\tpdhere{Note that there is also an npAdd function}
\calls{npADD}{npType}
\calls{npADD}{npPop1}
\calls{npADD}{npAdd}
\calls{npADD}{npPush}
<<defun npADD>>=
(defun |npADD| ()
 (let (a)
  (and
   (|npType|)
   (progn
    (setq a (|npPop1|))
    (or
      (|npAdd| a)
      (|npPush| a))))))

@

\defun{npAdd}{npAdd}
\tpdhere{Note that there is also an npADD function}
\calls{npAdd}{npEqKey}
\calls{npAdd}{npState}
\calls{npAdd}{npDefinitionOrStatement}
\calls{npAdd}{npTrap}
\calls{npAdd}{npEqPeek}
\calls{npAdd}{npRestore}
\calls{npAdd}{npVariable}
\calls{npAdd}{npCompMissing}
\calls{npAdd}{npDefinitionOrStatement}
\calls{npAdd}{npPush}
\calls{npAdd}{pfAdd}
\calls{npAdd}{npPop2}
\calls{npAdd}{npPop1}
\calls{npAdd}{pfNothing}
<<defun npAdd>>=
(defun |npAdd| (extra)
 (let (a)
  (and
   (|npEqKey| 'add)
   (progn
    (setq a (|npState|))
    (or (|npDefinitionOrStatement|) (|npTrap|))
    (cond
     ((|npEqPeek| 'in)
      (progn
        (|npRestore| a)
        (and
         (or (|npVariable|) (|npTrap|))
         (|npCompMissing| 'in)
         (or (|npDefinitionOrStatement|) (|npTrap|))
         (|npPush| (|pfAdd| (|npPop2|) (|npPop1|) extra)))))
     (t
       (|npPush| (|pfAdd| (|pfNothing|) (|npPop1|) extra))))))))

@

\defun{npAtom2}{npAtom2}
\calls{npAtom2}{npInfixOperator}
\calls{npAtom2}{npAmpersand}
\calls{npAtom2}{npPrefixColon}
\calls{npAtom2}{npFromdom}
<<defun npAtom2>>=
(defun |npAtom2| ()
 (and
  (or (|npInfixOperator|) (|npAmpersand|) (|npPrefixColon|))
  (|npFromdom|)))

@

\defun{npInfixOperator}{npInfixOperator}
\calls{npInfixOperator}{npInfixOp}
\calls{npInfixOperator}{npState}
\calls{npInfixOperator}{npEqKey}
\calls{npInfixOperator}{npInfixOp}
\calls{npInfixOperator}{npPush}
\calls{npInfixOperator}{pfSymb}
\calls{npInfixOperator}{npPop1}
\calls{npInfixOperator}{tokPosn}
\calls{npInfixOperator}{npRestore}
\calls{npInfixOperator}{tokConstruct}
\calls{npInfixOperator}{tokPart}
\usesdollar{npInfixOperator}{stok}
<<defun npInfixOperator>>=
(defun |npInfixOperator| ()
 (let (b a)
  (declare (special |$stok|))
   (or (|npInfixOp|)
       (progn
        (setq a (|npState|))
        (setq b |$stok|)
        (cond
         ((and (|npEqKey| '|'|) (|npInfixOp|))
           (|npPush| (|pfSymb| (|npPop1|) (|tokPosn| b))))
          (t
           (|npRestore| a)
           (cond
            ((and (|npEqKey| 'backquote) (|npInfixOp|))
              (setq a (|npPop1|))
               (|npPush| (|tokConstruct| '|idsy| (|tokPart| a) (|tokPosn| a))))
            (t 
             (|npRestore| a)
             nil))))))))

@

\defun{npInfixOp}{npInfixOp}
\calls{npInfixOp}{npPushId}
\usesdollar{npInfixOp}{ttok}
\usesdollar{npInfixOp}{stok}
<<defun npInfixOp>>=
(defun |npInfixOp| ()
 (declare (special |$ttok| |$stok|))
  (and
   (eq (caar |$stok|) '|key|)
   (get |$ttok| 'infgeneric)
   (|npPushId|)))

@

\defun{npPrefixColon}{npPrefixColon}
\calls{npPrefixColon}{npEqPeek}
\calls{npPrefixColon}{npPush}
\calls{npPrefixColon}{tokConstruct}
\calls{npPrefixColon}{tokPosn}
\calls{npPrefixColon}{npNext}
\usesdollar{npPrefixColon}{stok}
<<defun npPrefixColon>>=
(defun |npPrefixColon| ()
 (declare (special |$stok|))
 (and
  (|npEqPeek| 'colon)
  (progn
   (|npPush| (|tokConstruct| '|id| '|:| (|tokPosn| |$stok|)))
   (|npNext|))))

@

\defun{npApplication}{npApplication}
\calls{npApplication}{npDotted}
\calls{npApplication}{npPrimary}
\calls{npApplication}{npApplication2}
\calls{npApplication}{npPush}
\calls{npApplication}{pfApplication}
\calls{npApplication}{npPop2}
\calls{npApplication}{npPop1}
<<defun npApplication>>=
(defun |npApplication| ()
 (and
  (|npDotted| #'|npPrimary|)
  (or
   (and
    (|npApplication2|)
    (|npPush| (|pfApplication| (|npPop2|) (|npPop1|))))
    t)))

@

\defun{npDotted}{npDotted}
\calls{npDotted}{}
<<defun npDotted>>=
(defun |npDotted| (f)
 (and (apply f nil) (|npAnyNo| #'|npSelector|)))

@

\defun{npAnyNo}{npAnyNo}
fn must transform the head of the stack
<<defun npAnyNo>>=
(defun |npAnyNo| (fn)
 (do () ((not (apply fn nil)))) ; while apply do...
 t) 

@

\defun{npSelector}{npSelector}
\calls{npSelector}{npEqKey}
\calls{npSelector}{npPrimary}
\calls{npSelector}{npTrap}
\calls{npSelector}{npPush}
\calls{npSelector}{pfApplication}
\calls{npSelector}{npPop2}
\calls{npSelector}{npPop1}
<<defun npSelector>>=
(defun |npSelector| ()
 (and
  (|npEqKey| 'dot)
  (or (|npPrimary|) (|npTrap|))
  (|npPush| (|pfApplication| (|npPop2|) (|npPop1|)))))

@

\defun{npApplication2}{npApplication2}
\calls{npApplication2}{npDotted}
\calls{npApplication2}{npPrimary1}
\calls{npApplication2}{npApplication2}
\calls{npApplication2}{npPush}
\calls{npApplication2}{pfApplication}
\calls{npApplication2}{npPop2}
\calls{npApplication2}{npPop1}
<<defun npApplication2>>=
(defun |npApplication2| ()
 (and
  (|npDotted| #'|npPrimary1|)
  (or
   (and
    (|npApplication2|)
    (|npPush| (|pfApplication| (|npPop2|) (|npPop1|))))
    t)))

@

\defun{npPrimary1}{npPrimary1}
\calls{npPrimary1}{npEncAp}
\calls{npPrimary1}{npAtom1}
\calls{npPrimary1}{npLet}
\calls{npPrimary1}{npFix}
\calls{npPrimary1}{npMacro}
\calls{npPrimary1}{npBPileDefinition}
\calls{npPrimary1}{npDefn}
\calls{npPrimary1}{npRule}
<<defun npPrimary1>>=
(defun |npPrimary1| ()
 (or
  (|npEncAp| #'|npAtom1|)
  (|npLet|)
  (|npFix|)
  (|npMacro|)
  (|npBPileDefinition|)
  (|npDefn|)
  (|npRule|)))

@

\defun{npMacro}{npMacro}
\calls{npMacro}{npPP}
\calls{npMacro}{npMdef}
<<defun npMacro>>=
(defun |npMacro| ()
 (and
  (|npEqKey| 'macro)
  (|npPP| #'|npMdef|)))

@

\defun{npMdef}{npMdef}
\tpdhere{Beware that this function occurs with uppercase also}
\calls{npMdef}{npQuiver}
\calls{npMdef}{pfCheckMacroOut}
\calls{npMdef}{npPop1}
\calls{npMdef}{npDefTail}
\calls{npMdef}{npTrap}
\calls{npMdef}{npPop1}
\calls{npMdef}{npPush}
\calls{npMdef}{pfMacro}
\calls{npMdef}{pfPushMacroBody}
<<defun npMdef>>=
(defun |npMdef| () 
 (let (body arg op tmp)
  (when (|npQuiver|)                    ;[op,arg]:= pfCheckMacroOut(npPop1())
   (setq tmp (|pfCheckMacroOut| (|npPop1|))) 
   (setq op (car tmp))
   (setq arg (cadr tmp))
   (or (|npDefTail|) (|npTrap|))
   (setq body (|npPop1|))
   (if (null arg) 
    (|npPush| (|pfMacro| op body))
    (|npPush| (|pfMacro| op (|pfPushMacroBody| arg body)))))))

@

\defun{npMDEF}{npMDEF}
\tpdhere{Beware that this function occurs with lowercase also}
\calls{npMDEF}{npBackTrack}
\calls{npMDEF}{npStatement}
\calls{npMDEF}{npMDEFinition}
<<defun npMDEF>>=
(defun |npMDEF| () 
 (|npBackTrack| #'|npStatement| 'mdef #'|npMDEFinition|))

@

\defun{npMDEFinition}{npMDEFinition}
\calls{npMDEFinition}{npPP}
\calls{npMDEFinition}{npMdef}
<<defun npMDEFinition>>=
(defun |npMDEFinition| ()
 (|npPP| #'|npMdef|))

@

\defun{npFix}{npFix}
\calls{npFix}{npEqKey}
\calls{npFix}{npDef}
\calls{npFix}{npPush}
\calls{npFix}{pfFix}
\calls{npFix}{npPop1}
<<defun npFix>>=
(defun |npFix| ()
 (and
  (|npEqKey| 'fix)
  (|npPP| #'|npDef|)
  (|npPush| (|pfFix| (|npPop1|)))))

@

\defun{npLet}{npLet}
\calls{npLet}{npLetQualified}
\calls{npLet}{npDefinitionOrStatement}
<<defun npLet>>=
(defun |npLet| ()
 (|npLetQualified| #'|npDefinitionOrStatement|))

@

\defun{npLetQualified}{npLetQualified}
\calls{npLetQualified}{npEqKey}
\calls{npLetQualified}{npDefinition}
\calls{npLetQualified}{npTrap}
\calls{npLetQualified}{npCompMissing}
\calls{npLetQualified}{npPush}
\calls{npLetQualified}{pfWhere}
\calls{npLetQualified}{npPop2}
\calls{npLetQualified}{npPop1}
<<defun npLetQualified>>=
(defun |npLetQualified| (f)
 (and
  (|npEqKey| 'let)
  (or (|npDefinition|) (|npTrap|))
  (|npCompMissing| 'in)
  (or #'f (|npTrap|))
  (|npPush| (|pfWhere| (|npPop2|) (|npPop1|)))))

@

\defun{npDefinition}{npDefinition}
\calls{npDefinition}{npPP}
\calls{npDefinition}{npDefinitionItem}
\calls{npDefinition}{npPush}
\calls{npDefinition}{pfSequenceToList}
\calls{npDefinition}{npPop1}
<<defun npDefinition>>=
(defun |npDefinition| ()
 (and
  (|npPP| #'|npDefinitionItem|)
  (|npPush| (|pfSequenceToList| (|npPop1|)))))

@

\defun{npDefinitionItem}{npDefinitionItem}
\calls{npDefinitionItem}{npTyping}
\calls{npDefinitionItem}{npImport}
\calls{npDefinitionItem}{npState}
\calls{npDefinitionItem}{npStatement}
\calls{npDefinitionItem}{npEqPeek}
\calls{npDefinitionItem}{npRestore}
\calls{npDefinitionItem}{npDef}
\calls{npDefinitionItem}{npMacro}
\calls{npDefinitionItem}{npDefn}
\calls{npDefinitionItem}{npTrap}
<<defun npDefinitionItem>>=
(defun |npDefinitionItem| ()
 (let (a)
  (or (|npTyping|) 
      (|npImport|)
      (progn
       (setq a (|npState|))
       (cond
        ((|npStatement|)
         (cond
           ((|npEqPeek| 'def)
            (|npRestore| a) 
            (|npDef|))
           (t
            (|npRestore| a)
            (or (|npMacro|) (|npDefn|)))))
        (t (|npTrap|)))))))

@

\defun{npTyping}{npTyping}
\calls{npTyping}{npEqKey}
\calls{npTyping}{npDefaultItemlist}
\calls{npTyping}{npTrap}
\calls{npTyping}{npPush}
\calls{npTyping}{pfTyping}
\calls{npTyping}{npPop1}
<<defun npTyping>>=
(defun |npTyping| ()
 (and
  (|npEqKey| 'default)
  (or (|npDefaultItemlist|) (|npTrap|))
  (|npPush| (|pfTyping| (|npPop1|)))))

@

\defun{npDefaultItemlist}{npDefaultItemlist}
\calls{npDefaultItemlist}{npPC}
\calls{npDefaultItemlist}{npSDefaultItem}
\calls{npDefaultItemlist}{npPush}
\calls{npDefaultItemlist}{pfUnSequence}
\calls{npDefaultItemlist}{npPop1}
<<defun npDefaultItemlist>>=
(defun |npDefaultItemlist| ()
 (and
  (|npPC| #'|npSDefaultItem|)
  (|npPush| (|pfUnSequence| (|npPop1|)))))

@

\defun{npSDefaultItem}{npSDefaultItem}
\calls{npSDefaultItem}{npListing}
\calls{npSDefaultItem}{npDefaultItem}
\calls{npSDefaultItem}{npPush}
\calls{npSDefaultItem}{pfAppend}
\calls{npSDefaultItem}{pfParts}
\calls{npSDefaultItem}{npPop1}
<<defun npSDefaultItem>>=
(defun |npSDefaultItem| ()
 (and
  (|npListing| #'|npDefaultItem|)
  (|npPush| (|pfAppend| (|pfParts| (|npPop1|))))))

@

\defun{npDefaultItem}{npDefaultItem}
\calls{npDefaultItem}{npTypeVariable}
\calls{npDefaultItem}{npDefaultDecl}
\calls{npDefaultItem}{npTrap}
<<defun npDefaultItem>>=
(defun |npDefaultItem| ()
 (and
  (|npTypeVariable|)
  (or (|npDefaultDecl|) (|npTrap|))))

@

\defun{npDefaultDecl}{npDefaultDecl}
\calls{npDefaultDecl}{npEqKey}
\calls{npDefaultDecl}{npType}
\calls{npDefaultDecl}{npTrap}
\calls{npDefaultDecl}{npPush}
\calls{npDefaultDecl}{pfSpread}
\calls{npDefaultDecl}{pfParts}
\calls{npDefaultDecl}{npPop2}
\calls{npDefaultDecl}{npPop1}
<<defun npDefaultDecl>>=
(defun |npDefaultDecl| ()
 (and
  (|npEqKey| 'colon)
  (or (|npType|) (|npTrap|))
  (|npPush| (|pfSpread| (|pfParts| (|npPop2|)) (|npPop1|)))))

@

\defun{npStatement}{npStatement}
\calls{npStatement}{npExpress}
\calls{npStatement}{npLoop}
\calls{npStatement}{npIterate}
\calls{npStatement}{npReturn}
\calls{npStatement}{npBreak}
\calls{npStatement}{npFree}
\calls{npStatement}{npImport}
\calls{npStatement}{npInline}
\calls{npStatement}{npLocal}
\calls{npStatement}{npExport}
\calls{npStatement}{npTyping}
\calls{npStatement}{npVoid}
<<defun npStatement>>=
(defun |npStatement| () 
 (or
  (|npExpress|)
  (|npLoop|)
  (|npIterate|)
  (|npReturn|)
  (|npBreak|)
  (|npFree|)
  (|npImport|)
  (|npInline|)
  (|npLocal|)
  (|npExport|)
  (|npTyping|)
  (|npVoid|)))

@

\defun{npExport}{npExport}
\calls{npExport}{npEqKey}
\calls{npExport}{npLocalItemlist}
\calls{npExport}{npTrap}
\calls{npExport}{npPush}
\calls{npExport}{pfExport}
\calls{npExport}{npPop1}
<<defun npExport>>=
(defun |npExport| ()
 (and
  (|npEqKey| 'export)
  (or (|npLocalItemlist|) (|npTrap|))
  (|npPush| (|pfExport| (|npPop1|)))))

@

\defun{npLocalItemlist}{npLocalItemlist}
\calls{npLocalItemlist}{npPC}
\calls{npLocalItemlist}{npSLocalItem}
\calls{npLocalItemlist}{npPush}
\calls{npLocalItemlist}{pfUnSequence}
\calls{npLocalItemlist}{npPop1}
<<defun npLocalItemlist>>=
(defun |npLocalItemlist| ()
 (and
  (|npPC| #'|npSLocalItem|)
  (|npPush| (|pfUnSequence| (|npPop1|)))))

@

\defun{npSLocalItem}{npSLocalItem}
\calls{npSLocalItem}{npListing}
\calls{npSLocalItem}{npLocalItem}
\calls{npSLocalItem}{npPush}
\calls{npSLocalItem}{pfAppend}
\calls{npSLocalItem}{pfParts}
\calls{npSLocalItem}{npPop1}
<<defun npSLocalItem>>=
(defun |npSLocalItem| ()
 (and
  (|npListing| #'|npLocalItem|)
  (|npPush| (|pfAppend| (|pfParts| (|npPop1|))))))

@

\defun{npLocalItem}{npLocalItem}
\calls{npLocalItem}{npTypeVariable}
\calls{npLocalItem}{npLocalDecl}
<<defun npLocalItem>>=
(defun |npLocalItem| ()
 (and
  (|npTypeVariable|)
  (|npLocalDecl|)))))

@

\defun{npLocalDecl}{npLocalDecl}
\calls{npLocalDecl}{npEqKey}
\calls{npLocalDecl}{npType}
\calls{npLocalDecl}{npTrap}
\calls{npLocalDecl}{npPush}
\calls{npLocalDecl}{pfSpread}
\calls{npLocalDecl}{pfParts}
\calls{npLocalDecl}{npPop2}
\calls{npLocalDecl}{npPop1}
\calls{npLocalDecl}{pfNothing}
<<defun npLocalDecl>>=
(defun |npLocalDecl| ()
 (or
  (and
   (|npEqKey| 'colon)
   (or (|npType|) (|npTrap|))
   (|npPush| (|pfSpread| (|pfParts| (|npPop2|)) (|npPop1|))))
  (|npPush| (|pfSpread| (|pfParts| (|npPop1|)) (|pfNothing|)))))

@

\defun{npLocal}{npLocal}
\calls{npLocal}{npEqKey}
\calls{npLocal}{npLocalItemlist}
\calls{npLocal}{npTrap}
\calls{npLocal}{npPush}
\calls{npLocal}{pfLocal}
\calls{npLocal}{npPop1}
<<defun npLocal>>=
(defun |npLocal| ()
 (and
  (|npEqKey| '|local|)
  (or (|npLocalItemlist|) (|npTrap|))
  (|npPush| (|pfLocal| (|npPop1|)))))

@

\defun{npFree}{npFree}
\calls{npFree}{npEqKey}
\calls{npFree}{npLocalItemlist}
\calls{npFree}{npTrap}
\calls{npFree}{npPush}
\calls{npFree}{pfFree}
\calls{npFree}{npPop1}
<<defun npFree>>=
(defun |npFree| ()
 (and
  (|npEqKey| 'free)
  (or (|npLocalItemlist|) (|npTrap|))
  (|npPush| (|pfFree| (|npPop1|)))))

@

\defun{npInline}{npInline}
\calls{npInline}{npAndOr}
\calls{npInline}{npQualTypelist}
\calls{npInline}{pfInline}
<<defun npInline>>=
(defun |npInline| () 
 (|npAndOr| 'inline #'|npQualTypelist| #'|pfInline|))

@

\defun{npIterate}{npIterate}
\calls{npIterate}{npEqKey}
\calls{npIterate}{npPush}
\calls{npIterate}{pfIterate}
\calls{npIterate}{pfNothing}
<<defun npIterate>>=
(defun |npIterate| ()
 (and (|npEqKey| 'iterate) (|npPush| (|pfIterate| (|pfNothing|)))))

@

\defun{npBreak}{npBreak}
\calls{npBreak}{npEqKey}
\calls{npBreak}{npPush}
\calls{npBreak}{pfBreak}
\calls{npBreak}{pfNothing}
<<defun npBreak>>=
(defun |npBreak| ()
 (and (|npEqKey| 'break) (|npPush| (|pfBreak| (|pfNothing|)))))

@

\defun{npLoop}{npLoop}
\calls{npLoop}{npIterators}
\calls{npLoop}{npCompMissing}
\calls{npLoop}{npAssign}
\calls{npLoop}{npTrap}
\calls{npLoop}{npPush}
\calls{npLoop}{pfLp}
\calls{npLoop}{npPop2}
\calls{npLoop}{npPop1}
\calls{npLoop}{npEqKey}
\calls{npLoop}{pfLoop1}
<<defun npLoop>>=
(defun |npLoop| ()
 (or
  (and 
   (|npIterators|)
   (|npCompMissing| 'repeat)
   (or (|npAssign|) (|npTrap|))
   (|npPush| (|pfLp| (|npPop2|) (|npPop1|))))
  (and
   (|npEqKey| 'repeat)
   (or (|npAssign|) (|npTrap|))
   (|npPush| (|pfLoop1| (|npPop1|))))))

@

\defun{npIterators}{npIterators}
\calls{npIterators}{npForIn}
\calls{npIterators}{npZeroOrMore}
\calls{npIterators}{npIterator}
\calls{npIterators}{npPush}
\calls{npIterators}{npPop2}
\calls{npIterators}{npPop1}
\calls{npIterators}{npWhile}
\calls{npIterators}{npIterators}
<<defun npIterators>>=
(defun |npIterators| ()
 (or
  (and
   (|npForIn|)
   (|npZeroOrMore| #'|npIterator|)
   (|npPush| (cons (|npPop2|) (|npPop1|))))
  (and
   (|npWhile|)
   (or
    (and (|npIterators|) (|npPush| (cons (|npPop2|) (|npPop1|))))
    (|npPush| (list (|npPop1|)))))))

@

\defun{npIterator}{npIterator}
\calls{npIterator}{npForIn}
\calls{npIterator}{npSuchThat}
\calls{npIterator}{npWhile}
<<defun npIterator>>=
(defun |npIterator| ()
 (or
  (|npForIn|)
  (|npSuchThat|)
  (|npWhile|)))))

@

\defun{npSuchThat}{npSuchThat}
\calls{npSuchThat}{npAndOr}
\calls{npSuchThat}{npLogical}
\calls{npSuchThat}{pfSuchthat}
<<defun npSuchThat>>=
(defun |npSuchThat| ()
 (|npAndOr| 'bar #'|npLogical| #'|pfSuchthat|))

@

\defun{npZeroOrMore}{Apply argument 0 or more times}
\calls{npZeroOrMore}{npPush}
\calls{npZeroOrMore}{npPop2}
\calls{npZeroOrMore}{npPop1}
\usesdollar{npZeroOrMore}{stack}
<<defun npZeroOrMore>>=
(defun |npZeroOrMore| (f)
 (let (a)
 (declare (special |$stack|))
  (cond
   ((apply f nil)
    (setq a |$stack|)
    (setq |$stack| nil)
    (do () ((not (apply f nil)))) ; while .. do
    (setq |$stack| (cons (nreverse |$stack|) a))
    (|npPush| (cons (|npPop2|) (|npPop1|))))
   (t (progn (|npPush| nil) t)))))

@

\defun{npWhile}{npWhile}
\calls{npWhile}{npAndOr}
\calls{npWhile}{npLogical}
\calls{npWhile}{pfWhile}
<<defun npWhile>>=
(defun |npWhile| ()
 (|npAndOr| 'while  #'|npLogical| #'|pfWhile|))

@

\defun{npForIn}{npForIn}
\calls{npForIn}{npEqKey}
\calls{npForIn}{npVariable}
\calls{npForIn}{npTrap}
\calls{npForIn}{npCompMissing}
\calls{npForIn}{npBy}
\calls{npForIn}{npPush}
\calls{npForIn}{pfForin}
\calls{npForIn}{npPop2}
\calls{npForIn}{npPop1}
<<defun npForIn>>=
(defun |npForIn| ()
 (and
  (|npEqKey| 'for)
  (or (|npVariable|) (|npTrap|))
  (|npCompMissing| 'in)
  (or (|npBy|) (|npTrap|))
  (|npPush| (|pfForin| (|npPop2|) (|npPop1|)))))

@

\defun{npReturn}{npReturn}
\calls{npReturn}{npEqKey}
\calls{npReturn}{npExpress}
\calls{npReturn}{npPush}
\calls{npReturn}{pfNothing}
\calls{npReturn}{npEqKey}
\calls{npReturn}{npName}
\calls{npReturn}{npTrap}
\calls{npReturn}{pfReturn}
\calls{npReturn}{npPop2}
\calls{npReturn}{npPop1}
\calls{npReturn}{pfReturnNoName}
<<defun npReturn>>=
(defun |npReturn| ()
 (and
  (|npEqKey| 'return)
  (or 
   (|npExpress|)
   (|npPush| (|pfNothing|)))
  (or
   (and
    (|npEqKey| 'from)
    (or (|npName|) (|npTrap|))
    (|npPush| (|pfReturn| (|npPop2|) (|npPop1|))))
   (|npPush| (|pfReturnNoName| (|npPop1|))))))

@

\defun{npVoid}{npVoid}
\calls{npVoid}{npAndOr}
\calls{npVoid}{npStatement}
\calls{npVoid}{pfNovalue}
<<defun npVoid>>=
(defun |npVoid| ()
 (|npAndOr| 'do #'|npStatement| #'|pfNovalue|))

@

\defun{npExpress}{npExpress}
\calls{npExpress}{npExpress1}
\calls{npExpress}{npIterators}
\calls{npExpress}{npPush}
\calls{npExpress}{pfCollect}
\calls{npExpress}{npPop2}
\calls{npExpress}{pfListOf}
\calls{npExpress}{npPop1}
<<defun npExpress>>=
(defun |npExpress| ()
 (and
  (|npExpress1|)
  (or
   (and
    (|npIterators|)
    (|npPush| (|pfCollect| (|npPop2|) (|pfListOf| (|npPop1|)))))
   t)))

@

\defun{npExpress1}{npExpress1}
\calls{npExpress1}{npConditionalStatement}
\calls{npExpress1}{npADD}
<<defun npExpress1>>=
(defun |npExpress1| ()
 (or (|npConditionalStatement|) (|npADD|)))

@

\defun{npConditionalStatement}{npConditionalStatement}
\calls{npConditionalStatement}{npConditional}
\calls{npConditionalStatement}{npQualifiedDefinition}
<<defun npConditionalStatement>>=
(defun |npConditionalStatement| ()
 (|npConditional| #'|npQualifiedDefinition|))

@

\defun{npImport}{npImport}
\calls{npImport}{npAndOr}
\calls{npImport}{npQualTypelist}
\calls{npImport}{pfImport}
<<defun npImport>>=
(defun |npImport| ()
 (|npAndOr| 'import #'|npQualTypelist| #'|pfImport|))

@

\defun{npQualTypelist}{npQualTypelist}
\calls{npQualTypelist}{npPC}
\calls{npQualTypelist}{npSQualTypelist}
\calls{npQualTypelist}{npPush}
\calls{npQualTypelist}{pfUnSequence}
\calls{npQualTypelist}{npPop1}
<<defun npQualTypelist>>=
(defun |npQualTypelist| ()
 (and
  (|npPC| #'|npSQualTypelist|)
  (|npPush| (|pfUnSequence| (|npPop1|)))))

@

\defun{npSQualTypelist}{npSQualTypelist}
\calls{npSQualTypelist}{npListing}
\calls{npSQualTypelist}{npQualType}
\calls{npSQualTypelist}{npPush}
\calls{npSQualTypelist}{pfParts}
\calls{npSQualTypelist}{npPop1}
<<defun npSQualTypelist>>=
(defun |npSQualTypelist| ()
 (and
  (|npListing| #'|npQualType|)
  (|npPush| (|pfParts| (|npPop1|)))))

@

\defun{npQualType}{npQualType}
\calls{npQualType}{npType}
\calls{npQualType}{npPush}
\calls{npQualType}{pfQualType}
\calls{npQualType}{npPop1}
\calls{npQualType}{pfNothing}
<<defun npQualType>>=
(defun |npQualType| () 
 (and
  (|npType|)
  (|npPush| (|pfQualType| (|npPop1|) (|pfNothing|)))))

@

\defun{npAndOr}{npAndOr}
\calls{npAndOr}{npEqKey}
\calls{npAndOr}{npTrap}
\calls{npAndOr}{npPush}
\calls{npAndOr}{npPop1}
<<defun npAndOr>>=
(defun |npAndOr| (keyword p f)
 (and
  (|npEqKey| keyword)
  (or (apply p nil) (|npTrap|))
  (|npPush| (funcall f (|npPop1|)))))

@

\defun{npEncAp}{npEncAp}
\calls{npEncAp}{npAnyNo}
\calls{npEncAp}{npEncl}
\calls{npEncAp}{npFromdom}
<<defun npEncAp>>=
(defun |npEncAp| (f)
 (and (apply f nil) (|npAnyNo| #'|npEncl|) (|npFromdom|)))

@

\defun{npEncl}{npEncl}
\calls{npEncl}{npBDefinition}
\calls{npEncl}{npPush}
\calls{npEncl}{pfApplication}
\calls{npEncl}{npPop2}
\calls{npEncl}{npPop1}
<<defun npEncl>>=
(defun |npEncl| ()
 (and
  (|npBDefinition|)
  (|npPush| (|pfApplication| (|npPop2|) (|npPop1|)))))

@

\defun{npAtom1}{npAtom1}
\calls{npAtom1}{npPDefinition}
\calls{npAtom1}{npName}
\calls{npAtom1}{npConstTok}
\calls{npAtom1}{npDollar}
\calls{npAtom1}{npBDefinition}
\calls{npAtom1}{npFromdom}
<<defun npAtom1>>=
(defun |npAtom1| ()
 (or
  (|npPDefinition|)
  (and
   (or (|npName|) (|npConstTok|) (|npDollar|) (|npBDefinition|))
   (|npFromdom|))))

@

\defun{npPDefinition}{npPDefinition}
\calls{npPDefinition}{npParenthesized}
\calls{npPDefinition}{npDefinitionlist}
\calls{npPDefinition}{npPush}
\calls{npPDefinition}{pfEnSequence}
\calls{npPDefinition}{npPop1}
<<defun npPDefinition>>=
(defun |npPDefinition| ()
 (and
  (|npParenthesized| #'|npDefinitionlist|)
  (|npPush| (|pfEnSequence| (|npPop1|)))))

@

\defun{npDollar}{npDollar}
\calls{npDollar}{npEqPeek}
\calls{npDollar}{npPush}
\calls{npDollar}{tokConstruct}
\calls{npDollar}{tokPosn}
\calls{npDollar}{npNext}
\usesdollar{npDollar}{stok}
<<defun npDollar>>=
(defun |npDollar| ()
 (declare (special |$stok|))
  (and (|npEqPeek| '$)
       (progn
        (|npPush| (|tokConstruct| '|id| '$ (|tokPosn| |$stok|)))
        (|npNext|))))

@

\defun{npConstTok}{npConstTok}
\calls{npConstTok}{memq}
\calls{npConstTok}{tokType}
\calls{npConstTok}{npPush}
\calls{npConstTok}{npNext}
\calls{npConstTok}{npEqPeek}
\calls{npConstTok}{npState}
\calls{npConstTok}{npPrimary1}
\calls{npConstTok}{pfSymb}
\calls{npConstTok}{npPop1}
\calls{npConstTok}{tokPosn}
\calls{npConstTok}{npRestore}
\usesdollar{npConstTok}{stok}
<<defun npConstTok>>=
(defun |npConstTok| ()
 (let (b a)
 (declare (special |$stok|))
  (cond
   ((memq (|tokType| |$stok|) '(|integer| |string| |char| |float| |command|))
    (|npPush| |$stok|) 
    (|npNext|))
   ((|npEqPeek| '|'|)
    (setq a |$stok|)
    (setq b (|npState|))
    (|npNext|)
    (cond
      ((and (|npPrimary1|)
            (|npPush| (|pfSymb| (|npPop1|) (|tokPosn| a))))
       t)
      (t (|npRestore| b) nil)))
   (t nil))))

@

\defun{npBDefinition}{npBDefinition}
\calls{npBDefinition}{npPDefinition}
\calls{npBDefinition}{npBracketed}
\calls{npBDefinition}{npDefinitionlist}
<<defun npBDefinition>>=
(defun |npBDefinition| ()
 (or
  (|npPDefinition|)
  (|npBracketed| #'|npDefinitionlist|)))

@

\defun{npBracketed}{npBracketed}
\calls{npBracketed}{npParened}
\calls{npBracketed}{npBracked}
\calls{npBracketed}{npBraced}
\calls{npBracketed}{npAngleBared}
<<defun npBracketed>>=
(defun |npBracketed| (f)
 (or
  (|npParened| f)
  (|npBracked| f)
  (|npBraced| f)
  (|npAngleBared| f)))

@

\defun{npParened}{npParened}
\calls{npParened}{npEnclosed}
\calls{npParened}{pfParen}
<<defun npParened>>=
(defun |npParened| (f)
 (or (|npEnclosed| '|(| '|)| #'|pfParen| f)
     (|npEnclosed| '|(\|| '|\|)| #'|pfParen| f)))

@

\defun{npBracked}{npBracked}
\calls{npBracked}{npEnclosed}
\calls{npBracked}{pfBracket}
\calls{npBracked}{pfBracketBar}
<<defun npBracked>>=
(defun |npBracked| (f)
 (or (|npEnclosed| '[ '] #'|pfBracket| f)
     (|npEnclosed| '|[\|| '|\|]| #'|pfBracketBar| f)))

@

\defun{npBraced}{npBraced}
\calls{npBraced}{npEnclosed}
\calls{npBraced}{pfBrace}
\calls{npBraced}{pfBraceBar}
<<defun npBraced>>=
(defun |npBraced| (f)
 (or (|npEnclosed| '{ '} #'|pfBrace| f)
     (|npEnclosed| '|{\|| '|\|}| #'|pfBraceBar| f)))

@

\defun{npAngleBared}{npAngleBared}
\calls{npAngleBared}{npEnclosed}
\calls{npAngleBared}{pfHide}
<<defun npAngleBared>>=
(defun |npAngleBared| (f)
  (|npEnclosed| '|<\|| '|\|>| #'|pfHide| f))

@

\defun{npDefn}{npDefn}
\calls{npDefn}{npEqKey}
\calls{npDefn}{npPP}
\calls{npDefn}{npDef}
<<defun npDefn>>=
(defun |npDefn| ()
 (and
  (|npEqKey| 'defn)
  (|npPP| #'|npDef|)))

@

\defun{npDef}{npDef}
\calls{npDef}{npMatch}
\calls{npDef}{pfCheckItOut}
\calls{npDef}{npPop1}
\calls{npDef}{npDefTail}
\calls{npDef}{npTrap}
\calls{npDef}{npPop1}
\calls{npDef}{npPush}
\calls{npDef}{pfDefinition}
\calls{npDef}{pfPushBody}
<<defun npDef>>=
(defun |npDef| ()
 (let (body rt arg op tmp1)
  (when (|npMatch|)
   ; [op,arg,rt]:=  pfCheckItOut(npPop1())
   (setq tmp1 (|pfCheckItOut| (|npPop1|))) 
   (setq op (car tmp1))
   (setq arg (cadr tmp1))
   (setq rt (caddr tmp1))
   (or (|npDefTail|) (|npTrap|))
   (setq body (|npPop1|))
   (if (null arg)
    (|npPush| (|pfDefinition| op body))
    (|npPush| (|pfDefinition| op (|pfPushBody| rt arg body)))))))

@

\defun{npBPileDefinition}{npBPileDefinition}
\calls{npBPileDefinition}{npPileBracketed}
\calls{npBPileDefinition}{npPileDefinitionlist}
\calls{npBPileDefinition}{npPush}
\calls{npBPileDefinition}{pfSequence}
\calls{npBPileDefinition}{pfListOf}
\calls{npBPileDefinition}{npPop1}
<<defun npBPileDefinition>>=
(defun |npBPileDefinition| ()
 (and
  (|npPileBracketed| #'|npPileDefinitionlist|)
  (|npPush| (|pfSequence| (|pfListOf| (|npPop1|))))))

@

\defun{npPileBracketed}{npPileBracketed}
\calls{npPileBracketed}{npEqKey}
\calls{npPileBracketed}{npPush}
\calls{npPileBracketed}{pfNothing}
\calls{npPileBracketed}{npMissing}
\calls{npPileBracketed}{pfPile}
\calls{npPileBracketed}{npPop1}
<<defun npPileBracketed>>=
(defun |npPileBracketed| (f)
 (cond
  ((|npEqKey| 'settab)
   (cond
    ((|npEqKey| 'backtab) (|npPush| (|pfNothing|))) ; never happens
    ((and (apply f nil)
          (or (|npEqKey| 'backtab) (|npMissing| '|backtab|)))
     (|npPush| (|pfPile| (|npPop1|))))
    (t nil)))
  (t nil)))

@

\defun{npPileDefinitionlist}{npPileDefinitionlist}
\calls{npPileDefinitionlist}{npListAndRecover}
\calls{npPileDefinitionlist}{npDefinitionlist}
\calls{npPileDefinitionlist}{npPush}
\calls{npPileDefinitionlist}{pfAppend}
\calls{npPileDefinitionlist}{npPop1}
<<defun npPileDefinitionlist>>=
(defun |npPileDefinitionlist| ()
 (and
  (|npListAndRecover| #'|npDefinitionlist|)
  (|npPush| (|pfAppend| (|npPop1|)))))

@

\defun{npListAndRecover}{npListAndRecover}
\catches{npListAndRecover}{trappoint}
\calls{npListAndRecover}{npRecoverTrap}
\calls{npListAndRecover}{syGeneralErrorHere}
\calls{npListAndRecover}{npEqKey}
\calls{npListAndRecover}{npEqPeek}
\calls{npListAndRecover}{npNext}
\calls{npListAndRecover}{npPop1}
\calls{npListAndRecover}{npPush}
\usesdollar{npListAndRecover}{inputStream}
\usesdollar{npListAndRecover}{stack}
<<defun npListAndRecover>>=
(defun |npListAndRecover| (f)
 (let (found c done b savestack)
 (declare (special |$inputStream| |$stack|))
  (setq savestack |$stack|)
  (setq |$stack| nil)
  (setq c |$inputStream|)
  (do ()
      (done)
   (setq found (catch 'trappoint (apply f nil)))
   (cond
    ((eq found 'trapped)
     (setq |$inputStream| c)
     (|npRecoverTrap|))
    ((null found)
     (setq |$inputStream| c)
     (|syGeneralErrorHere|) (|npRecoverTrap|)))
   (cond
    ((|npEqKey| 'backset) (setq c |$inputStream|))
    ((|npEqPeek| 'backtab) (setq done t))
    (t 
     (setq |$inputStream| c)
     (|syGeneralErrorHere|) 
     (|npRecoverTrap|)
     (cond
      ((|npEqPeek| 'backtab) (setq done t))
      (t 
       (|npNext|) 
       (setq c |$inputStream|)))))
   (setq b (cons (|npPop1|) b)))
  (setq |$stack| savestack)
  (|npPush| (nreverse b))))

@

\defun{npRecoverTrap}{npRecoverTrap}
\calls{npRecoverTrap}{npFirstTok}
\calls{npRecoverTrap}{tokPosn}
\calls{npRecoverTrap}{npMoveTo}
\calls{npRecoverTrap}{syIgnoredFromTo}
\calls{npRecoverTrap}{npPush}
\calls{npRecoverTrap}{pfWrong}
\calls{npRecoverTrap}{pfDocument}
\calls{npRecoverTrap}{pfListOf}
\usesdollar{npRecoverTrap}{stok}
<<defun npRecoverTrap>>=
(defun |npRecoverTrap| ()
 (let (pos2 pos1)
 (declare (special |$stok|))
  (|npFirstTok|)
  (setq pos1 (|tokPosn| |$stok|))
  (|npMoveTo| 0)
  (setq pos2 (|tokPosn| |$stok|))
  (|syIgnoredFromTo| pos1 pos2)
  (|npPush|
   (list (|pfWrong| (|pfDocument| (list "pile syntax error"))
                    (|pfListOf| nil))))))

@

\defun{npMoveTo}{npMoveTo}
\calls{npMoveTo}{npEqPeek}
\calls{npMoveTo}{npNext}
\calls{npMoveTo}{npMoveTo}
\calls{npMoveTo}{npEqKey}
\usesdollar{npMoveTo}{inputStream}
<<defun npMoveTo>>=
(defun |npMoveTo| (|n|)
 (declare (special |$inputStream|))
  (cond
   ((null |$inputStream|) t)
   ((|npEqPeek| 'backtab)
    (cond
     ((eql |n| 0) t)
     (t (|npNext|) (|npMoveTo| (1- |n|)))))
   ((|npEqPeek| 'backset)
    (cond
     ((eql |n| 0) t)
     (t (|npNext|) (|npMoveTo| |n|))))
   ((|npEqKey| 'settab) (|npMoveTo| (+ |n| 1)))
   (t (|npNext|) (|npMoveTo| |n|))))

@

\defun{syIgnoredFromTo}{syIgnoredFromTo}
\calls{syIgnoredFromTo}{pfGlobalLinePosn}
\calls{syIgnoredFromTo}{ncSoftError}
\calls{syIgnoredFromTo}{FromTo}
\calls{syIgnoredFromTo}{From}
\calls{syIgnoredFromTo}{To}
<<defun syIgnoredFromTo>>=
(defun |syIgnoredFromTo| (pos1 pos2)
 (cond
  ((equal (|pfGlobalLinePosn| pos1) (|pfGlobalLinePosn| pos2))
   (|ncSoftError| (|FromTo| pos1 pos2) 'S2CY0005 nil))
  (t
   (|ncSoftError| (|From| pos1) 'S2CY0003 nil)
   (|ncSoftError| (|To| pos2) 'S2CY0004 nil))))

@

\defun{syGeneralErrorHere}{syGeneralErrorHere}
\calls{syGeneralErrorHere}{sySpecificErrorHere}
<<defun syGeneralErrorHere>>=
(defun |syGeneralErrorHere| ()
 (|sySpecificErrorHere| 'S2CY0002 nil))

@

\defun{sySpecificErrorHere}{sySpecificErrorHere}
\calls{sySpecificErrorHere}{sySpecificErrorAtToken}
\usesdollar{sySpecificErrorHere}{stok}
<<defun sySpecificErrorHere>>=
(defun |sySpecificErrorHere| (key args)
 (declare (special |$stok|))
 (|sySpecificErrorAtToken| |$stok| key args))

@

\defun{sySpecificErrorAtToken}{sySpecificErrorAtToken}
\calls{sySpecificErrorAtToken}{ncSoftError}
\calls{sySpecificErrorAtToken}{tokPosn}
<<defun sySpecificErrorAtToken>>=
(defun |sySpecificErrorAtToken| (tok key args)
 (|ncSoftError| (|tokPosn| tok) key args))

@

\defun{npDefinitionlist}{npDefinitionlist}
\calls{npDefinitionlist}{npSemiListing}
\calls{npDefinitionlist}{npQualDef}
<<defun npDefinitionlist>>=
(defun |npDefinitionlist| ()
 (|npSemiListing| #'|npQualDef|))

@

\defun{npSemiListing}{npSemiListing}
\calls{npSemiListing}{npListofFun}
\calls{npSemiListing}{npSemiBackSet}
\calls{npSemiListing}{pfAppend}
<<defun npSemiListing>>=
(defun |npSemiListing| (p)
 (|npListofFun| p #'|npSemiBackSet| #'|pfAppend|))

@

\defun{npSemiBackSet}{npSemiBackSet}
\calls{npSemiBackSet}{npEqKey}
<<defun npSemiBackSet>>=
(defun |npSemiBackSet| ()
 (and (|npEqKey| 'semicolon) (or (|npEqKey| 'backset) t)))

@

\defun{npRule}{npRule}
\calls{npRule}{npEqKey}
\calls{npRule}{npPP}
\calls{npRule}{npSingleRule}
<<defun npRule>>=
(defun |npRule| ()
 (and
  (|npEqKey| 'rule)
  (|npPP| #'|npSingleRule|)))

@

\defun{npSingleRule}{npSingleRule}
\calls{npSingleRule}{npQuiver}
\calls{npSingleRule}{npDefTail}
\calls{npSingleRule}{npTrap}
\calls{npSingleRule}{npPush}
\calls{npSingleRule}{pfRule}
\calls{npSingleRule}{npPop2}
\calls{npSingleRule}{npPop1}
<<defun npSingleRule>>=
(defun |npSingleRule| ()
 (when (|npQuiver|)
  (or (|npDefTail|) (|npTrap|))
  (|npPush| (|pfRule| (|npPop2|) (|npPop1|)))))

@

\defun{npDefTail}{npDefTail}
\calls{npDefTail}{npEqKey}
\calls{npDefTail}{npDefinitionOrStatement}
<<defun npDefTail>>=
(defun |npDefTail| ()
 (and
  (or (|npEqKey| 'def) (|npEqKey| 'mdef))
  (|npDefinitionOrStatement|)))

@

\defun{npDefaultValue}{npDefaultValue}
\calls{npDefaultValue}{npEqKey}
\calls{npDefaultValue}{npDefinitionOrStatement}
\calls{npDefaultValue}{npTrap}
\calls{npDefaultValue}{npPush}
\calls{npDefaultValue}{pfAdd}
\calls{npDefaultValue}{pfNothing}
\calls{npDefaultValue}{npPop1}
<<defun npDefaultValue>>=
(defun |npDefaultValue| ()
 (and
  (|npEqKey| 'default)
  (or (|npDefinitionOrStatement|) (|npTrap|))
  (|npPush| (list (|pfAdd| (|pfNothing|) (|npPop1|) (|pfNothing|))))))

@

\defun{npWConditional}{npWConditional}
\calls{npWConditional}{npConditional}
\calls{npWConditional}{npPush}
\calls{npWConditional}{pfTweakIf}
\calls{npWConditional}{npPop1}
<<defun npWConditional>>=
(defun |npWConditional| (f)
 (when (|npConditional| f) (|npPush| (|pfTweakIf| (|npPop1|)))))

@

\defun{npConditional}{npConditional}
\calls{npConditional}{npEqKey}
\calls{npConditional}{npLogical}
\calls{npConditional}{npTrap}
\calls{npConditional}{npMissing}
\calls{npConditional}{npElse}
<<defun npConditional>>=
(defun |npConditional| (f)
 (cond
  ((and (|npEqKey| 'IF) 
        (or (|npLogical|) (|npTrap|))
        (or (|npEqKey| 'backset) t))
   (cond
    ((|npEqKey| 'settab)
     (cond
      ((|npEqKey| 'then)
       (and (or (apply f nil) (|npTrap|))
            (|npElse| f)
            (|npEqKey| 'backtab)))
      (t (|npMissing| '|then|))))
    ((|npEqKey| 'then)
     (and (or (apply f nil) (|npTrap|)) (|npElse| f)))
    (t (|npMissing| '|then|))))
  (t nil)))

@

\defun{npElse}{npElse}
\calls{npElse}{npState}
\calls{npElse}{npBacksetElse}
\calls{npElse}{npTrap}
\calls{npElse}{npPush}
\calls{npElse}{pfIf}
\calls{npElse}{npPop3}
\calls{npElse}{npPop2}
\calls{npElse}{npPop1}
\calls{npElse}{npRestore}
\calls{npElse}{pfIfThenOnly}
<<defun npElse>>=
(defun |npElse| (f) 
 (let (a)
  (setq a (|npState|))
  (cond
   ((|npBacksetElse|)
    (and
     (or (apply f nil) (|npTrap|))
     (|npPush| (|pfIf| (|npPop3|) (|npPop2|) (|npPop1|)))))
   (t
     (|npRestore| a)
     (|npPush| (|pfIfThenOnly| (|npPop2|) (|npPop1|)))))))

@

\defun{npBacksetElse}{npBacksetElse}
\tpdhere{Well this makes no sense.}
\calls{npBacksetElse}{npEqKey}
<<defun npBacksetElse>>=
(defun |npBacksetElse| ()
 (if (|npEqKey| 'backset) 
  (|npEqKey| 'else)
  (|npEqKey| 'else)))

@

\defun{npLogical}{npLogical}
\calls{npLogical}{npLeftAssoc}
\calls{npLogical}{npDisjand}
<<defun npLogical>>=
(defun |npLogical| () 
 (|npLeftAssoc| '(or) #'|npDisjand|))

@

\defun{npDisjand}{npDisjand}
\calls{npDisjand}{npLeftAssoc}
\calls{npDisjand}{npDiscrim}
<<defun npDisjand>>=
(defun |npDisjand| ()
 (|npLeftAssoc| '(and) #'|npDiscrim|))

@

\defun{npDiscrim}{npDiscrim}
\calls{npDiscrim}{npLeftAssoc}
\calls{npDiscrim}{npQuiver}
<<defun npDiscrim>>=
(defun |npDiscrim| ()
 (|npLeftAssoc| '(case has) #'|npQuiver|))

@

\defun{npQuiver}{npQuiver}
\calls{npQuiver}{npRightAssoc}
\calls{npQuiver}{npRelation}
<<defun npQuiver>>=
(defun |npQuiver| ()
 (|npRightAssoc| '(arrow larrow) #'|npRelation|))

@

\defun{npRelation}{npRelation}
\calls{npRelation}{npLeftAssoc}
\calls{npRelation}{npSynthetic}
<<defun npRelation>>=
(defun |npRelation| ()
 (|npLeftAssoc| '(equal notequal lt le gt ge oangle cangle) #'|npSynthetic|))

@

\defun{npSynthetic}{npSynthetic}
\calls{npSynthetic}{npBy}
\calls{npSynthetic}{npAmpersandFrom}
\calls{npSynthetic}{npPush}
\calls{npSynthetic}{pfApplication}
\calls{npSynthetic}{npPop2}
\calls{npSynthetic}{npPop1}
\calls{npSynthetic}{pfInfApplication}
<<defun npSynthetic>>=
(defun |npSynthetic| ()
 (cond
  ((|npBy|)
   ((lambda ()
    (loop
     (cond
      ((not (and (|npAmpersandFrom|)
                 (or (|npBy|)
                     (progn
                      (|npPush| (|pfApplication| (|npPop2|) (|npPop1|)))
                      nil))))
         (return nil))
      (t
       (|npPush| (|pfInfApplication| (|npPop2|) (|npPop2|) (|npPop1|))))))))
       t)
  (t nil)))

@

\defun{npBy}{npBy}
\calls{npBy}{npLeftAssoc}
\calls{npBy}{npInterval}
<<defun npBy>>=
(defun |npBy| ()
 (|npLeftAssoc| '(by) #'|npInterval|))

@

\defun{npInterval}{}
\calls{npInterval}{npArith}
\calls{npInterval}{npSegment}
\calls{npInterval}{npEqPeek}
\calls{npInterval}{npPush}
\calls{npInterval}{pfApplication}
\calls{npInterval}{npPop1}
\calls{npInterval}{pfInfApplication}
\calls{npInterval}{npPop2}
<<defun npInterval>>=
(defun |npInterval| ()
 (and
  (|npArith|)
  (or
   (and
    (|npSegment|)
    (or
     (and
      (|npEqPeek| 'bar)
      (|npPush| (|pfApplication| (|npPop1|) (|npPop1|))))
     (and
      (|npArith|)
      (|npPush| (|pfInfApplication| (|npPop2|) (|npPop2|) (|npPop1|))))
     (|npPush| (|pfApplication| (|npPop1|) (|npPop1|)))))
   t)))

@

\defun{npSegment}{npSegment}
\calls{npSegment}{npEqPeek}
\calls{npSegment}{npPushId}
\calls{npSegment}{npFromdom}
<<defun npSegment>>=
(defun |npSegment| ()
 (and (|npEqPeek| 'seg) (|npPushId|) (|npFromdom|)))

@

\defun{npArith}{npArith}
\calls{npArith}{npLeftAssoc}
\calls{npArith}{npSum}
<<defun npArith>>=
(defun |npArith| ()
 (|npLeftAssoc| '(mod) #'|npSum|))

@

\defun{npSum}{npSum}
\calls{npSum}{npLeftAssoc}
\calls{npSum}{npTerm}
<<defun npSum>>=
(defun |npSum| ()
 (|npLeftAssoc| '(plus minus) #'|npTerm|))

@

\defun{npTerm}{npTerm}
\calls{npTerm}{npInfGeneric}
\calls{npTerm}{npRemainder}
\calls{npTerm}{npPush}
\calls{npTerm}{pfApplication}
\calls{npTerm}{npPop2}
\calls{npTerm}{npPop1}
<<defun npTerm>>=
(defun |npTerm| ()
 (or
  (and
   (|npInfGeneric| '(minus plus))
   (or
    (and (|npRemainder|) (|npPush| (|pfApplication| (|npPop2|) (|npPop1|))))
    t))
  (|npRemainder|)))

@

\defun{npRemainder}{npRemainder}
\calls{npRemainder}{npLeftAssoc}
\calls{npRemainder}{npProduct}
<<defun npRemainder>>=
(defun |npRemainder| ()
 (|npLeftAssoc| '(rem quo) #'|npProduct|))

@

\defun{npProduct}{npProduct}
\calls{npProduct}{npLeftAssoc}
\calls{npProduct}{npPower}
<<defun npProduct>>=
(defun |npProduct| ()
 (|npLeftAssoc|
  '(times slash backslash slashslash backslashbackslash
            slashbackslash backslashslash)
    #'|npPower|))

@

\defun{npPower}{npPower}
\calls{npPower}{npRightAssoc}
\calls{npPower}{npColon}
<<defun npPower>>=
(defun |npPower| ()
 (|npRightAssoc| '(power carat) #'|npColon|))

@

\defun{npAmpersandFrom}{npAmpersandFrom}
\calls{npAmpersandFrom}{npAmpersand}
\calls{npAmpersandFrom}{npFromdom}
<<defun npAmpersandFrom>>=
(defun |npAmpersandFrom| ()
 (and (|npAmpersand|) (|npFromdom|)))

@

\defun{npFromdom}{npFromdom}
\calls{npFromdom}{npEqKey}
\calls{npFromdom}{npApplication}
\calls{npFromdom}{npTrap}
\calls{npFromdom}{npFromdom1}
\calls{npFromdom}{npPop1}
\calls{npFromdom}{npPush}
\calls{npFromdom}{pfFromDom}
<<defun npFromdom>>=
(defun |npFromdom| ()
 (or
  (and
   (|npEqKey| '$)
   (or (|npApplication|) (|npTrap|))
   (|npFromdom1| (|npPop1|))
   (|npPush| (|pfFromDom| (|npPop1|) (|npPop1|))))
  t))

@

\defun{npFromdom1}{npFromdom1}
\calls{npFromdom1}{npEqKey}
\calls{npFromdom1}{npApplication}
\calls{npFromdom1}{npTrap}
\calls{npFromdom1}{npFromdom1}
\calls{npFromdom1}{npPop1}
\calls{npFromdom1}{npPush}
\calls{npFromdom1}{pfFromDom}
<<defun npFromdom1>>=
(defun |npFromdom1| (c)
 (or
  (and
   (|npEqKey| '$)
   (or (|npApplication|) (|npTrap|))
   (|npFromdom1| (|npPop1|))
   (|npPush| (|pfFromDom| (|npPop1|) c)))
  (|npPush| c)))))

@

\defun{npAmpersand}{npAmpersand}
\calls{npAmpersand}{npEqKey}
\calls{npAmpersand}{npName}
\calls{npAmpersand}{npTrap}
<<defun npAmpersand>>=
(defun |npAmpersand| ()
 (and
  (|npEqKey| 'ampersand)
  (or (|npName|) (|npTrap|))))

@

\defun{npName}{npName}
\calls{npName}{npId}
\calls{npName}{npSymbolVariable}
<<defun npName>>=
(defun |npName| ()
 (or (|npId|) (|npSymbolVariable|)))

@

\defvar{npPParg}
<<initvars>>=
(defvar |$npTokToNames| (list '~ '|#| '[] '{} '|[\|\|]| '|{\|\|}|))

@

\defun{npId}{npId}
\calls{npId}{npPush}
\calls{npId}{npNext}
\calls{npId}{memq}
\calls{npId}{tokConstruct}
\calls{npId}{tokPosn}
\usesdollar{npId}{npTokToNames}
\usesdollar{npId}{ttok}
\usesdollar{npId}{stok}
<<defun npId>>=
(defun |npId| ()
 (declare (special |$npTokToNames| |$ttok| |$stok|))
  (cond
   ((eq (caar |$stok|) '|id|)
     (|npPush| |$stok|) 
     (|npNext|))
   ((and (eq (caar |$stok|) '|key|) (memq |$ttok| |$npTokToNames|))
     (|npPush| (|tokConstruct| '|id| |$ttok| (|tokPosn| |$stok|)))
     (|npNext|))
   (t nil)))

@

\defun{npSymbolVariable}{npSymbolVariable}
\calls{npSymbolVariable}{npState}
\calls{npSymbolVariable}{npEqKey}
\calls{npSymbolVariable}{npId}
\calls{npSymbolVariable}{npPop1}
\calls{npSymbolVariable}{npPush}
\calls{npSymbolVariable}{tokConstruct}
\calls{npSymbolVariable}{tokPart}
\calls{npSymbolVariable}{tokPosn}
\calls{npSymbolVariable}{npRestore}
<<defun npSymbolVariable>>=
(defun |npSymbolVariable| ()
 (let (a)
  (setq a (|npState|))
  (cond
   ((and (|npEqKey| 'backquote) (|npId|))
    (setq a (|npPop1|))
    (|npPush| (|tokConstruct| '|idsy| (|tokPart| a) (|tokPosn| a))))
   (t (|npRestore| a) nil))))

@

\defun{npRightAssoc}{npRightAssoc}
\calls{npRightAssoc}{npState}
\calls{npRightAssoc}{npInfGeneric}
\calls{npRightAssoc}{npRightAssoc}
\calls{npRightAssoc}{npPush}
\calls{npRightAssoc}{pfApplication}
\calls{npRightAssoc}{npPop2}
\calls{npRightAssoc}{npPop1}
\calls{npRightAssoc}{pfInfApplication}
\calls{npRightAssoc}{npRestore}
<<defun npRightAssoc>>=
(defun |npRightAssoc| (o p)
 (let (a)
  (setq a (|npState|))
  (cond
   ((apply p nil)
      ((lambda ()
       (loop
        (cond
         ((not
           (and
            (|npInfGeneric| o)
            (or
             (|npRightAssoc| o p)
             (progn (|npPush| (|pfApplication| (|npPop2|) (|npPop1|))) nil))))
          (return nil))
         (t
          (|npPush| (|pfInfApplication| (|npPop2|) (|npPop2|) (|npPop1|))))))))
       t)
   (t 
    (|npRestore| a) 
    nil))))

@

\defun{npLeftAssoc}{p o p o p o p = (((p o p) o p) o p)}
\begin{verbatim}
p o p o p o p = (((p o p) o p) o p)
p o p o = (p o p) o
;npLeftAssoc(operations,parser)==
;    if APPLY(parser,nil)
;    then
;       while npInfGeneric(operations)
;         and (APPLY(parser,nil) or
;              (npPush pfApplication(npPop2(),npPop1());false))
;           repeat
;             npPush pfInfApplication(npPop2(),npPop2(),npPop1())
;       true
;    else false
\end{verbatim}
\calls{npLeftAssoc}{npInfGeneric}
\calls{npLeftAssoc}{npPush}
\calls{npLeftAssoc}{pfApplication}
\calls{npLeftAssoc}{npPop2}
\calls{npLeftAssoc}{npPop1}
\calls{npLeftAssoc}{pfInfApplication}
<<defun npLeftAssoc>>=
(defun |npLeftAssoc| (operations parser)
 (when (apply parser nil)
   ((lambda nil
      (loop
       (cond
        ((not
          (and
           (|npInfGeneric| operations)
           (or
            (apply parser nil)
            (progn (|npPush| (|pfApplication| (|npPop2|) (|npPop1|))) nil))))
         (return nil))
        (t
         (|npPush| (|pfInfApplication| (|npPop2|) (|npPop2|) (|npPop1|))))))))
     t))

@

\defun{npInfGeneric}{npInfGeneric}
\calls{npInfGeneric}{npDDInfKey}
\calls{npInfGeneric}{npEqKey}
<<defun npInfGeneric>>=
(defun |npInfGeneric| (s)
 (and
  (|npDDInfKey| s)
  (or (|npEqKey| 'backset) t)))

@

\defun{npDDInfKey}{npDDInfKey}
\calls{npDDInfKey}{npInfKey}
\calls{npDDInfKey}{npState}
\calls{npDDInfKey}{npEqKey}
\calls{npDDInfKey}{npPush}
\calls{npDDInfKey}{pfSymb}
\calls{npDDInfKey}{npPop1}
\calls{npDDInfKey}{tokPosn}
\calls{npDDInfKey}{npRestore}
\calls{npDDInfKey}{tokConstruct}
\calls{npDDInfKey}{tokPart}
\usesdollar{npDDInfKey}{stok}
<<defun npDDInfKey>>=
(defun |npDDInfKey| (s)
 (let (b a)
 (declare (special |$stok|))
  (or
   (|npInfKey| s)
   (progn
    (setq a (|npState|))
    (setq b |$stok|)
    (cond
     ((and (|npEqKey| '|'|) (|npInfKey| s))
       (|npPush| (|pfSymb| (|npPop1|) (|tokPosn| b))))
     (t
      (|npRestore| a)
      (cond
       ((and (|npEqKey| 'backquote) (|npInfKey| s))
         (setq a (|npPop1|))
          (|npPush| (|tokConstruct| '|idsy| (|tokPart| a) (|tokPosn| a))))
       (t 
        (|npRestore| a) 
        nil))))))))

@

\defun{npInfKey}{npInfKey}
\calls{npInfKey}{memq}
\calls{npInfKey}{npPushId}
\usesdollar{npInfKey}{stok}
\usesdollar{npInfKey}{ttok}
<<defun npInfKey>>=
(defun |npInfKey| (s)
 (declare (special |$ttok| |$stok|))
  (and (eq (caar |$stok|) '|key|) (memq |$ttok| s) (|npPushId|)))

@

\defun{npPushId}{npPushId}
\calls{npPushId}{tokConstruct}
\calls{npPushId}{tokPosn}
\calls{npPushId}{npNext}
\usesdollar{npPushId}{stack}
\usesdollar{npPushId}{stok}
\usesdollar{npPushId}{ttok}
<<defun npPushId>>=
(defun |npPushId| ()
 (let (a)
 (declare (special |$stack| |$stok| |$ttok|))
  (setq a (get |$ttok| 'infgeneric))
  (when a (setq |$ttok| a))
  (setq |$stack|
   (cons (|tokConstruct| '|id| |$ttok| (|tokPosn| |$stok|)) |$stack|))
  (|npNext|)))

@

\defvar{npPParg}
<<initvars>>=
(defvar *npPParg* nil "rewrite npPP without flets, using global scoping")

@

\defun{npPP}{npPP}
This was rewritten by NAG to remove flet.
\calls{npPP}{npParened}
\calls{npPP}{npPPf}
\calls{npPP}{npPileBracketed}
\calls{npPP}{npPPg}
\calls{npPP}{npPush}
\calls{npPP}{pfEnSequence}
\calls{npPP}{npPop1}
\uses{npPP}{npPParg}
<<defun npPP>>=
(defun |npPP| (f)
 (declare (special *npPParg*))
  (setq *npPParg* f)
  (or 
   (|npParened| #'npPPf)
   (and  (|npPileBracketed| #'npPPg) (|npPush| (|pfEnSequence| (|npPop1|))))
   (funcall f)))

@

\defun{npPPff}{npPPff}
\calls{npPPff}{npPop1}
\calls{npPPff}{npPush}
\usesdollar{npPPff}{npPParg}
<<defun npPPff>>=
(defun npPPff ()
 (and (funcall *npPParg*) (|npPush| (list (|npPop1|)))))

@

\defun{npPPg}{npPPg}
\calls{npPPg}{npListAndRecover}
\calls{npPPg}{npPPf}
\calls{npPPg}{npPush}
\calls{npPPg}{pfAppend}
\calls{npPPg}{npPop1}
<<defun npPPg>>=
(defun npPPg () 
 (and (|npListAndRecover| #'npPPf))
 (|npPush| (|pfAppend| (|npPop1|))))

@

\defun{npPPf}{npPPf}
\calls{npPPf}{npSemiListing}
\calls{npPPf}{npPPff}
<<defun npPPf>>=
(defun npPPf ()
 (|npSemiListing| #'npPPff))

@

\defun{npEnclosed}{npEnclosed}
\calls{npEnclosed}{npEqKey}
\calls{npEnclosed}{npPush}
\calls{npEnclosed}{pfTuple}
\calls{npEnclosed}{pfListOf}
\calls{npEnclosed}{npMissingMate}
\calls{npEnclosed}{pfEnSequence}
\calls{npEnclosed}{npPop1}
\usesdollar{npEnclosed}{stok}
<<defun npEnclosed>>=
(defun |npEnclosed| (open close fn f)
 (let (a)
 (declare (special |$stok|))
  (setq a |$stok|)
  (when (|npEqKey| open)
   (cond
    ((|npEqKey| close)
     (|npPush| (funcall fn a (|pfTuple| (|pfListOf| NIL)))))
    ((and (apply f nil)
          (or (|npEqKey| close)
              (|npMissingMate| close a)))
     (|npPush| (funcall fn a (|pfEnSequence| (|npPop1|)))))
    ('t nil)))))

@

\defun{npState}{npState}
\usesdollar{npState}{stack}
\usesdollar{npState}{inputStream}
<<defun npState>>=
(defun |npState| ()
 (declare (special |$stack| |$inputStream|))
  (cons |$inputStream| |$stack|))

@

\defun{npTrap}{npTrap}
\throws{npTrap}{trappoint}
\calls{npTrap}{tokPosn}
\calls{npTrap}{ncSoftError}
\usesdollar{npTrap}{stok}
<<defun npTrap>>=
(defun |npTrap| ()
 (declare (special |$stok|))
  (|ncSoftError| (|tokPosn| |$stok|) 'S2CY0002 nil)
  (throw 'trappoint 'trapped))

@

\defun{npTrapForm}{npTrapForm}
\throws{npTrapForm}{trappoint}
\calls{npTrapForm}{pfSourceStok}
\calls{npTrapForm}{syGeneralErrorHere}
\calls{npTrapForm}{ncSoftError}
\calls{npTrapForm}{tokPosn}
<<defun npTrapForm>>=
(defun |npTrapForm| (x)
 (let (a)
  (setq a (|pfSourceStok| x))
  (cond
   ((eq a '|NoToken|)
     (|syGeneralErrorHere|) 
     (throw 'trappoint 'trapped))
   (t
    (|ncSoftError| (|tokPosn| a) 'S2CY0002 nil)
    (throw 'trappoint 'trapped)))))

@

\defun{npVariable}{npVariable}
\calls{npVariable}{npParenthesized}
\calls{npVariable}{npVariablelist}
\calls{npVariable}{npVariableName}
\calls{npVariable}{npPush}
\calls{npVariable}{pfListOf}
\calls{npVariable}{npPop1}
<<defun npVariable>>=
(defun |npVariable| ()
 (or
  (|npParenthesized| #'|npVariablelist|)
  (and (|npVariableName|) (|npPush| (|pfListOf| (list (|npPop1|)))))))

@

\defun{npVariablelist}{npVariablelist}
\calls{npVariablelist}{npListing}
\calls{npVariablelist}{npVariableName}
<<defun npVariablelist>>=
(defun |npVariablelist| ()
 (|npListing| #'|npVariableName|))

@

\defun{npVariableName}{npVariableName}
\calls{npVariableName}{npName}
\calls{npVariableName}{npDecl}
\calls{npVariableName}{npPush}
\calls{npVariableName}{pfTyped}
\calls{npVariableName}{npPop1}
\calls{npVariableName}{pfNothing}
<<defun npVariableName>>=
(defun |npVariableName| ()
 (and
  (|npName|)
  (or (|npDecl|) (|npPush| (|pfTyped| (|npPop1|) (|pfNothing|))))))

@

\defun{npDecl}{npDecl}
\calls{npDecl}{npEqKey}
\calls{npDecl}{npType}
\calls{npDecl}{npTrap}
\calls{npDecl}{npPush}
\calls{npDecl}{pfTyped}
\calls{npDecl}{npPop2}
\calls{npDecl}{npPop1}
<<defun npDecl>>=
(defun |npDecl| ()
 (and
  (|npEqKey| 'colon)
  (or (|npType|) (|npTrap|))
  (|npPush| (|pfTyped| (|npPop2|) (|npPop1|)))))

@

\defun{npParenthesized}{npParenthesized}
\calls{npParenthesized}{npParenthesize}
<<defun npParenthesized>>=
(defun |npParenthesized| (f)
 (or (|npParenthesize| '|(| '|)| f) (|npParenthesize| '|(\|| '|\|)| f)))

@

\defun{npParenthesize}{npParenthesize}
\calls{npParenthesize}{npEqKey}
\calls{npParenthesize}{npMissingMate}
\calls{npParenthesize}{npPush}
\usesdollar{npParenthesize}{stok}
<<defun npParenthesize>>=
(defun |npParenthesize| (open close f)
 (let (a)
 (declare (special |$stok|))
  (setq a |$stok|)
  (cond
   ((|npEqKey| open)
    (cond
     ((and (apply f nil)
           (or (|npEqKey| close)
               (|npMissingMate| close a)))
      t)
     ((|npEqKey| close) (|npPush| nil))
     (t (|npMissingMate| close a))))
   (t nil))))

@

\defun{npMissingMate}{npMissingMate}
\calls{npMissingMate}{ncSoftError}
\calls{npMissingMate}{tokPosn}
\calls{npMissingMate}{npMissing}
<<defun npMissingMate>>=
(defun |npMissingMate| (close open)
 (|ncSoftError| (|tokPosn| open) 'S2CY0008 nil)
 (|npMissing| close))

@

\defun{npExit}{npExit}
\calls{npExit}{npBackTrack}
\calls{npExit}{npAssign}
\calls{npExit}{npPileExit}
<<defun npExit>>=
(defun |npExit| ()
 (|npBackTrack| #'|npAssign| 'exit #'|npPileExit|))

@

\defun{npPileExit}{npPileExit}
\calls{npPileExit}{npAssign}
\calls{npPileExit}{npEqKey}
\calls{npPileExit}{npStatement}
\calls{npPileExit}{npPush}
\calls{npPileExit}{pfExit}
\calls{npPileExit}{npPop2}
\calls{npPileExit}{npPop1}
<<defun npPileExit>>=
(defun |npPileExit| ()
 (and
  (|npAssign|)
  (or (|npEqKey| 'exit) (|npTrap|))
  (or (|npStatement|) (|npTrap|))
  (|npPush| (|pfExit| (|npPop2|) (|npPop1|)))))

@

\defun{npAssign}{npAssign}
\calls{npAssign}{npBackTrack}
\calls{npAssign}{npMDEF}
\calls{npAssign}{npAssignment}
<<defun npAssign>>=
(defun |npAssign| ()
 (|npBackTrack| #'|npMDEF| 'becomes #'|npAssignment|))

@

\defun{npAssignment}{npAssignment}
\calls{npAssignment}{npAssignVariable}
\calls{npAssignment}{npEqKey}
\calls{npAssignment}{npTrap}
\calls{npAssignment}{npGives}
\calls{npAssignment}{npPush}
\calls{npAssignment}{pfAssign}
\calls{npAssignment}{npPop2}
\calls{npAssignment}{npPop1}
<<defun npAssignment>>=
(defun |npAssignment| ()
 (and
  (|npAssignVariable|)
  (or (|npEqKey| 'becomes) (|npTrap|))
  (or (|npGives|) (|npTrap|))
  (|npPush| (|pfAssign| (|npPop2|) (|npPop1|)))))

@

\defun{npAssignVariable}{npAssignVariable}
\calls{npAssignVariable}{npColon}
\calls{npAssignVariable}{npPush}
\calls{npAssignVariable}{pfListOf}
\calls{npAssignVariable}{npPop1}
<<defun npAssignVariable>>=
(defun |npAssignVariable| () 
 (and (|npColon|) (|npPush| (|pfListOf| (list (|npPop1|))))))

@

\defun{npColon}{npColon}
\calls{npColon}{npTypified}
\calls{npColon}{npAnyNo}
\calls{npColon}{npTagged}
<<defun npColon>>=
(defun |npColon| ()
 (and (|npTypified|) (|npAnyNo| #'|npTagged|)))

@

\defun{npTagged}{npTagged}
\calls{npTagged}{npTypedForm1}
\calls{npTagged}{pfTagged}
<<defun npTagged>>=
(defun |npTagged| ()
 (|npTypedForm1| 'colon #'|pfTagged|))

@

\defun{npTypedForm1}{npTypedForm1}
\calls{npTypedForm1}{npEqKey}
\calls{npTypedForm1}{npType}
\calls{npTypedForm1}{npTrap}
\calls{npTypedForm1}{npPush}
\calls{npTypedForm1}{npPop2}
\calls{npTypedForm1}{npPop1}
<<defun npTypedForm1>>=
(defun |npTypedForm1| (sy fn)
 (and
  (|npEqKey| sy)
  (or (|npType|) (|npTrap|))
  (|npPush| (funcall fn (|npPop2|) (|npPop1|)))))

@

\defun{npTypified}{npTypified}
\calls{npTypified}{npApplication}
\calls{npTypified}{npAnyNo}
\calls{npTypified}{npTypeStyle}
<<defun npTypified>>=
(defun |npTypified| ()
 (and (|npApplication|) (|npAnyNo| #'|npTypeStyle|)))

@

\defun{npTypeStyle}{npTypeStyle}
\calls{npTypeStyle}{npCoerceTo}
\calls{npTypeStyle}{npRestrict}
\calls{npTypeStyle}{npPretend}
\calls{npTypeStyle}{npColonQuery}
<<defun npTypeStyle>>=
(defun |npTypeStyle| ()
 (or (|npCoerceTo|) (|npRestrict|) (|npPretend|) (|npColonQuery|)))

@

\defun{npPretend}{npPretend}
\calls{npPretend}{npTypedForm}
\calls{npPretend}{pfPretend}
<<defun npPretend>>=
(defun |npPretend| ()
 (|npTypedForm| 'pretend #'|pfPretend|))

@

\defun{npColonQuery}{npColonQuery}
\calls{npColonQuery}{npTypedForm}
\calls{npColonQuery}{pfRetractTo}
<<defun npColonQuery>>=
(defun |npColonQuery| ()
 (|npTypedForm| 'atat #'|pfRetractTo|))

@

\defun{npCoerceTo}{npCoerceTo}
\calls{npCoerceTo}{npTypedForm}
\calls{npCoerceTo}{pfCoerceto}
<<defun npCoerceTo>>=
(defun |npCoerceTo| ()
 (|npTypedForm| 'coerce #'|pfCoerceto|))

@

\defun{npTypedForm}{npTypedForm}
\calls{npTypedForm}{npEqKey}
\calls{npTypedForm}{npApplication}
\calls{npTypedForm}{npTrap}
\calls{npTypedForm}{npPush}
\calls{npTypedForm}{npPop2}
\calls{npTypedForm}{npPop1}
<<defun npTypedForm>>=
(defun |npTypedForm| (sy fn)
 (and
  (|npEqKey| sy)
  (or (|npApplication|) (|npTrap|))
  (|npPush| (funcall fn (|npPop2|) (|npPop1|)))))

@

\defun{npRestrict}{npRestrict}
\calls{npRestrict}{npTypedForm}
\calls{npRestrict}{pfRestrict}
<<defun npRestrict>>=
(defun |npRestrict| ()
 (|npTypedForm| 'at #'|pfRestrict|))

@

\defun{npListofFun}{npListofFun}
\calls{npListofFun}{npTrap}
\calls{npListofFun}{npPush}
\calls{npListofFun}{npPop3}
\calls{npListofFun}{npPop2}
\calls{npListofFun}{npPop1}
\usesdollar{npListofFun}{stack}
<<defun npListofFun>>=
(defun |npListofFun| (f h g)
 (let (a)
 (declare (special |$stack|))
  (cond
   ((apply f nil)
    (cond
     ((and (apply h nil) (or (apply f nil) (|npTrap|)))
       (setq a |$stack|) 
       (setq |$stack| nil)
       (do ()
           ((not (and (apply h nil)
                 (or (apply f nil) (|npTrap|))))))
       (setq |$stack| (cons (nreverse |$stack|) a))
       (|npPush| (funcall g (cons (|npPop3|) (cons (|npPop2|) (|npPop1|))))))
     (t t)))
   (t nil))))

@

\section{Macro handling}
\defun{phMacro}{phMacro}
\tpdhere{The pform function has a leading percent sign. fix this}
\begin{verbatim}
carrier[ptree,...] -> carrier[ptree, ptreePremacro,...]
\end{verbatim}
\calls{phMacro}{phBegin}
\calls{phMacro}{ncEltQ}
\calls{phMacro}{ncPutQ}
\calls{phMacro}{macroExpanded}
\calls{phMacro}{intSayKeyedMsg}
\calls{phMacro}{pform}
\usesdollar{phMacro}{ncmMacro}
<<defun phMacro>>=
(defun |phMacro| (carrier)
 (let (ptree)
 (declare (special |$ncmMacro|))
  (|phBegin| '|Macroing|)
  (setq ptree (|ncEltQ| carrier '|ptree|))
  (|ncPutQ| carrier '|ptreePremacro| ptree)
  (setq ptree (|macroExpanded| ptree))
  (when |$ncmMacro| (|intSayKeyedMsg| 'S2CTP007 (list (|%pform| ptree))))
  (|ncPutQ| carrier '|ptree| ptree)
  'ok))

@

\defun{macroExpanded}{macroExpanded}
\$macActive is a list of the bodies being expanded.
\$posActive is a list of the parse forms where the bodies came from.
\calls{macroExpanded}{macExpand}
\usesdollar{macroExpanded}{posActive}
\usesdollar{macroExpanded}{macActive}
<<defun macroExpanded>>=
(defun |macroExpanded| (pf)
 (let (|$posActive| |$macActive|)
 (declare (special |$posActive| |$macActive|))
  (setq |$macActive| nil)
  (setq |$posActive| nil)
  (|macExpand| pf)))

@

\defun{macExpand}{macExpand}
\calls{macExpand}{pfWhere?}
\calls{macExpand}{macWhere}
\calls{macExpand}{pfLambda?}
\calls{macExpand}{macLambda}
\calls{macExpand}{pfMacro?}
\calls{macExpand}{macMacro}
\calls{macExpand}{pfId?}
\calls{macExpand}{macId}
\calls{macExpand}{pfApplication?}
\calls{macExpand}{macApplication}
\calls{macExpand}{pfMapParts}
\calls{macExpand}{macExpand}
<<defun macExpand>>=
(defun |macExpand| (pf)
 (cond
  ((|pfWhere?| pf)       (|macWhere| pf))
  ((|pfLambda?| pf)      (|macLambda| pf))
  ((|pfMacro?| pf)       (|macMacro| pf))
  ((|pfId?| pf)          (|macId| pf))
  ((|pfApplication?| pf) (|macApplication| pf))
  (t                     (|pfMapParts| #'|macExpand| pf))))

@

\defun{macApplication}{macApplication}
\calls{macApplication}{pfMapParts}
\calls{macApplication}{macExpand}
\calls{macApplication}{pfApplicationOp}
\calls{macApplication}{pfMLambda?}
\calls{macApplication}{pf0ApplicationArgs}
\calls{macApplication}{mac0MLambdaApply}
\usesdollar{macApplication}{pfMacros}
<<defun macApplication>>=
(defun |macApplication| (pf)
 (let (args op)
 (declare (special |$pfMacros|))
  (setq pf (|pfMapParts| #'|macExpand| pf))
  (setq op (|pfApplicationOp| pf))
  (cond
   ((null (|pfMLambda?| op)) pf)
   (t
    (setq args (|pf0ApplicationArgs| pf))
    (|mac0MLambdaApply| op args pf |$pfMacros|)))))

@

\defun{mac0MLambdaApply}{mac0MLambdaApply}
\tpdhere{The pform function has a leading percent sign. fix this}
\calls{mac0MLambdaApply}{pf0MLambdaArgs}
\calls{mac0MLambdaApply}{pfMLambdaBody}
\calls{mac0MLambdaApply}{pfSourcePosition}
\calls{mac0MLambdaApply}{ncHardError}
\calls{mac0MLambdaApply}{pfId?}
\calls{mac0MLambdaApply}{pform}
\calls{mac0MLambdaApply}{mac0Define}
\calls{mac0MLambdaApply}{mac0ExpandBody}
\usesdollar{mac0MLambdaApply}{pfMacros}
\usesdollar{mac0MLambdaApply}{posActive}
\usesdollar{mac0MLambdaApply}{macActive}
<<defun mac0MLambdaApply>>=
(defun |mac0MLambdaApply| (mlambda args opf |$pfMacros|)
 (declare (special |$pfMacros|))
 (let (pos body params)
 (declare (special |$posActive| |$macActive|))
  (setq params (|pf0MLambdaArgs| mlambda))
  (setq body (|pfMLambdaBody| mlambda))
  (cond
   ((not (eql (length args) (length params)))
    (setq pos (|pfSourcePosition| opf))
    (|ncHardError| pos 'S2CM0003 (list (length params) (length args))))
   (t
    ((lambda (parms p arrgs a) ; for p in params for a in args repeat
     (loop
      (cond
       ((or (atom parms)
            (progn (setq p (car parms)) nil)
            (atom arrgs)
            (progn (setq a (CAR arrgs)) nil))
         (return nil))
       (t
        (cond
         ((null (|pfId?| p))
          (setq pos (|pfSourcePosition| opf))
          (|ncHardError| pos 'S2CM0004 (list (|%pform| p))))
         (t
          (|mac0Define| (|pfIdSymbol| p) '|mparam| a)))))
      (setq parms (cdr parms))
      (setq arrgs (cdr arrgs))))
     params nil args nil)
    (|mac0ExpandBody| body opf |$macActive| |$posActive|)))))

@

\defun{mac0ExpandBody}{mac0ExpandBody}
\calls{mac0ExpandBody}{pfSourcePosition}
\calls{mac0ExpandBody}{mac0InfiniteExpansion}
\calls{mac0ExpandBody}{macExpand}
\usesdollar{mac0ExpandBody}{posActive}
\usesdollar{mac0ExpandBody}{macActive}
<<defun mac0ExpandBody>>=
(defun |mac0ExpandBody| (body opf |$macActive| |$posActive|)
 (declare (special |$macActive| |$posActive|))
 (let (posn pf)
  (cond
   ((memq body |$macActive|)
    (setq pf (cadr |$posActive|))
    (setq posn (|pfSourcePosition| pf))
    (|mac0InfiniteExpansion| posn body |$macActive|))
   (t
    (setq |$macActive| (cons body |$macActive|))
    (setq |$posActive| (cons opf |$posActive|))
    (|macExpand| body)))))

@

\defun{mac0InfiniteExpansion}{mac0InfiniteExpansion}
\tpdhere{The pform function has a leading percent sign. fix this}
\calls{mac0InfiniteExpansion}{mac0InfiniteExpansion,name}
\calls{mac0InfiniteExpansion}{ncSoftError}
\calls{mac0InfiniteExpansion}{pform}
<<defun mac0InfiniteExpansion>>=
(defun |mac0InfiniteExpansion| (posn body active)
 (let (rnames fname tmp1 blist result)
  (setq blist (cons body active))
  (setq tmp1 (mapcar #'|mac0InfiniteExpansion,name| blist))
  (setq fname (car tmp1)) ;[fname, :rnames] := [name b for b in blist] 
  (setq rnames (cdr tmp1))
  (|ncSoftError| posn 'S2CM0005
   (list
    (dolist (n (reverse rnames) (nreverse result))
      (setq result (append (reverse (list n "==>")) result)))
    fname (|%pform| body)))
  body))

@

\defun{mac0InfiniteExpansion,name}{mac0InfiniteExpansion,name}
\calls{mac0InfiniteExpansion,name}{mac0GetName}
\calls{mac0InfiniteExpansion,name}{pname}
<<defun mac0InfiniteExpansion,name>>=
(defun |mac0InfiniteExpansion,name| (b)
 (let (st sy got)
  (setq got (|mac0GetName| b))
  (cond
   ((null got) "???")
   (t
    (setq sy (car got))
    (setq st (cadr got))
    (if (eq st '|mlambda|) 
     (concat (pname sy) "(...)")
     (pname sy))))))

@

\defun{mac0GetName}{mac0GetName}
Returns [state, body] or NIL.
Returns [sy, state] or NIL.
\calls{mac0GetName}{pfMLambdaBody}
\usesdollar{mac0GetName}{pfMacros}
<<defun mac0GetName>>=
(defun |mac0GetName| (body)
 (let (bd tmp1 st tmp2 sy name)
 (declare (special |$pfMacros|))
 ; for [sy,st,bd] in $pfMacros while not name repeat
  ((lambda (macros tmplist)
   (loop
    (cond
     ((or (atom macros)
          (progn (setq tmplist (car macros)) nil)
          name)
       (return nil))
     (t
      (and (consp tmplist)
           (progn
            (setq sy (car tmplist))
            (setq tmp2 (cdr tmplist))
            (and (consp tmp2)
                 (progn
                  (setq st (car tmp2))
                  (setq tmp1 (cdr tmp2))
                  (and (consp tmp1)
                       (eq (cdr tmp1) nil)
                       (progn
                        (setq bd (car tmp1))
                        t)))))
           (progn
            (when (eq st '|mlambda|) (setq bd (|pfMLambdaBody| bd)))
            (when (eq bd body) (setq name (list sy st)))))))
           (setq macros (cdr macros))))
         |$pfMacros| nil)
        name))

@

\defun{macId}{macId}
\calls{macId}{pfIdSymbol}
\calls{macId}{mac0Get}
\calls{macId}{pfCopyWithPos}
\calls{macId}{pfSourcePosition}
\calls{macId}{mac0ExpandBody}
\usesdollar{macId}{posActive}
\usesdollar{macId}{macActive}
<<defun macId>>=
(defun |macId| (pf)
 (let (body state got sy)
 (declare (special |$posActive| |$macActive|))
  (setq sy (|pfIdSymbol| pf))
  (cond
   ((null (setq got (|mac0Get| sy))) pf)
   (t
    (setq state (car got))
    (setq body (cadr got))
    (cond
     ((eq state '|mparam|) body)
     ((eq state '|mlambda|) (|pfCopyWithPos| body (|pfSourcePosition| pf)))
     (t
      (|pfCopyWithPos|
       (|mac0ExpandBody| body pf |$macActive| |$posActive|)
       (|pfSourcePosition| pf))))))))

@

\defun{mac0Get}{mac0Get}
\calls{mac0Get}{ifcdr}
\usesdollar{mac0Get}{pfMacros}
<<defun mac0Get>>=
(defun |mac0Get| (sy)
 (declare (special |$pfMacros|))
 (ifcdr (assoc sy |$pfMacros|)))

@

\defun{macWhere}{macWhere}
\calls{macWhere}{macWhere,mac}
\usesdollar{macWhere}{pfMacros}
<<defun macWhere>>=
(defun |macWhere| (pf)
 (declare (special |$pfMacros|))
 (|macWhere,mac| pf |$pfMacros|))

@

\defun{macWhere,mac}{macWhere,mac}
\calls{macWhere,mac}{pfMapParts}
\calls{macWhere,mac}{macExpand}
\usesdollar{macWhere,mac}{pfMacros}
<<defun macWhere,mac>>=
(defun |macWhere,mac| (pf |$pfMacros|)
 (declare (special |$pfMacros|))
 (|pfMapParts| #'|macExpand| pf))

@

\defun{macLambda}{macLambda}
\calls{macLambda}{macLambda,mac}
\usesdollar{macLambda}{pfMacros}
<<defun macLambda>>=
(defun |macLambda| (pf)
 (declare (special |$pfMacros|))
 (|macLambda,mac| pf |$pfMacros|))

@

\defun{macLambda,mac}{macLambda,mac}
\calls{macLambda,mac}{pfMapParts}
\calls{macLambda,mac}{macExpand}
\usesdollar{macLambda,mac}{pfMacros}
<<defun macLambda,mac>>=
(defun |macLambda,mac| (pf |$pfMacros|)
 (declare (special |$pfMacros|))
 (|pfMapParts| #'|macExpand| pf))

@

\defun{macMacro}{Add appropriate definition the a Macro pform}
This function adds the appropriate definition and returns
the original Macro pform.
\tpdhere{The pform function has a leading percent sign. fix this}
\calls{macMacro}{pfMacroLhs}
\calls{macMacro}{pfMacroRhs}
\calls{macMacro}{pfId?}
\calls{macMacro}{ncSoftError}
\calls{macMacro}{pfSourcePosition}
\calls{macMacro}{pfIdSymbol}
\calls{macMacro}{mac0Define}
\calls{macMacro}{pform}
\calls{macMacro}{pfMLambda?}
\calls{macMacro}{macSubstituteOuter}
\calls{macMacro}{pfNothing?}
\calls{macMacro}{pfMacro}
\calls{macMacro}{pfNothing}
<<defun macMacro>>=
(defun |macMacro| (pf)
 (let (sy rhs lhs)
  (setq lhs (|pfMacroLhs| pf))
  (setq rhs (|pfMacroRhs| pf))
  (cond
   ((null (|pfId?| lhs))
    (|ncSoftError| (|pfSourcePosition| lhs) 'S2CM0001 (list (|%pform| lhs)))
    pf)
   (t
    (setq sy (|pfIdSymbol| lhs))
    (|mac0Define| sy
     (cond
      ((|pfMLambda?| rhs) '|mlambda|)
      (t '|mbody|))
     (|macSubstituteOuter| rhs))
     (cond
      ((|pfNothing?| rhs) pf)
      (t (|pfMacro| lhs (|pfNothing|))))))))

@

\defun{mac0Define}{Add a macro to the global pfMacros list}
\usesdollar{mac0Define}{pfMacros}
<<defun mac0Define>>=
(defun |mac0Define| (sy state body)
 (declare (special |$pfMacros|))
  (setq |$pfMacros| (cons (list sy state body) |$pfMacros|)))

@

\defun{macSubstituteOuter}{macSubstituteOuter}
\calls{macSubstituteOuter}{mac0SubstituteOuter}
\calls{macSubstituteOuter}{macLambdaParameterHandling}
<<defun macSubstituteOuter>>=
(defun |macSubstituteOuter| (pform)
 (|mac0SubstituteOuter| (|macLambdaParameterHandling| nil pform) pform))

@

\defun{mac0SubstituteOuter}{mac0SubstituteOuter}
\calls{mac0SubstituteOuter}{pfId?}
\calls{mac0SubstituteOuter}{macSubstituteId}
\calls{mac0SubstituteOuter}{pfLeaf?}
\calls{mac0SubstituteOuter}{pfLambda?}
\calls{mac0SubstituteOuter}{macLambdaParameterHandling}
\calls{mac0SubstituteOuter}{mac0SubstituteOuter}
\calls{mac0SubstituteOuter}{pfParts}
<<defun mac0SubstituteOuter>>=
(defun |mac0SubstituteOuter| (replist pform)
 (let (tmplist)
  (cond
   ((|pfId?| pform) (|macSubstituteId| replist pform))
   ((|pfLeaf?| pform) pform)
   ((|pfLambda?| pform)
    (setq tmplist (|macLambdaParameterHandling| replist pform))
    (dolist (p (|pfParts| pform)) (|mac0SubstituteOuter| tmplist p))
    pform)
   (t
    (dolist (p (|pfParts| pform)) (|mac0SubstituteOuter| replist p))
    pform))))
   
@

\defun{macLambdaParameterHandling}{macLambdaParameterHandling}
\calls{macLambdaParameterHandling}{pfLeaf?}
\calls{macLambdaParameterHandling}{pfLambda?}
\calls{macLambdaParameterHandling}{pfTypedId}
\calls{macLambdaParameterHandling}{pf0LambdaArgs}
\calls{macLambdaParameterHandling}{pfIdSymbol}
\calls{macLambdaParameterHandling}{AlistRemoveQ}
\calls{macLambdaParameterHandling}{pfMLambda?}
\calls{macLambdaParameterHandling}{pf0MLambdaArgs}
\calls{macLambdaParameterHandling}{pfLeaf}
\calls{macLambdaParameterHandling}{pfAbSynOp}
\calls{macLambdaParameterHandling}{pfLeafPosition}
\calls{macLambdaParameterHandling}{pfParts}
\calls{macLambdaParameterHandling}{macLambdaParameterHandling}
<<defun macLambdaParameterHandling>>=
(defun |macLambdaParameterHandling| (replist pform)
 (let (parlist symlist result)
  (cond
   ((|pfLeaf?| pform) nil)
   ((|pfLambda?| pform) ; remove ( identifier . replacement ) from assoclist
    (setq parlist (mapcar #'|pfTypedId| (|pf0LambdaArgs| pform)))
    (setq symlist (mapcar #'|pfIdSymbol| parlist))
    (dolist (par symlist) (setq replist (|AlistRemoveQ| par replist)))
    replist)
   ((|pfMLambda?| pform) ;construct assoclist ( identifier . replacement )
    (setq parlist (|pf0MLambdaArgs| pform)) ; extract parameter list
    (dolist (par parlist (nreverse result))
     (push
      (cons (|pfIdSymbol| par)
            (|pfLeaf| (|pfAbSynOp| par) (gensym) (|pfLeafPosition| par)))
       result)))
   (t
    (dolist (p (|pfParts| pform)) 
     (|macLambdaParameterHandling| replist p))))))

@

\defun{macSubstituteId}{macSubstituteId}
\calls{macSubstituteId}{AlistAssocQ}
\calls{macSubstituteId}{pfIdSymbol}
<<defun macSubstituteId>>=
(defun |macSubstituteId| (replist pform)
 (let (ex)
  (setq ex (|AlistAssocQ| (|pfIdSymbol| pform) replist))
  (cond
    (ex 
     (rplpair pform (cdr ex))
     pform)
    (t pform))))

@

\chapter{Pftrees}
\section{Abstract Syntax Trees Overview}

Th functions create and examine abstract syntax trees.  
These are called pforms, for short.

The pform data structure

\begin{itemize}
\item Leaves: [hd, tok, pos] where pos is optional
\item Trees:  [hd, tree, tree, ...]
\item hd is either an id or (id . alist)
\end{itemize}

The leaves are:

\begin{tabular}{lcl}
  char          &:=& ('char expr position) \\
  Document      &:=& ('Document expr position) \\
  error         &:=& ('error expr position) \\
  expression    &:=& ('expression expr position) \\
  float         &:=& ('float expr position) \\
  id            &:=& ('id expr position)\\
  idsy          &:=& ('idsy expr position)\\
  integer       &:=& ('integer expr position)\\
  string        &:=& ('string expr position)\\
  symbol        &:=& ('symbol expr position)
\end{tabular}

The special nodes:

\begin{tabular}{lcl}
  ListOf        &:=& ('listOf items)\\
  Nothing       &:=& ('nothing)\\
  SemiColon     &:=& ('SemiColon (Body: Expr))
\end{tabular}
          
The expression nodes:

\begin{tabular}{lcl}
 Add &:=& ('Add (Base: [Typed], Addin: Expr))\\ 
 And &:=& ('And left right)\\
 Application &:=& ('Application (Op: Expr, Arg: Expr))\\
 Assign &:=& ('Assign (LhsItems: [AssLhs], Rhs: Expr))\\
 Attribute &:=& ('Attribute (Expr: Primary))\\
 Break &:=& ('Break (From: ? Id))\\
 Coerceto &:=& ('Coerceto (Expr: Expr, Type: Type))\\
 Collect &:=& ('Collect (Body: Expr, Iterators: [Iterator]))\\
 ComDefinition &:=& ('ComDefinition (Doc: Document, Def: Definition))\\
 DeclPart &&\\
 Definition &:=& ('Definition (LhsItems: [Typed], Rhs: Expr))\\
 DefinitionSequence &:=& (Args: [DeclPart])\\
 Do &:=& ('Do (Body: Expr))\\
 Document &:=& ('Document strings)\\
 DWhere &:=& ('DWhere (Context: [DeclPart], Expr: [DeclPart]))\\
 EnSequence &:=&\\
 Exit &:=& ('Exit (Cond: ? Expr, Expr: ? Expr))\\
 Export &:=& ('Export (Items: [Typed]))\\
 Forin &:=& ('Forin (Lhs: [AssLhs], Whole: Expr))\\
 Free &:=& ('Free (Items: [Typed]))\\
 Fromdom &:=& ('Fromdom (What: Id, Domain: Type))\\
 Hide &:=& ('hide, arg)\\
 If &:=& ('If (Cond: Expr, Then: Expr, Else: ? Expr))\\
 Import &:=& ('Import (Items: [QualType]))\\
 Inline &:=& ('Inline (Items: [QualType]))\\
 Iterate &:=& ('Iterate (From: ? Id))\\
 Lambda &:=& ('Lambda (Args: [Typed], Rets: ReturnedTyped, Body: Expr))\\
 Literal \\
 Local &:=& ('Local (Items: [Typed]))\\
 Loop &:=& ('Loop (Iterators: [Iterator]))\\
 Macro &:=& ('Macro (Lhs: Id, Rhs: ExprorNot))\\
 MLambda &:=& ('MLambda (Args: [Id], Body: Expr))\\
 Not &:=& ('Not arg)\\
 Novalue &:=& ('Novalue (Expr: Expr))\\
 Or &:=& ('Or left right)\\
 Pretend &:=& ('Pretend (Expr: Expr, Type: Type))\\
 QualType &:=& ('QualType (Type: Type, Qual: ? Type))\\
 Restrict &:=& ('Restrict (Expr: Expr, Type: Type))\\
 Retract &:=& ('RetractTo (Expr: Expr, Type: Type))\\
 Return &:=& ('Return (Expr: ? Expr, From: ? Id))\\
 ReturnTyped &:=& ('returntyuped (type body))\\
 Rule &:=& ('Rule (lhsitems, rhsitems))\\
 Sequence &:=& ('Sequence (Args: [Expr]))\\
 Suchthat &:=& ('Suchthat (Cond: Expr))\\
 Symb &:=& if leaf then symbol else expression\\
 Tagged &:=& ('Tagged (Tag: Expr, Expr: Expr))\\
 TLambda &:=&('TLambda (Args: [Typed], \\
 &&\quad{}Rets: ReturnedTyped Type, Body: Expr))\\
 Tuple &:=& ('Tuple (Parts: [Expr]))\\
 Typed &:=& ('Typed (Id: Id, Type: ? Type))\\
 Typing &:=& ('Typing (Items: [Typed]))\\
 Until &:=& ('Until (Cond: Expr)) NOT USED\\
 WDeclare &:=& ('WDeclare (Signature: Typed, Doc: ? Document))\\
 Where &:=& ('Where (Context: [DeclPart], Expr: Expr))\\
 While &:=& ('While (Cond: Expr))\\
 With &:=& ('With (Base: [Typed], Within: [WithPart]))\\
 WIf &:=& ('WIf (Cond: Primary, Then: [WithPart], Else: [WithPart]))\\
 Wrong &:=& ('Wrong (Why: Document, Rubble: [Expr]))
\end{tabular}

Special cases of expression nodes are:

\begin{itemize}
\item Application. The Op parameter is one of
 \verb/and, or, Y, |, {}, [], {||}, [||]/
\item DeclPart. The comment is attached to all signatutres in 
 Typing, Import, Definition, Sequence, DWhere, Macro nodes
\item EnSequence. This is either a Tuple or Sequence depending on the
argument
\item Literal. One of integer symbol expression one zero char string float
of the form ('expression expr position)
\end{itemize}

\section{Structure handlers}

\defun{pfGlobalLinePosn}{pfGlobalLinePosn}
\calls{pfGlobalLinePosn}{poGlobalLinePosn}
<<defun pfGlobalLinePosn>>=
(defun |pfGlobalLinePosn| (posn)
 (|poGlobalLinePosn| posn))

@

\defun{pfCharPosn}{pfCharPosn}
\calls{pfCharPosn}{poCharPosn}
<<defun pfCharPosn>>=
(defun |pfCharPosn| (posn)
 (|poCharPosn| posn))

@

\defun{pfLinePosn}{pfLinePosn}
\calls{pfLinePosn}{poLinePosn}
<<defun pfLinePosn>>=
(defun |pfLinePosn| (posn)
 (|poLinePosn| posn))

@

\defun{pfFileName}{pfFileName}
\calls{pfFileName}{poFileName}
<<defun pfFileName>>=
(defun |pfFileName| (posn)
 (|poFileName| posn))

@

\defun{pfSourcePosition}{pfSourcePosition}
\calls{pfSourcePosition}{pfLeaf?}
\calls{pfSourcePosition}{pfLeafPosition}
\calls{pfSourcePosition}{poNoPosition?}
\calls{pfSourcePosition}{pfSourcePosition}
\calls{pfSourcePosition}{pfParts}
\usesdollar{pfSourcePosition}{nopos}
<<defun pfSourcePosition>>=
(defun |pfSourcePosition| (form)
 (let (pos)
 (declare (special |$nopos|))
  (cond
   ((|pfLeaf?| form) (|pfLeafPosition| form))
   (t
    (setq pos |$nopos|)
    ((lambda (theparts p) ; for p in parts while poNoPosition? pos repeat
     (loop
      (cond
       ((or (atom theparts)
            (progn (setq p (car theparts)) nil)
            (not (|poNoPosition?| pos)))
          (return nil))
       (t (setq pos (|pfSourcePosition| p))))
      (setq theparts (cdr theparts))))
     (|pfParts| form) nil)
    pos))))

@

\defun{pfSequenceToList}{Convert a Sequence node to a list}
\calls{pfSequenceToList}{pfSequence?}
\calls{pfSequenceToList}{pfSequenceArgs}
\calls{pfSequenceToList}{pfListOf}
<<defun pfSequenceToList>>=
(defun |pfSequenceToList| (x)
 (if (|pfSequence?| x) 
  (|pfSequenceArgs| x)
  (|pfListOf| (list x))))

@

\defun{pfSpread}{pfSpread}
\calls{pfSpread}{pfTyped}
<<defun pfSpread>>=
(defun |pfSpread| (arg1 arg2)
 (mapcar #'(lambda (i) (|pfTyped| i arg2)) arg1))

@

\defun{pfCheckItOut}{Deconstruct nodes to lists}
\calls{pfCheckItOut}{pfTagged?}
\calls{pfCheckItOut}{pfTaggedExpr}
\calls{pfCheckItOut}{pfNothing}
\calls{pfCheckItOut}{pfTaggedTag}
\calls{pfCheckItOut}{pfId?}
\calls{pfCheckItOut}{pfListOf}
\calls{pfCheckItOut}{pfTyped}
\calls{pfCheckItOut}{pfCollect1?}
\calls{pfCheckItOut}{pfCollectVariable1}
\calls{pfCheckItOut}{pfTuple?}
\calls{pfCheckItOut}{pf0TupleParts}
\calls{pfCheckItOut}{pfTaggedToTyped}
\calls{pfCheckItOut}{pfDefinition?}
\calls{pfCheckItOut}{pfApplication?}
\calls{pfCheckItOut}{pfFlattenApp}
\calls{pfCheckItOut}{pfTaggedToTyped1}
\calls{pfCheckItOut}{pfTransformArg}
\calls{pfCheckItOut}{npTrapForm}
<<defun pfCheckItOut>>=
(defun |pfCheckItOut| (x)
 (let (args op ls form rt result)
  (if (|pfTagged?| x)
   (setq rt (|pfTaggedExpr| x))
   (setq rt (|pfNothing|)))
  (if (|pfTagged?| x)
   (setq form (|pfTaggedTag| x))
   (setq form x))
  (cond
   ((|pfId?| form)
    (list (|pfListOf| (list (|pfTyped| form rt))) nil rt))
   ((|pfCollect1?| form)
    (list (|pfListOf| (list (|pfCollectVariable1| form))) nil rt))
   ((|pfTuple?| form)
    (list (|pfListOf|
     (dolist (part (|pf0TupleParts| form) (nreverse result))
      (push (|pfTaggedToTyped| part) result)))
     nil rt))
   ((|pfDefinition?| form)
    (list (|pfListOf| (list (|pfTyped| form (|pfNothing|)))) nil rt))
   ((|pfApplication?| form)
    (setq ls (|pfFlattenApp| form))
    (setq op (|pfTaggedToTyped1| (car ls)))
    (setq args
     (dolist (part (cdr ls) (nreverse result))
      (push (|pfTransformArg| part) result)))
    (list (|pfListOf| (list op)) args rt))
   (t (|npTrapForm| form)))))

@

\defun{pfCheckMacroOut}{pfCheckMacroOut}
\calls{pfCheckMacroOut}{pfId?}
\calls{pfCheckMacroOut}{pfApplication?}
\calls{pfCheckMacroOut}{pfFlattenApp}
\calls{pfCheckMacroOut}{pfCheckId}
\calls{pfCheckMacroOut}{pfCheckArg}
\calls{pfCheckMacroOut}{npTrapForm}
<<defun pfCheckMacroOut>>=
(defun |pfCheckMacroOut| (form)
 (let (args op ls)
  (cond
   ((|pfId?| form) (list form nil))
   ((|pfApplication?| form)
    (setq ls (|pfFlattenApp| form))
    (setq op (|pfCheckId| (car ls)))
    (setq args (mapcar #'|pfCheckArg| (cdr ls)))
    (list op args))
   (t (|npTrapForm| form)))))

@

\defun{pfCheckArg}{pfCheckArg}
\calls{pfCheckArg}{pfTuple?}
\calls{pfCheckArg}{pf0TupleParts}
\calls{pfCheckArg}{pfListOf}
\calls{pfCheckArg}{pfCheckId}
<<defun pfCheckArg>>=
(defun |pfCheckArg| (args)
 (let (argl)
  (if (|pfTuple?| args)
   (setq argl (|pf0TupleParts| args))
   (setq argl (list args)))
  (|pfListOf| (mapcar #'|pfCheckId| argl))))

@

\defun{pfCheckId}{pfCheckId}
\calls{pfCheckId}{pfId?}
\calls{pfCheckId}{npTrapForm}
<<defun pfCheckId>>=
(defun |pfCheckId| (form)
 (if (null (|pfId?| form))
  (|npTrapForm| form)
  form))

@

\defun{pfFlattenApp}{pfFlattenApp}
\calls{pfFlattenApp}{pfApplication?}
\calls{pfFlattenApp}{pfCollect1?}
\calls{pfFlattenApp}{pfFlattenApp}
\calls{pfFlattenApp}{pfApplicationOp}
\calls{pfFlattenApp}{pfApplicationArg}
<<defun pfFlattenApp>>=
(defun |pfFlattenApp| (x)
 (cond
  ((|pfApplication?| x)
   (cond
    ((|pfCollect1?| x) (LIST x))
    (t
     (append (|pfFlattenApp| (|pfApplicationOp| x))
             (|pfFlattenApp| (|pfApplicationArg| x))))))
  (t (list x))))

@

\defun{pfCollect1?}{pfCollect1?}
\calls{pfCollect1?}{pfApplication?}
\calls{pfCollect1?}{pfApplicationOp}
\calls{pfCollect1?}{pfId?}
\calls{pfCollect1?}{pfIdSymbol}
<<defun pfCollect1?>>=
(defun |pfCollect1?| (x)
 (let (a)
  (when (|pfApplication?| x)
   (setq a (|pfApplicationOp| x))
   (when (|pfId?| a) (eq (|pfIdSymbol| a) '|\||)))))

@

\defun{pfCollectVariable1}{pfCollectVariable1}
\calls{pfCollectVariable1}{pfApplicationArg}
\calls{pfCollectVariable1}{pf0TupleParts}
\calls{pfCollectVariable1}{pfTaggedToTyped}
\calls{pfCollectVariable1}{pfTyped}
\calls{pfCollectVariable1}{pfSuch}
\calls{pfCollectVariable1}{pfTypedId}
\calls{pfCollectVariable1}{pfTypedType}
<<defun pfCollectVariable1>>=
(defun |pfCollectVariable1| (x)
 (let (id var a)
  (setq a (|pfApplicationArg| x))
  (setq var (car (|pf0TupleParts| a)))
  (setq id (|pfTaggedToTyped| var))
  (|pfTyped|
   (|pfSuch| (|pfTypedId| id) (cadr (|pf0TupleParts| a)))
   (|pfTypedType| id))))

@

\defun{pfPushMacroBody}{pfPushMacroBody}
\calls{pfPushMacroBody}{pfMLambda}
\calls{pfPushMacroBody}{pfPushMacroBody}
<<defun pfPushMacroBody>>=
(defun |pfPushMacroBody| (args body)
 (if (null args)
   body
   (|pfMLambda| (car args) (|pfPushMacroBody| (cdr args) body))))

@

\defun{pfSourceStok}{pfSourceStok}
\calls{pfSourceStok}{pfLeaf?}
\calls{pfSourceStok}{pfParts}
\calls{pfSourceStok}{pfSourceStok}
\calls{pfSourceStok}{pfFirst}
<<defun pfSourceStok>>=
(defun |pfSourceStok| (x)
 (cond
  ((|pfLeaf?| x) x)
  ((null (|pfParts| x)) '|NoToken|)
  (t (|pfSourceStok| (|pfFirst| x)))))

@

\defun{pfTransformArg}{pfTransformArg}
\calls{pfTransformArg}{pfTuple?}
\calls{pfTransformArg}{pf0TupleParts}
\calls{pfTransformArg}{pfListOf}
\calls{pfTransformArg}{pfTaggedToTyped1}
<<defun pfTransformArg>>=
(defun |pfTransformArg| (args)
 (let (arglist result)
  (if (|pfTuple?| args)
   (setq arglist (|pf0TupleParts| args))
   (setq arglist (list args)))
  (|pfListOf|
   (dolist (|i| arglist (nreverse result))
    (push (|pfTaggedToTyped1| |i|) result)))))

@

\defun{pfTaggedToTyped1}{pfTaggedToTyped1}
\calls{pfTaggedToTyped1}{pfCollect1?}
\calls{pfTaggedToTyped1}{pfCollectVariable1}
\calls{pfTaggedToTyped1}{pfDefinition?}
\calls{pfTaggedToTyped1}{pfTyped}
\calls{pfTaggedToTyped1}{pfNothing}
\calls{pfTaggedToTyped1}{pfTaggedToTyped}
<<defun pfTaggedToTyped1>>=
(defun |pfTaggedToTyped1| (arg)
 (cond
  ((|pfCollect1?| arg) (|pfCollectVariable1| arg))
  ((|pfDefinition?| arg) (|pfTyped| arg (|pfNothing|)))
  (t (|pfTaggedToTyped| arg))))

@

\defun{pfSuch}{pfSuch}
\calls{pfSuch}{pfInfApplication}
\calls{pfSuch}{pfId}
<<defun pfSuch>>=
(defun |pfSuch| (x y)
 (|pfInfApplication| (|pfId| '|\||) x y))

@

\section{Special Nodes}

\defun{pfListOf}{Create a Listof node}
\calls{pfListOf}{pfTree}
<<defun pfListOf>>=
(defun |pfListOf| (x)
 (|pfTree| '|listOf| x))

@

\defun{pfNothing}{pfNothing}
\calls{pfNothing}{pfTree}
<<defun pfNothing>>=
(defun |pfNothing| ()
 (|pfTree| '|nothing| nil))

@

\defun{pfNothing?}{Is this a Nothing node?}
\calls{pfNothing?}{pfAbSynOp?}
<<defun pfNothing?>>=
(defun |pfNothing?| (form)
 (|pfAbSynOp?| form '|nothing|))

@

\section{Leaves}

\defun{pfDocument}{Create a Document node}
\calls{pfDocument}{pfLeaf}
<<defun pfDocument>>=
(defun |pfDocument| (strings)
 (|pfLeaf| '|Document| strings))

@

\defun{pfId}{Construct an Id node}
\calls{pfId}{pfLeaf}
<<defun pfId>>=
(defun |pfId| (expr)
 (|pfLeaf| '|id| expr))

@

\defun{pfId?}{Is this an Id node?}
\calls{pfId?}{pfAbSynOp?}
<<defun pfId?>>=
(defun |pfId?| (form)
 (or (|pfAbSynOp?| form '|id|) (|pfAbSynOp?| form '|idsy|)))

@

\defun{pfIdPos}{Construct an Id leaf node}
\calls{pfIdPos}{pfLeaf}
<<defun pfIdPos>>=
(defun |pfIdPos| (expr pos)
 (|pfLeaf| '|id| expr pos))

@

\defun{pfIdSymbol}{Return the Id part}
\calls{pfIdSymbol}{tokPart}
<<defun pfIdSymbol>>=
(defun |pfIdSymbol| (form)
 (|tokPart| form))

@

\defun{pfLeaf}{Construct a Leaf node}
\calls{pfLeaf}{tokConstruct}
\calls{pfLeaf}{ifcar}
\calls{pfLeaf}{pfNoPosition}
<<defun pfLeaf>>=
(defun |pfLeaf| (x y &rest z)
 (|tokConstruct| x y (or (ifcar z) (|pfNoPosition|))))

@

\defun{pfLeaf?}{Is this a leaf node?}
\calls{pfLeaf?}{memq}
\calls{pfLeaf?}{pfAbSynOp}
<<defun pfLeaf?>>=
(defun |pfLeaf?| (form)
 (memq (|pfAbSynOp| form)
   '(|id| |idsy| |symbol| |string| |char| |float| |expression|
     |integer| |Document| |error|)))

@

\defun{pfLeafPosition}{Return the token position of a leaf node}
\calls{pfLeafPosition}{tokPosn}
<<defun pfLeafPosition>>=
(defun |pfLeafPosition| (form)
 (|tokPosn| form))

@

\defun{pfLeafToken}{Return the Leaf Token}
\calls{pfLeafToken}{tokPart}
<<defun pfLeafToken>>=
(defun |pfLeafToken| (form)
 (|tokPart| form))

@

\defun{pfLiteral?}{Is this a Literal node?}
\calls{pfLiteral?}{pfAbSynOp}
<<defun pfLiteral?>>=
(defun |pfLiteral?| (form)
 (memq (|pfAbSynOp| form)
  '(|integer| |symbol| |expression| |one| |zero| |char| |string| |float|)))

@

\defun{pfLiteralClass}{Create a LiteralClass node}
\calls{pfLiteralClass}{pfAbSynOp}
<<defun pfLiteralClass>>=
(defun |pfLiteralClass| (form)
 (|pfAbSynOp| form))

@

\defun{pfLiteralString}{Return the LiteralString}
\calls{pfLiteralString}{tokPart}
<<defun pfLiteralString>>=
(defun |pfLiteralString| (form)
 (|tokPart| form))

@

\defun{pfParts}{Return the parts of a tree node}
<<defun pfParts>>=
(defun |pfParts| (form)
 (cdr form))

@

\defun{pfPile}{Return the argument unchanged}
<<defun pfPile>>=
(defun |pfPile| (part)
 part)

@

\defun{pfPushBody}{pfPushBody}
\calls{pfPushBody}{pfLambda}
\calls{pfPushBody}{pfNothing}
\calls{pfPushBody}{pfPushBody}
<<defun pfPushBody>>=
(defun |pfPushBody| (rt args body)
 (cond
  ((null args) body)
  ((null (cdr args)) (|pfLambda| (car args) rt body))
  (t
   (|pfLambda| (car args) (|pfNothing|)
               (|pfPushBody| rt (cdr args) body)))))

@

\defun{pfSexpr}{An S-expression which people can read.}
\calls{pfSexpr}{pfSexpr,strip}
<<defun pfSexpr>>=
(defun |pfSexpr| (pform)
 (|pfSexpr,strip| pform))

@

\defun{pfSexpr,strip}{Create a human readable S-expression}
\calls{pfSexpr,strip}{pfId?}
\calls{pfSexpr,strip}{pfIdSymbol}
\calls{pfSexpr,strip}{pfLiteral?}
\calls{pfSexpr,strip}{pfLiteralString}
\calls{pfSexpr,strip}{pfLeaf?}
\calls{pfSexpr,strip}{tokPart}
\calls{pfSexpr,strip}{pfApplication?}
\calls{pfSexpr,strip}{pfApplicationArg}
\calls{pfSexpr,strip}{pfTuple?}
\calls{pfSexpr,strip}{pf0TupleParts}
\calls{pfSexpr,strip}{pfApplicationOp}
\calls{pfSexpr,strip}{pfSexpr,strip}
\calls{pfSexpr,strip}{pfAbSynOp}
\calls{pfSexpr,strip}{pfParts}
<<defun pfSexpr,strip>>=
(defun |pfSexpr,strip| (pform)
 (let (args a result)
  (cond
   ((|pfId?| pform)      (|pfIdSymbol| pform))
   ((|pfLiteral?| pform) (|pfLiteralString| pform))
   ((|pfLeaf?| pform)    (|tokPart| pform))
   ((|pfApplication?| pform)
    (setq a (|pfApplicationArg| pform))
    (if (|pfTuple?| a)
     (setq args (|pf0TupleParts| a))
     (setq args (list a)))
    (dolist (p (cons (|pfApplicationOp| pform) args) (nreverse result))
     (push (|pfSexpr,strip| p) result)))
   (t
    (cons (|pfAbSynOp| pform)
     (dolist (p (|pfParts| pform) (nreverse result))
      (push (|pfSexpr,strip| p) result)))))))

@

\defun{pfSymb}{Construct a Symbol or Expression node}
\calls{pfSymb}{pfLeaf?}
\calls{pfSymb}{pfSymbol}
\calls{pfSymb}{tokPart}
\calls{pfSymb}{ifcar}
\calls{pfSymb}{pfExpression}
\calls{pfSymb}{pfSexpr}
<<defun pfSymb>>=
(defun |pfSymb| (expr &REST optpos)
 (if (|pfLeaf?| expr)
  (|pfSymbol| (|tokPart| expr) (ifcar optpos))
  (|pfExpression| (|pfSexpr| expr) (ifcar optpos))))

@

\defun{pfSymbol}{Construct a Symbol leaf node}
\calls{pfSymbol}{pfLeaf}
\calls{pfSymbol}{ifcar}
<<defun pfSymbol>>=
(defun |pfSymbol| (expr &rest optpos)
 (|pfLeaf| '|symbol| expr (ifcar optpos)))

@

\defun{pfSymbol?}{Is this a Symbol node?}
\calls{pfSymbol?}{pfAbSynOp?}
<<defun pfSymbol?>>=
(defun |pfSymbol?| (form)
 (|pfAbSynOp?| form '|symbol|))

@

\defun{pfSymbolSymbol}{Return the Symbol part}
\calls{pfSymbolSymbol}{tokPart}
<<defun pfSymbolSymbol>>=
(defun |pfSymbolSymbol| (form)
 (|tokPart| form))

@

\section{Trees}

\defun{pfTree}{Construct a tree node}
<<defun pfTree>>=
(defun |pfTree| (x y)
 (cons x y))))

@

\defun{pfAdd}{Construct an Add node}
\calls{pfAdd}{pfNothing}
\calls{pfAdd}{pfTree}
<<defun pfAdd>>=
(defun |pfAdd| (pfbase pfaddin &rest addon)
 (let (lhs)
  (if addon
   (setq lhs addon)
   (setq lhs (|pfNothing|)))
  (|pfTree| '|Add| (list pfbase pfaddin lhs))))

@

\defun{pfAnd}{Construct an And node}
\calls{pfAnd}{pfTree}
<<defun pfAnd>>=
(defun |pfAnd| (pfleft pfright)
 (|pfTree| '|And| (list pfleft pfright)))

@

\defun{pfAttribute}{pfAttribute}
\calls{pfAttribute}{pfTree}
<<defun pfAttribute>>=
(defun |pfAttribute| (pfexpr)
 (|pfTree| '|Attribute| (list pfexpr)))

@

\defun{pfApplication}{Return an Application node}
\calls{pfApplication}{pfTree}
<<defun pfApplication>>=
(defun |pfApplication| (pfop pfarg)
 (|pfTree| '|Application| (list pfop pfarg)))

@

\defun{pfApplicationArg}{Return the Arg part of an Application node}
<<defun pfApplicationArg>>=
(defun |pfApplicationArg| (pf)
 (caddr pf))

@

\defun{pfApplicationOp}{Return the Op part of an Application node}
<<defun pfApplicationOp>>=
(defun |pfApplicationOp| (pf)
 (cadr pf))

@

\defun{pfAnd?}{Is this an And node?}
\calls{pfAnd?}{pfAbSynOp?}
<<defun pfAnd?>>=
(defun |pfAnd?| (pf)
 (|pfAbSynOp?| pf '|And|))

@

\defun{pfAndLeft}{Return the Left part of an And node}
<<defun pfAndLeft>>=
(defun |pfAndLeft| (pf)
 (cadr pf))

@

\defun{pfAndRight}{Return the Right part of an And node}
<<defun pfAndRight>>=
(defun |pfAndRight| (pf)
 (caddr pf))

@

\defun{pfAppend}{Flatten a list of lists}
<<defun pfAppend>>=
(defun |pfAppend| (list)
 (apply #'append list))

@

\defun{pfApplication?}{Is this an Application node?}
\calls{pfApplication?}{pfAbSynOp?}
<<defun pfApplication?>>=
(defun |pfApplication?| (pf)
  (|pfAbSynOp?| pf '|Application|))

@

\defun{pfAssign}{Create an Assign node}
\calls{pfAssign}{pfTree}
<<defun pfAssign>>=
(defun |pfAssign| (pflhsitems pfrhs)
 (|pfTree| '|Assign| (list pflhsitems pfrhs)))

@

\defun{pfAssign?}{Is this an Assign node?}
\calls{pfAssign?}{pfAbSynOp?}
<<defun pfAssign?>>=
(defun |pfAssign?| (pf)
 (|pfAbSynOp?| pf '|Assign|))

@

\defun{pf0AssignLhsItems}{Return the parts of an LhsItem of an Assign node}
\calls{pf0AssignLhsItems}{pfParts}
\calls{pf0AssignLhsItems}{pfAssignLhsItems}
<<defun pf0AssignLhsItems>>=
(defun |pf0AssignLhsItems| (pf)
 (|pfParts| (|pfAssignLhsItems| pf)))

@

\defun{pfAssignLhsItems}{Return the LhsItem of an Assign node}
<<defun pfAssignLhsItems>>=
(defun |pfAssignLhsItems| (pf)
 (cadr pf))

@

\defun{pfAssignRhs}{Return the RHS of an Assign node}
<<defun pfAssignRhs>>=
(defun |pfAssignRhs| (pf)
 (caddr pf))

@

\defun{pfBrace}{Construct an application node for a brace}
\calls{pfBrace}{pfApplication}
\calls{pfBrace}{pfIdPos}
\calls{pfBrace}{tokPosn}
<<defun pfBrace>>=
(defun |pfBrace| (a part)
 (|pfApplication| (|pfIdPos| '{} (|tokPosn| a)) part))

@

\defun{pfBraceBar}{Construct an Application node for brace-bars}
\calls{pfBraceBar}{pfApplication}
\calls{pfBraceBar}{pfIdPos}
\calls{pfBraceBar}{tokPosn}
<<defun pfBraceBar>>=
(defun |pfBraceBar| (a part)
 (|pfApplication| (|pfIdPos| '|{\|\|}| (|tokPosn| a)) part))

@

\defun{pfBracket}{Construct an Application node for a bracket}
\calls{pfBracket}{pfApplication}
\calls{pfBracket}{pfIdPos}
\calls{pfBracket}{tokPosn}
<<defun pfBracket>>=
(defun |pfBracket| (a part)
 (|pfApplication| (|pfIdPos| '[] (|tokPosn| a)) part))

@

\defun{pfBracketBar}{Construct an Application node for bracket-bars}
\calls{pfBracketBar}{pfApplication}
\calls{pfBracketBar}{pfIdPos}
\calls{pfBracketBar}{tokPosn}
<<defun pfBracketBar>>=
(defun |pfBracketBar| (a part)
 (|pfApplication| (|pfIdPos| '|[\|\|]| (|tokPosn| a)) part))

@

\defun{pfBreak}{Create a Break node}
\calls{pfBreak}{pfTree}
<<defun pfBreak>>=
(defun |pfBreak| (pffrom)
 (|pfTree| '|Break| (list pffrom)))

@

\defun{pfBreak?}{Is this a Break node?}
\calls{pfBreak?}{pfAbSynOp?}
<<defun pfBreak?>>=
(defun |pfBreak?| (pf)
 (|pfAbSynOp?| pf '|Break|))

@

\defun{pfBreakFrom}{Return the From part of a Break node}
<<defun pfBreakFrom>>=
(defun |pfBreakFrom| (pf)
 (cadr pf))

@

\defun{pfCoerceto}{Construct a Coerceto node}
\calls{pfCoerceto}{pfTree}
<<defun pfCoerceto>>=
(defun |pfCoerceto| (pfexpr pftype)
 (|pfTree| '|Coerceto| (list pfexpr pftype)))

@

\defun{pfCoerceto?}{Is this a CoerceTo node?}
\calls{pfCoerceto?}{pfAbSynOp?}
<<defun pfCoerceto?>>=
(defun |pfCoerceto?| (pf)
 (|pfAbSynOp?| pf '|Coerceto|))

@

\defun{pfCoercetoExpr}{Return the Expression part of a CoerceTo node}
<<defun pfCoercetoExpr>>=
(defun |pfCoercetoExpr| (pf)
 (cadr pf))

@

\defun{pfCoercetoType}{Return the Type part of a CoerceTo node}
<<defun pfCoercetoType>>=
(defun |pfCoercetoType| (pf)
 (caddr pf))

@

\defun{pfCollectBody}{Return the Body of a Collect node}
<<defun pfCollectBody>>=
(defun |pfCollectBody| (pf)
 (cadr pf))

@

\defun{pfCollectIterators}{Return the Iterators of a Collect node}
<<defun pfCollectIterators>>=
(defun |pfCollectIterators| (pf)
 (caddr pf))

@

\defun{pfCollect}{Create a Collect node}
\calls{pfCollect}{pfTree}
<<defun pfCollect>>=
(defun |pfCollect| (pfbody pfiterators)
 (|pfTree| '|Collect| (list pfbody pfiterators)))

@

\defun{pfCollect?}{Is this a Collect node?}
\calls{pfCollect?}{pfAbSynOp?}
<<defun pfCollect?>>=
(defun |pfCollect?| (pf)
 (|pfAbSynOp?| pf '|Collect|))

@

\defun{pfDefinition}{pfDefinition}
\calls{pfDefinition}{pfTree}
<<defun pfDefinition>>=
(defun |pfDefinition| (pflhsitems pfrhs)
 (|pfTree| '|Definition| (list pflhsitems pfrhs)))

@

\defun{pfDefinitionLhsItems}{Return the Lhs of a Definition node}
<<defun pfDefinitionLhsItems>>=
(defun |pfDefinitionLhsItems| (pf)
 (cadr pf))

@

\defun{pfDefinitionRhs}{Return the Rhs of a Definition node}
<<defun pfDefinitionRhs>>=
(defun |pfDefinitionRhs| (pf)
 (caddr pf))

@

\defun{pfDefinition?}{Is this a Definition node?}
\calls{pfDefinition?}{pfAbSynOp?}
<<defun pfDefinition?>>=
(defun |pfDefinition?| (pf)
 (|pfAbSynOp?| pf '|Definition|))

@

\defun{pf0DefinitionLhsItems}{Return the parts of a Definition node}
\calls{pf0DefinitionLhsItems}{pfParts}
\calls{pf0DefinitionLhsItems}{pfDefinitionLhsItems}
<<defun pf0DefinitionLhsItems>>=
(defun |pf0DefinitionLhsItems| (pf)
 (|pfParts| (|pfDefinitionLhsItems| pf)))

@

\defun{pfDo}{Create a Do node}
\calls{pfDo}{pfTree}
<<defun pfDo>>=
(defun |pfDo| (pfbody)
 (|pfTree| '|Do| (list pfbody)))

@

\defun{pfDo?}{Is this a Do node?}
\calls{pfDo?}{pfAbSynOp?}
<<defun pfDo?>>=
(defun |pfDo?| (pf)
 (|pfAbSynOp?| pf '|Do|))

@

\defun{pfDoBody}{Return the Body of a Do node}
<<defun pfDoBody>>=
(defun |pfDoBody| (pf)
 (cadr pf))

@

\defun{pfEnSequence}{Construct a Sequence node}
\calls{pfEnSequence}{pfTuple}
\calls{pfEnSequence}{pfListOf}
\calls{pfEnSequence}{pfSequence}
<<defun pfEnSequence>>=
(defun |pfEnSequence| (a)
 (cond
  ((null a) (|pfTuple| (|pfListOf| a)))
  ((null (cdr a)) (car a))
  (t (|pfSequence| (|pfListOf| a)))))

@

\defun{pfExit}{Construct an Exit node}
\calls{pfExit}{pfTree}
<<defun pfExit>>=
(defun |pfExit| (pfcond pfexpr)
 (|pfTree| '|Exit| (list pfcond pfexpr)))

@

\defun{pfExit?}{Is this an Exit node?}
\calls{pfExit?}{pfAbSynOp?}
<<defun pfExit?>>=
(defun |pfExit?| (pf)
 (|pfAbSynOp?| pf '|Exit|))

@

\defun{pfExitCond}{Return the Cond part of an Exit}
<<defun pfExitCond>>=
(defun |pfExitCond| (pf)
 (cadr pf))

@

\defun{pfExitExpr}{Return the Expression part of an Exit}
<<defun pfExitExpr>>=
(defun |pfExitExpr| (pf)
 (caddr pf))

@

\defun{pfExport}{Create an Export node}
\calls{pfExport}{pfTree}
<<defun pfExport>>=
(defun |pfExport| (pfitems)
 (|pfTree| '|Export| (list pfitems)))

@

\defun{pfExpression}{Construct an Expression leaf node}
\calls{pfExpression}{pfLeaf}
\calls{pfExpression}{ifcar}
<<defun pfExpression>>=
(defun |pfExpression| (expr &rest optpos)
 (|pfLeaf| '|expression| expr (ifcar optpos)))

@

\defun{pfFirst}{pfFirst}
<<defun pfFirst>>=
(defun |pfFirst| (form)
 (cadr form))

@

\defun{pfFix}{Create an Application Fix node}
\calls{pfFix}{pfApplication}
\calls{pfFix}{pfId}
<<defun pfFix>>=
(defun |pfFix| (pf)
 (|pfApplication| (|pfId| 'Y) pf))

@

\defun{pfFree}{Create a Free node}
\calls{pfFree}{pfTree}
<<defun pfFree>>=
(defun |pfFree| (pfitems)
 (|pfTree| '|Free| (list pfitems)))

@

\defun{pfFree?}{Is this a Free node?}
\calls{pfFree?}{pfAbSynOp?}
<<defun pfFree?>>=
(defun |pfFree?| (pf)
 (|pfAbSynOp?| pf '|Free|))

@

\defun{pf0FreeItems}{Return the parts of the Items of a Free node}
\calls{pf0FreeItems}{pfParts}
\calls{pf0FreeItems}{pfFreeItems}
<<defun pf0FreeItems>>=
(defun |pf0FreeItems| (pf)
 (|pfParts| (|pfFreeItems| pf)))

@

\defun{pfFreeItems}{Return the Items of a Free node}
<<defun pfFreeItems>>=
(defun |pfFreeItems| (pf)
 (cadr pf))

@

\defun{pfForin}{Construct a Forin node}
\calls{pfForin}{pfTree}
<<defun pfForin>>=
(defun |pfForin| (pflhs pfwhole)
 (|pfTree| '|Forin| (list pflhs pfwhole)))

@

\defun{pfForin?}{Is this a ForIn node?}
\calls{pfForin?}{pfAbSynOp?}
<<defun pfForin?>>=
(defun |pfForin?| (pf)
 (|pfAbSynOp?| pf '|Forin|))

@

\defun{pf0ForinLhs}{Return all the parts of the LHS of a ForIn node}
\calls{pf0ForinLhs}{pfParts}
\calls{pf0ForinLhs}{pfForinLhs}
<<defun pf0ForinLhs>>=
(defun |pf0ForinLhs| (pf)
 (|pfParts| (|pfForinLhs| pf)))

@

\defun{pfForinLhs}{Return the LHS part of a ForIn node}
<<defun pfForinLhs>>=
(defun |pfForinLhs| (pf)
 (cadr pf))

@

\defun{pfForinWhole}{Return the Whole part of a ForIn node}
<<defun pfForinWhole>>=
(defun |pfForinWhole| (pf)
 (caddr pf))

@

\defun{pfFromDom}{pfFromDom}
\calls{pfFromDom}{pfApplication?}
\calls{pfFromDom}{pfApplication}
\calls{pfFromDom}{pfApplicationOp}
\calls{pfFromDom}{pfApplicationArg}
\calls{pfFromDom}{pfFromdom}
<<defun pfFromDom>>=
(defun |pfFromDom| (dom expr)
 (cond
  ((|pfApplication?| expr)
   (|pfApplication|
    (|pfFromdom| (|pfApplicationOp| expr) dom)
    (|pfApplicationArg| expr)))
  (t (|pfFromdom| expr dom))))

@

\defun{pfFromdom}{Construct a Fromdom node}
\calls{pfFromdom}{pfTree}
<<defun pfFromdom>>=
(defun |pfFromdom| (pfwhat pfdomain)
 (|pfTree| '|Fromdom| (list pfwhat pfdomain)))

@

\defun{pfFromdom?}{Is this a Fromdom mode?}
\calls{pfFromdom?}{pfAbSynOp?}
<<defun pfFromdom?>>=
(defun |pfFromdom?| (pf)
 (|pfAbSynOp?| pf '|Fromdom|))

@

\defun{pfFromdomWhat}{Return the What part of a Fromdom node}
<<defun pfFromdomWhat>>=
(defun |pfFromdomWhat| (pf)
 (cadr pf))

@

\defun{pfFromdomDomain}{Return the Domain part of a Fromdom node}
<<defun pfFromdomDomain>>=
(defun |pfFromdomDomain| (pf)
 (caddr pf))

@

\defun{pfHide}{Construct a Hide node}
\calls{pfHide}{pfTree}
<<defun pfHide>>=
(defun |pfHide| (a part)
 (declare (ignore a))
 (|pfTree| '|Hide| (list part)))

@

\defun{pfIf}{pfIf}
\calls{pfIf}{pfTree}
<<defun pfIf>>=
(defun |pfIf| (pfcond pfthen pfelse)
 (|pfTree| '|If| (list pfcond pfthen pfelse)))

@

\defun{pfIf?}{Is this an If node?}
\calls{pfIf?}{pfAbSynOp?}
<<defun pfIf?>>=
(defun |pfIf?| (pf)
  (|pfAbSynOp?| pf '|If|))

@

\defun{pfIfCond}{Return the Cond part of an If}
<<defun pfIfCond>>=
(defun |pfIfCond| (pf)
 (cadr pf))

@

\defun{pfIfThen}{Return the Then part of an If}
<<defun pfIfThen>>=
(defun |pfIfThen| (pf)
 (caddr pf))

@

\defun{pfIfThenOnly}{pfIfThenOnly}
\calls{pfIfThenOnly}{pfIf}
\calls{pfIfThenOnly}{pfNothing}
<<defun pfIfThenOnly>>=
(defun |pfIfThenOnly| (pred cararg)
 (|pfIf| pred cararg (|pfNothing|)))

@

\defun{pfIfElse}{Return the Else part of an If}
<<defun pfIfElse>>=
(defun |pfIfElse| (pf)
 (cadddr pf))

@

\defun{pfImport}{Construct an Import node}
\calls{pfImport}{pfTree}
<<defun pfImport>>=
(defun |pfImport| (pfitems)
 (|pfTree| '|Import| (list pfitems)))

@

\defun{pfIterate}{Construct an Iterate node}
\calls{pfIterate}{pfTree}
<<defun pfIterate>>=
(defun |pfIterate| (pffrom)
 (|pfTree| '|Iterate| (list pffrom)))

@

\defun{pfIterate?}{Is this an Iterate node?}
\calls{pfIterate?}{pfAbSynOp?}
<<defun pfIterate?>>=
(defun |pfIterate?| (pf)
 (|pfAbSynOp?| pf '|Iterate|))

@

\defun{pfInfApplication}{Handle an infix application}
\calls{pfInfApplication}{pfListOf}
\calls{pfInfApplication}{pfIdSymbol}
\calls{pfInfApplication}{pfAnd}
\calls{pfInfApplication}{pfOr}
\calls{pfInfApplication}{pfApplication}
\calls{pfInfApplication}{pfTuple}
<<defun pfInfApplication>>=
(defun |pfInfApplication| (op left right)
 (cond
  ((eq (|pfIdSymbol| op) '|and|) (|pfAnd| left right))
  ((eq (|pfIdSymbol| op) '|or|) (|pfOr| left right))
  (t (|pfApplication| op (|pfTuple| (|pfListOf| (list left right)))))))

@

\defun{pfInline}{Create an Inline node}
\calls{pfInline}{pfTree}
<<defun pfInline>>=
(defun |pfInline| (pfitems)
 (|pfTree| '|Inline| (list pfitems)))

@

\defun{pfLam}{pfLam}
\calls{pfLam}{pfAbSynOp?}
\calls{pfLam}{pfFirst}
\calls{pfLam}{pfNothing}
\calls{pfLam}{pfSecond}
\calls{pfLam}{pfLambda}
<<defun pfLam>>=
(defun |pfLam| (variable body)
 (let (bdy rets)
  (if (|pfAbSynOp?| body '|returntyped|)
   (setq rets (|pfFirst| body))
   (setq rets (|pfNothing|)))
  (if (|pfAbSynOp?| body '|returntyped|)
   (setq bdy (|pfSecond| body))
   (setq bdy body))
  (|pfLambda| variable rets bdy)))

@

\defun{pfLambda}{pfLambda}
\calls{pfLambda}{pfTree}
<<defun pfLambda>>=
(defun |pfLambda| (pfargs pfrets pfbody)
 (|pfTree| '|Lambda| (list pfargs pfrets pfbody)))

@

\defun{pfLambdaBody}{Return the Body part of a Lambda node}
<<defun pfLambdaBody>>=
(defun |pfLambdaBody| (pf)
 (cadddr pf))

@

\defun{pfLambdaRets}{Return the Rets part of a Lambda node}
<<defun pfLambdaRets>>=
(defun |pfLambdaRets| (pf)
 (caddr pf))

@

\defun{pfLambda?}{Is this a Lambda node?}
\calls{pfLambda?}{pfAbSynOp?}
<<defun pfLambda?>>=
(defun |pfLambda?| (pf)
 (|pfAbSynOp?| pf '|Lambda|))

@

\defun{pfLambdaArgs}{Return the Args part of a Lambda node}
<<defun pfLambdaArgs>>=
(defun |pfLambdaArgs| (pf)
 (cadr pf))

@

\defun{pf0LambdaArgs}{Return the Args of a Lambda Node}
\calls{pf0LambdaArgs}{pfParts}
\calls{pf0LambdaArgs}{pfLambdaArgs}
<<defun pf0LambdaArgs>>=
(defun |pf0LambdaArgs| (pf)
 (|pfParts| (|pfLambdaArgs| pf)))

@

\defun{pfLocal}{Construct a Local node}
\calls{pfLocal}{pfTree}
<<defun pfLocal>>=
(defun |pfLocal| (pfitems)
 (|pfTree| '|Local| (list pfitems)))

@

\defun{pfLocal?}{Is this a Local node?}
\calls{pfLocal?}{pfAbSynOp?}
<<defun pfLocal?>>=
(defun |pfLocal?| (pf)
 (|pfAbSynOp?| pf '|Local|))

@

\defun{pf0LocalItems}{Return the parts of Items of a Local node}
\calls{pf0LocalItems}{pfParts}
\calls{pf0LocalItems}{pfLocalItems}
<<defun pf0LocalItems>>=
(defun |pf0LocalItems| (pf)
 (|pfParts| (|pfLocalItems| pf)))

@

\defun{pfLocalItems}{Return the Items of a Local node}
<<defun pfLocalItems>>=
(defun |pfLocalItems| (pf)
 (cadr pf))

@

\defun{pfLoop}{Construct a Loop node}
\calls{pfLoop}{pfTree}
<<defun pfLoop>>=
(defun |pfLoop| (pfiterators)
 (|pfTree| '|Loop| (list pfiterators)))

@

\defun{pfLoop1}{pfLoop1}
\calls{pfLoop1}{pfLoop}
\calls{pfLoop1}{pfListOf}
\calls{pfLoop1}{pfDo}
<<defun pfLoop1>>=
(defun |pfLoop1| (body)
 (|pfLoop| (|pfListOf| (list (|pfDo| body)))))

@

\defun{pfLoop?}{Is this a Loop node?}
\calls{pfLoop?}{pfAbSynOp?}
<<defun pfLoop?>>=
(defun |pfLoop?| (pf)
 (|pfAbSynOp?| pf '|Loop|))

@

\defun{pfLoopIterators}{Return the Iterators of a Loop node}
<<defun pfLoopIterators>>=
(defun |pfLoopIterators| (pf)
 (cadr pf))

@

\defun{pf0LoopIterators}{pf0LoopIterators}
\calls{pf0LoopIterators}{pfParts}
\calls{pf0LoopIterators}{pf0LoopIterators}
<<defun pf0LoopIterators>>=
(defun |pf0LoopIterators| (pf)
 (|pfParts| (|pfLoopIterators| pf)))

@

\defun{pfLp}{pfLp}
\calls{pfLp}{pfLoop}
\calls{pfLp}{pfListOf}
\calls{pfLp}{pfDo}
<<defun pfLp>>=
(defun |pfLp| (iterators body)
 (|pfLoop| (|pfListOf| (append iterators (list (|pfDo| body))))))

@

\defun{pfMacro}{Create a Macro node}
\calls{pfMacro}{pfTree}
<<defun pfMacro>>=
(defun |pfMacro| (pflhs pfrhs)
 (|pfTree| '|Macro| (list pflhs pfrhs)))

@

\defun{pfMacro?}{Is this a Macro node?}
\calls{pfMacro?}{pfAbSynOp?}
<<defun pfMacro?>>=
(defun |pfMacro?| (pf)
 (|pfAbSynOp?| pf '|Macro|))

@

\defun{pfMacroLhs}{Return the Lhs of a Macro node}
<<defun pfMacroLhs>>=
(defun |pfMacroLhs| (pf)
 (cadr pf))

@

\defun{pfMacroRhs}{Return the Rhs of a Macro node}
<<defun pfMacroRhs>>=
(defun |pfMacroRhs| (pf)
 (caddr pf))

@

\defun{pfMLambda}{Construct an MLambda node}
\calls{pfMLambda}{pfTree}
<<defun pfMLambda>>=
(defun |pfMLambda| (pfargs pfbody)
 (|pfTree| '|MLambda| (list pfargs pfbody)))

@

\defun{pfMLambda?}{Is this an MLambda node?}
\calls{pfMLambda?}{pfAbSynOp?}
<<defun pfMLambda?>>=
(defun |pfMLambda?| (pf)
 (|pfAbSynOp?| pf '|MLambda|))

@

\defun{pfMLambdaArgs}{Return the Args of an MLambda}
<<defun pfMLambdaArgs>>=
(defun |pfMLambdaArgs| (pf)
 (cadr pf))

@

\defun{pf0MLambdaArgs}{Return the parts of an MLambda argument}
\calls{pf0MLambdaArgs}{pfParts}
<<defun pf0MLambdaArgs>>=
(defun |pf0MLambdaArgs| (pf)
 (|pfParts| (|pfMLambdaArgs| pf)))

@

\defun{pfMLambdaBody}{pfMLambdaBody}
<<defun pfMLambdaBody>>=
(defun |pfMLambdaBody| (pf)
 (caddr pf))

@

\defun{pfNot?}{Is this a Not node?}
\calls{pfNot?}{pfAbSynOp?}
<<defun pfNot?>>=
(defun |pfNot?| (pf)
 (|pfAbSynOp?| pf '|Not|))

@

\defun{pfNotArg}{Return the Arg part of a Not node}
<<defun pfNotArg>>=
(defun |pfNotArg| (pf)
 (cadr pf))

@

\defun{pfNovalue}{Construct a NoValue node}
\calls{pfNovalue}{pfTree}
<<defun pfNovalue>>=
(defun |pfNovalue| (pfexpr)
 (|pfTree| '|Novalue| (list pfexpr)))

@

\defun{pfNovalue?}{Is this a Novalue node?}
\calls{pfNovalue?}{pfAbSynOp?}
<<defun pfNovalue?>>=
(defun |pfNovalue?| (pf)
 (|pfAbSynOp?| pf '|Novalue|))

@

\defun{pfNovalueExpr}{Return the Expr part of a Novalue node}
<<defun pfNovalueExpr>>=
(defun |pfNovalueExpr| (pf)
 (cadr pf))

@

\defun{pfOr}{Construct an Or node}
\calls{pfOr}{pfTree}
<<defun pfOr>>=
(defun |pfOr| (pfleft pfright)
 (|pfTree| '|Or| (list pfleft pfright)))

@

\defun{pfOr?}{Is this an Or node?}
\calls{pfOr?}{pfAbSynOp?}
<<defun pfOr?>>=
(defun |pfOr?| (pf)
 (|pfAbSynOp?| pf '|Or|))

@

\defun{pfOrLeft}{Return the Left part of an Or node}
<<defun pfOrLeft>>=
(defun |pfOrLeft| (pf)
 (cadr pf))

@

\defun{pfOrRight}{Return the Right part of an Or node}
<<defun pfOrRight>>=
(defun |pfOrRight| (pf)
 (caddr pf))

@

\defun{pfParen}{Return the part of a parenthesised expression}
<<defun pfParen>>=
(defun |pfParen| (a part)
 part)

@

\defun{pfPretend}{pfPretend}
\calls{pfPretend}{pfTree}
<<defun pfPretend>>=
(defun |pfPretend| (pfexpr pftype)
 (|pfTree| '|Pretend| (list pfexpr pftype)))

@

\defun{pfPretend?}{Is this a Pretend node?}
\calls{pfPretend?}{pfAbSynOp?}
<<defun pfPretend?>>=
(defun |pfPretend?| (pf)
 (|pfAbSynOp?| pf '|Pretend|))

@

\defun{pfPretendExpr}{Return the Expression part of a Pretend node}
<<defun pfPretendExpr>>=
(defun |pfPretendExpr| (pf)
 (cadr pf))

@

\defun{pfPretendType}{Return the Type part of a Pretend node}
<<defun pfPretendType>>=
(defun |pfPretendType| (pf)
 (caddr pf))

@

\defun{pfQualType}{Construct a QualType node}
\calls{pfQualType}{pfTree}
<<defun pfQualType>>=
(defun |pfQualType| (pftype pfqual)
 (|pfTree| '|QualType| (list pftype pfqual)))

@

\defun{pfRestrict}{Construct a Restrict node}
\calls{pfRestrict}{pfTree}
<<defun pfRestrict>>=
(defun |pfRestrict| (pfexpr pftype)
 (|pfTree| '|Restrict| (list pfexpr pftype)))

@

\defun{pfRestrict?}{Is this a Restrict node?}
\calls{pfRestrict?}{pfAbSynOp?}
<<defun pfRestrict?>>=
(defun |pfRestrict?| (pf)
 (|pfAbSynOp?| pf '|Restrict|))

@

\defun{pfRestrictExpr}{Return the Expr part of a Restrict node}
<<defun pfRestrictExpr>>=
(defun |pfRestrictExpr| (pf)
 (cadr pf))

@

\defun{pfRestrictType}{Return the Type part of a Restrict node}
<<defun pfRestrictType>>=
(defun |pfRestrictType| (pf)
 (caddr pf))

@

\defun{pfRetractTo}{Construct a RetractTo node}
\calls{pfRetractTo}{pfTree}
<<defun pfRetractTo>>=
(defun |pfRetractTo| (pfexpr pftype)
 (|pfTree| '|RetractTo| (list pfexpr pftype)))

@

\defun{pfReturn}{Construct a Return node}
\calls{pfReturn}{pfTree}
<<defun pfReturn>>=
(defun |pfReturn| (pfexpr pffrom)
 (|pfTree| '|Return| (list pfexpr pffrom)))

@

\defun{pfReturn?}{Is this a Return node?}
\calls{pfReturn?}{pfAbSynOp?}
<<defun pfReturn?>>=
(defun |pfReturn?| (pf)
 (|pfAbSynOp?| pf '|Return|))

@

\defun{pfReturnExpr}{Return the Expr part of a Return node}
<<defun pfReturnExpr>>=
(defun |pfReturnExpr| (pf)
 (cadr pf))

@

\defun{pfReturnNoName}{pfReturnNoName}
\calls{pfReturnNoName}{pfReturn}
\calls{pfReturnNoName}{pfNothing}
<<defun pfReturnNoName>>=
(defun |pfReturnNoName| (|value|)
 (|pfReturn| |value| (|pfNothing|)))

@

\defun{pfReturnTyped}{Construct a ReturnTyped node}
\calls{pfReturnTyped}{pfTree}
<<defun pfReturnTyped>>=
(defun |pfReturnTyped| (type body)
 (|pfTree| '|returntyped| (list type body)))

@

\defun{pfRule}{Construct a Rule node}
\calls{pfRule}{pfTree}
<<defun pfRule>>=
(defun |pfRule| (pflhsitems pfrhs)
 (|pfTree| '|Rule| (list pflhsitems pfrhs)))

@

\defun{pfRuleLhsItems}{Return the Lhs of a Rule node}
<<defun pfRuleLhsItems>>=
(defun |pfRuleLhsItems| (pf)
 (cadr pf))

@

\defun{pfRuleRhs}{Return the Rhs of a Rule node}
<<defun pfRuleRhs>>=
(defun |pfRuleRhs| (pf)
 (caddr pf))

@

\defun{pfRule?}{Is this a Rule node?}
\calls{pfRule?}{pfAbSynOp?}
<<defun pfRule?>>=
(defun |pfRule?| (pf)
 (|pfAbSynOp?| pf '|Rule|))

@

\defun{pfSecond}{pfSecond}
<<defun pfSecond>>=
(defun |pfSecond| (form)
 (caddr form))

@

\defun{pfSequence}{Construct a Sequence node}
\calls{pfSequence}{pfTree}
<<defun pfSequence>>=
(defun |pfSequence| (pfargs)
 (|pfTree| '|Sequence| (list pfargs)))

@

\defun{pfSequenceArgs}{Return the Args of a Sequence node}
<<defun pfSequenceArgs>>=
(defun |pfSequenceArgs| (pf)
 (cadr pf))

@

\defun{pfSequence?}{ Is this a Sequence node?}
\calls{pfSequence?}{pfAbSynOp?}
<<defun pfSequence?>>=
(defun |pfSequence?| (pf)
 (|pfAbSynOp?| pf '|Sequence|))

@

\defun{pf0SequenceArgs}{Return the parts of the Args of a Sequence node}
\calls{pf0SequenceArgs}{pfParts}
\calls{pf0SequenceArgs}{pfSequenceArgs}
<<defun pf0SequenceArgs>>=
(defun |pf0SequenceArgs| (pf)
 (|pfParts| (|pfSequenceArgs| pf)))

@

\defun{pfSuchthat}{Create a Suchthat node}
\calls{pfSuchthat}{pfTree}
<<defun pfSuchthat>>=
(defun |pfSuchthat| (pfcond)
 (|pfTree| '|Suchthat| (list pfcond)))

@

\defun{pfSuchthat?}{Is this a SuchThat node?}
\calls{pfSuchthat?}{pfAbSynOp?}
<<defun pfSuchthat?>>=
(defun |pfSuchthat?| (pf)
 (|pfAbSynOp?| pf '|Suchthat|))

@

\defun{pfSuchthatCond}{Return the Cond part of a SuchThat node}
<<defun pfSuchthatCond>>=
(defun |pfSuchthatCond| (pf)
 (cadr pf))

@

\defun{pfTagged}{Create a Tagged node}
\calls{pfTagged}{pfTree}
<<defun pfTagged>>=
(defun |pfTagged| (pftag pfexpr)
 (|pfTree| '|Tagged| (list pftag pfexpr)))

@

\defun{pfTagged?}{Is this a Tagged node?}
\calls{pfTagged?}{pfAbSynOp?}
<<defun pfTagged?>>=
(defun |pfTagged?| (pf)
 (|pfAbSynOp?| pf '|Tagged|))

@

\defun{pfTaggedExpr}{Return the Expression portion of a Tagged node}
<<defun pfTaggedExpr>>=
(defun |pfTaggedExpr| (pf)
 (caddr pf))

@

\defun{pfTaggedTag}{Return the Tag of a Tagged node}
<<defun pfTaggedTag>>=
(defun |pfTaggedTag| (pf)
 (cadr pf))

@

\defun{pfTaggedToTyped}{pfTaggedToTyped}
\calls{pfTaggedToTyped}{pfTagged?}
\calls{pfTaggedToTyped}{pfTaggedExpr}
\calls{pfTaggedToTyped}{pfNothing}
\calls{pfTaggedToTyped}{pfTaggedTag}
\calls{pfTaggedToTyped}{pfId?}
\calls{pfTaggedToTyped}{pfId}
\calls{pfTaggedToTyped}{pfTyped}
\calls{pfTaggedToTyped}{pfSuch}
\calls{pfTaggedToTyped}{pfInfApplication}
<<defun pfTaggedToTyped>>=
(defun |pfTaggedToTyped| (arg)
 (let (a form rt)
  (if (|pfTagged?| arg)
   (setq rt (|pfTaggedExpr| arg))
   (setq rt (|pfNothing|)))
  (if (|pfTagged?| arg)
   (setq form (|pfTaggedTag| arg))
   (setq form arg))
  (cond
   ((null (|pfId?| form))
    (setq a (|pfId| (gensym)))
    (|pfTyped| (|pfSuch| a (|pfInfApplication| (|pfId| '=) a form)) rt))
   (t (|pfTyped| form rt)))))

@

\defun{pfTweakIf}{pfTweakIf}
\calls{pfTweakIf}{pfIfElse}
\calls{pfTweakIf}{pfNothing?}
\calls{pfTweakIf}{pfListOf}
\calls{pfTweakIf}{pfTree}
\calls{pfTweakIf}{pfIfCond}
\calls{pfTweakIf}{pfIfThen}
<<defun pfTweakIf>>=
(defun |pfTweakIf| (form)
 (let (b a)
  (setq a (|pfIfElse| form))
  (setq b (if (|pfNothing?| a) (|pfListOf| NIL) a))
  (|pfTree| '|WIf| (list (|pfIfCond| form) (|pfIfThen| form) b))))

@

\defun{pfTyped}{Construct a Typed node}
\calls{pfTyped}{pfTree}
<<defun pfTyped>>=
(defun |pfTyped| (pfid pftype)
 (|pfTree| '|Typed| (list pfid pftype)))

@

\defun{pfTyped?}{Is this a Typed node?}
\calls{pfTyped?}{pfAbSynOp?}
<<defun pfTyped?>>=
(defun |pfTyped?| (pf)
 (|pfAbSynOp?| pf '|Typed|))

@

\defun{pfTypedType}{Return the Type of a Typed node}
<<defun pfTypedType>>=
(defun |pfTypedType| (pf)
 (caddr pf))

@

\defun{pfTypedId}{Return the Id of a Typed node}
<<defun pfTypedId>>=
(defun |pfTypedId| (pf)
 (cadr pf))

@

\defun{pfTyping}{Construct a Typing node}
\calls{pfTyping}{pfTree}
<<defun pfTyping>>=
(defun |pfTyping| (pfitems)
 (|pfTree| '|Typing| (list pfitems)))

@

\defun{pfTuple}{Return a Tuple node}
\calls{pfTuple}{pfTree}
<<defun pfTuple>>=
(defun |pfTuple| (pfparts)
 (|pfTree| '|Tuple| (list pfparts)))

@

\defun{pfTupleListOf}{Return a Tuple from a List}
\calls{pfTupleListOf}{pfTuple}
\calls{pfTupleListOf}{pfListOf}
<<defun pfTupleListOf>>=
(defun |pfTupleListOf| (pfparts)
 (|pfTuple| (|pfListOf| pfparts)))

@

\defun{pfTuple?}{Is this a Tuple node?}
\calls{pfTuple?}{pfAbSynOp?}
<<defun pfTuple?>>=
(defun |pfTuple?| (pf)
 (|pfAbSynOp?| pf '|Tuple|))

@

\defun{pfTupleParts}{Return the Parts of a Tuple node}
<<defun pfTupleParts>>=
(defun |pfTupleParts| (pf)
 (cadr pf))

@

\defun{pf0TupleParts}{Return the parts of a Tuple}
\calls{pf0TupleParts}{pfParts}
\calls{pf0TupleParts}{pfTupleParts}
<<defun pf0TupleParts>>=
(defun |pf0TupleParts| (pf)
 (|pfParts| (|pfTupleParts| pf)))

@

\defun{pfUnSequence}{Return a list from a Sequence node}
\calls{pfUnSequence}{pfSequence?}
\calls{pfUnSequence}{pfAppend}
\calls{pfUnSequence}{pf0SequenceArgs}
\calls{pfUnSequence}{pfListOf}
<<defun pfUnSequence>>=
(defun |pfUnSequence| (x)
 (if (|pfSequence?| x) 
  (|pfListOf| (|pfAppend| (|pf0SequenceArgs| x)))
  (|pfListOf| x)))

@

\defun{pfWDec}{The comment is attached to all signatutres}
\calls{pfWDec}{pfWDeclare}
\calls{pfWDec}{pfParts}
<<defun pfWDec>>=
(defun |pfWDec| (doc name)
 (mapcar #'(lambda (i) (|pfWDeclare| i doc)) (|pfParts| name)))

@

\defun{pfWDeclare}{Construct a WDeclare node}
\calls{pfWDeclare}{pfTree}
<<defun pfWDeclare>>=
(defun |pfWDeclare| (pfsignature pfdoc)
 (|pfTree| '|WDeclare| (list pfsignature pfdoc)))

@

\defun{pfWhere}{Construct a Where node}
\calls{pfWhere}{pfTree}
<<defun pfWhere>>=
(defun |pfWhere| (pfcontext pfexpr)
 (|pfTree| '|Where| (list pfcontext pfexpr)))

@

\defun{pfWhere?}{Is this a Where node?}
\calls{pfWhere?}{pfAbSynOp?}
<<defun pfWhere?>>=
(defun |pfWhere?| (pf)
 (|pfAbSynOp?| pf '|Where|))

@

\defun{pf0WhereContext}{Return the parts of the Context of a Where node}
\calls{pf0WhereContext}{pfParts}
\calls{pf0WhereContext}{pfWhereContext}
<<defun pf0WhereContext>>=
(defun |pf0WhereContext| (pf)
 (|pfParts| (|pfWhereContext| pf)))

@

\defun{pfWhereContext}{Return the Context of a Where node}
<<defun pfWhereContext>>=
(defun |pfWhereContext| (pf)
 (cadr pf))

@

\defun{pfWhereExpr}{Return the Expr part of a Where node}
<<defun pfWhereExpr>>=
(defun |pfWhereExpr| (pf)
 (caddr pf))

@

\defun{pfWhile}{Construct a While node}
\calls{pfWhile}{pfTree}
<<defun pfWhile>>=
(defun |pfWhile| (pfcond)
 (|pfTree| '|While| (list pfcond)))

@

\defun{pfWhile?}{Is this a While node?}
\calls{pfWhile?}{pfAbSynOp?}
<<defun pfWhile?>>=
(defun |pfWhile?| (pf)
 (|pfAbSynOp?| pf '|While|))

@

\defun{pfWhileCond}{Return the Cond part of a While node}
<<defun pfWhileCond>>=
(defun |pfWhileCond| (pf)
 (cadr pf))

@

\defun{pfWith}{Construct a With node}
\calls{pfWith}{pfTree}
<<defun pfWith>>=
(defun |pfWith| (pfbase pfwithin pfwithon)
 (|pfTree| '|With| (list pfbase pfwithin pfwithon)))

@

\defun{pfWrong}{Create a Wrong node}
\calls{pfWrong}{pfTree}
<<defun pfWrong>>=
(defun |pfWrong| (pfwhy pfrubble)
 (|pfTree| '|Wrong| (list pfwhy pfrubble)))

@

\defun{pfWrong?}{Is this a Wrong node?}
\calls{pfWrong?}{pfAbSynOp?}
<<defun pfWrong?>>=
(defun |pfWrong?| (pf)
 (|pfAbSynOp?| pf '|Wrong|))

@

\chapter{Pftree to s-expression translation}
Pftree to s-expression translation.  Used to interface the new parser
technology to the interpreter.  The input is a parseTree and the
output is an old-parser-style s-expression.

\defun{pf2Sex}{Pftree to s-expression translation}
\calls{pf2Sex}{pf2Sex1}
\usesdollar{pf2Sex}{insideSEQ}
\usesdollar{pf2Sex}{insideApplication}
\usesdollar{pf2Sex}{insideRule}
\usesdollar{pf2Sex}{QuietCommand}
<<defun pf2Sex>>=
(defun |pf2Sex| (pf)
 (let (|$insideSEQ| |$insideApplication| |$insideRule|)
 (declare (special |$insideSEQ| |$insideApplication| |$insideRule|
                   |$QuietCommand|))
  (setq |$QuietCommand| nil)
  (setq |$insideRule| nil)
  (setq |$insideApplication| nil)
  (setq |$insideSEQ| nil)
  (|pf2Sex1| pf)))

@

\defun{pf2Sex1}{Pftree to s-expression translation inner function}
\calls{pf2Sex1}{pfNothing?}
\calls{pf2Sex1}{pfSymbol?}
\calls{pf2Sex1}{pfSymbolSymbol}
\calls{pf2Sex1}{pfLiteral?}
\calls{pf2Sex1}{pfLiteral2Sex}
\calls{pf2Sex1}{pfIdSymbol}
\calls{pf2Sex1}{pfApplication?}
\calls{pf2Sex1}{pfApplication2Sex}
\calls{pf2Sex1}{pfTuple?}
\calls{pf2Sex1}{pf2Sex1}
\calls{pf2Sex1}{pf0TupleParts}
\calls{pf2Sex1}{pfIf?}
\calls{pf2Sex1}{pfIfCond}
\calls{pf2Sex1}{pfIfThen}
\calls{pf2Sex1}{pfIfElse}
\calls{pf2Sex1}{pfTagged?}
\calls{pf2Sex1}{pfTaggedTag}
\calls{pf2Sex1}{pfTaggedExpr}
\calls{pf2Sex1}{pfCoerceto?}
\calls{pf2Sex1}{pfCoercetoExpr}
\calls{pf2Sex1}{pfCoercetoType}
\calls{pf2Sex1}{pfPretend?}
\calls{pf2Sex1}{pfPretendExpr}
\calls{pf2Sex1}{pfPretendType}
\calls{pf2Sex1}{pfFromdom?}
\calls{pf2Sex1}{opTran}
\calls{pf2Sex1}{pfFromdomWhat}
\calls{pf2Sex1}{pfFromdomDomain}
\calls{pf2Sex1}{pfSequence?}
\calls{pf2Sex1}{pfSequence2Sex}
\calls{pf2Sex1}{pfExit?}
\calls{pf2Sex1}{pfExitCond}
\calls{pf2Sex1}{pfExitExpr}
\calls{pf2Sex1}{pfLoop?}
\calls{pf2Sex1}{loopIters2Sex}
\calls{pf2Sex1}{pf0LoopIterators}
\calls{pf2Sex1}{pfCollect?}
\calls{pf2Sex1}{pfCollect2Sex}
\calls{pf2Sex1}{pfForin?}
\calls{pf2Sex1}{pf0ForinLhs}
\calls{pf2Sex1}{pfForinWhole}
\calls{pf2Sex1}{pfWhile?}
\calls{pf2Sex1}{pfWhileCond}
\calls{pf2Sex1}{pfSuchthat?}
\calls{pf2Sex1}{keyedSystemError}
\calls{pf2Sex1}{pfSuchthatCond}
\calls{pf2Sex1}{pfDo?}
\calls{pf2Sex1}{pfDoBody}
\calls{pf2Sex1}{pfTyped?}
\calls{pf2Sex1}{pfTypedType}
\calls{pf2Sex1}{pfTypedId}
\calls{pf2Sex1}{pfAssign?}
\calls{pf2Sex1}{pf0AssignLhsItems}
\calls{pf2Sex1}{pfAssignRhs}
\calls{pf2Sex1}{pfDefinition?}
\calls{pf2Sex1}{pfDefinition2Sex}
\calls{pf2Sex1}{pfLambda?}
\calls{pf2Sex1}{pfLambda2Sex}
\calls{pf2Sex1}{pfMLambda?}
\calls{pf2Sex1}{pfRestrict?}
\calls{pf2Sex1}{pfRestrictExpr}
\calls{pf2Sex1}{pfRestrictType}
\calls{pf2Sex1}{pfFree?}
\calls{pf2Sex1}{pf0FreeItems}
\calls{pf2Sex1}{pfLocal?}
\calls{pf2Sex1}{pf0LocalItems}
\calls{pf2Sex1}{pfWrong?}
\calls{pf2Sex1}{spadThrow}
\calls{pf2Sex1}{pfAnd?}
\calls{pf2Sex1}{pfAndLeft}
\calls{pf2Sex1}{pfAndRight}
\calls{pf2Sex1}{pfOr?}
\calls{pf2Sex1}{pfOrLeft}
\calls{pf2Sex1}{pfOrRight}
\calls{pf2Sex1}{pfNot?}
\calls{pf2Sex1}{pfNotArg}
\calls{pf2Sex1}{pfNovalue?}
\calls{pf2Sex1}{pfNovalueExpr}
\calls{pf2Sex1}{pfRule?}
\calls{pf2Sex1}{pfRule2Sex}
\calls{pf2Sex1}{pfBreak?}
\calls{pf2Sex1}{pfBreakFrom}
\calls{pf2Sex1}{pfMacro?}
\calls{pf2Sex1}{pfReturn?}
\calls{pf2Sex1}{pfReturnExpr}
\calls{pf2Sex1}{pfIterate?}
\calls{pf2Sex1}{pfWhere?}
\calls{pf2Sex1}{pf0WhereContext}
\calls{pf2Sex1}{pfWhereExpr}
\calls{pf2Sex1}{pfAbSynOp}
\calls{pf2Sex1}{tokPart}
\usesdollar{pf2Sex1}{insideSEQ}
\usesdollar{pf2Sex1}{insideRule}
\usesdollar{pf2Sex1}{QuietCommand}
<<defun pf2Sex1>>=
(defun |pf2Sex1| (pf)
 (let (args idList type op tagPart tag s)
 (declare (special |$insideSEQ| |$insideRule| |$QuietCommand|))
  (cond
   ((|pfNothing?| pf) '|noBranch|)
   ((|pfSymbol?| pf)
    (if (eq |$insideRule| '|left|)
     (progn
      (setq s (|pfSymbolSymbol| pf))
      (list '|constant| (list 'quote s)))
     (list 'quote (|pfSymbolSymbol| pf))))
   ((|pfLiteral?| pf) (|pfLiteral2Sex| pf))
   ((|pfId?| pf)
     (if |$insideRule|
      (progn
        (setq s (|pfIdSymbol| pf))
        (if (memq s '(|%pi| |%e| |%i|)) 
          s
          (list 'quote s)))
      (|pfIdSymbol| pf)))
   ((|pfApplication?| pf) (|pfApplication2Sex| pf))
   ((|pfTuple?| pf) (cons '|Tuple| (mapcar #'|pf2Sex1| (|pf0TupleParts| pf))))
   ((|pfIf?| pf)
     (list 'if (|pf2Sex1| (|pfIfCond| pf))
               (|pf2Sex1| (|pfIfThen| pf))
               (|pf2Sex1| (|pfIfElse| pf))))
   ((|pfTagged?| pf)
    (setq tag (|pfTaggedTag| pf))
    (setq tagPart
     (if (|pfTuple?| tag)
      (cons '|Tuple| (mapcar #'|pf2Sex1| (|pf0TupleParts| tag)))
      (|pf2Sex1| tag)))
    (list '|:| tagPart (|pf2Sex1| (|pfTaggedExpr| pf))))
   ((|pfCoerceto?| pf)
    (list '|::| (|pf2Sex1| (|pfCoercetoExpr| pf))
                (|pf2Sex1| (|pfCoercetoType| pf))))
   ((|pfPretend?| pf)
    (list '|pretend| (|pf2Sex1| (|pfPretendExpr| pf))
                     (|pf2Sex1| (|pfPretendType| pf))))
   ((|pfFromdom?| pf)
    (setq op (|opTran| (|pf2Sex1| (|pfFromdomWhat| pf))))
    (when (eq op '|braceFromCurly|) (setq op 'seq))
    (list '|$elt| (|pf2Sex1| (|pfFromdomDomain| pf)) op))
   ((|pfSequence?| pf) (|pfSequence2Sex| pf))
   ((|pfExit?| pf)
    (if |$insideSEQ|
     (list '|exit| (|pf2Sex1| (|pfExitCond| pf))
                   (|pf2Sex1| (|pfExitExpr| pf)))
     (list 'if (|pf2Sex1| (|pfExitCond| pf))
               (|pf2Sex1| (|pfExitExpr| pf)) '|noBranch|)))
   ((|pfLoop?| pf) (cons 'repeat (|loopIters2Sex| (|pf0LoopIterators| pf))))
   ((|pfCollect?| pf) (|pfCollect2Sex| pf))
   ((|pfForin?| pf)
    (cons 'in
     (append (mapcar #'|pf2Sex1| (|pf0ForinLhs| pf))
             (list (|pf2Sex1| (|pfForinWhole| pf))))))
   ((|pfWhile?| pf) (list 'while (|pf2Sex1| (|pfWhileCond| pf))))
   ((|pfSuchthat?| pf)
    (if (eq |$insideRule| '|left|)
     (|keyedSystemError| "S2GE0017" (list "pf2Sex1: pfSuchThat"))
     (list '|\|| (|pf2Sex1| (|pfSuchthatCond| pf)))))
   ((|pfDo?| pf) (|pf2Sex1| (|pfDoBody| pf)))
   ((|pfTyped?| pf)
    (setq type (|pfTypedType| pf))
    (if (|pfNothing?| type) 
     (|pf2Sex1| (|pfTypedId| pf))
     (list '|:| (|pf2Sex1| (|pfTypedId| pf)) (|pf2Sex1| (|pfTypedType| pf)))))
   ((|pfAssign?| pf)
    (setq idList (mapcar #'|pf2Sex1| (|pf0AssignLhsItems| pf)))
    (if (not (eql (length idList) 1))
     (setq idList (cons '|Tuple| idList))
     (setq idList (car idList)))
    (list 'let idList (|pf2Sex1| (|pfAssignRhs| pf))))
   ((|pfDefinition?| pf) (|pfDefinition2Sex| pf))
   ((|pfLambda?| pf) (|pfLambda2Sex| pf))
   ((|pfMLambda?| pf) '|/throwAway|)
   ((|pfRestrict?| pf)
    (list '@ (|pf2Sex1| (|pfRestrictExpr| pf))
             (|pf2Sex1| (|pfRestrictType| pf))))
   ((|pfFree?| pf) (cons '|free| (mapcar #'|pf2Sex1| (|pf0FreeItems| pf))))
   ((|pfLocal?| pf) (cons '|local| (mapcar #'|pf2Sex1| (|pf0LocalItems| pf))))
   ((|pfWrong?| pf) (|spadThrow|))
   ((|pfAnd?| pf)
    (list '|and| (|pf2Sex1| (|pfAndLeft| pf))
                 (|pf2Sex1| (|pfAndRight| pf))))
   ((|pfOr?| pf)
    (list '|or| (|pf2Sex1| (|pfOrLeft| pf))
                (|pf2Sex1| (|pfOrRight| pf))))
   ((|pfNot?| pf) (list '|not| (|pf2Sex1| (|pfNotArg| pf))))
   ((|pfNovalue?| pf)
    (setq |$QuietCommand| t)
    (list 'seq (|pf2Sex1| (|pfNovalueExpr| pf))))
   ((|pfRule?| pf) (|pfRule2Sex| pf))
   ((|pfBreak?| pf) (list '|break| (|pfBreakFrom| pf)))
   ((|pfMacro?| pf) '|/throwAway|)
   ((|pfReturn?| pf) (list '|return| (|pf2Sex1| (|pfReturnExpr| pf))))
   ((|pfIterate?| pf) (list '|iterate|))
   ((|pfWhere?| pf)
    (setq args (mapcar #'|pf2Sex1| (|pf0WhereContext| pf)))
    (if (eql (length args) 1)
     (cons '|where| (cons (|pf2Sex1| (|pfWhereExpr| pf)) args))
     (list '|where| (|pf2Sex1| (|pfWhereExpr| pf)) (cons 'seq args))))
;  -- under strange circumstances/piling, system commands can wind
;  -- up in expressions. This just passes it through as a string for
;  -- the user to figure out what happened.
   ((eq (|pfAbSynOp| pf) '|command|) (|tokPart| pf))
   (t (|keyedSystemError| "S2GE0017" (list "pf2Sex1"))))))

@

\defun{pfLiteral2Sex}{Convert a Literal to an S-expression}
\calls{pfLiteral2Sex}{pfLiteralClass}
\calls{pfLiteral2Sex}{pfLiteralString}
\calls{pfLiteral2Sex}{float2Sex}
\calls{pfLiteral2Sex}{pfSymbolSymbol}
\calls{pfLiteral2Sex}{pfLeafToken}
\calls{pfLiteral2Sex}{keyedSystemError}
\usesdollar{pfLiteral2Sex}{insideRule}
<<defun pfLiteral2Sex>>=
(defun |pfLiteral2Sex| (pf)
 (let (s type)
 (declare (special |$insideRule|))
  (setq type (|pfLiteralClass| pf))
  (cond
   ((eq type '|integer|) (read-from-string (|pfLiteralString| pf)))
   ((or (eq type '|string|) (eq type '|char|))
    (|pfLiteralString| pf))
   ((eq type '|float|) (|float2Sex| (|pfLiteralString| pf)))
   ((eq type '|symbol|)
    (if |$insideRule|
     (progn
      (setq s (|pfSymbolSymbol| pf))
      (list 'quote s))
     (|pfSymbolSymbol| pf)))
   ((eq type '|expression|) (list 'quote (|pfLeafToken| pf)))
   (t 
    (|keyedSystemError| 'S2GE0017 (list "pfLiteral2Sex: unexpected form"))))))

@

\defun{float2Sex}{Convert a float to an S-expression}
\usesdollar{float2Sex}{useBFasDefault}
<<defun float2Sex>>=
(defun |float2Sex| (num)
 (let (exp frac bfForm fracPartString intPart dotIndex expPart mantPart eIndex)
 (declare (special |$useBFasDefault|))
  (setq eIndex (search "e" num))
  (if eIndex
   (setq mantPart (subseq num 0 eIndex))
   (setq mantPart num))
  (if eIndex
   (setq expPart (read-from-string (subseq num (+ eIndex 1))))
   (setq expPart 0))
  (setq dotIndex (search "." mantPart))
  (if dotIndex
   (setq intPart (read-from-string (subseq mantPart 0 dotIndex)))
   (setq intPart (read-from-string mantPart)))
  (if dotIndex
   (setq fracPartString (subseq mantPart (+ dotIndex 1)))
   (setq fracPartString 0))
  (setq bfForm
   (make-float intPart (read-from-string fracPartString)
                         (length fracPartString) expPart))
  (if |$useBFasDefault|
   (progn
    (setq frac (cadr bfForm))
    (setq exp (cddr bfForm))
    (list (list '|$elt| (list '|Float|) '|float|) frac exp 10))
   bfForm)))

@

\defun{pfApplication2Sex}{Change an Application node to an S-expression}
\calls{pfApplication2Sex}{pfOp2Sex}
\calls{pfApplication2Sex}{pfApplicationOp}
\calls{pfApplication2Sex}{opTran}
\calls{pfApplication2Sex}{pf0TupleParts}
\calls{pfApplication2Sex}{pfApplicationArg}
\calls{pfApplication2Sex}{pfTuple?}
\calls{pfApplication2Sex}{pf2Sex1}
\calls{pfApplication2Sex}{pf2Sex}
\calls{pfApplication2Sex}{pfSuchThat2Sex}
\calls{pfApplication2Sex}{hasOptArgs?}
\usesdollar{pfApplication2Sex}{insideApplication}
\usesdollar{pfApplication2Sex}{insideRule}
<<defun pfApplication2Sex>>=
(defun |pfApplication2Sex| (pf)
 (let (|$insideApplication| x val realOp tmp1 qt argSex typeList args op)
 (declare (special |$insideApplication| |$insideRule|))
  (setq |$insideApplication| t)
  (setq op (|pfOp2Sex| (|pfApplicationOp| pf)))
  (setq op (|opTran| op))
  (cond
   ((eq op '->)
     (setq args (|pf0TupleParts| (|pfApplicationArg| pf)))
     (if (|pfTuple?| (car args))
      (setq typeList (mapcar #'|pf2Sex1| (|pf0TupleParts| (car args))))
      (setq typeList (list (|pf2Sex1| (car args)))))
     (setq args (cons (|pf2Sex1| (cadr args)) typeList))
     (cons '|Mapping| args))
   ((and (eq op '|:|) (eq |$insideRule| '|left|))
    (list '|multiple| (|pf2Sex| (|pfApplicationArg| pf))))
   ((and (eq op '?) (eq |$insideRule| '|left|))
    (list '|optional| (|pf2Sex| (|pfApplicationArg| pf))))
   (t
    (setq args (|pfApplicationArg| pf))
    (cond
     ((|pfTuple?| args)
      (if (and (eq op '|\||) (eq |$insideRule| '|left|))
       (|pfSuchThat2Sex| args)
       (progn
        (setq argSex (cdr (|pf2Sex1| args)))
        (cond
         ((eq op '>) (list '< (cadr argSex) (car argSex)))
         ((eq op '>=) (list '|not| (list '< (car argSex) (cadr argSex))))
         ((eq op '<=) (list '|not| (list '< (cadr argSex) (car argSex))))
         ((eq op 'and) (list '|and| (car argSex) (cadr argSex)))
         ((eq op 'or) (list '|or| (car argSex) (cadr argSex)))
         ((eq op '|Iterate|) (list '|iterate|))
         ((eq op '|by|) (cons 'by argSex))
         ((eq op '|braceFromCurly|)
          (if (and (consp argSex) (eq (car argSex) 'seq))
           argSex
           (cons 'seq argSex)))
         ((and (consp op)
               (progn
                (setq qt (car op))
                (setq tmp1 (cdr op))
                (and (consp tmp1) 
                     (eq (cdr tmp1) nil)
                     (progn
                      (setq realOp (car tmp1))
                      t)))
               (eq qt 'quote))
          (cons '|applyQuote| (cons op argSex)))
         ((setq val (|hasOptArgs?| argSex)) (cons op val))
         (t (cons op argSex))))))
     ((and (consp op)
           (progn
            (setq qt (car op))
            (setq tmp1 (cdr op))
            (and (consp tmp1) 
                 (eq (cdr tmp1) NIL)
                 (progn
                  (setq realOp (car tmp1))
                  t)))
           (eq qt 'quote))
      (list '|applyQuote| op (|pf2Sex1| args)))
     ((eq op '|braceFromCurly|)
      (setq x (|pf2Sex1| args))
      (if (and (consp x) (eq (car x) 'seq))
       x
       (list 'seq x)))
     ((eq op '|by|) (list 'by (|pf2Sex1| args)))
     (t (list op (|pf2Sex1| args))))))))

@

\defun{pfSuchThat2Sex}{Convert a SuchThat node to an S-expression}
\calls{pfSuchThat2Sex}{pf0TupleParts}
\calls{pfSuchThat2Sex}{pf2Sex1}
\calls{pfSuchThat2Sex}{pf2Sex}
\usesdollar{pfSuchThat2Sex}{predicateList}
<<defun pfSuchThat2Sex>>=
(defun |pfSuchThat2Sex| (args)
 (let (rhsSex lhsSex argList name)
 (declare (special |$predicateList|))
  (setq name (gentemp))
  (setq argList (|pf0TupleParts| args))
  (setq lhsSex (|pf2Sex1| (car argList)))
  (setq rhsSex (|pf2Sex| (cadr argList)))
  (setq |$predicateList|
   (cons (cons name (cons lhsSex rhsSex)) |$predicateList|))
  name))

@

\defun{pfOp2Sex}{pfOp2Sex}
\calls{pfOp2Sex}{pf2Sex1}
\calls{pfOp2Sex}{pmDontQuote?}
\calls{pfOp2Sex}{pfSymbol?}
\usesdollar{pfOp2Sex}{quotedOpList}
\usesdollar{pfOp2Sex}{insideRule}
<<defun pfOp2Sex>>=
(defun |pfOp2Sex| (pf)
 (let (realOp tmp1 op alreadyQuoted)
 (declare (special |$quotedOpList| |$insideRule|))
  (setq alreadyQuoted (|pfSymbol?| pf))
  (setq op (|pf2Sex1| pf))
  (cond
   ((and (consp op)
         (eq (car op) 'quote)
         (progn
          (setq tmp1 (cdr op))
          (and (consp tmp1)
               (eq (cdr tmp1) nil)
               (progn
                (setq realOp (car tmp1)) t))))
    (cond
     ((eq |$insideRule| '|left|) realOp)
     ((eq |$insideRule| '|right|)
      (cond
       ((|pmDontQuote?| realOp) realOp)
       (t
        (setq |$quotedOpList| (cons op |$quotedOpList|))
        op)))
     ((eq realOp '|\||) realOp)
     ((eq realOp '|:|) realOp)
     ((eq realOp '?) realOp)
     (t op)))
   (t op))))

@

\defun{pmDontQuote?}{pmDontQuote?}
\calls{pmDontQuote?}{memq}
<<defun pmDontQuote?>>=
(defun |pmDontQuote?| (sy)
 (memq sy
  '(+ - * ** ^ / |log| |exp| |pi| |sqrt| |ei| |li| |erf| |ci|
      |si| |dilog| |sin| |cos| |tan| |cot| |sec| |csc| |asin|
      |acos| |atan| |acot| |asec| |acsc| |sinh| |cosh| |tanh|
      |coth| |sech| |csch| |asinh| |acosh| |atanh| |acoth|
      |asech| |acsc|)))

@

\defun{hasOptArgs?}{hasOptArgs?}
<<defun hasOptArgs?>>=
(defun |hasOptArgs?| (argSex)
 (let (rhs  lhs opt nonOpt tmp1 tmp2)
 (dolist (arg argSex)
  (cond
   ((and (consp arg)
         (eq (car arg) 'optarg)
         (progn
          (setq tmp1 (cdr arg))
          (and (consp tmp1)
               (progn
                (setq lhs (car tmp1))
                (setq tmp2 (cdr tmp1))
                (and (consp tmp2)
                     (eq (cdr tmp2) nil)
                     (progn
                      (setq rhs (car tmp2))
                      t))))))
     (setq opt (cons (list lhs rhs) opt)))
    (t (setq nonOpt (cons arg nonOpt)))))
 (when opt
  (nconc (nreverse nonOpt) (list (cons '|construct| (nreverse opt)))))))

@

\defun{pfSequence2Sex}{Convert a Sequence node to an S-expression}
\calls{pfSequence2Sex}{pf2Sex1}
\calls{pfSequence2Sex}{pf0SequenceArgs}
\usesdollar{pfSequence2Sex}{insideSEQ}
<<defun pfSequence2Sex>>=
(defun |pfSequence2Sex| (pf)
 (let (|$insideSEQ| tmp1 ruleList seq)
 (declare (special |$insideSEQ|))
  (setq |$insideSEQ| t)
  (setq seq (|pfSequence2Sex0| (mapcar #'|pf2Sex1| (|pf0SequenceArgs| pf))))
  (cond
   ((and (consp seq) 
         (eq (car seq) 'seq)
         (progn (setq ruleList (cdr seq)) 't)
         (consp ruleList)
         (progn
          (setq tmp1 (car ruleList))
          (and (consp tmp1) (eq (car tmp1) '|rule|))))
    (list '|ruleset| (cons '|construct| ruleList)))
   (t seq))))

@

\defun{pfSequence2Sex0}{pfSequence2Sex0}
\tpdhere{rewrite this using (dolist (item seqList)...)}
\begin{verbatim}
;pfSequence2Sex0 seqList ==
;  null seqList => "noBranch"
;  seqTranList := []
;  while seqList ^= nil repeat
;    item := first seqList
;    item is ["exit", cond, value] =>
;      item := ["IF", cond, value, pfSequence2Sex0 rest seqList]
;      seqTranList := [item, :seqTranList]
;      seqList := nil
;    seqTranList := [item ,:seqTranList]
;    seqList := rest seqList
;  #seqTranList = 1 => first seqTranList
;  ["SEQ", :nreverse seqTranList]
\end{verbatim}
\calls{pfSequence2Sex0}{pfSequence2Sex0}
<<defun pfSequence2Sex0>>=
(defun |pfSequence2Sex0| (seqList)
 (let (value tmp2 cond tmp1 item seqTranList)
  (if (null seqList) 
   '|noBranch|
    (progn
     ((lambda ()
       (loop
        (if (not seqList) 
         (return nil)
         (progn
           (setq item (car seqList))
           (cond
            ((and (consp item) 
                  (eq (car item) '|exit|)
                  (progn
                   (setq tmp1 (cdr item))
                   (and (consp tmp1)
                        (progn
                         (setq cond (car tmp1))
                         (setq tmp2 (cdr tmp1))
                         (and (consp tmp2)
                              (eq (cdr tmp2) nil)
                              (progn
                               (setq value (car tmp2))
                               t))))))
               (setq item
                (list 'if cond value (|pfSequence2Sex0| (cdr seqList))))
               (setq seqTranList (cons item seqTranList))
               (setq seqList nil))
            (t
             (progn
              (setq seqTranList (cons item seqTranList))
              (setq seqList (cdr seqList))))))))))
     (if (eql (length seqTranList) 1) 
      (car seqTranList)
      (cons 'seq (nreverse seqTranList)))))))

@

\defun{loopIters2Sex}{Convert a loop node to an S-expression}
\tpdhere{rewrite using dsetq}
\begin{verbatim}
;loopIters2Sex iterList ==
;  result := nil
;  for iter in iterList repeat
;    sex := pf2Sex1 iter
;    sex is ['IN, var, ['SEGMENT, i, ["BY", incr]]] =>
;      result := [ ['STEP, var, i, incr], :result]
;    sex is ['IN, var, ["BY", ['SEGMENT, i, j], incr]] =>
;      result := [ ['STEP, var, i, incr, j], :result]
;    sex is ['IN, var, ['SEGMENT, i, j]] =>
;      result := [ ['STEP, var, i, 1, j], :result]
;    result := [sex, :result]
;  nreverse result
\end{verbatim}
\calls{loopIters2Sex}{pf2Sex1}
<<defun loopIters2Sex>>=
(defun |loopIters2Sex| (iterList)
 (let (j incr i var sex result tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8)
  (dolist (iter iterList (nreverse result))
   (setq sex (|pf2Sex1| iter))
   (cond
    ((and (consp sex) 
          (eq (car sex) 'in)
          (progn
           (setq tmp1 (cdr sex))
           (and (consp tmp1)
                (progn
                 (setq var (car tmp1))
                 (setq tmp2 (cdr tmp1))
                 (and (consp tmp2)
                      (eq (cdr tmp2) nil)
                      (progn
                       (setq tmp3 (car tmp2))
                       (and (consp tmp3)
                            (eq (car tmp3) 'segment)
                            (progn
                             (setq tmp4 (cdr tmp3))
                             (and (consp tmp4)
                                  (progn
                                   (setq i (car tmp4))
                                   (setq tmp5 (cdr tmp4))
                                   (and (consp tmp5)
                                        (eq (cdr tmp5) nil)
                                        (progn
                                         (setq tmp6 (car tmp5))
                                         (and (consp tmp6)
                                              (eq (car tmp6) 'by)
                                              (progn
                                               (setq tmp7 (cdr tmp6))
                                               (and (consp tmp7)
                                                    (eq (cdr tmp7) nil)
                                                    (progn
                                                     (setq incr (car tmp7))
                                                     t))))))))))))))))
      (setq result (cons (list 'step var i incr) result)))
     ((and (consp sex) 
           (eq (car sex) 'in)
           (progn
            (setq tmp1 (cdr sex))
            (and (consp tmp1)
                 (progn
                  (setq var (car tmp1))
                  (setq tmp2 (cdr tmp1))
                  (and (consp tmp2)
                       (eq (cdr tmp2) nil)
                       (progn
                        (setq tmp3 (car tmp2))
                        (and (consp tmp3)
                             (eq (car tmp3) 'by)
                             (progn
                              (setq tmp4 (cdr tmp3))
                              (and (consp tmp4)
                               (progn
                                (setq tmp5 (car tmp4))
                                (and (consp tmp5)
                                     (eq (car tmp5) 'segment)
                                     (progn
                                      (setq tmp6 (cdr tmp5))
                                      (and (consp tmp6)
                                           (progn
                                            (setq i (car tmp6))
                                            (setq tmp7 (cdr tmp6))
                                            (and (consp tmp7)
                                                 (eq (cdr tmp7) nil)
                                                 (progn
                                                  (setq j (car tmp7))
                                                  t)))))))
                               (progn
                                (setq tmp8 (cdr tmp4))
                                (and (consp tmp8)
                                     (eq (cdr tmp8) nil)
                                     (progn
                                      (setq incr (car tmp8))
                                      t))))))))))))
      (setq result (cons (list 'step var i incr j) result)))
     ((and (consp sex) 
           (eq (car sex) 'in)
           (progn
            (setq tmp1 (cdr sex))
            (and (consp tmp1)
                 (progn
                  (setq var (car tmp1))
                  (setq tmp2 (cdr tmp1))
                  (and (consp tmp2)
                       (eq (cdr tmp2) nil)
                       (progn
                        (setq tmp3 (car tmp2))
                        (and (consp tmp3)
                             (eq (car tmp3) 'segment)
                             (progn
                              (setq tmp4 (cdr tmp3))
                              (and (consp tmp4)
                                   (progn
                                    (setq i (car tmp4))
                                    (setq tmp5 (cdr tmp4))
                                    (and (consp tmp5)
                                         (eq (cdr tmp5) nil)
                                         (progn
                                          (setq j (car tmp5))
                                          t))))))))))))
      (setq result (cons (list 'step var i 1 j) result)))
     (t (setq result (cons sex result)))))))

@

\defun{pfCollect2Sex}{Change a Collect node to an S-expression}
\calls{pfCollect2Sex}{loopIters2Sex}
\calls{pfCollect2Sex}{pfParts}
\calls{pfCollect2Sex}{pfCollectIterators}
\calls{pfCollect2Sex}{pf2Sex1}
\calls{pfCollect2Sex}{pfCollectBody}
<<defun pfCollect2Sex>>=
(defun |pfCollect2Sex| (pf)
 (let (var cond sex tmp1 tmp2 tmp3 tmp4)
  (setq sex
   (cons 'collect
    (append (|loopIters2Sex| (|pfParts| (|pfCollectIterators| pf)))
            (list (|pf2Sex1| (|pfCollectBody| pf))))))
  (cond
   ((and (consp sex)
         (eq (car sex) 'collect)
         (progn
          (setq tmp1 (cdr sex))
          (and (consp tmp1)
               (progn
                (setq tmp2 (car tmp1))
                (and (consp tmp2)
                     (eq (car tmp2) '|\||)
                         (progn
                          (setq tmp3 (cdr tmp2))
                          (and (consp tmp3)
                               (eq (cdr tmp3) nil)
                               (progn
                                (setq cond (car tmp3))
                                t)))))
               (progn
                (setq tmp4 (cdr tmp1))
                (and (consp tmp4)
                     (eq (cdr tmp4) nil)
                         (progn (setq var (car tmp4)) t)))))
         (symbolp var))
    (list '|\|| var cond))
   (t sex))))


@

\defun{pfDefinition2Sex}{Convert a Definition node to an S-expression}
\calls{pfDefinition2Sex}{pf2Sex1}
\calls{pfDefinition2Sex}{pf0DefinitionLhsItems}
\calls{pfDefinition2Sex}{pfDefinitionRhs}
\calls{pfDefinition2Sex}{systemError}
\calls{pfDefinition2Sex}{pfLambdaTran}
\usesdollar{pfDefinition2Sex}{insideApplication}
<<defun pfDefinition2Sex>>=
(defun |pfDefinition2Sex| (pf)
 (let (body argList tmp1 rhs id idList)
 (declare (special |$insideApplication|))
  (if |$insideApplication|
   (list 'optarg
    (|pf2Sex1| (car (|pf0DefinitionLhsItems| pf)))
    (|pf2Sex1| (|pfDefinitionRhs| pf)))
   (progn
    (setq idList (mapcar #'|pf2Sex1| (|pf0DefinitionLhsItems| pf)))
    (if (not (eql (length idList) 1))
     (|systemError| 
       "lhs of definition must be a single item in the interpreter")
     (progn
      (setq id (car idList))
      (setq rhs (|pfDefinitionRhs| pf))
      (setq tmp1 (|pfLambdaTran| rhs))
      (setq argList (car tmp1))
      (setq body (cdr tmp1))
      (cons 'def
       (cons
        (if (eq argList '|id|) 
         id
         (cons id argList))
        body))))))))

@

\defun{pfLambdaTran}{Convert a Lambda node to an S-expression}
\calls{pfLambdaTran}{pfLambda?}
\calls{pfLambdaTran}{pf0LambdaArgs}
\calls{pfLambdaTran}{pfTyped?}
\calls{pfLambdaTran}{pfCollectArgTran}
\calls{pfLambdaTran}{pfTypedId}
\calls{pfLambdaTran}{pfNothing?}
\calls{pfLambdaTran}{pfTypedType}
\calls{pfLambdaTran}{pf2Sex1}
\calls{pfLambdaTran}{systemError}
\calls{pfLambdaTran}{pfLambdaRets}
\calls{pfLambdaTran}{pfLambdaBody}
<<defun pfLambdaTran>>=
(defun |pfLambdaTran| (pf)
 (let (retType argList argTypeList)
  (cond
   ((|pfLambda?| pf)
    (dolist (arg (|pf0LambdaArgs| pf))
     (if (|pfTyped?| arg)
      (progn
       (setq argList
        (cons (|pfCollectArgTran| (|pfTypedId| arg)) argList))
       (if (|pfNothing?| (|pfTypedType| arg))
        (setq argTypeList (cons nil argTypeList))
        (setq argTypeList 
         (cons (|pf2Sex1| (|pfTypedType| arg)) argTypeList))))
      (|systemError| "definition args should be typed")))
    (setq argList (nreverse argList))
    (unless (|pfNothing?| (|pfLambdaRets| pf))
     (setq retType (|pf2Sex1| (|pfLambdaRets| pf))))
    (setq argTypeList (cons retType (nreverse argTypeList)))
    (cons argList
     (list argTypeList 
           (mapcar #'(lambda (x) (declare (ignore x)) nil) argTypeList)
           (|pf2Sex1| (|pfLambdaBody| pf)))))
   (t (cons '|id| (list '(nil) '(nil) (|pf2Sex1| pf)))))))

@

\defun{pfCollectArgTran}{pfCollectArgTran}
\calls{pfCollectArgTran}{pfCollect?}
\calls{pfCollectArgTran}{pf2sex1}
\calls{pfCollectArgTran}{pfParts}
\calls{pfCollectArgTran}{pfCollectIterators}
\calls{pfCollectArgTran}{pfCollectBody}
<<defun pfCollectArgTran>>=
(defun |pfCollectArgTran| (pf)
 (let (cond tmp2 tmp1 id conds)
  (cond
   ((|pfCollect?| pf)
    (setq conds (mapcar #'|pf2sex1| (|pfParts| (|pfCollectIterators| pf))))
    (setq id (|pf2Sex1| (|pfCollectBody| pf)))
    (cond
     ((and (consp conds)                   ; conds is [ ["|", cond] ] 
           (eq (cdr conds) nil)
           (progn
            (setq tmp1 (car conds))
            (and (consp tmp1) 
                 (eq (car tmp1) '|\||)
                 (progn
                  (setq tmp2 (cdr tmp1))
                  (and (consp tmp2)
                       (eq (cdr tmp2) nil)
                       (progn
                        (setq cond (car tmp2))
                        t))))))
              (list '|\|| id cond))
     (t (cons id conds))))
   (t (|pf2Sex1| pf)))))

@

\defun{pfLambda2Sex}{Convert a Lambda node to an S-expression}
\calls{pfLambda2Sex}{pfLambdaTran}
<<defun pfLambda2Sex>>=
(defun |pfLambda2Sex| (pf)
 (let (body argList tmp1)
  (setq tmp1 (|pfLambdaTran| pf))
  (setq argList (car tmp1))
  (setq body (cdr tmp1))
  (cons 'adef (cons argList body))))

@

\defun{pfRule2Sex}{Convert a Rule node to an S-expression}
\calls{pfRule2Sex}{pfLhsRule2Sex}
\calls{pfRule2Sex}{pfRuleLhsItems}
\calls{pfRule2Sex}{pfRhsRule2Sex}
\calls{pfRule2Sex}{pfRuleRhs}
\calls{pfRule2Sex}{ruleLhsTran}
\calls{pfRule2Sex}{rulePredicateTran}
\usesdollar{pfRule2Sex}{multiVarPredicateList}
\usesdollar{pfRule2Sex}{predicateList}
\usesdollar{pfRule2Sex}{quotedOpList}
<<defun pfRule2Sex>>=
(defun |pfRule2Sex| (pf)
 (let (|$multiVarPredicateList| |$predicateList| |$quotedOpList| rhs lhs)
 (declare (special |$multiVarPredicateList| |$predicateList| |$quotedOpList|))
  (setq |$quotedOpList| nil)
  (setq |$predicateList| nil)
  (setq |$multiVarPredicateList| nil)
  (setq lhs (|pfLhsRule2Sex| (|pfRuleLhsItems| pf)))
  (setq rhs (|pfRhsRule2Sex| (|pfRuleRhs| pf)))
  (setq lhs (|ruleLhsTran| lhs))
  (|rulePredicateTran|
   (if |$quotedOpList|
    (list '|rule| lhs rhs (cons '|construct| |$quotedOpList|))
    (list '|rule| lhs rhs)))))

@

\defun{pfLhsRule2Sex}{Convert the Lhs of a Rule to an S-expression}
\calls{pfLhsRule2Sex}{pf2Sex1}
\usesdollar{pfLhsRule2Sex}{insideRule}
<<defun pfLhsRule2Sex>>=
(defun |pfLhsRule2Sex| (lhs)
 (let (|$insideRule|)
 (declare (special |$insideRule|))
  (setq |$insideRule| '|left|)
  (|pf2Sex1| lhs)))

@

\defun{pfRhsRule2Sex}{Convert the Rhs of a Rule to an S-expression}
\calls{pfRhsRule2Sex}{pf2Sex1}
\usesdollar{pfRhsRule2Sex}{insideRule}
<<defun pfRhsRule2Sex>>=
(defun |pfRhsRule2Sex| (rhs)
 (let (|$insideRule|)
 (declare (special |$insideRule|))
  (setq |$insideRule| '|right|)
  (|pf2Sex1| rhs)))

@

\defun{rulePredicateTran}{Convert a Rule predicate to an S-expression}
\begin{verbatim}
;rulePredicateTran rule ==
;  null $multiVarPredicateList => rule
;  varList := patternVarsOf [rhs for [.,.,:rhs] in $multiVarPredicateList]
;  predBody :=
;    CDR $multiVarPredicateList =>
;      ['AND, :[:pvarPredTran(rhs, varList) for [.,.,:rhs] in
;        $multiVarPredicateList]]
;    [ [.,.,:rhs],:.] := $multiVarPredicateList
;    pvarPredTran(rhs, varList)
;  ['suchThat, rule,
;   ['construct, :[ ["QUOTE", var] for var in varList]],
;    ['ADEF, '(predicateVariable),
;     '((Boolean) (List (Expression (Integer)))), '(() ()),
;      predBody]]
\end{verbatim}
\calls{rulePredicateTran}{patternVarsOf}
\calls{rulePredicateTran}{pvarPredTran}
\usesdollar{rulePredicateTran}{multiVarPredicateList}
<<defun rulePredicateTran>>=
(defun |rulePredicateTran| (rule)
 (let (predBody varList rhs tmp1 result)
 (declare (special |$multiVarPredicateList|))
  (if (null |$multiVarPredicateList|) 
   rule
   (progn
   (setq varList
    (|patternVarsOf|
     ((lambda (t1 t2 t3)
      (loop
       (cond
        ((or (atom t2)
             (progn
              (setq t3 (car t2))
              nil))
           (return (nreverse t1)))
        (t
         (and (consp t3)
              (progn
               (setq tmp1 (cdr t3))
               (and (consp tmp1)
                    (progn
                     (setq rhs (cdr tmp1))
                     t)))
              (setq t1 (cons rhs t1)))))
       (setq t2 (cdr t2))))
      nil |$multiVarPredicateList| nil)))
   (setq predBody
    (cond
     ((cdr |$multiVarPredicateList|)
      (cons 'and
       ((lambda (t4 t5 t6)
        (loop
         (cond
          ((or (atom t5)
               (progn
                (setq t6 (car t5))
                nil))
            (return (nreverse t4)))
          (t
           (and (consp t6)
                (progn
                 (setq tmp1 (cdr t6))
                 (and (consp tmp1)
                      (progn
                       (setq rhs (cdr tmp1))
                       t)))
                      (setq t4
                       (append (reverse (|pvarPredTran| rhs varList))
                               t4)))))
         (setq t5 (cdr t5))))
        nil |$multiVarPredicateList| nil)))
     (t
      (progn
       (setq rhs (cddar |$multiVarPredicateList|))
       (|pvarPredTran| rhs varList)))))
   (dolist (var varList) (push (list 'quote var) result))
   (list '|suchThat| rule
    (cons '|construct| (nreverse result))
    (list 'adef '(|predicateVariable|)
                       '((|Boolean|)
                         (|List| (|Expression| (|Integer|))))
                       '(nil nil) predBody))))))

@

\defun{patternVarsOf}{patternVarsOf}
\calls{patternVarsOf}{patternVarsOf1}
<<defun patternVarsOf>>=
(defun |patternVarsOf| (expr)
 (|patternVarsOf1| expr nil))

@

\defun{patternVarsOf1}{patternVarsOf1}
\calls{patternVarsOf1}{memq}
\calls{patternVarsOf1}{patternVarsOf1}
<<defun patternVarsOf1>>=
(defun |patternVarsOf1| (expr varList)
 (let (argl op)
  (cond
   ((null expr) varList)
   ((atom expr)
    (cond
     ((null (symbolp expr)) varList)
     ((memq expr varList) varList)
     (t (cons expr varList))))
   ((and (consp expr)
         (progn
          (setq op (car expr))
          (setq argl (cdr expr))
          t))
         (progn
           (dolist (arg argl) 
            (setq varList (|patternVarsOf1| arg varList)))
            varList))
   (t varList))))

@

\defun{pvarPredTran}{pvarPredTran}
<<defun pvarPredTran>>=
(defun |pvarPredTran| (rhs varList)
 (let ((i 0))
  (dolist (var varList rhs)
   (setq rhs (nsubst (list '|elt| '|predicateVariable| (incf i)) var rhs)))))

@

\defun{ruleLhsTran}{Convert the Lhs of a Rule node to an S-expression}
\calls{ruleLhsTran}{patternVarsOf}
\calls{ruleLhsTran}{nsubst}
\usesdollar{ruleLhsTran}{predicateList}
\usesdollar{ruleLhsTran}{multiVarPredicateList}
<<defun ruleLhsTran>>=
(defun |ruleLhsTran| (ruleLhs)
 (let (predicate var vars predRhs predLhs name)
 (declare (special |$predicateList| |$multiVarPredicateList|))
 (dolist (pred |$predicateList|)
  (setq name (car pred))
  (setq predLhs (cadr pred))
  (setq predRhs (cddr pred))
  (setq vars (|patternVarsOf| predRhs))
  (cond
   ((cdr vars)
    (setq ruleLhs (nsubst predLhs name ruleLhs))
    (setq |$multiVarPredicateList| (cons pred |$multiVarPredicateList|)))
   (t
    (setq var (cadr predLhs))
    (setq predicate
      (list '|suchThat| predLhs (list 'adef (list var)
            '((|Boolean|) (|Expression| (|Integer|))) '(nil nil) predRhs)))
    (setq ruleLhs (nsubst predicate name ruleLhs)))))
  ruleLhs))

@

\defvar{dotdot}
<<initvars>>=
(defvar |$dotdot| '|..|)

@

\defun{opTran}{Translate ops into internal symbols}
\usesdollar{opTran}{dotdot}
<<defun opTran>>=
(defun |opTran| (op)
 (declare (special |$dotdot|))
 (cond
  ((equal op |$dotdot|) 'segment)
  ((eq op '[]) '|construct|)
  ((eq op '{}) '|braceFromCurly|)
  ((eq op 'is) '|is|)
  (t op)))

@

\chapter{Keyed Message Handling}
Throughout the interpreter there are messages printed using a symbol
for a database lookup. This was done to enable translation of these
messages languages other than English.

Axiom messages are read from a flat file database and returned
as one long string.  They are preceded in the database by a key and
this is how they are referenced from code.  For example, one key is
S2IL0001 which means:
\begin{verbatim}
   S2          Scratchpad II designation
   I           from the interpreter
   L           originally from LISPLIB BOOT
   0001        a sequence number
\end{verbatim}

Each message may contain formatting codes and and parameter codes.
The formatting codes are:
\begin{verbatim}
   %b          turn on bright printing
   %ceoff      turn off centering
   %ceon       turn on centering
   %d          turn off bright printing
   %f          user defined printing
   %i          start indentation of 3 more spaces
   %l          start a new line
   %m          math-print an expression
   %rjoff      turn off right justification (actually ragged left)
   %rjon       turn on right justification (actually ragged left)
   %s          pretty-print as an S-expression
   %u          unindent 3 spaces
   %x#         insert # spaces
\end{verbatim}

The parameter codes look like \%1, \%2b, \%3p, \%4m, \%5bp, \%6s where the
digit is the parameter number and the letters following indicate
additional formatting. You can indicate as many additional formatting
qualifiers as you like, to the degree they make sense. 
\begin{itemize}
\item The ``p'' code means to call prefix2String on the parameter, 
a standard way of printing abbreviated types.  
\item The ``P'' operator maps prefix2String over its arguments.  
\item The ``o'' operation formats the argument as an operation name.  
\item The ``b'' means to print that parameter in a bold (bright) font. 
\item The ``c'' means to center that parameter on a new line.
\item The ``r'' means to right justify (ragged left) the argument.
\item The ``f'' means that the parameter is a list [fn, :args]
and that ``fn'' is to be called on ``args'' to get the text. 
\end{itemize}

Look in the file with the name defined in \verb|$defaultMsgDatabaseName|
above for examples.

\defdollar{cacheMessages}
This is used for debugging
<<initvars>>=
(defvar |$cacheMessages| t)

@

\defdollar{msgAlist}
<<initvars>>=
(defvar |$msgAlist| nil) 

@

\defdollar{msgDatabaseName}
<<initvars>>=
(defvar |$msgDatabaseName| nil) 

@

\defdollar{testingErrorPrefix}
<<initvars>>=
(defvar |$testingErrorPrefix| "Daly Bug")

@

\defdollar{texFormatting}
<<initvars>>=
(defvar |$texFormatting| nil) 

@

\defvar{*msghash*}
<<initvars>>=
(defvar *msghash* nil "hash table keyed by msg number")

@

\defdollar{msgdbPrims}
<<initvars>>=
(defvar |$msgdbPrims|
 '(|%b| |%d| |%l| |%i| |%u| %U |%n| |%x| |%ce| |%rj| "%U" "%b" "%d"
   "%l" "%i" "%u" "%U" "%n" "%x" "%ce" "%rj"))

@

\defdollar{msgdbPunct}
<<initvars>>=
(defvar |$msgdbPunct|
  '(|.| |,| ! |:| |;| ? ] |)| "." "," "!" ":" ";" "?" "]" ")"))

@

\defdollar{msgdbNoBlanksBeforeGroup}
<<initvars>>=
(defvar |$msgdbNoBlanksBeforeGroup|
 `(" " | | "%" % ,@|$msgdbPrims| ,@|$msgdbPunct|))

@

\defdollar{msgdbNoBlanksAfterGroup}
<<initvars>>=
(defvar |$msgdbNoBlanksAfterGroup|
 `(" " | | "%" % ,@|$msgdbPrims| [ |(| "[" "("))

@

\defun{fetchKeyedMsg}{Fetch a message from the message database}
If the {\tt *msghash*} hash table is empty we call {\tt cacheKeyedMsg}
to fill the table, otherwise we do a key lookup in the hash table.
\calls{fetchKeyedMsg}{object2Identifier}
\calls{fetchKeyedMsg}{cacheKeyedMsg}
\usesdollar{fetchKeyedMsg}{defaultMsgDatabaseName}
\uses{fetchKeyedMsg}{*msghash*}
<<defun fetchKeyedMsg>>=
(defun |fetchKeyedMsg| (key ignore)
 (declare (ignore ignore) (special *msghash* |$defaultMsgDatabaseName|))
 (setq key (|object2Identifier| key))
 (unless *msghash*
  (setq *msghash* (make-hash-table))
  (cacheKeyedMsg |$defaultMsgDatabaseName|))
 (gethash key *msghash*))

@

\defun{cacheKeyedMsg}{Cache messages read from message database}
\catches{cacheKeyedMsg}{done}
\throws{cacheKeyedMsg}{done}
\uses{cacheKeyedMsg}{*msghash*}
<<defun cacheKeyedMsg>>=
(defun cacheKeyedMsg (file)
 (let ((line "") (msg "") key)
 (declare (special *msghash*))
  (with-open-file (in file)
   (catch 'done
    (loop
     (setq line (read-line in nil nil))
     (cond
      ((null line)
       (when key (setf (gethash key *msghash*) msg))
       (throw 'done nil))
      ((= (length line) 0))
      ((char= (schar line 0) #\S)
       (when key (setf (gethash key *msghash*) msg))
       (setq key (intern line "BOOT"))
       (setq msg ""))
      ('else
       (setq msg (concatenate 'string msg line)))))))))

@

\defun{getKeyedMsg}{getKeyedMsg}
\calls{getKeyedMsg}{fetchKeyedMsg}
<<defun getKeyedMsg>>=
(defun |getKeyedMsg| (key) (|fetchKeyedMsg| key nil)) 

@

\defun{sayKeyedMsg}{Say a message using a keyed lookup}
\calls{sayKeyedMsg}{sayKeyedMsgLocal}
\usesdollar{sayKeyedMsg}{texFormatting}
<<defun sayKeyedMsg>>=
(defun |sayKeyedMsg| (key args)
 (let (|$texFormatting|)
 (declare (special |$texFormatting|))
  (setq |$texFormatting| nil)
  (|sayKeyedMsgLocal| key args)))
@

\defun{sayKeyedMsgLocal}{Handle msg formatting and print to file}
\calls{sayKeyedMsgLocal}{segmentKeyedMsg}
\calls{sayKeyedMsgLocal}{getKeyedMsg}
\calls{sayKeyedMsgLocal}{substituteSegmentedMsg}
\calls{sayKeyedMsgLocal}{flowSegmentedMsg}
\calls{sayKeyedMsgLocal}{sayMSG2File}
\calls{sayKeyedMsgLocal}{sayMSG}
\usesdollar{sayKeyedMsgLocal}{printMsgsToFile}
\usesdollar{sayKeyedMsgLocal}{linelength}
\usesdollar{sayKeyedMsgLocal}{margin}
\usesdollar{sayKeyedMsgLocal}{displayMsgNumber}
<<defun sayKeyedMsgLocal>>=
(defun |sayKeyedMsgLocal| (key args)
 (let (msg msgp)
 (declare (special |$printMsgsToFile| $linelength $margin |$displayMsgNumber|))
  (setq msg (|segmentKeyedMsg| (|getKeyedMsg| key)))
  (setq msg (|substituteSegmentedMsg| msg args))
  (when |$displayMsgNumber| (setq msg `("%b" ,key |:| "%d" . ,msg)))
  (setq msgp (|flowSegmentedMsg| msg $linelength $margin))
  (when |$printMsgsToFile| (|sayMSG2File| msgp))
  (|sayMSG| msgp)))

@

\defun{segmentKeyedMsg}{Break a message into words}
\calls{segmentKeyedMsg}{string2Words}
<<defun segmentKeyedMsg>>=
(defun |segmentKeyedMsg| (msg) (|string2Words| msg)) 

@

\defun{sayMSG2File}{Write a msg into spadmsg.listing file}
\calls{sayMSG2File}{makePathname}
\calls{sayMSG2File}{defiostream}
\calls{sayMSG2File}{sayBrightly1}
\calls{sayMSG2File}{shut}
<<defun sayMSG2File>>=
(defun |sayMSG2File| (msg)
 (let (file str)
  (setq file (|makePathname| '|spadmsg| '|listing| 'a))
  (setq str (defiostream `((mode . output) (file . ,file)) 255 0))
  (sayBrightly1 msg str)
  (shut str)))
 
@

\defun{sayMSG}{sayMSG}
\calls{saymsg}{saybrightly1}
\usesdollar{sayMSG}{algebraOutputStream}
<<defun sayMSG>>=
(defun |sayMSG| (x)
 (declare (special |$algebraOutputStream|))
 (when x (sayBrightly1 x |$algebraOutputStream|)))

@
 
\chapter{Stream Utilities}
The input stream is parsed into a large s-expression by repeated calls
to Delay. Delay takes a function f and an argument x and returns a list
consisting of \verb|("nonnullstream" f x)|. Eventually multiple calls are made
and a large list structure is created that consists of 
\verb|("nonnullstream" f x ("nonnullstream" f1 x1 ("nonnullstream" f2 x2...|

This delay structure is given to StreamNull which walks along the
list looking at the head. If the head is ``nonnullstream'' then the
function is applied to the argument.

So, in effect, the input is ``zipped up'' into a Delay data structure
which is then evaluated by calling StreamNull. This "zippered stream"
parser was a research project at IBM and Axiom was the testbed (which
explains the strange parsing technique).

\defun{npNull}{npNull}
\calls{npNull}{StreamNull}
<<defun npNull>>=
(defun |npNull| (x) (|StreamNull| x))

@

\defun{StreamNull}{StreamNull}
\calls{StreamNull}{eqcar}
<<defun StreamNull>>=
(defun |StreamNull| (x)
 (let (st)
  (cond
   ((or (null x) (eqcar x '|nullstream|)) t)
   (t
    ((lambda nil
     (loop
      (cond
       ((not (eqcar x '|nonnullstream|)) (return nil))
       (t
        (setq st (apply (cadr x) (cddr x)))
        (rplaca x (car st))
        (rplacd x (cdr st)))))))
      (eqcar x '|nullstream|)))))

@

\chapter{Code Piles}
The insertpiles function converts a line-list to a line-forest where
a line is a token-dequeue and has a column which is an integer.
An A-forest is an A-tree-list
An A-tree has a root which is an A, and subtrees which is an A-forest.
 
A forest with more than one tree corresponds to a Scratchpad pile
structure (t1;t2;t3;...;tn), and a tree corresponds to a pile item.
The ( ; and ) tokens are inserted into a >1-forest, otherwise
the root of the first tree is concatenated with its forest.
column t is the number of spaces before the first non-space in line t

\defun{insertpile}{insertpile}
\calls{insertpile}{npNull}
\calls{insertpile}{pilePlusComment}
\calls{insertpile}{pilePlusComments}
\calls{insertpile}{pileTree}
\calls{insertpile}{pileCforest}
<<defun insertpile>>=
(defun |insertpile| (s)
 (let (stream a t1 h1 t2 h tmp1)
  (cond
   ((|npNull| s) (list nil 0 nil s))
   (t
    (setq tmp1 (list (car s) (cdr s)))
    (setq h (car tmp1)) 
    (setq t2 (cadr tmp1))
    (cond
     ((|pilePlusComment| h)
       (setq tmp1 (|pilePlusComments| s))
       (setq h1 (car tmp1))
       (setq t1 (cadr tmp1))
       (setq a (|pileTree| (- 1) t1))
       (cons (list (|pileCforest|
                       (append h1 (cons (elt a 2) nil))))
             (elt a 3)))
     (t
      (setq stream (cadar s))
      (setq a (|pileTree| -1 s))
      (cons (list (list (elt a 2) stream)) (elt a 3))))))))

@

\defun{pilePlusComment}{pilePlusComment}
\calls{pilePlusComment}{tokType}
\calls{pilePlusComments}{npNull}
\calls{pilePlusComments}{pilePlusComment}
\calls{pilePlusComments}{pilePlusComments}
<<defun pilePlusComment>>=
(defun |pilePlusComment| (arg)
 (eq (|tokType| (caar arg)) '|comment|))

@
\defun{pilePlusComments}{pilePlusComments}
<<defun pilePlusComments>>=
(defun |pilePlusComments| (s)
 (let (t1 h1 t2 h tmp1)
  (cond
   ((|npNull| s) (list nil s))
   (t
    (setq tmp1 (list (car s) (cdr s)))
    (setq h (car tmp1))
    (setq t2 (cadr tmp1))
    (cond
     ((|pilePlusComment| h)
      (setq tmp1 (|pilePlusComments| t2))
      (setq h1 (car tmp1))
      (setq t1 (cadr tmp1))
      (list (cons h h1) t1))
     (t 
      (list nil s)))))))

@

\defun{pileTree}{pileTree}
\calls{pileTree}{npNull}
\calls{pileTree}{pileColumn}
\calls{pileTree}{pileForests}
<<defun pileTree>>=
(defun |pileTree| (n s)
 (let (hh t1 h tmp1)
  (cond
   ((|npNull| s) (list nil n nil s))
   (t
    (setq tmp1 (list (car s) (cdr s)))
    (setq h (car tmp1))
    (setq t1 (cadr tmp1))
    (setq hh (|pileColumn| (car h)))
    (cond
     ((< n hh) (|pileForests| (car h) hh t1))
     (t (list nil n nil s)))))))

@

\defun{pileColumn}{pileColumn}
\calls{pileColumn}{tokPosn}
<<defun pileColumn>>=
(defun |pileColumn| (arg)
 (cdr (|tokPosn| (caar arg))))

@

\defun{pileForests}{pileForests}
\calls{pileForests}{pileForest}
\calls{pileForests}{npNull}
\calls{pileForests}{pileForests}
\calls{pileForests}{pileCtree}
<<defun pileForests>>=
(defun |pileForests| (h n s)
 (let (t1 h1 tmp1)
  (setq tmp1 (|pileForest| n s))
  (setq h1 (car tmp1))
  (setq t1 (cadr tmp1))
  (cond
   ((|npNull| h1) (list t n h s))
   (t (|pileForests| (|pileCtree| h h1) n t1)))))

@

\defun{pileForest}{pileForest}
\calls{pileForest}{pileTree}
\calls{pileForest}{pileForest1}
<<defun pileForest>>=
(defun |pileForest| (n s)
 (let (t1 h1 t2 h hh b tmp)
  (setq tmp (|pileTree| n s))
  (setq b (car tmp))
  (setq hh (cadr tmp))
  (setq h (caddr tmp))
  (setq t2 (cadddr tmp))
  (cond
   (b
    (setq tmp (|pileForest1| hh t2))
    (setq h1 (car tmp))
    (setq t1 (cadr tmp))
    (list (cons h h1) t1))
   (t 
    (list nil s)))))

@

\defun{pileForest1}{pileForest1}
\calls{pileForest1}{eqpileTree}
\calls{pileForest1}{pileForest1}
<<defun pileForest1>>=
(defun |pileForest1| (n s)
 (let (t1 h1 t2 h n1 b tmp)
  (setq tmp (|eqpileTree| n s))
  (setq b (car tmp))
  (setq n1 (cadr tmp))
  (setq h (caddr tmp))
  (setq t2 (cadddr tmp))
  (cond
   (b
    (setq tmp (|pileForest1| n t2))
    (setq h1 (car tmp))
    (setq t1 (cadr tmp))
    (list (cons h h1) t1))
   (t (list nil s)))))

@

\defun{eqpileTree}{eqpileTree}
\calls{eqpileTree}{npNull}
\calls{eqpileTree}{pileColumn}
\calls{eqpileTree}{pileForests}
<<defun eqpileTree>>=
(defun |eqpileTree| (n s)
 (let (hh t1 h tmp)
  (cond
   ((|npNull| s) (list nil n nil s))
   (t
    (setq tmp (list (car s) (cdr s)))
    (setq h (car tmp))
    (setq t1 (cadr tmp))
    (setq hh (|pileColumn| (car h)))
    (cond
     ((equal hh n) (|pileForests| (car h) hh t1))
     (t (list nil n nil s)))))))

@

\defun{pileCtree}{pileCtree}
\calls{pileCtree}{dqAppend}
\calls{pileCtree}{pileCforest}
<<defun pileCtree>>=
(defun |pileCtree| (x y)
 (|dqAppend| x (|pileCforest| y)))

@

\defun{pileCforest}{pileCforest}
Only enpiles forests with $>=2$ trees
\calls{pileCforest}{tokPart}
\calls{pileCforest}{enPile}
\calls{pileCforest}{separatePiles}
<<defun pileCforest>>=
(defun |pileCforest| (x)
 (let (f)
  (cond
   ((null x) nil)
   ((null (cdr x)) (setq f (car x))
    (cond
     ((eq (|tokPart| (caar f)) 'if) (|enPile| f))
     (t f)))
   (t (|enPile| (|separatePiles| x))))))

@

\defun{enPile}{enPile}
\calls{enPile}{dqConcat}
\calls{enPile}{dqUnit}
\calls{enPile}{tokConstruct}
\calls{enPile}{firstTokPosn}
\calls{enPile}{lastTokPosn}
<<defun enPile>>=
(defun |enPile| (x)
 (|dqConcat|
  (list
   (|dqUnit| (|tokConstruct| '|key| 'settab (|firstTokPosn| x)))
   x
   (|dqUnit| (|tokConstruct| '|key| 'backtab (|lastTokPosn| x))))))

@

\defun{firstTokPosn}{firstTokPosn}
\calls{firstTokPosn}{tokPosn}
<<defun firstTokPosn>>=
(defun |firstTokPosn| (arg) (|tokPosn| (caar arg)))

@

\defun{lastTokPosn}{lastTokPosn}
\calls{lastTokPosn}{tokPosn}
<<defun lastTokPosn>>=
(defun |lastTokPosn| (arg) (|tokPosn| (cadr arg)))

@

\defun{separatePiles}{separatePiles}
\calls{separatePiles}{dqUnit}
\calls{separatePiles}{tokConstruct}
\calls{separatePiles}{lastTokPosn}
\calls{separatePiles}{dqConcat}
\calls{separatePiles}{separatePiles}
<<defun separatePiles>>=
(defun |separatePiles| (x)
 (let (semicolon a)
  (cond
   ((null x) nil)
   ((null (cdr x)) (car x))
   (t 
    (setq a (car x))
    (setq semicolon
      (|dqUnit| (|tokConstruct| '|key| 'backset (|lastTokPosn| a))))
    (|dqConcat| (list a semicolon (|separatePiles| (cdr x))))))))

@

\chapter{Dequeue Functions}
The dqUnit makes a unit dq i.e. a dq with one item, from the item
\defun{dqUnit}{dqUnit}
<<defun dqUnit>>=
(defun |dqUnit| (s)
 (let (a)
  (setq a (list s))
  (cons a a)))

@

\defun{dqConcat}{dqConcat}
The dqConcat function concatenates a list of dq's, destroying all but the last
\calls{dqConcat}{dqAppend}
\calls{dqConcat}{dqConcat}
<<defun dqConcat>>=
(defun |dqConcat| (ld)
 (cond
  ((null ld) nil)
  ((null (cdr ld)) (car ld))
  (t (|dqAppend| (car ld) (|dqConcat| (cdr ld))))))

@

\defun{dqAppend}{dqAppend}
The dqAppend function appends 2 dq's, destroying the first
<<defun dqAppend>>=
(defun |dqAppend| (x y)
 (cond
  ((null x) y)
  ((null y) x)
  (t 
   (rplacd (cdr x) (car y))
   (rplacd x (cdr y)) x)))

@

\defun{dqToList}{dqToList}
<<defun dqToList>>=
(defun |dqToList| (s)
 (when s (car s)))

@

\chapter{Message Handling}

\section{The Line Object}

\defun{lnCreate}{Line object creation}
This is called in only one place, the incLine1 function.
<<defun lnCreate>>=
(defun |lnCreate| (extraBlanks string globalNum &rest optFileStuff)
 (let ((localNum (first optFileStuff))
       (filename (second optFileStuff)))
  (unless localNum (setq localNum 0))
  (list extraBlanks string globalNum localNum filename)))

@

\defun{lnExtraBlanks}{Line element 0; Extra blanks}
<<defun lnExtraBlanks>>=
(defun |lnExtraBlanks| (lineObject) (elt lineObject 0))

@

\defun{lnString}{Line element 1; String}
<<defun lnString>>=
(defun |lnString| (lineObject) (elt lineObject 1))

@

\defun{lnGlobalNum}{Line element 2; Globlal number}
<<defun lnGlobalNum>>=
(defun |lnGlobalNum| (lineObject) (elt lineObject 2))

@

\defun{lnSetGlobalNum}{Line element 2; Set Global number}
<<defun lnSetGlobalNum>>=
(defun |lnSetGlobalNum| (lineObject num)
 (setf (elt lineObject 2) num))

@

\defun{lnLocalNum}{Line elemnt 3; Local number}
<<defun lnLocalNum>>=
(defun |lnLocalNum| (lineObject) (elt lineObject 3))

@

\defun{lnPlaceOfOrigin}{Line element 4; Place of origin}
<<defun lnPlaceOfOrigin>>=
(defun |lnPlaceOfOrigin| (lineObject) (elt lineObject 4))

@

\defun{lnImmediate?}{Line element 4: Is it a filename?}
\calls{lnImmediate?}{lnFileName?}
<<defun lnImmediate?>>=
(defun |lnImmediate?| (lineObject) (null (|lnFileName?| lineObject)))

@

\defun{lnFileName?}{Line element 4: Is it a filename?}
<<defun lnFileName?>>=
(defun |lnFileName?| (lineObject)
 (let (filename)
  (when (consp (setq filename (elt lineObject 4))) filename)))

@

\defun{lnFileName}{Line element 4; Get filename}
\calls{lnFileName}{lnFileName?}
\calls{lnFileName}{ncBug}
<<defun lnFileName>>=
(defun |lnFileName| (lineObject)
 (let (fN)
  (if (setq fN (|lnFileName?| lineObject))
   fN
   (|ncBug| "there is no file name in %1" (list lineObject)))))
@


\section{Messages}

\defun{msgCreate}{msgCreate}
\begin{verbatim}
msgObject  tag -- catagory of msg
                    -- attributes as a-list
                        'imPr  => dont save for list processing
                        toWhere, screen or file
                        'norep => only display once in list
           pos -- position with possible FROM/TO tag
           key -- key for message database
          argL -- arguments to be placed in the msg test
        prefix -- things like "Error: "
          text -- the actual text
\end{verbatim}
\calls{msgCreate}{setMsgForcedAttrList}
\calls{msgCreate}{putDatabaseStuff}
\calls{msgCreate}{initImPr}
\calls{msgCreate}{initToWhere}
<<defun msgCreate>>=
(defun |msgCreate| (tag posWTag key argL optPre &rest optAttr)
 (let (msg)
  (when (consp key) (setq tag '|old|))
  (setq msg (list tag posWTag key argL optPre nil))
  (when (car optAttr) (|setMsgForcedAttrList| msg (car optAttr)))
  (|putDatabaseStuff| msg)
  (|initImPr| msg)
  (|initToWhere| msg)
  msg))

@

\defun{getMsgPosTagOb}{getMsgPosTagOb}
<<defun getMsgPosTagOb>>=
(defun |getMsgPosTagOb| (msg) (elt msg 1))

@

\defun{getMsgKey}{getMsgKey}
<<defun getMsgKey>>=
(defun |getMsgKey| (msg)  (elt msg 2))

@

\defun{getMsgArgL}{getMsgArgL}
<<defun getMsgArgL>>=
(defun |getMsgArgL| (msg) (elt msg 3))

@

\defun{getMsgPrefix}{getMsgPrefix}
<<defun getMsgPrefix>>=
(defun |getMsgPrefix| (msg) (elt msg 4))

@

\defun{setMsgPrefix}{setMsgPrefix}
<<defun setMsgPrefix>>=
(defun |setMsgPrefix| (msg val) (setf (elt msg 4) val))

@

\defun{getMsgText}{getMsgText}
<<defun getMsgText>>=
(defun |getMsgText| (msg) (elt msg 5))

@

\defun{setMsgText}{setMsgText}
<<defun setMsgText>>=
(defun |setMsgText| (msg val)
  (setf (elt msg 5) val))

@

\defun{getMsgPrefix?}{getMsgPrefix?}
<<defun getMsgPrefix?>>=
(defun |getMsgPrefix?| (msg)
 (let ((pre (|getMsgPrefix| msg)))
  (unless (eq pre '|noPre|) pre)))

@

\defun{getMsgTag}{getMsgTag}
The valid message tags are:
line, old, error, warn, bug, unimple, remark, stat, say, debug
\calls{getMsgTag}{ncTag}
<<defun getMsgTag>>=
(defun |getMsgTag| (msg) (|ncTag| msg))

@

\defun{getMsgTag?}{getMsgTag?}
\calls{getMsgTag?}{IFCAR}
\calls{getMsgTag?}{getMsgTag}
<<defun getMsgTag?>>=
(defun |getMsgTag?| (|msg|)
 (ifcar (member (|getMsgTag| |msg|)
         (list '|line| '|old| '|error| '|warn| '|bug|
               '|unimple| '|remark| '|stat| '|say| '|debug|))))

@

\defun{line?}{line?}
\calls{line?}{getMsgTag}
<<defun line?>>=
(defun |line?| (msg) (eq (|getMsgTag| msg) '|line|))

@

\defun{leader?}{leader?}
\calls{leader?}{getMsgTag}
<<defun leader?>>=
(defun |leader?| (msg) (eq (|getMsgTag| msg) '|leader|))

@

\defun{toScreen?}{toScreen?}
\calls{toScreen?}{getMsgToWhere}
<<defun toScreen?>>=
(defun |toScreen?| (msg) (not (eq (|getMsgToWhere| msg) '|fileOnly|)))

@

\defun{ncSoftError}{ncSoftError}
Messages for the USERS of the compiler.
The program being compiled has a minor error.
Give a message and continue processing.
\calls{ncSoftError}{desiredMsg}
\calls{ncSoftError}{processKeyedError}
\calls{ncSoftError}{msgCreate}
\usesdollar{ncSoftError}{compErrorPrefix}
\usesdollar{ncSoftError}{newcompErrorCount}
<<defun ncSoftError>>=
(defun |ncSoftError| (pos erMsgKey erArgL &rest optAttr)
 (declare (special |$compErrorPrefix| |$newcompErrorCount|))
  (setq |$newcompErrorCount| (+ |$newcompErrorCount| 1))
  (when (|desiredMsg| erMsgKey)
   (|processKeyedError|
    (|msgCreate| '|error| pos erMsgKey erArgL
                  |$compErrorPrefix| optAttr))))

@

\defun{ncHardError}{ncHardError}
The program being compiled is seriously incorrect.
Give message and throw to a recovery point.
\calls{ncHardError}{desiredMsg}
\calls{ncHardError}{processKeyedError}
\calls{ncHardError}{msgCreate}
\calls{ncHardError}{ncError}
\usesdollar{ncHardError}{compErrorPrefix}
\usesdollar{ncHardError}{newcompErrorCount}
<<defun ncHardError>>=
(defun |ncHardError| (pos erMsgKey erArgL &rest optAttr)
 (let (erMsg)
 (declare (special |$compErrorPrefix| |$newcompErrorCount|))
  (setq |$newcompErrorCount| (+ |$newcompErrorCount| 1))
  (if (|desiredMsg| erMsgKey)
   (setq erMsg
    (|processKeyedError|
     (|msgCreate| '|error| pos erMsgKey erArgL |$compErrorPrefix| optAttr)))
   (|ncError|))))

@

\defun{desiredMsg}{desiredMsg}
\calls{desiredMsg}{isKeyQualityP}
<<defun desiredMsg>>=
(defun |desiredMsg| (erMsgKey &rest optCatFlag)
 (cond
  ((|isKeyQualityP| erMsgKey '|show|) t)
  ((|isKeyQualityP| erMsgKey '|stifle|) nil)
  ((null (null optCatFlag)) (car optCatFlag))
  (t t)))

@

\defvar{specificMsgTags}
<<initvars>>=
(defvar |$specificMsgTags| nil)

@

\defun{isKeyQualityP}{isKeyQualityP}
This seems dumb logic to me. There is nothing that iterates in the loop.
Thus the value is either found immediate or never found at all.
But if we ever enter the loop it would be infinite.
\begin{verbatim}
isKeyQualityP (key,qual)  ==
    --returns pair if found, else NIL
    found := false
    while not found and (qualPair := ASSOC(key,$specificMsgTags)) repeat
        if CDR qualPair = qual then found := true
    qualPair
\end{verbatim}
\usesdollar{isKeyQualityP}{specificMsgTags}
<<defun isKeyQualityP>>=
(defun |isKeyQualityP| (key qual)
 (let (qualPair found)
 (declare (special |$specificMsgTags|))
  (do ()
      ((not (and (null found)
                 (setq qualPair (assoc key |$specificMsgTags|))))
        nil)
   (when (equal (cdr qualPair) qual) (setq found t)))
  qualPair))

@

\defun{processKeyedError}{processKeyedError}
\calls{processKeyedError}{getMsgTag?}
\calls{processKeyedError}{getMsgKey}
\calls{processKeyedError}{getMsgPrefix?}
\calls{processKeyedError}{sayBrightly}
\calls{processKeyedError}{CallerName}
\calls{processKeyedError}{msgImPr?}
\calls{processKeyedError}{msgOutputter}
\usesdollar{processKeyedError}{ncMsgList}
<<defun processKeyedError>>=
(defun |processKeyedError| (msg)
 (prog (pre erMsg)
 (declare (special |$ncMsgList|))
  (cond
   ((eq (|getMsgTag?| msg) '|old|)
     (setq erMsg (|getMsgKey| msg))
     (cond
      ((setq pre (|getMsgPrefix?| msg))
        (setq erMsg (cons '|%b| (cons pre (cons '|%d| erMsg))))))
     (|sayBrightly| (cons "old msg from " (cons (|CallerName| 4) erMsg))))
   ((|msgImPr?| msg) (|msgOutputter| msg))
   (t (setq |$ncMsgList| (cons msg |$ncMsgList|))))))

@

\defun{msgOutputter}{msgOutputter}
\calls{msgOutputter}{getStFromMsg}
\calls{msgOutputter}{leader?}
\calls{msgOutputter}{line?}
\calls{msgOutputter}{toScreen?}
\calls{msgOutputter}{flowSegmentedMsg}
\calls{msgOutputter}{sayBrightly}
\calls{msgOutputter}{toFile?}
\calls{msgOutputter}{alreadyOpened?}
\usesdollar{msgOutputter}{loglength}
\usesdollar{msgOutputter}{linelength}
<<defun msgOutputter>>=
(defun |msgOutputter| (msg)
 (let (alreadyOpened shouldFlow st)
 (declare (special $loglength $linelength))
  (setq st (|getStFromMsg| msg))
  (setq shouldFlow (null (or (|leader?| msg) (|line?| msg))))
  (when (|toScreen?| msg)
    (when shouldFlow (setq st (|flowSegmentedMsg| st $linelength 0)))
    (|sayBrightly| st))
  (when (|toFile?| msg)
    (when shouldFlow (setq st (|flowSegmentedMsg| st $loglength 0)))
    (setq alreadyOpened (|alreadyOpened?| msg)))))

@

\defun{listOutputter}{listOutputter}
\calls{listOutputter}{msgOutputter}
<<defun listOutputter>>=
(defun |listOutputter| (outputList)
 (dolist (msg outputList)
  (|msgOutputter| msg)))

@

\defun{getStFromMsg}{getStFromMsg}
\calls{getStFromMsg}{setOptKeyBlanks}
\calls{getStFromMsg}{getPreStL}
\calls{getStFromMsg}{getMsgPrefix?}
\calls{getStFromMsg}{getMsgTag}
\calls{getStFromMsg}{getMsgText}
\calls{getStFromMsg}{getPosStL}
\calls{getStFromMsg}{getMsgKey?}
\calls{getStFromMsg}{pname}
\calls{getStFromMsg}{getMsgLitSym}
\calls{getStFromMsg}{tabbing}
\usesdollar{getStFromMsg}{showKeyNum}
\usesdollar{getStFromMsg}{optKeyBlanks}
<<defun getStFromMsg>>=
(defun |getStFromMsg| (msg)
 (let (|$optKeyBlanks| st optKey msgKey posStL preStL)
 (declare (special |$showKeyNum| |$optKeyBlanks|))
  (setq |$optKeyBlanks| "")
  (|setOptKeyBlanks|)
  (setq preStL (|getPreStL| (|getMsgPrefix?| msg)))
  (cond
   ((eq (|getMsgTag| msg) '|line|)
     (cons |$optKeyBlanks|
       (cons "%x1" (append preStL (cons (|getMsgText| msg) nil)))))
   (t
    (setq posStL (|getPosStL| msg))
    (setq optKey
      (cond
        (|$showKeyNum|
         (cond
          ((setq msgKey (|getMsgKey?| msg)) (pname msgKey))
          (t "no key  ")))
        (t "")))
    (setq st
     (cons posStL
      (cons (|getMsgLitSym| msg)
       (cons optKey
        (append preStL
         (cons (|tabbing| msg)
          (|getMsgText| msg)))))))))))

@

\defun{setOptKeyBlanks}{setOptKeyBlanks}
\usesdollar{setOptKeyBlanks}{optKeyBlanks}
\usesdollar{setOptKeyBlanks}{showKeyNum}
<<defun setOptKeyBlanks>>=
(defun |setOptKeyBlanks| ()
 (declare (special |$optKeyBlanks| |$showKeyNum|))
  (setq |$optKeyBlanks| (if |$showKeyNum| "%x8" "")))

@

\defun{getPreStL}{getPreStL}
\calls{getPreStL}{size}
\usesdollar{getPreStL}{preLength}
<<defun getPreStL>>=
(defun |getPreStL| (optPre)
 (let (spses extraPlaces)
 (declare (special |$preLength|))
  (cond
   ((null optPre) (list "  "))
   (t
    (setq spses
     (cond
      ((< 0 (setq extraPlaces (- (- |$preLength| (size optPre)) 3)))
       (make-string extraPlaces))
      (t "")))
    (list '|%b| optPre spses ":" '|%d|)))))

@

\defun{getPosStL}{getPosStL}
\calls{getPosStL}{showMsgPos?}
\calls{getPosStL}{getMsgPos}
\calls{getPosStL}{msgImPr?}
\calls{getPosStL}{decideHowMuch}
\calls{getPosStL}{listDecideHowMuch}
\calls{getPosStL}{ppos}
\calls{getPosStL}{remLine}
\calls{getPosStL}{remFile}
\usesdollar{getPosStL}{optKeyBlanks}
\usesdollar{getPosStL}{lastPos}
<<defun getPosStL>>=
(defun |getPosStL| (msg)
 (let (printedOrigin printedLineNum printedFileName fullPrintedPos howMuch 
       msgPos)
 (declare (special |$optKeyBlanks| |$lastPos|))
 (cond
  ((null (|showMsgPos?| msg)) "")
  (t
   (setq msgPos (|getMsgPos| msg))
   (setq howMuch
    (if (|msgImPr?| msg) 
     (|decideHowMuch| msgPos |$lastPos|)
     (|listDecideHowMuch| msgPos |$lastPos|)))
   (setq |$lastPos| msgPos)
   (setq fullPrintedPos (|ppos| msgPos))
   (setq printedFileName
    (cons "%x2" (cons "[" (append (|remLine| fullPrintedPos) (cons "]" nil)))))
   (setq printedLineNum
    (cons "%x2" (cons "[" (append (|remFile| fullPrintedPos) (cons "]" nil)))))
   (setq printedOrigin
    (cons "%x2" (cons "[" (append fullPrintedPos (cons "]" nil)))))
   (cond
    ((eq howMuch 'org)
     (cons |$optKeyBlanks| (append printedOrigin (cons '|%l| nil))))
    ((eq howMuch 'line)
     (cons |$optKeyBlanks| (append printedLineNum (cons '|%l| nil))))
    ((eq howMuch 'file)
     (cons |$optKeyBlanks| (append printedFileName (cons '|%l| nil))))
    ((eq howMuch 'all)
     (cons |$optKeyBlanks|
      (append printedFileName
       (cons '|%l|
        (cons |$optKeyBlanks|
         (append printedLineNum
          (cons '|%l| nil)))))))
    (t ""))))))

@

\defun{ppos}{ppos}
\calls{ppos}{pfNoPosition?}
\calls{ppos}{pfImmediate?}
\calls{ppos}{pfCharPosn}
\calls{ppos}{pfLinePosn}
\calls{ppos}{porigin}
\calls{ppos}{pfFileName}
<<defun ppos>>=
(defun |ppos| (p)
 (let (org lpos cpos)
  (cond
   ((|pfNoPosition?| p) (list "no position"))
   ((|pfImmediate?| p) (list "console"))
   (t
    (setq cpos (|pfCharPosn| p))
    (setq lpos (|pfLinePosn| p))
    (setq org (|porigin| (|pfFileName| p)))
    (list org " " "line" " " lpos)))))
 
@

\defun{remFile}{remFile}
\calls{remFile}{IFCDR}
\calls{remLine}{IFCAR}
<<defun remFile>>=
(defun |remFile| (positionList) (ifcdr (ifcdr positionList)))

@

\defun{showMsgPos?}{showMsgPos?}
\calls{showMsgPos?}{msgImPr?}
\calls{showMsgPos?}{leader?}
\usesdollar{showMsgPos?}{erMsgToss}
<<defun showMsgPos?>>=
(defun |showMsgPos?| (msg)
 (declare (special |$erMsgToss|))
 (or |$erMsgToss| (and (null (|msgImPr?| msg)) (null (|leader?| msg)))))

@

\defun{msgImPr?}{msgImPr?}
\calls{msgImPr?}{getMsgCatAttr}
<<defun msgImPr?>>=
(defun |msgImPr?| (msg)
 (eq (|getMsgCatAttr| msg '|$imPrGuys|) '|imPr|))

@

\defun{getMsgCatAttr}{getMsgCatAttr}
\calls{getMsgCatAttr}{ifcdr}
\calls{getMsgCatAttr}{qassq}
\calls{getMsgCatAttr}{ncAlist}
<<defun getMsgCatAttr>>=
(defun |getMsgCatAttr| (msg cat)
 (ifcdr (qassq cat (|ncAlist| msg))))

@

\defun{getMsgPos}{getMsgPos}
\calls{getMsgPos}{getMsgFTTag?}
\calls{getMsgPos}{getMsgPosTagOb}
<<defun getMsgPos>>=
(defun |getMsgPos| (msg)
 (if (|getMsgFTTag?| msg)
  (cadr (|getMsgPosTagOb| msg))
  (|getMsgPosTagOb| msg)))

@

\defun{getMsgFTTag?}{getMsgFTTag?}
\calls{getMsgFTTag?}{ifcar}
\calls{getMsgFTTag?}{getMsgPosTagOb}
<<defun getMsgFTTag?>>=
(defun |getMsgFTTag?| (msg)
 (ifcar (member (ifcar (|getMsgPosTagOb| msg)) (list 'from 'to 'fromto))))

@

\defun{decideHowMuch}{decideHowMuch}
When printing a msg, we wish not to show pos information that was
shown for a previous msg with identical pos info.
org prints out the word noposition or console
\calls{decideHowMuch}{poNopos?}
\calls{decideHowMuch}{poPosImmediate?}
\calls{decideHowMuch}{poFileName}
\calls{decideHowMuch}{poLinePosn}
<<defun decideHowMuch>>=
(defun |decideHowMuch| (pos oldPos)
 (cond
  ((or (and (|poNopos?| pos) (|poNopos?| oldPos))
       (and (|poPosImmediate?| pos) (|poPosImmediate?| oldPos)))
    'none)
  ((or (|poNopos?| pos) (|poPosImmediate?| pos)) 'org)
  ((or (|poNopos?| oldPos) (|poPosImmediate?| oldPos)) 'all)
  ((not (equal (|poFileName| oldPos) (|poFileName| pos))) 'all)
  ((not (equal (|poLinePosn| oldPos) (|poLinePosn| pos))) 'line)
  (t 'none)))

@

\defun{poNopos?}{poNopos?}
<<defun poNopos?>>=
(defun |poNopos?| (posn)
 (equal posn (list '|noposition|)))

@

\defun{poPosImmediate?}{poPosImmediate?}
\calls{poPosImmediate?}{poNopos?}
\calls{poPosImmediate?}{lnImmediate?}
\calls{poPosImmediate?}{poGetLineObject}
<<defun poPosImmediate?>>=
(defun |poPosImmediate?| (txp)
 (unless (|poNopos?| txp) (|lnImmediate?| (|poGetLineObject| txp))))

@

\defun{poFileName}{poFileName}
\calls{poFileName}{lnFileName}
\calls{poFileName}{poGetLineObject}
<<defun poFileName>>=
(defun |poFileName| (posn)
 (if posn
  (|lnFileName| (|poGetLineObject| posn))
  (caar posn)))

@

\defun{poGetLineObject}{poGetLineObject}
<<defun poGetLineObject>>=
(defun |poGetLineObject| (posn)
 (car posn))

@

\defun{poLinePosn}{poLinePosn}
\calls{poLinePosn}{lnLocalNum}
\calls{poLinePosn}{poGetLineObject}
<<defun poLinePosn>>=
(defun |poLinePosn| (posn)
 (if posn
  (|lnLocalNum| (|poGetLineObject| posn))
  (cdar posn)))

@

\defun{listDecideHowMuch}{listDecideHowMuch}
\calls{listDecideHowMuch}{poNopos?}
\calls{listDecideHowMuch}{poPosImmediate?}
\calls{listDecideHowMuch}{poGlobalLinePosn}
<<defun listDecideHowMuch>>=
(defun |listDecideHowMuch| (pos oldPos)
 (cond
  ((or (and (|poNopos?| pos) (|poNopos?| oldPos))
       (and (|poPosImmediate?| pos) (|poPosImmediate?| oldPos)))
    'none)
  ((|poNopos?| pos) 'org)
  ((|poNopos?| oldPos) 'none)
  ((< (|poGlobalLinePosn| pos) (|poGlobalLinePosn| oldPos))
   (if (|poPosImmediate?| pos) 'org 'line))
  (t 'none)))

@

\defun{remLine}{remLine}
<<defun remLine>>=
(defun |remLine| (positionList) (list (ifcar positionList)))

@

\defun{getMsgKey?}{getMsgKey?}
\calls{getMsgKey?}{identp}
<<defun getMsgKey?>>=
(defun |getMsgKey?| (msg)
 (let ((val (|getMsgKey| msg)))
  (when (identp val) val)))

@

\defun{getMsgLitSym}{getMsgLitSym}
\calls{getMsgLitSym}{getMsgKey?}
<<defun getMsgLitSym>>=
(defun |getMsgLitSym| (msg)
 (if (|getMsgKey?| msg) " " "*"))

@

\defun{tabbing}{tabbing}
\calls{tabbing}{getMsgPrefix?}
\usesdollar{tabbing}{showKeyNum}
\usesdollar{tabbing}{preLength}
<<defun tabbing>>=
(defun |tabbing| (msg)
 (let (chPos)
 (declare (special |$showKeyNum| |$preLength|))
  (setq chPos 2)
  (when (|getMsgPrefix?| msg) (setq chPos (- (+ chPos |$preLength|) 1)))
  (when |$showKeyNum| (setq chPos (+ chPos 8)))
  (cons '|%t| chPos)))

@

\defun{getMsgToWhere}{getMsgToWhere}
\calls{getMsgToWhere}{getMsgCatAttr}
<<defun getMsgToWhere>>=
(defun |getMsgToWhere| (msg) (|getMsgCatAttr| msg '|$toWhereGuys|))

@

\defun{toFile?}{toFile?}
\calls{toFile?}{getMsgToWhere}
\usesdollar{toFile?}{fn}
<<defun toFile?>>=
(defun |toFile?| (msg)
 (declare (special |$fn|))
 (and (consp |$fn|) (not (eq (|getMsgToWhere| msg) '|screenOnly|))))

@

\defun{alreadyOpened?}{alreadyOpened?}
\calls{alreadyOpened?}{msgImPr?}
<<defun alreadyOpened?>>=
(defun |alreadyOpened?| (msg) (null (|msgImPr?| msg)))

@

\defun{setMsgForcedAttrList}{setMsgForcedAttrList}
\calls{setMsgForcedAttrList}{setMsgForcedAttr}
\calls{setMsgForcedAttrList}{whichCat}
<<defun setMsgForcedAttrList>>=
(defun |setMsgForcedAttrList| (msg attrlist)
 (dolist (attr attrlist)
  (|setMsgForcedAttr| msg (|whichCat| attr) attr)))

@

\defun{setMsgForcedAttr}{setMsgForcedAttr}
\calls{setMsgForcedAttr}{setMsgCatlessAttr}
\calls{setMsgForcedAttr}{ncPutQ}
<<defun setMsgForcedAttr>>=
(defun |setMsgForcedAttr| (msg cat attr)
 (if (eq cat '|catless|)
  (|setMsgCatlessAttr| msg attr)
  (|ncPutQ| msg cat attr)))

@

\defun{whichCat}{whichCat}
\calls{whichCat}{ListMember?}
\usesdollar{whichCat}{attrCats}
<<defun whichCat>>=
(defun |whichCat| (attr)
 (let ((found '|catless|) done)
 (declare (special |$attrCats|))
  (loop for cat in |$attrCats| do
    (when (|ListMember?| attr (eval cat))
     (setq found cat)
     (setq done t))
   until done)
  found))

@

\defun{setMsgCatlessAttr}{setMsgCatlessAttr}
\tpdhere{Changed from |catless| to '|catless|}
\calls{setMsgCatlessAttr}{ncPutQ}
\calls{setMsgCatlessAttr}{ifcdr}
\calls{setMsgCatlessAttr}{qassq}
\calls{setMsgCatlessAttr}{ncAlist}
<<defun setMsgCatlessAttr>>=
(defun |setMsgCatlessAttr| (msg attr)
 (|ncPutQ| msg '|catless|      
  (cons attr (ifcdr (qassq |catless| (|ncAlist| msg))))))

@

\defun{putDatabaseStuff}{putDatabaseStuff}
\tpdhere{The variable al is undefined}
\calls{putDatabaseStuff}{getMsgInfoFromKey}
\calls{putDatabaseStuff}{setMsgUnforcedAttrList}
\calls{putDatabaseStuff}{setMsgText}
<<defun putDatabaseStuff>>=
(defun |putDatabaseStuff| (msg)
 (let (attributes text tmp)
  (setq tmp (|getMsgInfoFromKey| msg))
  (setq text (car tmp))
  (setq attributes (cadr tmp))
  (when attributes (|setMsgUnforcedAttrList| msg al))
  (|setMsgText| msg text)))

@

\defun{getMsgInfoFromKey}{getMsgInfoFromKey}
\calls{getMsgInfoFromKey}{getMsgKey?}
\calls{getMsgInfoFromKey}{getErFromDbL}
\calls{getMsgInfoFromKey}{getMsgKey}
\calls{getMsgInfoFromKey}{segmentKeyedMsg}
\calls{getMsgInfoFromKey}{removeAttributes}
\calls{getMsgInfoFromKey}{substituteSegmentedMsg}
\calls{getMsgInfoFromKey}{getMsgArgL}
\usesdollar{getMsgInfoFromKey}{msgDatabaseName}
\usesdollar{getMsgInfoFromKey}{erGlbMsgDatabaseName}
\usesdollar{getMsgInfoFromKey}{erLocMsgDatabaseName}
<<defun getMsgInfoFromKey>>=
(defun |getMsgInfoFromKey| (msg)
 (let (|$msgDatabaseName| attributes tmp msgText dbl msgKey)
 (declare (special |$msgDatabaseName| |$erGlbMsgDatabaseName|
                   |$erLocMsgDatabaseName|))
  (setq |$msgDatabaseName| nil)
  (setq msgText
   (cond
    ((setq msgKey (|getMsgKey?| msg))
     (setq dbl (list |$erLocMsgDatabaseName| |$erGlbMsgDatabaseName|))
     (|getErFromDbL| msgKey dbl))
    (t (|getMsgKey| msg))))
  (setq msgText (|segmentKeyedMsg| msgText))
  (setq tmp (|removeAttributes| msgText))
  (setq msgText (car tmp))
  (setq attributes (cadr tmp))
  (setq msgText (|substituteSegmentedMsg| msgText (|getMsgArgL| msg)))
  (list msgText attributes)))

@

\defun{getErFromDbL}{getErFromDbL}
\begin{verbatim}
;getErFromDbL (erMsgKey,dbL) ==
;    erMsg := NIL
;    while null erMsg   repeat
;        dbName := CAR dbL
;        dbL    := CDR dbL
;        $msgDatabaseName      := dbName
;        lastName := null dbL
;--        fileFound := '"co_-eng.msgs"
;        fileFound := '"s2_-us.msgs"
;        if fileFound or lastName then
;            erMsg := fetchKeyedMsg(erMsgKey,not lastName)
;    erMsg
\end{verbatim}
\usesdollar{getErFromDbL}{msgDatabaseName}
<<defun getErFromDbL>>=
(defun |getErFromDbL| (erMsgKey dbL)
 (let (fileFound lastName dbName erMsg)
 (declare (special |$msgDatabaseName|))
  ((lambda ()
   (loop
    (cond
     (erMsg (return nil))
     (t
      (setq dbName (car dbl))
      (setq dbl (cdr dbl))
      (setq |$msgDatabaseName| dbName)
      (setq lastName (null dbl))
      (setq fileFound "s2-us.msgs")
      (cond
       ((or fileFound lastName)
        (setq erMsg (|fetchKeyedMsg| erMsgKey (null lastName))))))))))
  erMsg))

@

\defun{setMsgUnforcedAttrList}{setMsgUnforcedAttrList}
\calls{setMsgUnforcedAttrList}{setMsgUnforcedAttr}
\calls{setMsgUnforcedAttrList}{whichCat}
<<defun setMsgUnforcedAttrList>>=
(defun |setMsgUnforcedAttrList| (msg attrlist)
 (dolist (attr attrlist)
  (|setMsgUnforcedAttr| msg (|whichCat| attr) attr)))

@

\defun{setMsgUnforcedAttr}{setMsgUnforcedAttr}
\calls{setMsgUnforcedAttr}{setMsgCatlessAttr}
\calls{setMsgUnforcedAttr}{qassq}
\calls{setMsgUnforcedAttr}{ncAlist}
\calls{setMsgUnforcedAttr}{ncPutQ}
<<defun setMsgUnforcedAttr>>=
(defun |setMsgUnforcedAttr| (msg cat attr)
 (cond
  ((eq cat '|catless|) (|setMsgCatlessAttr| msg attr))
  ((null (qassq cat (|ncAlist| msg))) (|ncPutQ| msg cat attr))))

@

\defun{initImPr}{initImPr}
\calls{initImPr}{memq}
\calls{initImPr}{getMsgTag}
\calls{initImPr}{setMsgUnforcedAttr}
\usesdollar{initImPr}{imPrTagGuys}
\usesdollar{initImPr}{erMsgToss}
<<defun initImPr>>=
(defun |initImPr| (msg)
 (declare (special |$imPrTagGuys| |$erMsgToss|))
 (when (or |$erMsgToss| (memq (|getMsgTag| msg) |$imPrTagGuys|))
   (|setMsgUnforcedAttr| msg '|$imPrGuys| '|imPr|)))

@

\defun{initToWhere}{initToWhere}
\calls{initToWhere}{getMsgCatAttr}
\calls{initToWhere}{setMsgUnforcedAttr}
<<defun initToWhere>>=
(defun |initToWhere| (msg)
 (if (member '|trace| (|getMsgCatAttr| msg '|catless|))
   (|setMsgUnforcedAttr| msg '|$toWhereGuys| '|screenOnly|)))

@

\defun{ncBug}{ncBug}
Bug in the compiler: something which shouldn't have happened did.
\calls{ncBug}{processKeyedError}
\calls{ncBug}{msgCreate}
\calls{ncBug}{enable-backtrace}
\calls{ncBug}{ncAbort}
\usesdollar{ncBug}{compBugPrefix}
\usesdollar{ncBug}{nopos}
\usesdollar{ncBug}{newcompErrorCount}
<<defun ncBug>>=
(defun |ncBug| (erMsgKey erArgL &rest optAttr)
 (let (erMsg)
 (declare (special |$compBugPrefix| |$nopos| |$newcompErrorCount|))
  (setq |$newcompErrorCount| (+ |$newcompErrorCount| 1))
  (setq erMsg
   (|processKeyedError|
    (|msgCreate| '|bug| |$nopos| erMsgKey erArgL |$compBugPrefix| optAttr)))
  (enable-backtrace nil)
  (break)
  (|ncAbort|)))

@

\defun{processMsgList}{processMsgList}
\calls{processMsgList}{erMsgSort}
\calls{processMsgList}{makeMsgFromLine}
\calls{processMsgList}{poGlobalLinePosn}
\calls{processMsgList}{getMsgPos}
\calls{processMsgList}{queueUpErrors}
\calls{processMsgList}{listOutputter}
\usesdollar{processMsgList}{noRepList}
\usesdollar{processMsgList}{outputList}
<<defun processMsgList>>=
(defun |processMsgList| (erMsgList lineList)
 (let (|$noRepList| |$outputList| st globalNumOfLine msgLine)
 (declare (special |$noRepList| |$outputList|))
  (setq |$outputList| nil)
  (setq |$noRepList| nil)
  (setq erMsgList (|erMsgSort| erMsgList))
  (dolist (line lineList)
   (setq msgLine (|makeMsgFromLine| line))
   (setq |$outputList| (cons msgLine |$outputList|))
   (setq globalNumOfLine (|poGlobalLinePosn| (|getMsgPos| msgLine)))
   (setq erMsgList (|queueUpErrors| globalNumOfLine erMsgList)))
  (setq |$outputList| (append erMsgList |$outputList|))
  (setq st "---------SOURCE-TEXT-&-ERRORS------------------------")
  (|listOutputter| (reverse |$outputList|))))

@

\defun{erMsgSort}{erMsgSort}
\calls{erMsgSort}{erMsgSep}
\calls{erMsgSort}{listSort}
<<defun erMsgSort>>=
(defun |erMsgSort| (erMsgList)
 (let (msgWOPos msgWPos tmp)
  (setq tmp (|erMsgSep| erMsgList))
  (setq msgWPos (car tmp))
  (setq msgWOPos (cadr tmp))
  (setq msgWPos (|listSort| #'|erMsgCompare| msgWPos))
  (setq msgWOPos (reverse msgWOPos))
  (append msgWPos msgWOPos)))

@

\defun{erMsgCompare}{erMsgCompare}
\calls{erMsgCompare}{compareposns}
\calls{erMsgCompare}{getMsgPos}
<<defun erMsgCompare>>=
(defun |erMsgCompare| (ob1 ob2)
 (|compareposns| (|getMsgPos| ob2) (|getMsgPos| ob1)))

@

\defun{compareposns}{compareposns}
\calls{compareposns}{poGlobalLinePosn}
\calls{compareposns}{poCharPosn}
<<defun compareposns>>=
(defun |compareposns| (a b)
 (let (c d)
  (setq c (|poGlobalLinePosn| a))
  (setq d (|poGlobalLinePosn| b))
  (if (equal c d) 
   (not (< (|poCharPosn| a) (|poCharPosn| b)))
   (not (< c d)))))

@

\defun{erMsgSep}{erMsgSep}
\calls{erMsgSep}{poNopos?}
\calls{erMsgSep}{getMsgPos}
<<defun erMsgSep>>=
(defun |erMsgSep| (erMsgList)
 (let (msgWOPos msgWPos)
  (dolist (msg erMsgList)
   (if (|poNopos?| (|getMsgPos| msg))
    (setq msgWOPos (cons msg msgWOPos))
    (setq msgWPos (cons msg msgWPos))))
  (list msgWPos msgWOPos)))

@

\defun{makeMsgFromLine}{makeMsgFromLine}
\calls{makeMsgFromLine}{getLinePos}
\calls{makeMsgFromLine}{getLineText}
\calls{makeMsgFromLine}{poGlobalLinePosn}
\calls{makeMsgFromLine}{stringimage}
\calls{makeMsgFromLine}{poLinePosn}
\calls{makeMsgFromLine}{strconc}
\calls{makeMsgFromLine}{rep}
\calls{makeMsgFromLine}{char}
\calls{makeMsgFromLine}{size}
\usesdollar{makeMsgFromLine}{preLength}
<<defun makeMsgFromLine>>=
(defun |makeMsgFromLine| (line)
 (let (localNumOfLine stNum globalNumOfLine textOfLine posOfLine)
 (declare (special |$preLength|))
  (setq posOfLine (|getLinePos| line))
  (setq textOfLine (|getLineText| line))
  (setq globalNumOfLine (|poGlobalLinePosn| posOfLine))
  (setq stNum (stringimage (|poLinePosn| posOfLine)))
  (setq localNumOfLine
    (strconc (|rep| #\space (- |$preLength| 7 (size stNum))) stNum))
  (list '|line| posOfLine nil nil (strconc "Line" localNumOfLine) textOfLine)))

@

\defun{rep}{rep}
\tpdhere{This function should be replaced by fillerspaces}
<<defun rep>>=
(defun |rep| (c n)
 (if (< 0 n)
  (make-string n :initial-element (character c))
  ""))

@

\defun{getLinePos}{getLinePos}
<<defun getLinePos>>=
(defun |getLinePos| (line) (car line))

@

\defun{getLineText}{getLineText}
<<defun getLineText>>=
(defun |getLineText| (line) (cdr line))

@

\defun{queueUpErrors}{queueUpErrors}
\begin{verbatim}
;queueUpErrors(globalNumOfLine,msgList)==
;    thisPosMsgs  := []
;    notThisLineMsgs := []
;    for msg in msgList _
;      while thisPosIsLess(getMsgPos msg,globalNumOfLine) repeat
;    --these are msgs that refer to positions from earlier compilations
;        if not redundant (msg,notThisPosMsgs) then
;           notThisPosMsgs := [msg,:notThisPosMsgs]
;        msgList := rest msgList
;    for msg in msgList _
;      while thisPosIsEqual(getMsgPos msg,globalNumOfLine) repeat
;       if not redundant (msg,thisPosMsgs) then
;           thisPosMsgs := [msg,:thisPosMsgs]
;       msgList := rest msgList
;    if thisPosMsgs then
;        thisPosMsgs := processChPosesForOneLine  thisPosMsgs
;        $outputList := NCONC(thisPosMsgs,$outputList)
;    if notThisPosMsgs then
;        $outputList := NCONC(notThisPosMsgs,$outputList)
;    msgList
\end{verbatim}
\calls{queueUpErrors}{processChPosesForOneLine}
\usesdollar{queueUpErrors}{outputList}
<<defun queueUpErrors>>=
(DEFUN |queueUpErrors| (|globalNumOfLine| |msgList|)
  (PROG (|notThisPosMsgs| |notThisLineMsgs| |thisPosMsgs|)
    (DECLARE (SPECIAL |$outputList|))
    (RETURN
      (PROGN
        (SETQ |thisPosMsgs| NIL)
        (SETQ |notThisLineMsgs| NIL)
        ((LAMBDA (|bfVar#7| |msg|)
           (LOOP
             (COND
               ((OR (ATOM |bfVar#7|)
                    (PROGN (SETQ |msg| (CAR |bfVar#7|)) NIL)
                    (NOT (|thisPosIsLess| (|getMsgPos| |msg|)
                             |globalNumOfLine|)))
                (RETURN NIL))
               ('T
                (PROGN
                  (COND
                    ((NULL (|redundant| |msg| |notThisPosMsgs|))
                     (SETQ |notThisPosMsgs|
                           (CONS |msg| |notThisPosMsgs|))))
                  (SETQ |msgList| (CDR |msgList|)))))
             (SETQ |bfVar#7| (CDR |bfVar#7|))))
         |msgList| NIL)
        ((LAMBDA (|bfVar#8| |msg|)
           (LOOP
             (COND
               ((OR (ATOM |bfVar#8|)
                    (PROGN (SETQ |msg| (CAR |bfVar#8|)) NIL)
                    (NOT (|thisPosIsEqual| (|getMsgPos| |msg|)
                             |globalNumOfLine|)))
                (RETURN NIL))
               ('T
                (PROGN
                  (COND
                    ((NULL (|redundant| |msg| |thisPosMsgs|))
                     (SETQ |thisPosMsgs| (CONS |msg| |thisPosMsgs|))))
                  (SETQ |msgList| (CDR |msgList|)))))
             (SETQ |bfVar#8| (CDR |bfVar#8|))))
         |msgList| NIL)
        (COND
          (|thisPosMsgs|
              (SETQ |thisPosMsgs|
                    (|processChPosesForOneLine| |thisPosMsgs|))
              (SETQ |$outputList| (NCONC |thisPosMsgs| |$outputList|))))
        (COND
          (|notThisPosMsgs|
              (SETQ |$outputList|
                    (NCONC |notThisPosMsgs| |$outputList|))))
        |msgList|))))

@

\defun{thisPosIsLess}{thisPosIsLess}
\calls{thisPosIsLess}{poNopos?}
\calls{thisPosIsLess}{poGlobalLinePosn}
<<defun thisPosIsLess>>=
(defun |thisPosIsLess| (pos num)
 (unless (|poNopos?| pos) (< (|poGlobalLinePosn| pos) num)))

@

\defun{thisPosIsEqual}{thisPosIsEqual}
\calls{thisPosIsEqual}{poNopos?}
\calls{thisPosIsEqual}{poGlobalLinePosn}
<<defun thisPosIsEqual>>=
(defun |thisPosIsEqual| (pos num)
 (unless (|poNopos?| pos) (equal (|poGlobalLinePosn| pos) num)))

@

\defun{redundant}{redundant}
\begin{verbatim}
redundant(msg,thisPosMsgs) ==
    found := NIL
    if msgNoRep? msg then
        for item in $noRepList repeat
            sameMsg?(msg,item) => return (found := true)
        $noRepList := [msg,$noRepList]
    found or MEMBER(msg,thisPosMsgs)
\end{verbatim}
\calls{redundant}{msgNoRep?}
\calls{redundant}{sameMsg?}
\usesdollar{redundant}{noRepList}
<<defun redundant>>=
(defun |redundant| (msg thisPosMsgs)
 (prog (found)
 (declare (special |$noRepList|))
  (return
   (progn
    (cond
     ((|msgNoRep?| msg)
      ((lambda (Var9 item)
       (loop
        (cond
         ((or (atom Var9) (progn (setq item (car Var9)) nil))
           (return nil))
         (t
          (cond
           ((|sameMsg?| msg item) (return (setq found t))))))
        (setq Var9 (cdr Var9))))
       |$noRepList| nil)
      (setq |$noRepList| (list msg |$noRepList|))))
   (or found (member msg thisPosMsgs))))))

@

\defun{msgNoRep?}{msgNoRep?}
\calls{msgNoRep?}{getMsgCatAttr}
<<defun msgNoRep?>>=
(defun |msgNoRep?| (msg) (eq (|getMsgCatAttr| msg '|$repGuys|) '|noRep|))

@

\defun{sameMsg?}{sameMsg?}
\calls{sameMsg?}{getMsgKey}
\calls{sameMsg?}{getMsgArgL}
<<defun sameMsg?>>=
(defun |sameMsg?| (msg1 msg2)
 (and (equal (|getMsgKey| msg1) (|getMsgKey| msg2))
      (equal (|getMsgArgL| msg1) (|getMsgArgL| msg2))))

@

\defun{processChPosesForOneLine}{processChPosesForOneLine}
\calls{processChPosesForOneLine}{posPointers}
\calls{processChPosesForOneLine}{getMsgFTTag?}
\calls{processChPosesForOneLine}{putFTText}
\calls{processChPosesForOneLine}{poCharPosn}
\calls{processChPosesForOneLine}{getMsgPos}
\calls{processChPosesForOneLine}{getMsgPrefix}
\calls{processChPosesForOneLine}{setMsgPrefix}
\calls{processChPosesForOneLine}{strconc}
\calls{processChPosesForOneLine}{size}
\calls{processChPosesForOneLine}{makeLeaderMsg}
\usesdollar{processChPosesForOneLine}{preLength}
<<defun processChPosesForOneLine>>=
(defun |processChPosesForOneLine| (msgList)
 (let (leaderMsg oldPre posLetter chPosList)
 (declare (special |$preLength|))
  (setq chPosList (|posPointers| msgList))
  (dolist (msg msgList)
   (when (|getMsgFTTag?| msg) (|putFTText| msg chPosList))
   (setq posLetter (cdr (assoc (|poCharPosn| (|getMsgPos| msg)) chPosList)))
   (setq oldPre (|getMsgPrefix| msg))
   (|setMsgPrefix| msg
    (strconc oldPre
     (make-string (- |$preLength| 4 (size oldPre))) posLetter)))
  (setq leaderMsg (|makeLeaderMsg| chPosList))
  (nconc msgList (list leaderMsg))))

@

\defun{poCharPosn}{poCharPosn}
<<defun poCharPosn>>=
(defun |poCharPosn| (posn)
 (cdr posn))
@

\defun{makeLeaderMsg}{makeLeaderMsg}
\begin{verbatim}
makeLeaderMsg chPosList ==
    st := MAKE_-FULL_-CVEC ($preLength- 3)
    oldPos := -1
    for [posNum,:posLetter] in reverse chPosList repeat
        st := STRCONC(st, _
            rep(char ".", (posNum - oldPos - 1)),posLetter)
        oldPos := posNum
    ['leader,$nopos,'nokey,NIL,NIL,[st] ]
\end{verbatim}
\usesdollar{makeLeaderMsg}{nopos}
\usesdollar{makeLeaderMsg}{preLength}
<<defun makeLeaderMsg>>=
(defun |makeLeaderMsg| (chPosList)
 (let (posLetter posNum oldPos st)
 (declare (special |$nopos| |$preLength|))
  (setq st (make-string (- |$preLength| 3)))
  (setq oldPos -1)
  ((lambda (Var15 Var14)
   (loop
    (cond
     ((or (atom Var15) (progn (setq Var14 (car Var15)) nil))
       (return nil))
     (t
      (and (consp Var14)
           (progn
            (setq posNum (car Var14))
            (setq posLetter (cdr Var14))
            t)
           (progn
            (setq st 
             (strconc st (|rep| (|char| '|.|) (- posNum oldPos 1)) posLetter))
            (setq oldPos posNum)))))
    (setq Var15 (cdr Var15))))
   (reverse chPosList) nil)
  (list '|leader| |$nopos| '|nokey| nil nil (list st))))

@

\defun{posPointers}{posPointers}
\tpdhere{getMsgFTTag is nonsense}
\calls{posPointers}{poCharPosn}
\calls{posPointers}{getMsgPos}
\calls{posPointers}{IFCAR}
\calls{posPointers}{getMsgPos2}
\calls{posPointers}{insertPos}
<<defun posPointers>>=
(defun |posPointers| (msgList)
 (let (posLetterList pos ftPosList posList increment pointers)
  (setq pointers "ABCDEFGHIJKLMONPQRS")
  (setq increment 0)
  (dolist (msg msgList)
   (setq pos (|poCharPosn| (|getMsgPos| msg)))
   (unless (equal pos (ifcar posList))
    (setq posList (cons pos posList)))
   ; this should probably read TPDHERE
   ; (when (eq (|getMsgPosTagOb| msg) 'fromto)
   (when (eq |getMsgFTTag| 'fromto)
    (setq ftPosList (cons (|poCharPosn| (|getMsgPos2| msg)) ftPosList))))
  (dolist (toPos ftPosList)
   (setq posList (|insertPos| toPos posList)))
  (dolist (pos posList)
   (setq posLetterList
    (cons (cons pos (elt pointers increment)) posLetterList))
   (setq increment (+ increment 1)))
  posLetterList))

@

\defun{getMsgPos2}{getMsgPos2}
\calls{getMsgPos2}{getMsgFTTag?}
\calls{getMsgPos2}{getMsgPosTagOb}
\calls{getMsgPos2}{ncBug}
<<defun getMsgPos2>>=
(defun |getMsgPos2| (msg)
 (if (|getMsgFTTag?| msg)
  (caddr (|getMsgPosTagOb| msg))
  (|ncBug| "not a from to" nil)))

@

\defun{insertPos}{insertPos}
This function inserts a position in the proper place of a position list.
This is used for the 2nd pos of a fromto
\calls{insertPos}{done}
<<defun insertPos>>=
(defun |insertPos| (newPos posList)
 (let (pos top bot done)
 (setq bot (cons 0 posList))
 (do () (done)
  (setq top (cons (car bot) top))
  (setq bot (cdr bot))
  (setq pos (car bot))
  (setq done
   (cond
    ((< pos newPos) nil)
    ((equal pos newPos) t)
    ((< newPos pos)
     (setq top (cons newPos top))
     t))))
 (cons (cdr (reverse top)) bot)))

@

\defun{putFTText}{putFTText}
\calls{putFTText}{getMsgFTTag?}
\calls{putFTText}{poCharPosn}
\calls{putFTText}{getMsgPos}
\calls{putFTText}{setMsgText}
\calls{putFTText}{getMsgText}
\calls{putFTText}{getMsgPos2}
<<defun putFTText>>=
(defun |putFTText| (msg chPosList)
 (let (charMarker2 pos2 markingText charMarker pos tag)
  (setq tag (|getMsgFTTag?| msg))
  (setq pos (|poCharPosn| (|getMsgPos| msg)))
  (setq charMarker (cdr (assoc pos chPosList)))
  (cond
   ((eq tag 'from)
    (setq markingText (list "(from " charMarker " and on) "))
    (|setMsgText| msg (append markingText (|getMsgText| msg))))
   ((eq tag 'to)
    (setq markingText (list "(up to " charMarker ") "))
    (|setMsgText| msg (append markingText (|getMsgText| msg))))
   ((eq tag 'fromto)
    (setq pos2 (|poCharPosn| (|getMsgPos2| msg)))
    (setq charMarker2 (cdr (assoc pos2 chPosList)))
    (setq markingText (list "(from " charMarker " up to " charMarker2 ") "))
    (|setMsgText| msg (append markingText (|getMsgText| msg)))))))

@

\defun{From}{From}
This is called from parameter list of nc message functions
<<defun From>>=
(defun |From| (pos) (list 'from pos))

@

\defun{To}{To}
This is called from parameter list of nc message functions
<<defun To>>=
(defun |To| (pos) (list 'to pos))

@

\defun{FromTo}{FromTo}
This is called from parameter list of nc message functions
<<defun FromTo>>=
(defun |FromTo| (pos1 pos2) (list 'fromto pos1 pos2))

@

\chapter{The Interpreter Syntax}
\section{syntax assignment}
\label{assignment}
\index{assignment}
\index{syntax!assignment}
\index{assignment!syntax}
<<assignment.help>>=

Immediate, Delayed, and Multiple Assignment

====================================================================
Immediate Assignment
====================================================================

A variable in Axiom refers to a value. A variable has a name beginning
with an uppercase or lowercase alphabetic character, "%", or "!".
Successive characters (if any) can be any of the above, digits, or "?".
Case is distinguished. The following are all examples of valid, distinct
variable names:

  a       tooBig?     a1B2c3%!?
  A       %j          numberOfPoints
  beta6   %J          numberofpoints

The ":=" operator is the immediate assignment operator. Use it to 
associate a value with a variable. The syntax for immediate assignment
for a single variable is:

   variable := expression

The value returned by an immediate assignment is the value of expression.

  a := 1
    1             
           Type: PositiveInteger

The right-hand side of the expression is evaluated, yielding 1. The value
is then assigned to a.

  b := a
    1             
           Type: PositiveInteger

The right-hand side of the expression is evaluated, yieldig 1. This value
is then assigned to b. Thus a and b both have the value 1 after the sequence
of assignments.

  a := 2
    2
           Type: PositiveInteger

What is the value of b if a is assigned the value 2?

  b
    1
           Type: PositiveInteger

The value of b is left unchanged.

This is what we mean when we say this kind of assignment is immediate.
The variable b has no dependency on a after the initial assignment. This
is the usual notion of assignment in programming languages such as C,
Pascal, and Fortran.

====================================================================
Delayed Assignment
====================================================================

Axiom provides delayed assignment with "==". This implements a delayed
evaluation of the right-hand side and dependency checking. The syntax for
delayed assignment is

   variable == expression

The value returned by a delayed assignment is the unique value of Void.

  a == 1
           Type: Void

  b == a
           Type: Void

Using a and b as above, these are the corresponding delayed assignments.

  a
   Compiling body of rule a to compute value of type PositiveInteger
   1
           Type: PositiveInteger

The right-hand side of each delayed assignment is left unevaluated until
the variables on the left-hand sides are evaluated. 

  b
   Compiling body of rule b to compute value of type PositiveInteger
   1
           Type: PositiveInteger

This gives the same results as before. But if we change a to 2

  a == 2
   Compiled code for a has been cleared.
   Compiled code for b has been cleared.
   1 old definition(s) deleted for function or rule a
           Type: Void

Then a evaluates to 2, as expected

  a
   Compiling body of rule a to compute value of type PositiveInteger
   2
           Type: PositiveInteger

but the value of b reflects the change to a

  b
   Compiling body of rule b to compute value of type PositiveInteger
   2
           Type: PositiveInteger

====================================================================
Multiple Immediate Assignments
====================================================================

It is possible to set several variables at the same time by using a
tuple of variables and a tuple of expressions. A tuple is a collection
of things separated by commas, often surrounded by parentheses. The
syntax for multiple immediate assignment is

 ( var1, var2, ..., varN ) := ( expr1, expr2, ..., exprN )

The value returned by an immediate assignment is the value of exprN.

 ( x, y ) := ( 1, 2 )
   2
           Type: PositiveInteger

This sets x to 1 and y to 2. Multiple immediate assignments are parallel
in the sense that the expressions on the right are all evaluated before
any assignments on the left are made. However, the order of evaluation
of these expressions is undefined.

 ( x, y ) := ( y, x )
   1
           Type: PositiveInteger

  x
   2
           Type: PositiveInteger

The variable x now has the previous value of y.

  y
   1
           Type: PositiveInteger

The variable y now has the previous value of x.

There is no syntactic form for multiple delayed assignments. 

@

\section{syntax blocks}
\label{blocks}
\index{blocks}
\index{syntax!blocks}
\index{blocks!syntax}
<<blocks.help>>=
====================================================================
Blocks
====================================================================

A block is a sequence of expressions evaluated in the order that they
appear, except as modified by control expressions such as leave, return,
iterate, and if-then-else constructions. The value of a block is the
value of the expression last evaluated in the block.

To leave a block early, use "=>". For example, 

    i < 0 => x

The expression before the "=>" must evaluate to true or false. The
expression following the "=>" is the return value of the block.

A block can be constructed in two ways:

  1. the expressions can be separated by semicolons and the resulting
     expression surrounded by parentheses, and
  2. the expressions can be written on succeeding lines with each line
     indented the same number of spaces (which must be greater than zero).
     A block entered in this form is called a pile

Only the first form is available if you are entering expressions directly
to Axiom. Both forms are available in .input files. The syntax for a simple
block of expressions entered interactively is

  ( expression1 ; expression2 ; ... ; expressionN )

The value returned by a block is the value of an "=>" expression, or
expressionN if no "=>" is encountered.

In .input files, blocks can also be written in piles. The examples
given here are assumed to come from .input files.

  a := 
    i := gcd(234,672)
    i := 2*i**5 - i + 1
    1 / i

      1
    -----
    23323
              Type: Fraction Integer

In this example, we assign a rational number to a using a block consisting
of three expressions. This block is written as a pile. Each expression in
the pile has the same indentation, in this case two spaces to the right of
the first line.

  a := ( i := gcd(234,672); i := 2*i**5 - i + 1; 1 / i )

      1
    -----
    23323
              Type: Fraction Integer

Here is the same block written on one line. This is how you are required
to enter it at the input prompt.

  ( a := 1; b := 2; c := 3; [a,b,c] )
    [1,2,3]
              Type: List PositiveInteger

AAxiom gives you two ways of writing a block and the preferred way in
an .input file is to use a pile. Roughly speaking, a pile is a block
whose consituent expressions are indented the same amount. You begin a
pile by starting a new line for the first expression, indenting it to
the right of the previous line. You then enter the second expression on
a new line, vertically aligning it with the first line. And so on. If
you need to enter an inner pile, further indent its lines to the right
of the outer pile. Axiom knows where a pile ends. It ends when a subsequent
line is indented to the left of the pile or the end of the file.

Also See: 
o )help if
o )help repeat
o )help while
o )help for
o )help suchthat
o )help parallel
o )help lists

@
\footnote{
\fnref{if}
\fnref{repeat}
\fnref{while}
\fnref{for}
\fnref{suchthat}
\fnref{parallel}
\fnref{lists}}

\section{system clef}
\label{clef}
\index{clef}
\index{syntax!clef}
\index{clef!syntax}
<<clef.help>>=

Entering printable keys generally inserts new text into the buffer (unless
in overwrite mode, see below).  Other special keys can be used to modify
the text in the buffer.  In the description of the keys below, ^n means
Control-n, or holding the CONTROL key down while pressing "n".  Errors
will ring the terminal bell.

^A/^E	: Move cursor to beginning/end of the line.
^F/^B   : Move cursor forward/backward one character.
^D	: Delete the character under the cursor.
^H, DEL : Delete the character to the left of the cursor.
^K	: Kill from the cursor to the end of line.
^L	: Redraw current line.
^O	: Toggle overwrite/insert mode. Initially in insert mode. Text
	  added in overwrite mode (including yanks) overwrite
	  existing text, while insert mode does not overwrite.
^P/^N   : Move to previous/next item on history list.
^R/^S   : Perform incremental reverse/forward search for string on
	  the history list.  Typing normal characters adds to the current
	  search string and searches for a match. Typing ^R/^S marks
	  the start of a new search, and moves on to the next match.
	  Typing ^H or DEL deletes the last character from the search 
	  string, and searches from the starting location of the last search.  
	  Therefore, repeated DEL's appear to unwind to the match nearest 
	  the point at which the last ^R or ^S was typed.  If DEL is 
	  repeated until the search string is empty the search location 
	  begins from the start of the history list.  Typing ESC or 
	  any other editing character accepts the current match and 
	  loads it into the buffer, terminating the search.
^T	: Toggle the characters under and to the left of the cursor.
^Y	: Yank previously killed text back at current location.  Note that
	  this will overwrite or insert, depending on the current mode.
^U      : Show help (this text).
TAB	: Perform command completion based on word to the left of the cursor. 
          Words are deemed to contain only the alphanumeric and the % ! ? _  
          characters.
NL, CR  : returns current buffer to the program.

DOS and ANSI terminal arrow key sequences are recognized, and act like:

  up    : same as ^P
  down  : same as ^N
  left  : same as ^B
  right : same as ^F

@ 

\section{syntax collection}
\label{collection}
\index{collection}
\index{syntax!collection}
\index{collection!syntax}
<<collection.help>>=
====================================================================
Collection -- Creating Lists and Streams with Iterators
====================================================================

All of the loop expressions which do not use the repeat leave or
iterate words can be used to create lists and streams. For example:

This creates a simple list of the integers from 1 to 10:

  list := [i for i in 1..10]
   [1,2,3,4,5,6,7,8,9,10]
                      Type: List PositiveInteger

Create a stream of the integers greater than or equal to 1:

  stream := [i for i in 1..]
   [1,2,3,4,5,6,7,...]
                      Type: Stream PositiveInteger

This is a list of the prime numbers between 1 and 10, inclusive:

  [i for i in 1..10 | prime? i]
   [2,3,5,7]
                      Type: List PositiveInteger

This is a stream of the prime integers greater than or equal to 1:
  
  [i for i in 1.. | prime? i]
   [2,3,5,7,11,13,17,...]
                      Type: Stream PositiveInteger

This is a list of the integers between 1 and 10, inclusive, whose
squares are less than 700:

  [i for i in 1..10 while i*i < 700]
   [1,2,3,4,5,6,7,8,9,10]
                      Type: List PositiveInteger

This is a stream of the integers greater than or equal to 1 whose
squares are less than 700:

  [i for i in 1.. while i*i < 700]
   [1,2,3,4,5,6,7,...]
                      Type: Stream PositiveInteger

The general syntax of a collection is

  [ collectExpression iterator1 iterator2 ... iteratorN ]

where each iterator is either a for or a while clause. The loop 
terminates immedidately when the end test of any iterator succeeds
or when a return expression is evaluated in collectExpression. The
value returned by the collection is either a list or a stream of
elements, one for each iteration of the collectExpression.

Be careful when you use while to create a stream. By default Axiom
tries to compute and display the first ten elements of a stream. If
the while condition is not satisfied quickly, Axiom can spend a long
(potentially infinite) time trying to compute the elements. Use

  )set streams calculate 

to change the defaults to something else. This also affects the number
of terms computed and displayed for power series. For the purposes of
these examples we have use this system command to display fewer than
ten terms.

@

\section{syntax for}
\label{for}
\index{for}
\index{syntax!for}
\index{for!syntax}
<<for.help>>=
====================================================================
for loops
====================================================================

Axiom provide the for and in keywords in repeat loops, allowing you
to integrate across all elements of a list, or to have a variable take
on integral values from a lower bound to an upper bound. We shall refer
to these modifying clauses of repeat loops as for clauses. These clauses
can be present in addition to while clauses (See )help while). As with
all other types of repeat loops, leave (see )help leave) can be used to 
prematurely terminate evaluation of the loop.

The syntax for a simple loop using for is

  for iterator repeat loopbody

The iterator has several forms. Each form has an end test which is
evaluted before loopbody is evaluated. A for loop terminates immediately
when the end test succeeds (evaluates to true) or when a leave or return
expression is evaluated in loopbody. The value returned by the loop is 
the unique value of Void.

====================================================================
for i in n..m repeat
====================================================================

If for is followed by a variable name, the in keyword and then an integer
segment of the form n..m, the end test for this loop is the predicate 
i > m. The body of the loop is evaluated m-n+1 times if this number is
greater than 0. If this number is less than or equal to 0, the loop body
is not evaluated at all.

The variable i has the value n, n+1, ..., m for successive iterations
of the loop body. The loop variable is a local variable within the loop
body. Its value is not available outside the loop body and its value and
type within the loop body completely mask any outer definition of a
variable with the same name.

  for i in 10..12 repeat output(i**3)
   1000
   1331
   1728
                      Type: Void

The loop prints the values of 10^3, 11^3, and 12^3.

  a := [1,2,3]
   [1,2,3]
                      Type: List PositiveInteger

  for i in 1..#a repeat output(a.i)
   1
   2
   3
                      Type: Void

Iterate across this list using "." to access the elements of a list
and the # operation to count its elements.

This type of iteration is applicable to anything that uses ".". You 
can also use it with functions that use indices to extract elements.

   m := matrix [ [1,2],[4,3],[9,0] ]
    +-    -+
    | 1  2 |
    | 4  3 |
    | 9  0 |
    +-    -+
                      Type: Matrix Integer

Define m to be a matrix.

   for i in 1..nrows(m) repeat output row(m.i)
    [1,2]
    [4,3]
    [9,0]
                      Type: Void

Display the rows of m.

You can iterate with for-loops.

   for i in 1..5 repeat
     if odd?(i) then iterate
     output(i)
    2
    4
                      Type: Void

Display the even integers in a segment.

====================================================================
for i in n..m by s repeat
====================================================================

By default, the difference between values taken on by a variable in
loops such as 

  for i in n..m repeat ...

is 1. It is possible to supply another, possibly negative, step value
by using the by keyword along with for and in. Like the upper and lower
bounds, the step value following the by keyword must be an integer. Note
that the loop

  for i in 1..2 by 0 repeat output(i)

will not terminate by itself, as the step value does not change the
index from its initial value of 1.

  for i in 1..5 by 2 repeat output(i)
   1
   3
   5
                      Type: Void

This expression displays the odd integers between two bounds.

  for i in 5..1 by -2 repeat output(i)
   5
   3
   1
                      Type: Void

Use this to display the numbers in reverse order.

====================================================================
for i in n.. repeat
====================================================================

If the value after the ".." is omitted, the loop has no end test. A
potentially infinite loop is thus created. The variable is given the
successive values n, n+1, n+2, ... and the loop is terminated only
if a leave or return expression is evaluated in the loop body. However,
you may also add some other modifying clause on the repeat, for example,
a while clause, to stop the loop.

  for i in 15.. while not prime?(i) repeat output(i)
   15
   16
                      Type: Void

This loop displays the integers greater than or equal to 15 and less
than the first prime number greater than 15.

====================================================================
for x in l repeat
====================================================================

Another variant of the for loop has the form:

  for x in list repeat loopbody

This form is used when you want to iterate directly over the elements
of a list. In this form of the for loop, the variable x takes on the
value of each successive element in l. The end test is most simply
stated in English: "are there no more x in l?"

  l := [0, -5, 3]
   [0, -5, 3]
                      Type: List Integer

  for x in l repeat output(x)
   0
   -5
   3
                      Type: Void

This displays all of the elements of the list l, one per line.

Since the list constructing expression 

  expand [n..m]

creates the list

  [n, n+1, ..., m]

you might be tempted to think that the loops

  for i in n..m repeat output(i)

and

  for x in expand [n..m] repeat output(x)

are equivalent. The second form first creates the expanded list
(no matter how large it might be) and then does the iteration. The
first form potentially runs in much less space, as the index variable
i is simply incremented once per loop and the list is not actually
created. Using the first form is much more efficient.

Of course, sometimes you really want to iterate across a specific list.
This displays each of the factors of 2400000:

  for f in factors(factor(2400000)) repeat output(f)
   [factor= 2, exponent= 8]
   [factor= 3, exponent= 1]
   [factor= 5, exponent= 5]
                      Type: Void

@

\section{syntax if}
\label{if}
\index{if}
\index{syntax!if}
\index{if!syntax}
<<if.help>>=
====================================================================
If-then-else
====================================================================

Like many other programming languages, Axiom uses the three keywords
if, then, and else to form conditional expressions. The else part of
the conditional is optional. The expression between the if and then
keywords is a predicate: an expression that evaluates to or is
convertible to either true or false, that is, a Boolean.

The syntax for conditional expressions is

   if predicate then expression1 else expression2

where the "else expression2" part is optional. The value returned from
a conditional expression is expression1 if the predicate evaluates to
true and expression2 otherwise. If no else clause is given, the value
is always the unique value of Void.

An if-then-else expression always returns a value. If the else clause
is missing then the entire expression returns the unique value of Void.
If both clauses are present, the type of the value returned by if is
obtained by resolving the types of the values of the two clauses.

The predicate must evaluate to, or be convertible to, an object of type
Boolean: true or false. By default, the equal sign "=" creates an equation.

   x + 1 = y
    x + 1 = y
                Type: Equation Polynomial Integer

This is an equation, not a boolean condition. In particular, it is
an object of type Equation Polynomial Integer.

However, for predicates in if expressions, Axiom places a default 
target type of Boolean on the predicate and equality testing is performed.
Thus you need not qualify the "=" in any way. In other contexts you may
need to tell Axiom that you want to test for equality rather than create
an equation. In these cases, use "@" and a target type of Boolean.

The compound symbol meaning "not equal" in Axiom is "~=". This can be
used directly without a package call or a target specification. The
expression "a ~= b" is directly translated to "not(a = b)".

Many other functions have return values of type Boolean. These include
<, <=, >, >=, ~=, and member?. By convention, operations with names
ending in "?" return Boolean values.

The usual rules for piles are suspended for conditional expressions. In
.input files, the then and else keywords can begin in the same column
as the corresponding if by may also appear to the right. Each of the
following styles of writing if-then-else expressions is acceptable:

  if i>0 then output("positive") else output("nonpositive")

  if i>0 then output("positive")
    else output("nonpositive")

  if i>0 then output("positive")
  else output("nonpositive")

  if i>0 
  then output("positive")
  else output("nonpositive")

  if i>0 
    then output("positive")
    else output("nonpositive")

A block can follow the then or else keywords. In the following two 
assignments to a, the then and else clauses each are followed by two
line piles. The value returned in each is the value of the second line.

  a :=
    if i > 0 then
      j := sin(i * pi())
      exp(j + 1/j)
    else
      j := cos(i * 0.5 * pi())
      log(abs(j)**5 + i)


  a :=
    if i > 0 
      then
        j := sin(i * pi())
        exp(j + 1/j)
      else
        j := cos(i * 0.5 * pi())
        log(abs(j)**5 + i)

These are both equivalent to the following:

  a := 
    if i > 0 then (j := sin(i * pi()); exp(j + 1/j))
    else (j := cos(i * 0.5 * pi()); log(abs(j)**5 + i))

@

\section{syntax iterate}
\label{iterate}
\index{iterate}
\index{syntax!iterate}
\index{iterate!syntax}
<<iterate.help>>=
====================================================================
iterate in loops
====================================================================

Axiom provides an iterate expression that skips over the remainder
of a loop body and starts the next loop execution. We first initialize
a counter.

  i := 0
   0
                      Type: NonNegativeInteger

Display the even integers from 2 to 5:

  repeat
    i := i + 1
    if i > 5 then leave
    if odd?(i) then iterate
    output(i)
   2
   4
                      Type: Void

@

\section{syntax leave}
\label{leave}
\index{leave}
\index{syntax!leave}
\index{leave!syntax}
<<leave.help>>=
====================================================================
leave in loops
====================================================================

The leave keyword is often more useful in terminating a loop. A
leave causes control to transfer to the expression immediately following
the loop. As loops always return the unique value of Void, you cannot
return a value with leave. That is, leave takes no argument.

  f() ==
    i := 1
    repeat
      if factorial(i) > 1000 then leave
      i := i + 1
    i
                      Type: Void

This example is a modification of the last example in the previous
section. Instead of using return we'll use leave.

  f()
   7
                      Type: PositiveInteger

The loop terminates when factorial(i) gets big enough. The last line
of the function evaluates to the corresponding "good" value of i
and the function terminates, returning that value.

You can only use leave to terminate the evaluation of one loop. Lets
consider a loop within a loop, that is, a loop with a nested loop. 
First, we initialize two counter variables.

  (i,j) := (1,1)
   1
                      Type: PositiveInteger

  repeat
    repeat
      if (i + j) > 10 then leave
      j := j + 1
    if (i + j) > 10 then leave
    i := i + 1
                      Type: Void

Nested loops must have multiple leave expressions at the appropriate
nesting level. How would you rewrite this so (i + j) > 10 is only
evaluated once?

====================================================================
leave vs => in loop bodies
====================================================================

Compare the following two loops:

  i := 1                      i := 1
  repeat                      repeat
    i := i + 1                  i := i + 1
    i > 3 => i                  if i > 3 then leave
    output(i)                   output(i)

In the example on the left, the values 2 and 3 for i are displayed but
then the "=>" does not allow control to reach the call to output again.
The loop will not terminate until you run out of space or interrupt the
execution. The variable i will continue to be incremented because the
"=>" only means to leave the block, not the loop.

In the example on the right, upon reaching 4, the leave will be executed,
and both the block and the loop will terminate. This is one of the reasons
why both "=>" and leave are provided. Using a while clase with the "=>"
lets you simulate the action of leave.

@

\section{syntax parallel}
\label{parallel}
\index{parallel}
\index{syntax!parallel}
\index{parallel!syntax}
<<parallel.help>>=
====================================================================
parallel iteration
====================================================================

Sometimes you want to iterate across two lists in parallel, or perhaps
you want to traverse a list while incrementing a variable.

The general syntax of a repeat loop is

 iterator1, iterator2, ..., iteratorN repeat loopbody

where each iterator is either a for or a while clause. The loop 
terminates immediately when the end test of any iterator succeeds or 
when a leave or return expression is evaluated in loopbody. The value
returned by the loop is the unique value of Void.

  l := [1,3,5,7]
   [1,3,5,7]
                      Type: List PositiveInteger

  m := [100,200]
   [100,200]
                      Type: List PositiveInteger

  sum := 0
   0
                      Type: NonNegativeInteger

Here we write a loop to iterate across two lists, computing the sum
of the pairwise product of the elements:

  for x in l for y in m repeat
    sum := sum + x*y
                      Type: Void

The last two elements of l are not used in the calculation because
m has two fewer elements than l.

  sum
   700
                      Type: NonNegativeInteger

This is the "dot product".

Next we write a loop to compute the sum of the products of the loop
elements with their positions in the loop.

  l := [2,3,5,7,11,13,17,19,23,29,31,37]
   [2,3,5,7,11,13,17,19,23,29,31,37]
                      Type: List PositiveInteger

  sum := 0
   0
                      Type: NonNegativeInteger

  for i in 0.. for x in l repeat sum := i * x
                      Type: Void

Here looping stops when the list l is exhaused, even though the
for i in 0.. specifies no terminating condition.

  sum 
   407
                      Type: NonNegativeInteger

When "|" is used to qualify any of the for clauses in a parallel 
iteration, the variables in the predicates can be from an outer
scope or from a for clause in or to the left of the modified clause.

This is correct:
 
  for i in 1..10 repeat
    for j in 200..300 | ood? (i+j) repeat
      output [i,j]

But this is not correct. The variable j has not been defined outside
the inner loop:

  for i in 1..01 | odd? (i+j) repeat -- wrong, j not defined
    for j in 200..300 repeat
      output [i,j]

It is possible to mix several of repeat modifying clauses on a loop:

  for i in 1..10
    for j in 151..160 | odd? j
      while i + j < 160 repeat
        output [i,j]
   [1,151]
   [3,153]
                      Type: Void

Here are useful rules for composing loop expressions:

 1. while predicates can only refer to variables that are global (or
    in an outer scope) or that are defined in for clauses to the left
    of the predicate.
 2. A "such that" predicate (somthing following "|") must directly
    follow a for clause and can only refer to variables that are
    global (or in an outer scope) or defined in the modified for clause
    or any for clause to the left.

@

\section{syntax repeat}
\label{repeat}
\index{repeat}
\index{syntax!repeat}
\index{repeat!syntax}
<<repeat.help>>=
====================================================================
Repeat Loops
====================================================================

A loop is an expression that contains another expression, called the loop
body, which is to be evaluated zero or more times. All loops contain the
repeat keyword and return the unique value of Void. Loops can contain
inner loops to any depth.

The most basic loop is of the form
 
  repeat loopbody

Unless loopbody contains a leave or return expression, the loop repeats
foreer. The value returned by the loop is the unique value of Void.

Axiom tries to determine completely the type of every object in a loop
and then to translate the loop body to Lisp or even to machine code. This
translation is called compilation.

If Axiom decides that it cannot compile the loop, it issues a message
stating the problem and then the following message:

  We will attemp to step through and interpret the code

It is still possible that Axiom can evalute the loop but in interpret-code
mode.

====================================================================
Return in Loops
====================================================================

A return expression is used to exit a function with a particular value.
In particular, if a return is in a loop within the function, the loop
is terminated whenever the return is evaluated. 

  f() ==
    i := 1
    repeat
      if factorial(i) > 1000 then return i
      i := i + 1
                      Type: Void

  f()
                      Type: Void

When factorial(i) is big enough, control passes from inside the loop
all the way outside the function, returning the value of i (so we think).
What went wrong? Isn't it obvious that this function should return an
integer? Well, Axiom makes no attempt to analyze the structure of a
loop to determine if it always returns a value because, in general, this
is impossible. So Axiom has this simple rule: the type of the function is
determined by the type of its body, in this case a block. The normal value
of a block is the value of its last expression, in this case, a loop. And
the value of every loop is the unique value of Void. So the return type
of f is Void.

There are two ways to fix this. The best way is for you to tell Axiom
what the return type of f is. You do this by giving f a declaration

   f:() -> Integer

prior to calling for its value. This tells Axiom "trust me -- an integer
is returned". Another way is to add a dummy expression as follows.

  f() ==
    i := 1
    repeat
      if factorial(i) > 1000 then return i
      i := i + 1
    0
                      Type: Void

Note that the dummy expression will never be evaluated but it is the
last expression in the function and will determine the return type.

  f()
   7
                      Type: PositiveInteger

====================================================================
leave in loops
====================================================================

The leave keyword is often more useful in terminating a loop. A
leave causes control to transfer to the expression immediately following
the loop. As loops always return the unique value of Void, you cannot
return a value with leave. That is, leave takes no argument.

  f() ==
    i := 1
    repeat
      if factorial(i) > 1000 then leave
      i := i + 1
    i
                      Type: Void

This example is a modification of the last example in the previous
section. Instead of using return we'll use leave.

  f()
   7
                      Type: PositiveInteger

The loop terminates when factorial(i) gets big enough. The last line
of the function evaluates to the corresponding "good" value of i
and the function terminates, returning that value.

You can only use leave to terminate the evaluation of one loop. Lets
consider a loop within a loop, that is, a loop with a nested loop. 
First, we initialize two counter variables.

  (i,j) := (1,1)
   1
                      Type: PositiveInteger

  repeat
    repeat
      if (i + j) > 10 then leave
      j := j + 1
    if (i + j) > 10 then leave
    i := i + 1
                      Type: Void

Nested loops must have multiple leave expressions at the appropriate
nesting level. How would you rewrite this so (i + j) > 10 is only
evaluated once?

====================================================================
leave vs => in loop bodies
====================================================================

Compare the following two loops:

  i := 1                      i := 1
  repeat                      repeat
    i := i + 1                  i := i + 1
    i > 3 => i                  if i > 3 then leave
    output(i)                   output(i)

In the example on the left, the values 2 and 3 for i are displayed but
then the "=>" does not allow control to reach the call to output again.
The loop will not terminate until you run out of space or interrupt the
execution. The variable i will continue to be incremented because the
"=>" only means to leave the block, not the loop.

In the example on the right, upon reaching 4, the leave will be executed,
and both the block and the loop will terminate. This is one of the reasons
why both "=>" and leave are provided. Using a while clase with the "=>"
lets you simulate the action of leave.

====================================================================
iterate in loops
====================================================================

Axiom provides an iterate expression that skips over the remainder
of a loop body and starts the next loop execution. We first initialize
a counter.

  i := 0
   0
                      Type: NonNegativeInteger

Display the even integers from 2 to 5:

  repeat
    i := i + 1
    if i > 5 then leave
    if odd?(i) then iterate
    output(i)
   2
   4
                      Type: Void

Also See: 
o )help blocks
o )help if
o )help while
o )help for
o )help suchthat
o )help parallel
o )help lists

@
\footnote{
\fnref{blocks}
\fnref{if}
\fnref{while}
\fnref{for}
\fnref{suchthat}
\fnref{parallel}
\fnref{lists}}

\section{syntax suchthat}
\label{suchthat}
\index{suchthat}
\index{syntax!suchthat}
\index{suchthat!syntax}
<<suchthat.help>>=
====================================================================
Such that predicates
====================================================================

A for loop can be followed by a "|" and then a predicate. The predicate
qualifies the use of the values from the iterator that follows the for.
Think of the vertical bar "|" as the phrase "such that".

  for n in 0..4 | odd? n repeat output n
   1
   3
                      Type: Void

This loop expression prints out the integers n in the given segment
such that n is odd.

A for loop can also be written

  for iterator | predicate repeat loopbody

which is equivalent to:

  for iterator repeat if predicate then loopbody else iterate

The predicate need not refer only to the variable in the for clause.
Any variable in an outer scope can be part of the predicate.

  for i in 1..50 repeat
    for j in 1..50 | factorial(i+j) < 25 repeat
      output [i,j]
   [1,1]
   [1,2]
   [1,3]
   [2,1]
   [2,2]
   [3,1]
                      Type: Void

@

\section{syntax syntax}
\label{syntax}
<<syntax.help>>=

The Axiom Interactive Language has the following features documented here.

More information is available by typing

  )help feature

where feature is one of:

  assignment -- Immediate and delayed assignments
  blocks     -- Blocks of expressions
  collection -- creating lists with iterators
  for        -- for loops
  if         -- If-then-else statements
  iterate    -- using iterate in loops
  leave      -- using leave in loops
  parallel   -- parallel iterations
  repeat     -- repeat loops
  suchthat   -- suchthat predicates
  while      -- while loops

@

\section{syntax while}
\label{while}
\index{while}
\index{syntax!while}
\index{while!syntax}
<<while.help>>=
====================================================================
while loops
====================================================================

The repeat in a loop can be modified by adding one or more while 
clauses. Each clause contains a predicate immediately following the
while keyword. The predicate is tested before the evaluation of the 
body of the loop. The loop body is evaluated whenever the predicate
in a while clause is true.

The syntax for a simple loop using while is

  while predicate repeat loopbody

The predicate is evaluated before loopbody is evaluated. A while loop
terminates immediately when predicate evaluates to false or when a
leave or return expression is evaluted. See )help repeat for more
information on leave and return.

Here is a simple example of using while in a loop. We first initialize
the counter.

  i := 1
   1
                      Type: PositiveInteger

  while i < 1 repeat
    output "hello"
    i := i + 1
                      Type: Void

The steps involved in computing this example are
 (1) set i to 1
 (2) test the condition i < 1 and determine that it is not true
 (3) do not evaluate the loop body and therefore do not display "hello"

  (x, y) := (1, 1)
   1
                      Type: PositiveInteger

If you have multiple predicates to be tested use the logical and
operation to separate them. Axiom evaluates these predicates from
left to right.

  while x < 4 and y < 10 repeat
    output [x,y]
    x := x + 1
    y := y + 2
   [1,1]
   [2,3]
   [3,5]
                      Type: Void


A leave expression can be included in a loop body to terminate a loop
even if the predicate in any while clauses are not false.

  (x, y) := (1, 1)
   1
                      Type: PositiveInteger

  while x < 4 and y < 10 repeat
    if x + y > 7 then leave
    output [x,y]
    x := x + 1
    y := y + 2
   [1,1]
   [2,3]
                      Type: Void

@

\chapter{Abstract Syntax Trees (ptrees)}
\begin{verbatim}
Abstract Syntax Trees

These functions create and examine abstract
syntax trees.  These are called pform, for short.

!! This file also contains constructors for concrete syntax, although
!! they should be somewhere else.

THE PFORM DATA STRUCTURE
 Leaves: [hd, tok, pos]
 Trees:  [hd, tree, tree, ...]
 hd is either an id or (id . alist)

\end{verbatim}

\defun{tokConstruct}{Construct a leaf token}
The tokConstruct function is a constructer and selectors for leaf tokens.
A leaf token looks like [head, token, position]
where head is either an id or (id . alist)
\calls{tokConstruct}{ifcar}
\calls{tokConstruct}{pfNoPosition?}
\calls{tokConstruct}{ncPutQ}
<<defun tokConstruct>>=
(defun |tokConstruct| (head token &rest position)
 (let (result)
  (setq result (cons head token))
  (cond
   ((ifcar position)
    (cond
     ((|pfNoPosition?| (car position)) result)
     (t (|ncPutQ| result '|posn| (car position)) result)))
   (t result))))

@

\defun{pfAbSynOp}{Return a part of a node}
\calls{pfAbSynOp}{ifcar}
<<defun pfAbSynOp>>=
(defun |pfAbSynOp| (form)
 (let (hd)
  (setq hd (car form))
  (or (ifcar hd) hd)))

@

\defun{pfAbSynOp?}{Compare a part of a node}
\calls{pfAbSynOp?}{eqcar}
<<defun pfAbSynOp?>>=
(defun |pfAbSynOp?| (form op)
 (let (hd)
  (setq hd (car form))
  (or (eq hd op) (eqcar hd op))))

@

\defun{pfNoPosition?}{pfNoPosition?}
\calls{pfNoPosition?}{poNoPosition?}
<<defun pfNoPosition?>>=
(defun |pfNoPosition?| (pos)
 (|poNoPosition?| pos))

@

\defun{poNoPosition?}{poNoPosition?}
\calls{poNoPosition?}{eqcar}
<<defun poNoPosition?>>=
(defun |poNoPosition?| (pos)
 (eqcar pos '|noposition|))

@

\defun{tokType}{tokType}
\calls{tokType}{ncTag}
<<defun tokType>>=
(defun |tokType| (x) (|ncTag| x))

@

\defun{tokPart}{tokPart}
<<defun tokPart>>=
(defun |tokPart| (x) (cdr x))

@

\defun{tokPosn}{tokPosn}
\calls{tokPosn}{qassq}
\calls{tokPosn}{ncAlist}
\calls{tokPosn}{pfNoPosition}
<<defun tokPosn>>=
(defun |tokPosn| (x)
 (let (a)
  (setq a (qassq '|posn| (|ncAlist| x)))
  (cond
   (a (cdr a))
   (t (|pfNoPosition|)))))

@

\defun{pfNoPosition}{pfNoPosition}
\calls{pfNoPosition}{poNoPosition}
<<defun pfNoPosition>>=
(defun |pfNoPosition| () (|poNoPosition|))

@

\defun{poNoPosition}{poNoPosition}
\usesdollar{poNoPosition}{nopos}
<<defun poNoPosition>>=
(defun |poNoPosition| ()
 (declare (special |$nopos|))
 |$nopos|)

@

\chapter{Attributed Structures}
For objects which are pairs where the CAR field is either just a tag
(an identifier) or a pair which is the tag and an association list.

\defun{ncTag}{ncTag}
Pick off the tag
\calls{ncTag}{ncBug}
\calls{ncTag}{qcar}
\calls{ncTag}{identp}
<<defun ncTag>>=
(defun |ncTag| (x)
 (cond
  ((null (consp x)) (|ncBug| 's2cb0031 nil))
  (t
   (setq x (qcar x))
   (cond
    ((identp x) x)
    ((null (consp x)) (|ncBug| 's2cb0031 nil))
    (t (qcar x))))))

@

\defun{ncAlist}{ncAlist}
Pick off the property list
\calls{ncAlist}{ncBug}
\calls{ncAlist}{qcar}
\calls{ncAlist}{identp}
\calls{ncAlist}{qcdr}
<<defun ncAlist>>=
(defun |ncAlist| (x)
 (cond
  ((null (consp x)) (|ncBug| 's2cb0031 nil))
  (t
   (setq x (qcar x))
   (cond
    ((identp x) nil)
    ((null (consp x)) (|ncBug| 's2cb0031 nil))
    (t (qcdr x))))))

@

\defun{ncEltQ}{ncEltQ}
Get the entry for key k on x's association list
\calls{ncEltQ}{qassq}
\calls{ncEltQ}{ncAlist}
\calls{ncEltQ}{ncBug}
<<defun ncEltQ>>=
(defun |ncEltQ| (x k)
 (let (r)
  (setq r (qassq k (|ncAlist| x)))
  (cond
   ((null r) (|ncBug| 's2cb0007 (list k)))
   (t (cdr r)))))

@

\defun{ncPutQ}{ncPutQ}
\begin{verbatim}
;-- Put (k . v) on the association list of x and return v
;-- case1: ncPutQ(x,k,v) where k is a key (an identifier), v a value
;--        put the pair (k . v) on the association list of x and return v
;-- case2: ncPutQ(x,k,v) where k is a list of keys, v a list of values
;--        equivalent to [ncPutQ(x,key,val) for key in k for val in v]
;ncPutQ(x,k,v) ==
;   LISTP k =>
;      for key in k for val in v repeat ncPutQ(x,key,val)
;      v
;   r := QASSQ(k,ncAlist x)
;   if NULL r then
;      r := CONS( CONS(k,v), ncAlist x)
;      RPLACA(x,CONS(ncTag x,r))
;   else
;      RPLACD(r,v)
;   v\end{verbatim}
\calls{ncPutQ}{qassq}
\calls{ncPutQ}{ncAlist}
\calls{ncPutQ}{ncTag}
<<defun ncPutQ>>=
(defun |ncPutQ| (x k v)
 (let (r)
  (cond
   ((listp k)
    ((lambda (Var1 key Var2 val)
     (loop
      (cond
       ((or (atom Var1) 
            (progn (setq key (car Var1)) nil)
            (atom Var2)
            (progn (setq val (car Var2)) nil))
          (return nil))
        (t
          (|ncPutQ| x key val)))
      (setq Var1 (cdr Var1))
      (setq Var2 (cdr Var2))))
     k nil v nil)
    v)
   (t
    (setq r (qassq k (|ncAlist| x)))
    (cond
     ((null r)
      (setq r (cons (cons k v) (|ncAlist| x)))
      (rplaca x (cons (|ncTag| x) r)))
     (t
      (rplacd r v)))
    v))))

@

\chapter{System Command Handling}
The system commands are the top-level commands available in Axiom
that can all be invoked by prefixing the symbol with a closed-paren. 
Thus, to see they copyright you type:
\begin{verbatim}
   )copyright
\end{verbatim}
New commands need to be added to this table. The command invoked will
be the first entry of the pair and the ``user level'' of the command
will be the second entry. 

See:\\
\begin{itemize}
\item The \fnref{abbreviations} command
\item The \fnref{boot} command
\item The \fnref{browse} command
\item The \fnref{cd} command
\item The \fnref{clear} command
\item The \fnref{close} command
\item The \fnref{compiler} command
\item The \fnref{copyright} command
\item The \fnref{credits} command
\item The \fnref{display} command
\item The \fnref{edit} command
\item The \fnref{fin} command
\item The \fnref{frame} command
\item The \fnref{help} command
\item The \fnref{history} command
\item The \fnref{lisp} command
\item The \fnref{library} command
\item The \fnref{load} command
\item The \fnref{ltrace} command
\item The \fnref{pquit} command
\item The \fnref{quit} command
\item The \fnref{read} command
\item The \fnref{savesystem} command
\item The \fnref{set} command
\item The \fnref{show} command
\item The \fnref{spool} command
\item The \fnref{summary} command
\item The \fnref{synonym} command
\item The \fnref{system} command
\item The \fnref{trace} command
\item The \fnref{trademark} command
\item The \fnref{undo} command
\item The \fnref{what} command
\item The \fnref{with} command
\item The \fnref{workfiles} command
\item The \fnref{zsystemdevelopment} command
\end{itemize}

\section{Variables Used}
\defdollar{systemCommands}
<<initvars>>=
(defvar |$systemCommands| nil)

@

<<postvars>>=
(eval-when (eval load)
 (setq |$systemCommands|
 '(
   (|abbreviations|		     . |compiler|   )
   (|boot|			     . |development|)
   (|browse|                         . |development|)
   (|cd|			     . |interpreter|)
   (|clear|			     . |interpreter|)
   (|close|			     . |interpreter|)
   (|compiler|			     . |compiler|   )
   (|copyright|			     . |interpreter|)
   (|credits|			     . |interpreter|)
   (|describe|			     . |interpreter|)
   (|display|			     . |interpreter|)
   (|edit|			     . |interpreter|)
   (|fin|			     . |development|)
   (|frame|			     . |interpreter|)
   (|help|			     . |interpreter|)
   (|history|			     . |interpreter|)
;; (|input|			     . |interpreter|)
   (|lisp|			     . |development|)
   (|library|			     . |interpreter|)
   (|load|			     . |interpreter|)
   (|ltrace|			     . |interpreter|)
   (|pquit|			     . |interpreter|)
   (|quit|			     . |interpreter|)
   (|read|			     . |interpreter|)
   (|savesystem|		     . |interpreter|)
   (|set|			     . |interpreter|)
   (|show|			     . |interpreter|)
   (|spool|			     . |interpreter|)
   (|summary|			     . |interpreter|)
   (|synonym|			     . |interpreter|)
   (|system|			     . |interpreter|)
   (|trace|			     . |interpreter|)
   (|trademark|			     . |interpreter|)
   (|undo|			     . |interpreter|)
   (|what|			     . |interpreter|)
   (|with|			     . |interpreter|)
   (|workfiles|			     . |development|)
   (|zsystemdevelopment| . |interpreter|)
 )))

@

\defdollar{syscommands}
This table is used to look up a symbol to see if it might be a command.
<<initvars>>=
(defvar $syscommands nil)

@

<<postvars>>=
(eval-when (eval load)
 (setq $syscommands (mapcar #'car |$systemCommands|)))

@

\defdollar{noParseCommands}
This is a list of the commands which have their arguments passed verbatim.
Certain functions, such as the lisp function need to be able to handle
all kinds of input that will not be acceptable to the interpreter. 
<<initvars>>=
(defvar |$noParseCommands| nil)

@

<<postvars>>=
(eval-when (eval load)
 (setq |$noParseCommands|
 '(|boot| |copyright| |credits| |fin| |lisp| |pquit| |quit| 
   |synonym| |system| |trademark| )))

@

\section{Functions}
\defun{handleNoParseCommands}{handleNoParseCommands}
The system commands given by the global variable
\verb|$noParseCommands| require essentially no preprocessing/parsing
of their arguments. Here we dispatch the functions which implement
these commands.

There are four standard commands which receive arguments
\begin{itemize}
\item boot
\item lisp
\item synonym 
\item system
\end{itemize}

There are six standard commands which do not receive arguments -- 
\begin{itemize}
\item quit
\item fin
\item pquit
\item credits
\item copyright
\item trademark
\end{itemize}

As these commands do not necessarily
exhaust those mentioned in \verb|$noParseCommands|, we provide a
generic dispatch based on two conventions: commands which do not
require an argument name themselves, those which do have their names
prefixed by ``np''. This makes it possible to dynamically define
new system commands provided you handle the argument parsing.

\defun{doSystemCommand}{Handle a top level command}
\calls{doSystemCommand}{concat}
\calls{doSystemCommand}{expand-tabs}
\calls{doSystemCommand}{processSynonyms}
\calls{doSystemCommand}{substring}
\calls{doSystemCommand}{getFirstWord}
\calls{doSystemCommand}{unAbbreviateKeyword}
\calls{doSystemCommand}{member}
\calls{doSystemCommand}{handleNoParseCommands}
\calls{doSystemCommand}{splitIntoOptionBlocks}
\calls{doSystemCommand}{handleTokensizeSystemCommands}
\calls{doSystemCommand}{handleParsedSystemCommands}
\usesdollar{doSystemCommand}{tokenCommands}
\usesdollar{doSystemCommand}{noParseCommands}
\uses{doSystemCommand}{line}
<<defun doSystemCommand>>=
(defun |doSystemCommand| (string)
 (let (line tok unab optionList)
 (declare (special line |$tokenCommands| |$noParseCommands|))
  (setq string (concat ")" (expand-tabs string)))
  (setq line string)
  (|processSynonyms|)
  (setq string line)
  (setq string (substring string 1 nil))
  (cond
   ((string= string "") nil)
   (t
    (setq tok (|getFirstWord| string))
    (cond
     (tok 
      (setq unab (|unAbbreviateKeyword| tok))
      (cond
       ((|member| unab |$noParseCommands|)
        (|handleNoParseCommands| unab string))
       (t
        (setq optionList (|splitIntoOptionBlocks| string))
        (cond
         ((|member| unab |$tokenCommands|)
          (|handleTokensizeSystemCommands| unab optionList))
         (t 
          (|handleParsedSystemCommands| unab optionList)
          nil)))))
     (t nil))))))

@

\defun{splitIntoOptionBlocks}{Split block into option block}
\calls{splitIntoOptionBlocks}{stripSpaces}
<<defun splitIntoOptionBlocks>>=
(defun |splitIntoOptionBlocks| (str)
 (let (inString block (blockStart 0) (parenCount 0) blockList)
  (dotimes (i (1- (|#| str)))
   (cond
    ((char= (elt str i) #\" ) (setq inString (null inString))) 
    (t
     (when (and (char= (elt str i) #\( ) (null inString))
       (incf parenCount))
     (when (and (char= (elt str i) #\) ) (null inString))
       (decf parenCount))
     (when
      (and (char= (elt str i) #\) )
            (null inString)
            (= parenCount -1))
        (setq block (|stripSpaces| (subseq str blockStart i)))
        (setq blockList (cons block blockList))
        (setq blockStart (1+ i))
        (setq parenCount 0)))))
  (setq blockList (cons (|stripSpaces| (subseq str blockStart)) blockList))
  (nreverse blockList)))

@

\defun{handleTokensizeSystemCommands}{Tokenize a system command}
\calls{handleTokensizeSystemCommands}{dumbTokenize}
\calls{handleTokensizeSystemCommands}{tokTran}
\calls{handleTokensizeSystemCommands}{systemCommand}
<<defun handleTokensizeSystemCommands>>=
(defun |handleTokensizeSystemCommands| (unabr optionList)
 (declare (ignore unabr))
 (let (parcmd)
  (setq optionList (mapcar #'(lambda (x) (|dumbTokenize| x)) optionList))
  (setq parcmd 
    (mapcar #'(lambda (opt) (mapcar #'(lambda (tok) (|tokTran| tok)) opt))
     optionLIst))
  (when parcmd (|systemCommand| parcmd))))

@

\defun{systemCommand}{Handle system commands}
You can type ``)?'' and see trivial help information.
You can type ``)? compiler'' and see compiler related information
\calls{systemCommand}{selectOptionLC}
\calls{systemCommand}{helpSpad2Cmd}
\calls{systemCommand}{selectOption}
\calls{systemCommand}{commandsForUserLevel}
\usesdollar{systemCommand}{options}
\usesdollar{systemCommand}{e}
\usesdollar{systemCommand}{systemCommands}
\usesdollar{systemCommand}{syscommands}
\usesdollar{systemCommand}{CategoryFrame}
<<defun systemCommand>>=
(defun |systemCommand| (cmd)
 (let (|$options| |$e| op argl options fun)
 (declare (special |$options| |$e| |$systemCommands| $syscommands
                   |$CategoryFrame|))
  (setq op (caar cmd))
  (setq argl (cdar cmd))
  (setq options (cdr cmd))
  (setq |$options| options)
  (setq |$e| |$CategoryFrame|)
  (setq fun (|selectOptionLC| op $syscommands '|commandError|))
  (if (and argl (eq (elt argl 0) '?) (nequal fun '|synonym|))
   (|helpSpad2Cmd| (cons fun nil))
   (progn
    (setq fun
     (|selectOption| fun (|commandsForUserLevel| |$systemCommands|)
                        '|commandUserLevelError|))
    (funcall fun argl)))))

@

\defun{commandsForUserLevel}{Select commands matching this user level}
The \verb|$UserLevel| variable contains one of three values:
{\tt compiler}, {\tt development}, or {\tt interpreter}. This variable
is used to select a subset of commands from the list stored in 
\verb|$systemCommands|, representing all of the commands that are
valid for this level.
\calls{commandsForUserLevel}{satisfiesUserLevel}
<<defun commandsForUserLevel>>=
(defun |commandsForUserLevel| (arg)
 (let (c)
  (dolist (pair arg)
   (when (|satisfiesUserLevel| (cdr pair))
    (setq c (cons (car pair) c))))
  (nreverse c)))

@

\defun{commandError}{No command begins with this string}
\calls{commandError}{commandErrorMessage}
<<defun commandError>>=
(defun |commandError| (x u)
 (|commandErrorMessage| '|command| x u)) 

@

\defun{optionError}{No option begins with this string}
\calls{optionError}{commandErrorMessage}
<<defun optionError>>=
(defun |optionError| (x u)
 (|commandErrorMessage| '|option| x u)) 

@

\defdollar{oldline}
<<initvars>>=
(defvar $oldline nil "used to output command lines")

@

\defun{commandErrorMessage}{No command/option begins with this string}
\calls{commandErrorMessage}{commandAmbiguityError}
\calls{commandErrorMessage}{sayKeyedMsg}
\calls{commandErrorMessage}{terminateSystemCommand}
\usesdollar{commandErrorMessage}{oldline}
\uses{commandErrorMessage}{line}
<<defun commandErrorMessage>>=
(defun |commandErrorMessage| (kind x u)
 (declare (special $oldline line))
  (setq $oldline line)
  (if u
   (|commandAmbiguityError| kind x u)
   (progn
    (|sayKeyedMsg| 'S2IZ0008 (list kind x))
    (|terminateSystemCommand|))))

@

\defun{optionUserLevelError}{Option not available at this user level}
\calls{optionUserLevelError}{userLevelErrorMessage}
<<defun optionUserLevelError>>=
(defun |optionUserLevelError| (x u)
 (|userLevelErrorMessage| '|option| x u)) 

@

\defun{commandUserLevelError}{Command not available at this user level}
\calls{commandUserLevelError}{userLevelErrorMessage}
<<defun commandUserLevelError>>=
(defun |commandUserLevelError| (x u)
 (|userLevelErrorMessage| '|command| x u)) 

@

\defun{userLevelErrorMessage}{Command not available error message}
\calls{userLevelErrorMessage}{commandAmbiguityError}
\calls{userLevelErrorMessage}{sayKeyedMsg}
\calls{userLevelErrorMessage}{terminateSystemCommand}
\usesdollar{userLevelErrorMessage}{UserLevel}
<<defun userLevelErrorMessage>>=
(defun |userLevelErrorMessage| (kind x u)
 (declare (special |$UserLevel|))
 (if u
  (|commandAmbiguityError| kind x u)
  (progn
   (|sayKeyedMsg| 'S2IZ0007 (list |$UserLevel| kind))
   (|terminateSystemCommand|))))

@

\defun{satisfiesUserLevel}{satisfiesUserLevel}
\usesdollar{satisfiesUserLevel}{UserLevel}
<<defun satisfiesUserLevel>>=
(defun |satisfiesUserLevel| (x)
 (declare (special |$UserLevel|))
 (cond
  ((eq x '|interpreter|) t)
  ((eq |$UserLevel| '|interpreter|) nil)
  ((eq x '|compiler|) t)
  ((eq |$UserLevel| '|compiler|) nil)
  (t t)))

@

\defun{hasOption}{hasOption}
\calls{hasOption}{stringPrefix?}
\calls{hasOption}{pname}
<<defun hasOption>>=
(defun |hasOption| (al opt)
 (let ((optPname (pname opt)) found)
  (loop for pair in al do
    (when (|stringPrefix?| (pname (car pair)) optPname) (setq found pair))
    until found)
  found))

@

\defun{terminateSystemCommand}{terminateSystemCommand}
\calls{terminateSystemCommand}{tersyscommand}
<<defun terminateSystemCommand>>=
(defun |terminateSystemCommand| nil (tersyscommand)) 

@

\defun{tersyscommand}{Terminate a system command}
\calls{tersyscommand}{spadThrow}
<<defun tersyscommand>>=
(defun tersyscommand ()
  (fresh-line)
  (setq chr 'endoflinechr)
  (setq tok 'end_unit)
  (|spadThrow|))

@

\defun{commandAmbiguityError}{commandAmbiguityError}
\calls{commandAmbiguityError}{sayKeyedMsg}
\calls{commandAmbiguityError}{sayMSG}
\calls{commandAmbiguityError}{bright}
\calls{commandAmbiguityError}{terminateSystemCommand}
<<defun commandAmbiguityError>>=
(defun |commandAmbiguityError| (kind x u)
 (|sayKeyedMsg| 's2iz0009 (list kind x))
 (dolist (a u) (|sayMSG| (cons "     " (|bright| a))))
 (|terminateSystemCommand|))

@

\defun{getParserMacroNames}{getParserMacroNames}
The \verb|$pfMacros| is a list of all of the user-defined macros.
\usesdollar{getParserMacroNames}{pfMacros}
<<defun getParserMacroNames>>=
(defun |getParserMacroNames| ()
 (declare (special |$pfMacros|))
 (remove-duplicates (mapcar #'car |$pfMacros|)))

@

\defun{clearParserMacro}{clearParserMacro}
Note that if a macro is defined twice this will clear the last instance.
Thus:
\begin{verbatim}
  a ==> 3
  a ==> 4
  )d macros
  a ==> 4
  )clear prop a
  )d macros
  a ==> 3
  )clear prop a
  )d macros
  nil
\end{verbatim}
\calls{clearParserMacro}{ifcdr}
\calls{clearParserMacro}{assoc}
\calls{clearParserMacro}{remalist}
\usesdollar{clearParserMacro}{pfMacros}
<<defun clearParserMacro>>=
(defun |clearParserMacro| (macro)
 (declare (special |$pfMacros|))
 (when (ifcdr (|assoc| macro |$pfMacros|))
  (setq |$pfMacros| (remalist |$pfMacros| macro))))

@

\defun{displayMacro}{displayMacro}
\calls{displayMacro}{isInterpMacro}
\calls{displayMacro}{sayBrightly}
\calls{displayMacro}{bright}
\calls{displayMacro}{strconc}
\calls{displayMacro}{object2String}
\calls{displayMacro}{mathprint}
\usesdollar{displayMacro}{op}
<<defun displayMacro>>=
(defun |displayMacro| (name)
 (let (|$op| m body args)
 (declare (special |$op|))
  (setq m (|isInterpMacro| name))
  (cond
   ((null m)
    (|sayBrightly|
     (cons "  " (append (|bright| name) 
                        (cons "is not an interpreter macro." nil)))))
   (t
    (setq |$op| (strconc "macro " (|object2String| name)))
    (setq args (car m))
    (setq body (cdr m))
    (setq args
     (cond
      ((null args) nil)
      ((null (cdr args)) (car args))
      (t (cons '|Tuple| args))))
    (|mathprint| (cons 'map (cons (cons args body) nil)))))))

@

\defun{displayWorkspaceNames}{displayWorkspaceNames}
\calls{displayWorkspaceNames}{getInterpMacroNames}
\calls{displayWorkspaceNames}{getParserMacroNames}
\calls{displayWorkspaceNames}{sayMessage}
\calls{displayWorkspaceNames}{msort}
\calls{displayWorkspaceNames}{getWorkspaceNames}
\calls{displayWorkspaceNames}{sayAsManyPerLineAsPossible}
\calls{displayWorkspaceNames}{sayBrightly}
\calls{displayWorkspaceNames}{setdifference}
<<defun displayWorkspaceNames>>=
(defun |displayWorkspaceNames| ()
 (let (pmacs names imacs)
  (setq imacs (|getInterpMacroNames|))
  (setq pmacs (|getParserMacroNames|))
  (|sayMessage| "Names of User-Defined Objects in the Workspace:")
  (setq names (msort (append (|getWorkspaceNames|) pmacs)))
  (if names
   (|sayAsManyPerLineAsPossible| (mapcar #'|object2String| names))
   (|sayBrightly| "   * None *"))
  (setq imacs (setdifference imacs pmacs))
  (when imacs
   (|sayMessage| "Names of System-Defined Objects in the Workspace:")
   (|sayAsManyPerLineAsPossible| (mapcar #'|object2String| imacs)))))

@

\defun{getWorkspaceNames}{getWorkspaceNames}
\begin{verbatim}
;getWorkspaceNames() ==
;  NMSORT [n for [n,:.] in CAAR $InteractiveFrame |
;    (n ^= "--macros--" and n^= "--flags--")]
\end{verbatim}
\calls{getWorkspaceNames}{nequal}
\calls{getWorkspaceNames}{seq}
\calls{getWorkspaceNames}{nmsort}
\calls{getWorkspaceNames}{exit}
\usesdollar{getWorkspaceNames}{InteractiveFrame}
<<defun getWorkspaceNames>>=
(defun |getWorkspaceNames| ()
 (PROG (n)
  (declare (special |$InteractiveFrame|))
    (RETURN
      (SEQ (NMSORT (PROG (G166322)
                     (setq G166322 NIL)
                     (RETURN
                       (DO ((G166329 (CAAR |$InteractiveFrame|)
                                (CDR G166329))
                            (G166313 NIL))
                           ((OR (ATOM G166329)
                                (PROGN
                                  (SETQ G166313 (CAR G166329))
                                  NIL)
                                (PROGN
                                  (PROGN
                                    (setq n (CAR G166313))
                                    G166313)
                                  NIL))
                            (NREVERSE0 G166322))
                         (SEQ (EXIT (COND
                                      ((AND (NEQUAL n '|--macros--|)
                                        (NEQUAL n '|--flags--|))
                                       (SETQ G166322
                                        (CONS n G166322))))))))))))))

@

\defun{fixObjectForPrinting}{fixObjectForPrinting}
The \verb|$msgdbPrims| variable is set to:
\begin{verbatim}
(|%b| |%d| |%l| |%i| |%u| %U |%n| |%x| |%ce| |%rj| 
 "%U" "%b" "%d" "%l" "%i" "%u" "%U" "%n" "%x" "%ce" "%rj")
\end{verbatim}
\calls{fixObjectForPrinting}{object2Identifier}
\calls{fixObjectForPrinting}{member}
\calls{fixObjectForPrinting}{strconc}
\calls{fixObjectForPrinting}{pname}
\usesdollar{fixObjectForPrinting}{msgdbPrims}
<<defun fixObjectForPrinting>>=
(defun |fixObjectForPrinting| (v)
 (let (vp)
 (declare (special |$msgdbPrims|))
  (setq vp (|object2Identifier| v))
  (cond
   ((eq vp '%) "\\%")
   ((|member| vp |$msgdbPrims|) (strconc "\\" (pname vp)))
   (t v))))

@

\defun{displayProperties,sayFunctionDeps}{displayProperties,sayFunctionDeps}
\begin{verbatim}
;displayProperties(option,l) ==
;  $dependentAlist : local := nil
;  $dependeeAlist  : local := nil
;  [opt,:vl]:= (l or ['properties])
;  imacs := getInterpMacroNames()
;  pmacs := getParserMacroNames()
;  macros := REMDUP append(imacs, pmacs)
;  if vl is ['all] or null vl then
;    vl := MSORT append(getWorkspaceNames(),macros)
;  if $frameMessages then sayKeyedMsg("S2IZ0065",[$interpreterFrameName])
;  null vl =>
;    null $frameMessages => sayKeyedMsg("S2IZ0066",NIL)
;    sayKeyedMsg("S2IZ0067",[$interpreterFrameName])
;  interpFunctionDepAlists()
;  for v in vl repeat
;    isInternalMapName(v) => 'iterate
;    pl := getIProplist(v)
;    option = 'flags =>     getAndSay(v,"flags")
;    option = 'value =>     displayValue(v,getI(v,'value),nil)
;    option = 'condition => displayCondition(v,getI(v,"condition"),nil)
;    option = 'mode =>      displayMode(v,getI(v,'mode),nil)
;    option = 'type =>      displayType(v,getI(v,'value),nil)
;    option = 'properties =>
;      v = "--flags--" => nil
;      pl is [ ['cacheInfo,:.],:.] => nil
;      v1 := fixObjectForPrinting(v)
;      sayMSG ['"Properties of",:bright prefix2String v1,'":"]
;      null pl =>
;        v in pmacs =>
;            sayMSG '"   This is a user-defined macro."
;            displayParserMacro v
;        isInterpMacro v =>
;            sayMSG '"   This is a system-defined macro."
;            displayMacro v
;        sayMSG '"   none"
;      propsSeen:= nil
;      for [prop,:val] in pl | ^MEMQ(prop,propsSeen) and val repeat
;        prop in '(alias generatedCode IS_-GENSYM mapBody localVars) =>
;          nil
;        prop = 'condition =>
;          displayCondition(prop,val,true)
;        prop = 'recursive =>
;          sayMSG '"   This is recursive."
;        prop = 'isInterpreterFunction =>
;          sayMSG '"   This is an interpreter function."
;          sayFunctionDeps v where
;            sayFunctionDeps x ==
;              if dependents := GETALIST($dependentAlist,x) then
;                null rest dependents =>
;                  sayMSG ['"   The following function or rule ",
;                    '"depends on this:",:bright first dependents]
;                sayMSG
;                  '"   The following functions or rules depend on this:"
;                msg := ["%b",'"     "]
;                for y in dependents repeat msg := ['" ",y,:msg]
;                sayMSG [:nreverse msg,"%d"]
;              if dependees := GETALIST($dependeeAlist,x) then
;                null rest dependees =>
;                  sayMSG ['"   This depends on the following function ",
;                    '"or rule:",:bright first dependees]
;                sayMSG
;                  '"   This depends on the following functions or rules:"
;                msg := ["%b",'"     "]
;                for y in dependees repeat msg := ['" ",y,:msg]
;                sayMSG [:nreverse msg,"%d"]
;        prop = 'isInterpreterRule =>
;          sayMSG '"   This is an interpreter rule."
;          sayFunctionDeps v
;        prop = 'localModemap =>
;          displayModemap(v,val,true)
;        prop = 'mode =>
;          displayMode(prop,val,true)
;        prop = 'value =>
;          val => displayValue(v,val,true)
;        sayMSG ['"   ",prop,'":  ",val]
;        propsSeen:= [prop,:propsSeen]
;    sayKeyedMsg("S2IZ0068",[option])
;  terminateSystemCommand()
\end{verbatim}
\calls{displayProperties,sayFunctionDeps}{seq}
\calls{displayProperties,sayFunctionDeps}{getalist}
\calls{displayProperties,sayFunctionDeps}{exit}
\calls{displayProperties,sayFunctionDeps}{sayMSG}
\calls{displayProperties,sayFunctionDeps}{bright}
\usesdollar{displayProperties,sayFunctionDeps}{dependeeAlist}
\usesdollar{displayProperties,sayFunctionDeps}{dependentAlist}
<<defun displayProperties,sayFunctionDeps>>=
(defun |displayProperties,sayFunctionDeps| (x)
 (prog (dependents dependees msg)
 (declare (special |$dependeeAlist| |$dependentAlist|))
 (return
  (seq
   (if (setq dependents (getalist |$dependentAlist| x))
    (seq 
     (if (null (cdr dependents))
      (exit 
       (|sayMSG| (cons "   The following function or rule "
                  (cons "depends on this:" (|bright| (car dependents)))))))
     (|sayMSG| "   The following functions or rules depend on this:")
     (setq msg (cons '|%b| (cons "     " nil)))
     (do ((G166397 dependents (cdr G166397)) (y nil))
         ((or (atom G166397) (progn (setq y (car G166397)) nil)) nil)
       (seq (exit (setq msg (cons " " (cons y msg))))))
     (exit (|sayMSG| (append (nreverse msg) (cons '|%d| nil)))))
    nil)
   (exit 
    (if (setq dependees (getalist |$dependeeAlist| x))
     (seq
      (if (null (cdr dependees))
       (exit 
        (|sayMSG| (cons "   This depends on the following function "
                   (cons "or rule:" (|bright| (car dependees)))))))
      (|sayMSG| "   This depends on the following functions or rules:")
      (setq msg (cons '|%b| (cons "     " nil)))
      (do ((G166406 dependees (cdr G166406)) (y nil))
          ((or (atom G166406) (progn (setq y (car G166406)) nil)) nil)
        (seq (exit (setq msg (cons " " (cons y msg))))))
      (exit (|sayMSG| (append (nreverse msg) (cons '|%d| nil)))))
     nil))))))

@

\defun{displayValue}{displayValue}
\calls{displayValue}{sayMSG}
\calls{displayValue}{fixObjectForPrinting}
\calls{displayValue}{pname}
\calls{displayValue}{objValUnwrap}
\calls{displayValue}{objMode}
\calls{displayValue}{displayRule}
\calls{displayValue}{strconc}
\calls{displayValue}{prefix2String}
\calls{displayValue}{objMode}
\calls{displayValue}{getdatabase}
\calls{displayValue}{concat}
\calls{displayValue}{form2String}
\calls{displayValue}{mathprint}
\calls{displayValue}{outputFormat}
\calls{displayValue}{objMode}
\usesdollar{displayValue}{op}
\usesdollar{displayValue}{EmptyMode}
<<defun displayValue>>=
(defun |displayValue| (|$op| u omitVariableNameIfTrue)
 (declare (special |$op|))
 (let (expr op rhs label labmode)
 (declare (special |$EmptyMode|))
  (if (null u)
   (|sayMSG|
    (list '|   Value of | (|fixObjectForPrinting| (pname |$op|)) ":  (none)"))
   (progn
    (setq expr (|objValUnwrap| u))
    (if (or (and (pairp expr) (progn (setq op (qcar expr)) t) (eq op 'map))
            (equal (|objMode| u) |$EmptyMode|))
     (|displayRule| |$op| expr)
     (progn
       (cond
        (omitVariableNameIfTrue
          (setq rhs "):  ")
          (setq label "Value (has type "))
        (t
         (setq rhs ":  ")
         (setq label (strconc "Value of " (pname |$op|) ": "))))
      (setq labmode (|prefix2String| (|objMode| u)))
      (when (atom labmode) (setq labmode (list labmode)))
      (if (eq (getdatabase expr 'constructorkind) '|domain|)
       (|sayMSG| (|concat| "   " label labmode rhs (|form2String| expr)))
       (|mathprint|
        (cons 'concat
         (cons label
          (append labmode
           (cons rhs
            (cons (|outputFormat| expr (|objMode| u)) nil)))))))
       nil))))))

@

\defun{displayType}{displayType}
\calls{displayType}{sayMSG}
\calls{displayType}{fixObjectForPrinting}
\calls{displayType}{pname}
\calls{displayType}{prefix2String}
\calls{displayType}{objMode}
\calls{displayType}{concat}
\usesdollar{displayType}{op}
<<defun displayType>>=
(defun |displayType| (|$op| u omitVariableNameIfTrue)
 (declare (special |$op|) (ignore omitVariableNameIfTrue))
 (let (type)
  (if (null u)
   (|sayMSG|
    (list  "   Type of value of " (|fixObjectForPrinting| (pname |$op|))
           ":  (none)"))
   (progn
    (setq type (|prefix2String| (|objMode| u)))
    (when (atom type) (setq type (list type)))
    (|sayMSG|
     (|concat|
      (cons "   Type of value of "
       (cons (|fixObjectForPrinting| (pname |$op|))
        (cons ": " type)))))
     nil))))

@

\defun{getAndSay}{getAndSay}
\calls{getAndSay}{getI}
\calls{getAndSay}{sayMSG}
<<defun getAndSay>>=
(defun |getAndSay| (v prop)
 (let (val)
  (if (setq val (|getI| v prop))
   (|sayMSG| (cons '|    | (cons val (cons '|%l| nil))))
   (|sayMSG| (cons '|    none| (cons '|%l| nil))))))

@

\defun{displayProperties}{displayProperties}
\calls{displayProperties}{getInterpMacroNames}
\calls{displayProperties}{getParserMacroNames}
\calls{displayProperties}{remdup}
\calls{displayProperties}{pairp}
\calls{displayProperties}{qcdr}
\calls{displayProperties}{qcar}
\calls{displayProperties}{msort}
\calls{displayProperties}{getWorkspaceNames}
\calls{displayProperties}{sayKeyedMsg}
\calls{displayProperties}{interpFunctionDepAlists}
\calls{displayProperties}{isInternalMapName}
\calls{displayProperties}{getIProplist}
\calls{displayProperties}{getAndSay}
\calls{displayProperties}{displayValue}
\calls{displayProperties}{getI}
\calls{displayProperties}{displayCondition}
\calls{displayProperties}{displayMode}
\calls{displayProperties}{displayType}
\calls{displayProperties}{fixObjectForPrinting}
\calls{displayProperties}{sayMSG}
\calls{displayProperties}{bright}
\calls{displayProperties}{prefix2String}
\calls{displayProperties}{member}
\calls{displayProperties}{displayParserMacro}
\calls{displayProperties}{isInterpMacro}
\calls{displayProperties}{displayMacro}
\calls{displayProperties}{memq}
\calls{displayProperties}{displayProperties,sayFunctionDeps}
\calls{displayProperties}{displayModemap}
\calls{displayProperties}{exit}
\calls{displayProperties}{seq}
\calls{displayProperties}{terminateSystemCommand}
\usesdollar{displayProperties}{dependentAlist}
\usesdollar{displayProperties}{dependeeAlist}
\usesdollar{displayProperties}{frameMessages}
\usesdollar{displayProperties}{interpreterFrameName}
<<defun displayProperties>>=
(defun |displayProperties| (option al)
 (let (|$dependentAlist| |$dependeeAlist| tmp1 opt imacs pmacs macros vl pl 
       tmp2 vone prop val propsSeen)
 (declare (special |$dependentAlist| |$dependeeAlist| |$frameMessages|
                    |$interpreterFrameName|))
  (setq |$dependentAlist| nil)
  (setq |$dependeeAlist| nil)
  (setq tmp1 (or al (cons '|properties| nil)))
  (setq opt (car tmp1))
  (setq vl (cdr tmp1))
  (setq imacs (|getInterpMacroNames|))
  (setq pmacs (|getParserMacroNames|))
  (setq macros (remdup (append imacs pmacs)))
  (when (or 
         (and (pairp vl) (eq (qcdr vl) nil) (eq (qcar vl) '|all|))
         (null vl))
    (setq vl (msort (append (|getWorkspaceNames|) macros))))
   (when |$frameMessages|
    (|sayKeyedMsg| 'S2IZ0065 (cons |$interpreterFrameName| nil)))
   (cond
    ((null vl)
     (if (null |$frameMessages|) 
      (|sayKeyedMsg| 'S2IZ0066 nil))
      (|sayKeyedMsg| 'S2IZ0067 (cons |$interpreterFrameName| nil)))
    (t 
     (|interpFunctionDepAlists|)
     (do ((G166440 vl (cdr G166440)) (v nil))
         ((or (atom G166440) (progn (setq v (car G166440)) nil)) nil)
       (seq (exit
        (cond
         ((|isInternalMapName| v) '|iterate|)
         (t
          (setq pl (|getIProplist| v))
          (cond
           ((eq option '|flags|) 
            (|getAndSay| v '|flags|))
           ((eq option '|value|) 
            (|displayValue| v (|getI| v '|value|) nil))
           ((eq option '|condition|)
            (|displayCondition| v (|getI| v '|condition|) nil))
           ((eq option '|mode|)
            (|displayMode| v (|getI| v '|mode|) nil))
           ((eq option '|type|)
            (|displayType| v (|getI| v '|value|) nil))
           ((eq option '|properties|)
            (cond
             ((eq v '|--flags--|)
               nil)
             ((and (pairp pl)
                   (progn
                    (setq tmp2 (qcar pl))
                    (and (pairp tmp2) (eq (qcar tmp2) '|cacheInfo|))))
               nil)
             (t
              (setq vone (|fixObjectForPrinting| v))
              (|sayMSG|
               (cons "Properties of"
                (append (|bright| (|prefix2String| vone)) (cons ":" nil))))
              (cond
               ((null pl)
                (cond
                 ((|member| v pmacs)
                  (|sayMSG| "   This is a user-defined macro.")
                  (|displayParserMacro| v))
                 ((|isInterpMacro| v)
                  (|sayMSG| "   This is a system-defined macro.")
                  (|displayMacro| v))
                 (t
                  (|sayMSG| "   none"))))
               (t 
                (setq propsSeen nil)
                (do ((G166451 pl (cdr G166451)) (G166425 nil))
                    ((or (atom G166451)
                         (progn (setq G166425 (car G166451)) nil)
                         (progn
                          (progn
                           (setq prop (car G166425))
                           (setq val (cdr G166425))
                           G166425)
                          nil))
                       nil)
                 (seq (exit
                  (cond
                   ((and (null (memq prop propsSeen)) val)
                    (cond
                     ((|member| prop 
                       '(|alias| |generatedCode| IS-GENSYM 
                         |mapBody| |localVars|))
                       nil)
                     ((eq prop '|condition|)
                      (|displayCondition| prop val t))
                     ((eq prop '|recursive|)
                      (|sayMSG| "   This is recursive."))
                     ((eq prop '|isInterpreterFunction|)
                      (|sayMSG| "   This is an interpreter function.")
                      (|displayProperties,sayFunctionDeps| v))
                     ((eq prop '|isInterpreterRule|)
                      (|sayMSG| "   This is an interpreter rule.")
                      (|displayProperties,sayFunctionDeps| v))
                     ((eq prop '|localModemap|)
                      (|displayModemap| v val t))
                     ((eq prop '|mode|)
                      (|displayMode| prop val t))
                     (t
                      (when (eq prop '|value|)
                        (exit
                         (when val
                           (exit (|displayValue| v val t)))))
                       (|sayMSG| (list "   " prop ":  " val))
                       (setq propsSeen (cons prop propsSeen))))))))))))))
           (t
            (|sayKeyedMsg| 'S2IZ0068 (cons option nil)))))))))
     (|terminateSystemCommand|)))))

@

\defun{displayCondition}{displayCondition}
\calls{displayCondition}{bright}
\calls{displayCondition}{sayBrightly}
\calls{displayCondition}{concat}
\calls{displayCondition}{pred2English}
<<defun displayCondition>>=
(defun |displayCondition| (v condition giveVariableIfNil)
 (let (varPart condPart)
  (when giveVariableIfNil (setq varPart (cons '| of| (|bright| v))))
  (setq condPart (or condition '|true|))
  (|sayBrightly|
   (|concat| '|   condition| varPart '|:  | (|pred2English| condPart)))))

@

\defun{interpFunctionDepAlists}{interpFunctionDepAlists}
\calls{interpFunctionDepAlists}{putalist}
\calls{interpFunctionDepAlists}{getalist}
\calls{interpFunctionDepAlists}{getFlag}
\usesdollar{interpFunctionDepAlists}{e}
\usesdollar{interpFunctionDepAlists}{dependeeAlist}
\usesdollar{interpFunctionDepAlists}{dependentAlist}
\usesdollar{interpFunctionDepAlists}{InteractiveFrame}
<<defun interpFunctionDepAlists>>=
(defun |interpFunctionDepAlists| ()
 (let (|$e|)
 (declare (special |$e| |$dependeeAlist| |$dependentAlist| 
                   |$InteractiveFrame|))
  (setq |$e| |$InteractiveFrame|)
  (setq |$dependentAlist| (cons (cons nil nil) nil))
  (setq |$dependeeAlist| (cons (cons nil nil) nil))
  (mapcar #'(lambda (dep) 
   (let (dependee dependent)
    (setq dependee (first dep))
    (setq dependent (second dep))
    (setq |$dependentAlist| 
     (putalist |$dependentAlist| dependee
      (cons dependent (getalist |$dependentAlist| dependee))))
    (spadlet |$dependeeAlist|
     (putalist |$dependeeAlist| dependent
      (cons dependee (getalist |$dependeeAlist| dependent)))))) 
   (|getFlag| '|$dependencies|))))


@

\defun{displayModemap}{displayModemap}
\calls{displayModemap}{bright}
\calls{displayModemap}{sayBrightly}
\calls{displayModemap}{concat}
\calls{displayModemap}{formatSignature}
<<defun displayModemap>>=
(defun |displayModemap| (v val giveVariableIfNil)
 (labels (
  (g (v mm giveVariableIfNil)
   (let (local signature fn varPart prefix)
    (setq local (caar mm))
    (setq signature (cdar mm))
    (setq fn (cadr mm))
    (unless (eq local '|interpOnly|)
     (spadlet varPart (unless giveVariableIfNil (cons " of" (|bright| v))))
     (spadlet prefix
      (cons '|   Compiled function type| (append varPart (cons '|: | nil))))
     (|sayBrightly| (|concat| prefix (|formatSignature| signature)))))))
  (mapcar #'(lambda (x) (g v x giveVariableIfNil)) val)))

@

\defun{displayMode}{displayMode}
\calls{displayMode}{bright}
\calls{displayMode}{fixObjectForPrinting}
\calls{displayMode}{sayBrightly}
\calls{displayMode}{concat}
\calls{displayMode}{prefix2String}
<<defun displayMode>>=
(defun |displayMode| (v mode giveVariableIfNil)
 (let (varPart)
  (when mode
   (unless giveVariableIfNil
    (setq varPart (cons '| of| (|bright| (|fixObjectForPrinting| v)))))
   (|sayBrightly|
    (|concat| '|   Declared type or mode| varPart '|:   |
     (|prefix2String| mode))))))

@

\defun{dumbTokenize}{Split into tokens delimted by spaces}
\calls{dumbTokenize}{stripSpaces}
<<defun dumbTokenize>>=
(defun |dumbTokenize| (str)
 (let (inString token (tokenStart 0) previousSpace tokenList)
  (dotimes (i (1- (|#| str)))
   (cond
    ((char= (elt str i) #\") ; don't split strings
     (setq inString (null inString))
     (setq previousSpace nil))
    ((and (char= (elt str i) #\space) (null inString))
     (unless previousSpace
       (setq token (|stripSpaces| (subseq str tokenStart i)))
       (setq tokenList (cons token tokenList))
       (setq tokenStart (1+ i))
       (setq previousSpace t)))
    (t
     (setq previousSpace nil))))
  (setq tokenList (cons (|stripSpaces| (subseq str tokenStart)) tokenList))
  (nreverse tokenList)))

@

\defun{tokTran}{Convert string tokens to their proper type}
\calls{tokTran}{isIntegerString}
<<defun tokTran>>=
(defun |tokTran| (tok)
 (let (tmp)
  (if (stringp tok)
   (cond
    ((eql (|#| tok) 0) nil)
    ((setq tmp (|isIntegerString| tok)) tmp)
    ((char= (elt tok 0) #\" ) (subseq tok 1 (1- (|#| tok))))
    (t (intern tok)))
   tok)))

@

\defun{isIntegerString}{Is the argument string an integer?}
<<defun isIntegerString>>=
(defun |isIntegerString| (tok)
 (multiple-value-bind (int len) (parse-integer tok :junk-allowed t)
  (when (and int (= len (length tok))) int)))

@

\defun{handleParsedSystemCommands}{Handle parsed system commands}
\calls{handleParsedSystemCommands}{dumbTokenize}
\calls{handleParsedSystemCommands}{parseSystemCmd}
\calls{handleParsedSystemCommands}{tokTran}
\calls{handleParsedSystemCommands}{systemCommand}
<<defun handleParsedSystemCommands>>=
(defun |handleParsedSystemCommands| (unabr optionList)
 (declare (ignore unabr))
 (let (restOptionList parcmd trail)
  (setq restOptionList (mapcar #'|dumbTokenize| (cdr optionList)))
  (setq parcmd (|parseSystemCmd| (car optionList)))
  (setq trail
   (mapcar #'(lambda (opt)  
              (mapcar #'(lambda (tok) (|tokTran| tok)) opt)) restOptionList))
  (|systemCommand| (cons parcmd trail)))))

@

\defun{parseSystemCmd}{Parse a system command}
\calls{parseSystemCmd}{tokTran}
\calls{parseSystemCmd}{stripSpaces}
\calls{parseSystemCmd}{parseFromString}
\calls{parseSystemCmd}{dumbTokenize}
<<defun parseSystemCmd>>=
(defun |parseSystemCmd| (opt)
 (let (spaceIndex)
  (if (setq spaceIndex (search " " opt))
   (list
    (|tokTran| (|stripSpaces| (subseq opt 0 spaceIndex)))
    (|parseFromString| (|stripSpaces| (subseq opt spaceIndex))))
   (mapcar #'|tokTran| (|dumbTokenize| opt)))))

@

\defun{getFirstWord}{Get first word in a string}
\calls{getFirstWord}{subseq}
\calls{getFirstWord}{stringSpaces}
<<defun getFirstWord>>=
(defun |getFirstWord| (string)
 (let (spaceIndex)
  (setq spaceIndex (search " " string))
  (if spaceIndex
   (|stripSpaces| (subseq string 0 spaceIndex))
   string)))

@

\defun{unAbbreviateKeyword}{Unabbreviate keywords in commands}
\calls{unAbbreviateKeyword}{selectOptionLC}
\calls{unAbbreviateKeyword}{selectOption}
\calls{unAbbreviateKeyword}{commandsForUserLevel}
\usesdollar{unAbbreviateKeyword}{systemCommands}
\usesdollar{unAbbreviateKeyword}{currentLine}
\usesdollar{unAbbreviateKeyword}{syscommands}
\uses{unAbbreviateKeyword}{line}
<<defun unAbbreviateKeyword>>=
(defun |unAbbreviateKeyword| (x)
 (let (xp)
 (declare (special |$systemCommands| |$currentLine| $syscommands line))
  (setq xp (|selectOptionLC| x $syscommands '|commandErrorIfAmbiguous|))
  (cond
   ((null xp) 
    (setq xp '|system|)
    (setq line (concat ")system " (substring line 1 (1- (|#| line)))))
    (spadlet |$currentLine| line)))
  (|selectOption| xp (|commandsForUserLevel| |$systemCommands|)
     '|commandUserLevelError|)))

@

\defun{commandErrorIfAmbiguous}{The command is ambiguous error}
\calls{commandErrorIfAmbiguous}{commandAmbiguityError}
\usesdollar{commandErrorIfAmbiguous}{oldline}
\uses{commandErrorIfAmbiguous}{line}
<<defun commandErrorIfAmbiguous>>=
(defun |commandErrorIfAmbiguous| (x u)
 (declare (special $oldline line))
 (when u
   (setq $oldline line)
   (|commandAmbiguityError| '|command| x u)))

@

\calls{handleNoParseCommands}{stripSpaces}
\calls{handleNoParseCommands}{nplisp}
\calls{handleNoParseCommands}{stripLisp}
\calls{handleNoParseCommands}{sayKeyedMsg}
\calls{handleNoParseCommands}{npboot}
\calls{handleNoParseCommands}{npsystem}
\calls{handleNoParseCommands}{npsynonym}
\calls{handleNoParseCommands}{member}
\calls{handleNoParseCommands}{concat}
<<defun handleNoParseCommands>>=
(defun |handleNoParseCommands| (unab string)
 (let (spaceindex funname)
  (setq string (|stripSpaces| string))
  (setq spaceindex (search " " string))
  (cond
   ((eq unab '|lisp|)
    (if spaceindex
     (|nplisp| (|stripLisp| string))
     (|sayKeyedMsg| 's2iv0005 nil)))
   ((eq unab '|boot|)
    (if spaceindex
     (|npboot| (subseq string (1+ spaceindex)))
     (|sayKeyedMsg| 's2iv0005 nil)))
   ((eq unab '|system|)
    (if spaceindex
      (|npsystem| unab string)
      (|sayKeyedMsg| 's2iv0005 nil)))
   ((eq unab '|synonym|)
    (if spaceindex
     (|npsynonym| unab (subseq string (1+ spaceindex)))
     (|npsynonym| unab "")))
   ((null spaceindex)
    (funcall unab))
   ((|member| unab '(|quit| |fin| |pquit| |credits| |copyright| |trademark|))
    (|sayKeyedMsg| 's2iv0005 nil))
   (t
    (setq funname (intern (concat "np" (string unab))))
    (funcall funname (subseq string (1+ spaceindex)))))))

@

\defun{stripSpaces}{Remove the spaces surrounding a string}
\tpdhere{This should probably be a macro or eliminated}
<<defun stripSpaces>>=
(defun |stripSpaces| (str)
 (string-trim '(#\space) str))

@

\defun{stripLisp}{Remove the lisp command prefix}
<<defun stripLisp>>=
(defun |stripLisp| (str)
 (if (string= (subseq str 0 4) "lisp")
  (subseq str 4)
  str))

@

\defun{nplisp}{Handle the )lisp command}
\usesdollar{nplisp}{ans}
<<defun nplisp>>=
(defun |nplisp| (str)
 (declare (special |$ans|))
  (setq |$ans| (eval (read-from-string str)))
  (format t "~&Value = ~S~%" |$ans|))

@

\defun{npboot}{The )boot command is no longer supported}
\tpdhere{Remove all boot references from top level}
<<defun npboot>>=
(defun |npboot| (str)
 (declare (ignore str))
 (format t "The )boot command is no longer supported~%"))

@

\defun{npsystem}{Handle the )system command}
Note that unAbbreviateKeyword returns the word ``system'' for unknown words
so we have to search for this case. This complication may never arrive 
in practice.
\calls{npsystem}{sayKeyedMsg}
<<defun npsystem>>=
(defun |npsystem| (unab str)
 (let (spaceIndex sysPart)
  (setq spaceIndex (search " " str))
  (cond
   ((null spaceIndex) (|sayKeyedMsg| 'S2IZ0080 (list str)))
   (t
    (setq sysPart (subseq str 0 spaceIndex))
    (if (search sysPart (string unab))
     (obey (subseq str (1+ spaceIndex)))
     (|sayKeyedMsg| 'S2IZ0080 (list sysPart)))))))

@

\defun{npsynonym}{Handle the )synonym command}
\calls{npsynonym}{npProcessSynonym}
<<defun npsynonym>>=
(defun |npsynonym| (unab str)
 (declare (ignore unab))
 (|npProcessSynonym| str)) 

@

\defun{npProcessSynonym}{Handle the synonym system command}
\calls{npProcessSynonym}{printSynonyms}
\calls{npProcessSynonym}{processSynonymLine}
\calls{npProcessSynonym}{putalist}
\calls{npProcessSynonym}{terminateSystemCommand}
\usesdollar{npProcessSynonym}{CommandSynonymAlist}
<<defun npProcessSynonym>>=
(defun |npProcessSynonym| (str)
 (let (pair)
 (declare (special |$CommandSynonymAlist|))
  (if (= (length str) 0)
   (|printSynonyms| nil)
   (progn
    (setq pair (|processSynonymLine| str))
    (if |$CommandSynonymAlist|
     (putalist |$CommandSynonymAlist| (car pair) (cdr pair)))
     (setq |$CommandSynonymAlist| (cons pair nil))))
  (|terminateSystemCommand|)))

@

\defun{printSynonyms}{printSynonyms}
\calls{printSynonyms}{centerAndHighlight}
\calls{printSynonyms}{specialChar}
\calls{printSynonyms}{filterListOfStringsWithFn}
\calls{printSynonyms}{synonymsForUserLevel}
\calls{printSynonyms}{stringimage}
\calls{printSynonyms}{printLabelledList}
\usesdollar{printSynonyms}{CommandSynonymAlist}
\usesdollar{printSynonyms}{linelength}
<<defun printSynonyms>>=
(defun |printSynonyms| (patterns)
 (prog (ls t1)
  (declare (special |$CommandSynonymAlist| $linelength))
   (|centerAndHighlight| '|System Command Synonyms|
                  $linelength (|specialChar| '|hbar|))
   (setq ls
    (|filterListOfStringsWithFn| patterns
     (do ((t2 (|synonymsForUserLevel| |$CommandSynonymAlist|) (cdr t2)))
         ((atom t2) (nreverse0 t1))
        (push (cons (stringimage (caar t2)) (cdar t2)) t1))
     (|function| car)))
   (|printLabelledList| ls "user" "synonyms" ")" patterns)))

@

\defun{printLabelledList}{Print a list of each matching synonym}
The prefix goes before each element on each side of the list, eg, ")"
\calls{printLabelledList}{sayMessage}
\calls{printLabelledList}{blankList}
\calls{printLabelledList}{substring}
\calls{printLabelledList}{entryWidth}
\calls{printLabelledList}{sayBrightly}
\calls{printLabelledList}{concat}
\calls{printLabelledList}{fillerSpaces}
<<defun printLabelledList>>=
(defun |printLabelledList| (ls label1 label2 prefix patterns)
 (let (comm syn wid)
  (if (null ls)
   (if (null patterns)
    (|sayMessage| (list "   No " label1 "-defined " label2 " in effect."))
    (|sayMessage|
     `("   No " ,label1 "-defined " ,label2 " satisfying patterns:"
       |%l| "     " |%b| ,@(append (|blankList| patterns) (list '|%d|)))))
   (progn
    (when patterns
      (|sayMessage|
       `(,label1 "-defined " ,label2 " satisfying patterns:" |%l| "   "
          |%b| ,@(append (|blankList| patterns) (list '|%d|)))))
     (do ((t1 ls (cdr t1)))
         ((atom t1) nil)
      (setq syn (caar t1))
      (setq comm (cdar t1))
      (when (string= (substring syn 0 1) "|")
       (setq syn (substring syn 1 nil)))
      (when (string= syn "%i") (setq syn "%i "))
      (setq wid (max (- 30 (|entryWidth| syn)) 1))
      (|sayBrightly|
       (|concat| '|%b| prefix syn '|%d| (|fillerSpaces| wid ".")
         " " prefix comm)))
     (|sayBrightly| "")))))

@

\defdollar{tokenCommands}
This is a list of the commands that expect the interpreter to parse
their arguments. Thus the history command expects that Axiom will have
tokenized and validated the input before calling the history function.
<<initvars>>=
(defvar |$tokenCommands| nil)

@

<<postvars>>=
(eval-when (eval load)
 (setq |$tokenCommands|
 '( |abbreviations|
    |cd|
    |clear|
    |close|
    |compiler|
    |depends|
    |display|
    |describe|
    |edit|
    |frame|
    |frame|
    |help|
    |history|
    |input|
    |library|
    |load|
    |ltrace|
    |read|
    |savesystem|
    |set|
    |spool|
    |undo|
    |what|
    |with|
    |workfiles|
    |zsystemdevelopment|
    )))

@

\defdollar{InitialCommandSynonymAlist}
Axiom can create ``synonyms'' for commands. We create an initial table
of synonyms which are in common use.
<<initvars>>=
(defvar |$InitialCommandSynonymAlist| nil)

@

<<postvars>>=
(eval-when (eval load)
 (setq |$InitialCommandSynonymAlist|
   '(
       (|?|	     . "what commands")
       (|ap|	     . "what things")
       (|apr|	     . "what things")
       (|apropos|    . "what things")
       (|cache|	     . "set functions cache")
       (|cl|	     . "clear")
       (|cls|	     . "zsystemdevelopment )cls")
       (|cms|	     . "system")
       (|co|	     . "compiler")
       (|d|	     . "display")
       (|dep|	     . "display dependents")
       (|dependents| . "display dependents")
       (|e|	     . "edit")
       (|expose|     . "set expose add constructor")
       (|fc|	     . "zsystemdevelopment )c")
       (|fd|	     . "zsystemdevelopment )d")
       (|fdt|	     . "zsystemdevelopment )dt")
       (|fct|	     . "zsystemdevelopment )ct")
       (|fctl|	     . "zsystemdevelopment )ctl")
       (|fe|	     . "zsystemdevelopment )e")
       (|fec|	     . "zsystemdevelopment )ec")
       (|fect|	     . "zsystemdevelopment )ect")
       (|fns|	     . "exec spadfn")
       (|fortran|    . "set output fortran")
       (|h|	     . "help")
       (|hd|	     . "system hypertex &")
       (|kclam|	     . "boot clearClams ( )")
       (|killcaches| . "boot clearConstructorAndLisplibCaches ( )")
       (|patch|	     . "zsystemdevelopment )patch")
       (|pause|	     . "zsystemdevelopment )pause")
       (|prompt|     . "set message prompt")
       (|recurrence| . "set functions recurrence")
       (|restore|    . "history )restore")
       (|save|	     . "history )save")
       (|startGraphics|    .  "system $AXIOM/lib/viewman &")
       (|startNAGLink|     .  "system $AXIOM/lib/nagman &")
       (|stopGraphics|     .  "lisp (|sockSendSignal| 2 15)")
       (|stopNAGLink|      .  "lisp (|sockSendSignal| 8 15)")
       (|time|	     . "set message time")
       (|type|	     . "set message type")
       (|unexpose|   . "set expose drop constructor")
       (|up|	     . "zsystemdevelopment )update")
       (|version|    . "lisp *yearweek*")
       (|w|	     . "what")
       (|wc|	     . "what categories")
       (|wd|	     . "what domains")
       (|who|        . "lisp (pprint credits)")
       (|wp|	     . "what packages")
       (|ws|	     . "what synonyms")
)))

@
\defdollar{CommandSynonymAlist}
The actual list of synonyms is initialized to be the same as the 
above initial list of synonyms. The user synonyms that are added
during a session are pushed onto this list for later lookup.
<<initvars>>=
(defvar |$CommandSynonymAlist| nil)

@

<<postvars>>=
(eval-when (eval load)
 (setq |$CommandSynonymAlist| (copy-alist |$InitialCommandSynonymAlist|)))

@

\defun{ncloopCommand}{ncloopCommand}
The \$systemCommandFunction is set in SpadInterpretStream
to point to the function InterpExecuteSpadSystemCommand.
The system commands are handled by the function kept in the ``hook''
variable \verb|$systemCommandFunction| which
has the default function \verb|InterpExecuteSpadSystemCommand|.
Thus, when a system command is entered this function is called.

The only exception is the \verb|)include| function which inserts
the contents of a file inline in the input stream. This is useful
for processing \verb|)read| of input files.
\calls{ncloopCommand}{ncloopPrefix?}
\calls{ncloopCommand}{ncloopInclude1}
\callsdollar{ncloopCommand}{systemCommandFunction}
\usesdollar{ncloopCommand}{systemCommandFunction}
<<defun ncloopCommand>>=
(defun |ncloopCommand| (line n)
 (let (a)
 (declare (special |$systemCommandFunction|))
  (if (setq a (|ncloopPrefix?| ")include" line))
   (|ncloopInclude1| a n)
   (progn
    (funcall |$systemCommandFunction| line)
    n))))

@

\defun{ncloopPrefix?}{ncloopPrefix?}
If we find the prefix string in the whole string starting at position zero
we return the remainder of the string without the leading prefix.
<<defun ncloopPrefix?>>=
(defun |ncloopPrefix?| (prefix whole)
 (when (eql (search prefix whole) 0)
  (subseq whole (length prefix))))

@

\defun{selectOptionLC}{selectOptionLC}
\calls{selectOptionLC}{selectOption}
\calls{selectOptionLC}{downcase}
\calls{selectOptionLC}{object2Identifier}
<<defun selectOptionLC>>=
(defun |selectOptionLC| (x l errorFunction)
 (|selectOption| (downcase (|object2Identifier| x)) l errorFunction)) 

@

\defun{selectOption}{selectOption}
\calls{selectOption}{member}
\calls{selectOption}{identp}
\calls{selectOption}{stringPrefix?}
\calls{selectOption}{pname}
\calls{selectOption}{pairp}
\calls{selectOption}{qcdr}
\calls{selectOption}{qcar}
<<defun selectOption>>=
(defun |selectOption| (x l errorfunction)
 (let (u y)
  (cond
   ((|member| x l) x)
   ((null (identp x))
    (cond
     (errorfunction (funcall errorfunction x u))
     (t nil)))
   (t
    (setq u
     (let (t0)
       (do ((t1 l (cdr t1)) (y nil))
           ((or (atom t1) (progn (setq y (car t1)) nil)) (nreverse0 t0))
          (if (|stringPrefix?| (pname x) (pname y))
             (setq t0 (cons y t0))))))
    (cond
     ((and (pairp u) (eq (qcdr u) nil) (progn (setq y (qcar u)) t)) y)
     (errorfunction (funcall errorfunction x u))
     (t nil))))))

@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{abbreviations help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<abbreviations.help>>=
====================================================================
A.2.  )abbreviation
====================================================================
 
User Level Required:  compiler
 
Command Syntax: 
 
  -  )abbreviation query  [nameOrAbbrev]
  -  )abbreviation category  abbrev  fullname [)quiet]
  -  )abbreviation domain  abbrev  fullname   [)quiet]
  -  )abbreviation package  abbrev  fullname  [)quiet]
  -  )abbreviation remove  nameOrAbbrev
 
Command Description: 
 
This command is used to query, set and remove abbreviations for category,
domain and package constructors. Every constructor must have a unique
abbreviation. This abbreviation is part of the name of the subdirectory under
which the components of the compiled constructor are stored. Furthermore, by
issuing this command you let the system know what file to load automatically
if you use a new constructor. Abbreviations must start with a letter and then
be followed by up to seven letters or digits. Any letters appearing in the
abbreviation must be in uppercase.
 
When used with the query argument, this command may be used to list the name
associated with a particular abbreviation or the abbreviation for a
constructor. If no abbreviation or name is given, the names and corresponding
abbreviations for all constructors are listed.
 
The following shows the abbreviation for the constructor List:
 
)abbreviation query List
 
The following shows the constructor name corresponding to the abbreviation
NNI:
 
)abbreviation query NNI
 
The following lists all constructor names and their abbreviations.
 
)abbreviation query
 
To add an abbreviation for a constructor, use this command with category,
domain or package. The following add abbreviations to the system for a
category, domain and package, respectively:
 
)abbreviation domain   SET Set
)abbreviation category COMPCAT  ComplexCategory
)abbreviation package  LIST2MAP ListToMap
 
If the )quiet option is used, no output is displayed from this command. You
would normally only define an abbreviation in a library source file. If this
command is issued for a constructor that has already been loaded, the
constructor will be reloaded next time it is referenced. In particular, you
can use this command to force the automatic reloading of constructors.
 
To remove an abbreviation, the remove argument is used. This is usually only
used to correct a previous command that set an abbreviation for a constructor
name. If, in fact, the abbreviation does exist, you are prompted for
confirmation of the removal request. Either of the following commands will
remove the abbreviation VECTOR2 and the constructor name VectorFunctions2
from the system:
 
)abbreviation remove VECTOR2
)abbreviation remove VectorFunctions2
 
Also See: 
o )compile
 
@
\footnote{\fnref{compile}}

\section{Functions}
\defun{abbreviations}{abbreviations}
\calls{abbreviations}{abbreviationsSpad2Cmd}
<<defun abbreviations>>=
(defun |abbreviations| (l)
 (|abbreviationsSpad2Cmd| l)) 

@
\defun{abbreviationsSpad2Cmd}{abbreviationsSpad2Cmd}
\calls{abbreviationsSpad2Cmd}{listConstructorAbbreviations}
\calls{abbreviationsSpad2Cmd}{abbreviation?}
\calls{abbreviationsSpad2Cmd}{abbQuery}
\calls{abbreviationsSpad2Cmd}{deldatabase}
\calls{abbreviationsSpad2Cmd}{size}
\calls{abbreviationsSpad2Cmd}{sayKeyedMsg}
\calls{abbreviationsSpad2Cmd}{mkUserConstructorAbbreviation}
\calls{abbreviationsSpad2Cmd}{setdatabase}
\calls{abbreviationsSpad2Cmd}{seq}
\calls{abbreviationsSpad2Cmd}{exit}
\calls{abbreviationsSpad2Cmd}{opOf}
\calls{abbreviationsSpad2Cmd}{helpSpad2Cmd}
\calls{abbreviationsSpad2Cmd}{selectOptionLC}
\calls{abbreviationsSpad2Cmd}{pairp}
\calls{abbreviationsSpad2Cmd}{qcar}
\calls{abbreviationsSpad2Cmd}{qcdr}
\usesdollar{abbreviationsSpad2Cmd}{options}
<<defun abbreviationsSpad2Cmd>>=
(defun |abbreviationsSpad2Cmd| (arg)
 (let (abopts quiet opt key type constructor t2 a b al)
  (declare (special |$options|))
  (if (null arg) 
   (|helpSpad2Cmd| '(|abbreviations|))
   (progn
    (setq abopts '(|query| |domain| |category| |package| |remove|))
    (setq quiet nil)
    (do ((t0 |$options| (cdr t0)) (t1 nil))
        ((or (atom t0) 
             (progn (setq t1 (car t0)) nil)
             (progn (progn (setq opt (car t1)) t1) nil))
          nil)
      (setq opt (|selectOptionLC| opt '(|quiet|) '|optionError|))
      (when (eq opt '|quiet|) (setq quiet t)))
    (when
     (and (pairp arg) 
           (progn 
            (setq opt (qcar arg))
            (setq al (qcdr arg))
            t))
       (setq key (|opOf| (car al)))
       (setq type (|selectOptionLC| opt abopts '|optionError|))
       (cond
        ((eq type '|query|)
         (cond 
          ((null al) (|listConstructorAbbreviations|))
          ((setq constructor (|abbreviation?| key))
            (|abbQuery| constructor))
          (t (|abbQuery| key))))
        ((eq type '|remove|)
         (deldatabase key 'abbreviation))
        ((oddp (size al))
         (|sayKeyedMsg| 's2iz0002 (list type)))
        (t
         (do () (nil nil)
          (seq 
           (exit 
            (cond
             ((null al) (return '|fromLoop|))
             (t
               (setq t2 al)
               (setq a (car t2))
               (setq b (cadr t2))
               (setq al (cddr t2))
               (|mkUserConstructorAbbreviation| b a type)
               (setdatabase b 'abbreviation a)
               (setdatabase b 'constructorkind type))))))
         (unless quiet
           (|sayKeyedMsg| 's2iz0001 (list a type (|opOf| b)))))))))))

@

\defun{listConstructorAbbreviations}{listConstructorAbbreviations}
\calls{listConstructorAbbreviations}{upcase}
\calls{listConstructorAbbreviations}{queryUserKeyedMsg}
\calls{listConstructorAbbreviations}{memq}
\calls{listConstructorAbbreviations}{string2id-n}
\calls{listConstructorAbbreviations}{whatSpad2Cmd}
\calls{listConstructorAbbreviations}{sayKeyedMsg}
<<defun listConstructorAbbreviations>>=
(defun |listConstructorAbbreviations| ()
 (let (x)
  (setq x (upcase (|queryUserKeyedMsg| 's2iz0056 nil)))
  (if (memq (string2id-n x 1) '(Y YES))
   (progn
    (|whatSpad2Cmd| '(|categories|))
    (|whatSpad2Cmd| '(|domains|))
    (|whatSpad2Cmd| '(|packages|)))
   (|sayKeyedMsg| 's2iz0057 nil))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{boot help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<boot.help>>=
====================================================================
A.3.  )boot
====================================================================
 
User Level Required:  development
 
Command Syntax: 
 
  -  )boot bootExpression
 
Command Description: 
 
This command is used by AXIOM system developers to execute expressions
written in the BOOT language. For example,
 
)boot times3(x) == 3*x
 
creates and compiles the Lisp function ``times3'' obtained by translating the
BOOT code.
 
Also See: 
o )fin
o )lisp
o )set
o )system
 
@
\footnote{
\fnref{fin}
\fnref{lisp}
\fnref{set}
\fnref{system}}

\section{Functions}

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{browse help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<browse.help>>=

User Level Required: development

Command Syntax:

  )browse

Command Description:

This command is used by Axiom system users to start the Axiom top level
loop listening for browser connections.

@
\section{Overview}
The Axiom book on the help browser is a complete rewrite of the 
hyperdoc mechanism. There are several components that were needed
to make this function. Most of the web browser components are
described in bookvol11.pamphlet. This portion describes some of
the design issues needed to support the interface.

The axServer command takes a port (defaulting to 8085) and a
program to handle the browser interaction (defaulting to multiServ).
The axServer function opens the port, constructs the stream, and
passes the stream to multiServ. The multiServ loop processes one
interaction at a time.

So the basic process is that the Axiom ``)browse'' command opens a
socket and listens for http requests. Based on the type of request
(either 'GET' or 'POST') and the content of the request, which is
one of:
\begin{itemize}
\item command - algebra request/response
\item lispcall - a lisp s-expression to be evaluated
\item showcall - an Axiom )show command
\end{itemize}
the multiServ function will call a handler function to evaluate
the command line and construct a response. GET requests result
in a new browser page. POST requests result in an inline result.

Most responses contain the fields:
\begin{itemize}
\item stepnum - this is the Axiom step number 
\item command - this is the original command from the browser
\item algebra - this is the Axiom 2D algebra output
\item mathml - this is the MathML version of the Axiom algebra
\item type - this is the type of the Axiom result
\end{itemize}

\section{Browsers, MathML, and Fonts}
This work has the Firefox browser as its target. Firefox has built-in
support for MathML, javascript, and XMLHttpRequest handling. More details
are available in bookvol11.pamphlet but the very basic machinery for 
communication with the browser involves a dance between the browser
and the multiServ function (see the axserver.spad.pamphlet). 

In particular, a simple request is embedded in a web page as:
\begin{verbatim}
<ul>
 <li>
  <input type="submit" id="p3" class="subbut" 
    onclick="makeRequest('p3');"
    value="sin(x)" />
  <div id="ansp3"><div></div></div>
 </li>
</ul>
\end{verbatim}
which says that this is an html ``input'' field of type ``submit''.
The CSS display class is ``subbut'' which is of a different color
than the surrounding text to make it obvious that you can click on
this field. Clickable fields that have no response text are of class
``noresult''.

The javascript call to ``makeRequest'' gives the ``id'' of this input
field, which must be unique in the page, as an argument. In this case,
the argument is 'p3'. The ``value'' field holds the display text which
will be passed back to Axiom as a command.

When the result arrives the ``showanswer'' function will select out
the mathml field of the response, construct the ``id'' of the html
div to hold the response by concatenating the string ``ans'' (answer)
to the ``id'' of the request resulting, in this case, as ``ansp3''.
The ``showanswer'' function will find this div and replace it with a
div containing the mathml result.

The ``makeRequest'' function is:
\begin{verbatim}
 function makeRequest(arg) {
   http_request = new XMLHttpRequest();         
   var command = commandline(arg);
   //alert(command);
   http_request.open('POST', '127.0.0.1:8085', true);
   http_request.onreadystatechange = handleResponse;
   http_request.setRequestHeader('Content-Type', 'text/plain');
   http_request.send("command="+command);
   return(false);
\end{verbatim}
It contains a request to open a local server connection to Axiom,
sets ``handleResponse'' as the function to call on reply, sets up
the type of request, fills in the command field, and sends off the
http request.

When a response is received, the ``handleResponse'' function checks
for the correct reply state, strips out the important text, and
calls ``showanswer''.
\begin{verbatim}
 function handleResponse() {
  if (http_request.readyState == 4) {
   if (http_request.status == 200) {
    showanswer(http_request.responseText,'mathAns');
   } else
   {
     alert('There was a problem with the request.'+ http_request.statusText);
   }
  }
 }
\end{verbatim}
See bookvol11.pamphlet for further details.

\section{The axServer/multiServ loop}
The basic call to start an Axiom browser listener is:
\begin{verbatim}
  )set message autoload off
  )set output mathml on
  axServer(8085,multiServ)$AXSERV
\end{verbatim}

This call sets the port, opens a socket, attaches it to a stream,
and then calls ``multiServ'' with that stream. The ``multiServ''
function loops serving web responses to that port.

\section{The )browse command}
In order to make the whole process cleaner the function ``)browse''
handles the details. This code creates the command-line function for )browse

The browse function does the internal equivalent of the following 3 command
line statments:
\begin{verbatim}
  )set message autoload off
  )set output mathml on
  axServer(8085,multiServ)$AXSERV
\end{verbatim}
which causes Axiom to start serving web pages on port 8085

For those unfamiliar with calling algebra from lisp there are a 
few points to mention. 

The loadLib needs to be called to load the algebra code into the image.
Normally this is automatic but we are not using the interpreter so
we need to do this ``by hand''.

Each algebra file contains a "constructor function" which builds the
domain, which is a vector, and then caches the vector so that every
call to the contructor returns an EQ vector, that is, the same vector.
In this case, we call the constructor $\vert$AxiomServer$\vert$

The axServer function was mangled internally to 
$\vert$AXSERV;axServer;IMV;2$\vert$.
The multiServ function was mangled to $\vert$AXSERV;multiServ;SeV;3$\vert$
Note well that if you change axserver.spad these names might change
which will generate the error message along the lines of:
\begin{verbatim}
    System error:
    The function $\vert$AXSERV;axServer;IMV;2$\vert$ is undefined.
\end{verbatim}

To fix this you need to look at int/algebra/AXSERV.nrlib/code.lsp
and find the new mangled function name. A better solution would
be to dynamically look up the surface names in the domain vector.

Each Axiom function expects the domain vector as the last argument.
This is not obvious from the call as the interpreter supplies it.
We must do that ``by hand''.

We don't call the multiServ function. We pass it as a parameter to
the axServer function. When it does get called by the SPADCALL
macro it needs to be a lisp pair whose car is the function and
whose cdr is the domain vector. We construct that pair here as
the second argument to axServer. The third, hidden, argument to
axServer is the domain vector which we supply ``by hand''.

The socket can be supplied on the command line but defaults to 8085.
Axiom supplies the arguments as a list.
\section{Variables Used}
\section{Functions}
\calls{browse}{set}
\calls{browse}{loadLib}
\calls{browse}{AxiomServer}
\calls{browse}{AXSERV;axServer;IMV;2}
<<defun browse>>=
(defun |browse| (socket)
 (let (axserv browser)
  (if socket 
    (setq socket (car socket))
    (setq socket 8085))
  (|set| '(|mes| |auto| |off|))
  (|set| '(|out| |mathml| |on|))
  (|loadLib| '|AxiomServer|)
  (setq axserv (|AxiomServer|))
  (setq browser 
   (|AXSERV;axServer;IMV;2| socket
    (cons #'|AXSERV;multiServ;SeV;3| axserv) axserv))))

@
Now we have to bolt it into Axiom. This involves two lookups.

We create the lisp pair 
\begin{verbatim}
  (|browse| . |development|)
\end{verbatim} 
and cons it into the \$systemCommands command table.  This allows the
command to be executed in development mode.  This lookup decides if
this command is allowed. It also has the side-effect of putting the
command into the \$SYSCOMMANDS variable which is used to determine
if the token is a command.

\section{The server support code}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{cd help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<cd.help>>=
====================================================================
A.4.  )cd
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  -  )cd directory
 
Command Description: 
 
This command sets the AXIOM working current directory. The current directory
is used for looking for input files (for )read), AXIOM library source files
(for )compile), saved history environment files (for )history )restore),
compiled AXIOM library files (for )library), and files to edit (for )edit).
It is also used for writing spool files (via )spool), writing history input
files (via )history )write) and history environment files (via )history
)save),and compiled AXIOM library files (via )compile).
 
If issued with no argument, this command sets the AXIOM current directory to
your home directory. If an argument is used, it must be a valid directory
name. Except for the ``)'' at the beginning of the command, this has the same
syntax as the operating system cd command.
 
Also See: 
o )compile
o )edit
o )history
o )library
o )read
o )spool
 
@
\footnote{
\fnref{compile}
\fnref{edit}
\fnref{history}
\fnref{library}
\fnref{read}
\fnref{spool}}

\section{Variables Used}
\section{Functions}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{clear help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<clear.help>>=
====================================================================
A.6.  )clear
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )clear all
  - )clear completely
  - )clear properties all
  - )clear properties  obj1 [obj2 ...]
  - )clear value      all
  - )clear value     obj1 [obj2 ...]
  - )clear mode       all
  - )clear mode      obj1 [obj2 ...]
 
Command Description: 
 
This command is used to remove function and variable declarations,
definitions and values from the workspace. To empty the entire workspace and
reset the step counter to 1, issue
 
)clear all
 
To remove everything in the workspace but not reset the step counter, issue
 
)clear properties all
 
To remove everything about the object x, issue
 
)clear properties x
 
To remove everything about the objects x, y and f, issue
 
)clear properties x y f
 
The word properties may be abbreviated to the single letter ``p''.
 
)clear p all
)clear p x
)clear p x y f
 
All definitions of functions and values of variables may be removed by either
 
)clear value all
)clear v all
 
This retains whatever declarations the objects had. To remove definitions and
values for the specific objects x, y and f, issue
 
)clear value x y f
)clear v x y f
 
To remove the declarations of everything while leaving the definitions and
values, issue
 
)clear mode  all
)clear m all
 
To remove declarations for the specific objects x, y and f, issue
 
)clear mode x y f
)clear m x y f
 
The )display names and )display properties commands may be used to see what
is currently in the workspace.
 
The command
 
)clear completely
 
does everything that )clear all does, and also clears the internal system
function and constructor caches.
 
Also See: 
o )display
o )history
o )undo
 
@
\footnote{
\fnref{display}
\fnref{history}
\fnref{undo}}

\section{Variables Used}
\defdollar{clearOptions}
<<initvars>>=
(defvar |$clearOptions| '(|modes| |operations| |properties| |types| |values|))

@

\section{Functions}
\defun{clear}{clear}
\calls{clear}{clearSpad2Cmd}
<<defun clear>>=
(defun |clear| (l)
 (|clearSpad2Cmd| l)) 

@

\defdollar{clearExcept}
<<initvars>>=
(defvar |$clearExcept| nil)

@

\defun{clearSpad2Cmd}{clearSpad2Cmd}
TPDHERE: Note that this function also seems to parse out )except
)completely and )scaches which don't seem to be documented.
\calls{clearSpad2Cmd}{selectOptionLC}
\calls{clearSpad2Cmd}{sayKeyedMsg}
\calls{clearSpad2Cmd}{clearCmdAll}
\calls{clearSpad2Cmd}{clearCmdCompletely}
\calls{clearSpad2Cmd}{clearCmdSortedCaches}
\calls{clearSpad2Cmd}{clearCmdExcept}
\calls{clearSpad2Cmd}{clearCmdParts}
\calls{clearSpad2Cmd}{updateCurrentInterpreterFrame}
\usesdollar{clearSpad2Cmd}{clearExcept}
\usesdollar{clearSpad2Cmd}{options}
\usesdollar{clearSpad2Cmd}{clearOptions}
<<defun clearSpad2Cmd>>=
(defun |clearSpad2Cmd| (l)
  (let (|$clearExcept| opt optlist arg)
  (declare (special |$clearExcept| |$options| |$clearOptions|))
  (cond 
   (|$options|
    (setq |$clearExcept|
     (prog (t0)
      (setq t0 t)
      (return
       (do ((t1 nil (null t0))
            (t2 |$options| (cdr t2))
            (t3 nil))
           ((or t1 
                (atom t2)
                (progn (setq t3 (car t2)) nil)
                (progn (progn (setq opt (car t3)) t3) nil))
              t0)
        (setq t0
         (and t0 
              (eq
               (|selectOptionLC| opt '(|except|) '|optionError|)
               '|except|)))))))))
  (cond
   ((null l)
     (setq optlist
      (prog (t4)
       (setq t4 nil)
       (return
        (do ((t5 |$clearOptions| (cdr t5)) (x nil))
            ((or (atom t5) (progn (setq x (car t5)) nil)) t4)
         (setq t4 (append t4 `(|%l| "       " ,x)))))))
     (|sayKeyedMsg| 's2iz0010 (list optlist)))
   (t
     (setq arg
      (|selectOptionLC| (car l) '(|all| |completely| |scaches|) nil))
     (cond
      ((eq arg '|all|)        (|clearCmdAll|))
      ((eq arg '|completely|) (|clearCmdCompletely|))
      ((eq arg '|scaches|)    (|clearCmdSortedCaches|))
      (|$clearExcept|         (|clearCmdExcept| l))
      (t 
       (|clearCmdParts| l)
       (|updateCurrentInterpreterFrame|))))))) 

@

\defun{clearCmdSortedCaches}{clearCmdSortedCaches}
\calls{clearCmdSortedCaches}{compiledLookupCheck}
\calls{clearCmdSortedCaches}{spadcall}
\usesdollar{clearCmdSortedCaches}{lookupDefaults}
\usesdollar{clearCmdSortedCaches}{Void}
\usesdollar{clearCmdSortedCaches}{ConstructorCache}
<<defun clearCmdSortedCaches>>=
(defun |clearCmdSortedCaches| ()
 (let (|$lookupDefaults| domain pair)
  (declare (special |$lookupDefaults| |$Void| |$ConstructorCache|))
  (do ((t0 (hget |$ConstructorCache| '|SortedCache|) (cdr t0)) 
       (t1 nil))
      ((or (atom t0) 
           (progn
            (setq t1 (car t0)) 
            (setq domain (cddr t1))
            nil))
         nil)
    (setq pair (|compiledLookupCheck| '|clearCache| (list |$Void|) domain))
    (spadcall pair))))

@

\defdollar{functionTable}
<<initvars>>=
(defvar |$functionTable| nil)

@

\defun{clearCmdCompletely}{clearCmdCompletely}
\calls{clearCmdCompletely}{clearCmdAll}
\calls{clearCmdCompletely}{sayKeyedMsg}
\calls{clearCmdCompletely}{clearClams}
\calls{clearCmdCompletely}{clearConstructorCaches}
\calls{clearCmdCompletely}{reclaim}
\usesdollar{clearCmdCompletely}{localExposureData}
\usesdollar{clearCmdCompletely}{xdatabase}
\usesdollar{clearCmdCompletely}{CatOfCatDatabase}
\usesdollar{clearCmdCompletely}{DomOfCatDatabase}
\usesdollar{clearCmdCompletely}{JoinOfCatDatabase}
\usesdollar{clearCmdCompletely}{JoinOfDomDatabase}
\usesdollar{clearCmdCompletely}{attributeDb}
\usesdollar{clearCmdCompletely}{functionTable}
\usesdollar{clearCmdCompletely}{existingFiles}
\usesdollar{clearCmdCompletely}{localExposureDataDefault}
<<defun clearCmdCompletely>>=
(defun |clearCmdCompletely| ()
  (declare (special |$localExposureData| |$xdatabase| |$CatOfCatDatabase|
    |$DomOfCatDatabase| |$JoinOfCatDatabase| |$JoinOfDomDatabase| 
    |$attributeDb| |$functionTable| |$existingFiles| 
    |$localExposureDataDefault|))
  (|clearCmdAll|)
  (setq |$localExposureData| (copy-seq |$localExposureDataDefault|))
  (setq |$xdatabase| nil)
  (setq |$CatOfCatDatabase| nil)
  (setq |$DomOfCatDatabase| nil)
  (setq |$JoinOfCatDatabase| nil)
  (setq |$JoinOfDomDatabase| nil)
  (setq |$attributeDb| nil)
  (setq |$functionTable| nil)
  (|sayKeyedMsg| 's2iz0013 nil)
  (|clearClams|)
  (|clearConstructorCaches|)
  (setq |$existingFiles| (make-hash-table :test #'equal))
  (|sayKeyedMsg| 's2iz0014 nil)
  (reclaim)
  (|sayKeyedMsg| 's2iz0015 nil))

@

\defun{clearCmdAll}{clearCmdAll}
\calls{clearCmdAll}{clearCmdSortedCaches}
\calls{clearCmdAll}{untraceMapSubNames}
\calls{clearCmdAll}{resetInCoreHist}
\calls{clearCmdAll}{deleteFile}
\calls{clearCmdAll}{histFileName}
\calls{clearCmdAll}{updateCurrentInterpreterFrame}
\calls{clearCmdAll}{clearMacroTable}
\calls{clearCmdAll}{sayKeyedMsg}
\usesdollar{clearCmdAll}{frameRecord}
\usesdollar{clearCmdAll}{previousBindings}
\usesdollar{clearCmdAll}{variableNumberAlist}
\usesdollar{clearCmdAll}{InteractiveFrame}
\usesdollar{clearCmdAll}{useInternalHistoryTable}
\usesdollar{clearCmdAll}{internalHistoryTable}
\usesdollar{clearCmdAll}{frameMessages}
\usesdollar{clearCmdAll}{interpreterFrameName}
\usesdollar{clearCmdAll}{currentLine}
<<defun clearCmdAll>>=
(defun |clearCmdAll| ()
  (declare (special |$frameRecord| |$previousBindings| |$variableNumberAlist|
     |$InteractiveFrame| |$useInternalHistoryTable| |$internalHistoryTable|
     |$frameMessages| |$interpreterFrameName| |$currentLine|))
  (|clearCmdSortedCaches|)
  (setq |$frameRecord| nil)
  (setq |$previousBindings| nil)
  (setq |$variableNumberAlist| nil)
  (|untraceMapSubNames| /tracenames)
  (setq |$InteractiveFrame| (list (list nil)))
  (|resetInCoreHist|)
  (when |$useInternalHistoryTable| 
    (setq |$internalHistoryTable| nil)
   (|deleteFile| (|histFileName|)))
  (setq |$IOindex| 1)
  (|updateCurrentInterpreterFrame|)
  (setq |$currentLine| ")clear all")
  (|clearMacroTable|)
  (when |$frameMessages|
    (|sayKeyedMsg| 's2iz0011 (list |$interpreterFrameName|))
    (|sayKeyedMsg| 's2iz0012 nil)))

@

\defun{clearMacroTable}{clearMacroTable}
\usesdollar{clearMacroTable}{pfMacros}
<<defun clearMacroTable>>=
(defun |clearMacroTable| ()
  (declare (special |$pfMacros|))
  (setq |$pfMacros| nil))

@

\defun{clearCmdExcept}{clearCmdExcept}
Clear all the options except the argument.
\calls{clearCmdExcept}{stringPrefix?}
\calls{clearCmdExcept}{object2String}
\calls{clearCmdExcept}{clearCmdParts}
\usesdollar{clearCmdExcept}{clearOptions}
<<defun clearCmdExcept>>=
(defun |clearCmdExcept| (arg)
 (let ((opt (car arg)) (vl (cdr arg)))
 (declare (special |$clearOptions|))
  (dolist (option |$clearOptions|)
   (unless (|stringPrefix?| (|object2String| opt) (|object2String| option))
    (|clearCmdParts| (cons option vl))))))

@

\defun{clearCmdParts}{clearCmdParts}
\calls{clearCmdParts}{selectOptionLC}
\calls{clearCmdParts}{pname}
\calls{clearCmdParts}{types}
\calls{clearCmdParts}{modes}
\calls{clearCmdParts}{values}
\calls{clearCmdParts}{boot-equal}
\calls{clearCmdParts}{assocleft}
\calls{clearCmdParts}{remdup}
\calls{clearCmdParts}{assoc}
\calls{clearCmdParts}{isMap}
\calls{clearCmdParts}{get}
\calls{clearCmdParts}{pairp}
\calls{clearCmdParts}{exit}
\calls{clearCmdParts}{untraceMapSubNames}
\calls{clearCmdParts}{seq}
\calls{clearCmdParts}{recordOldValue}
\calls{clearCmdParts}{recordNewValue}
\calls{clearCmdParts}{deleteAssoc}
\calls{clearCmdParts}{sayKeyedMsg}
\calls{clearCmdParts}{getParserMacroNames}
\calls{clearCmdParts}{getInterpMacroNames}
\calls{clearCmdParts}{clearDependencies}
\calls{clearCmdParts}{member}
\calls{clearCmdParts}{clearParserMacro}
\calls{clearCmdParts}{sayMessage}
\calls{clearCmdParts}{fixObjectForPrinting}
\usesdollar{clearCmdParts}{e}
\usesdollar{clearCmdParts}{InteractiveFrame}
\usesdollar{clearCmdParts}{clearOptions}
<<defun clearCmdParts>>=
(defun |clearCmdParts| (arg)
 (let (|$e| (opt (car arg)) option pmacs imacs (vl (cdr arg)) p1 lm prop p2)
 (declare (special |$e| |$InteractiveFrame| |$clearOptions|))
  (setq option (|selectOptionLC| opt |$clearOptions| '|optionError|))
  (setq option (intern (pname option)))
  (setq option
   (case option
    (|types| '|mode|)
    (|modes| '|mode|)
    (|values| '|value|)
    (t option)))
  (if (null vl)
   (|sayKeyedMsg| 's2iz0055 nil)
   (progn
    (setq pmacs (|getParserMacroNames|))
    (setq imacs (|getInterpMacroNames|))
    (cond
     ((boot-equal vl '(|all|))
      (setq vl (assocleft (caar |$InteractiveFrame|)))
      (setq vl (remdup (append vl pmacs)))))
    (setq |$e| |$InteractiveFrame|)
    (do ((t0 vl (cdr t0)) (x nil))
        ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
      (|clearDependencies| x t)
      (when (and (eq option '|properties|) (|member| x pmacs))
        (|clearParserMacro| x))
      (when (and (eq option '|properties|) 
                 (|member| x imacs)
                 (null (|member| x pmacs)))
        (|sayMessage| (cons 
         "   You cannot clear the definition of the system-defined macro "
          (cons (|fixObjectForPrinting| x) 
                (cons (intern "." "BOOT") nil)))))
      (cond
       ((setq p1 (|assoc| x (caar |$InteractiveFrame|)))
        (cond
         ((eq option '|properties|)
          (cond
           ((|isMap| x)
            (seq
             (cond
              ((setq lm 
                (|get| x '|localModemap| |$InteractiveFrame|))
               (cond
                ((pairp lm)
                (exit (|untraceMapSubNames| (cons (cadar lm) nil))))))
              (t nil)))))
          (dolist (p2 (cdr p1))
            (setq prop (car p2))
            (|recordOldValue| x prop (cdr p2))
            (|recordNewValue| x prop nil))
          (setf (caar |$InteractiveFrame|)
           (|deleteAssoc| x (caar |$InteractiveFrame|))))
         ((setq p2 (|assoc| option (cdr p1)))
          (|recordOldValue| x option (cdr p2))
          (|recordNewValue| x option nil)
          (rplacd p2 nil))))))
    nil))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{close help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<close.help>>=
====================================================================
A.5.  )close
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )close
  - )close )quietly
 
Command Description: 
 
This command is used to close down interpreter client processes. Such
processes are started by HyperDoc to run AXIOM examples when you click on
their text. When you have finished examining or modifying the example and you
do not want the extra window around anymore, issue
 
)close
 
to the AXIOM prompt in the window.
 
If you try to close down the last remaining interpreter client process, AXIOM
will offer to close down the entire AXIOM session and return you to the
operating system by displaying something like
 
   This is the last AXIOM session. Do you want to kill AXIOM?
 
Type "y" (followed by the Return key) if this is what you had in mind. Type
"n" (followed by the Return key) to cancel the command.
 
You can use the )quietly option to force AXIOM to close down the interpreter
client process without closing down the entire AXIOM session.
 
Also See: 
o )quit
o )pquit
 
@
\footnote{
\fnref{quit}
\fnref{pquit}}

\section{Functions}
\defun{queryClients}{queryClients}
Returns the number of active scratchpad clients
\calls{queryClients}{sockSendInt}
\calls{queryClients}{sockGetInt}
\usesdollar{queryClients}{SessionManager}
\usesdollar{queryClients}{QueryClients}
<<defun queryClients>>=
(defun |queryClients| ()
  (declare (special |$SessionManager| |$QueryClients|))
  (|sockSendInt| |$SessionManager| |$QueryClients|)
  (|sockGetInt| |$SessionManager|)) 

@

\defun{close}{close}
\calls{close}{throwKeyedMsg}
\calls{close}{sockSendInt}
\calls{close}{closeInterpreterFrame}
\calls{close}{selectOptionLC}
\calls{close}{upcase}
\calls{close}{queryUserKeyedMsg}
\calls{close}{memq}
\calls{close}{string2id-n}
\calls{close}{queryClients}
\usesdollar{close}{SpadServer}
\usesdollar{close}{SessionManager}
\usesdollar{close}{CloseClient}
\usesdollar{close}{currentFrameNum}
\usesdollar{close}{options}
<<defun close>>=
(defun |close| (args)
 (declare (ignore args))
 (let (numClients opt fullopt quiet x)
 (declare (special |$SpadServer| |$SessionManager| |$CloseClient|
     |$currentFrameNum| |$options|))
  (if (null |$SpadServer|) 
   (|throwKeyedMsg| 's2iz0071 nil))
   (progn
    (setq numClients (|queryClients|))
    (cond
     ((> numClients 1)
       (|sockSendInt| |$SessionManager| |$CloseClient|)
       (|sockSendInt| |$SessionManager| |$currentFrameNum|)
       (|closeInterpreterFrame| nil))
     (t
      (do ((t0 |$options| (cdr t0)) (t1 nil))
          ((or (atom t0) 
               (progn (setq t1 (car t0)) nil)
               (progn (progn (setq opt (car t1)) t1) nil))
             nil)
       (setq fullopt (|selectOptionLC| opt '(|quiet|) '|optionError|))
       (unless quiet (setq quiet (eq fullopt '|quiet|))))
      (cond
       (quiet
        (|sockSendInt| |$SessionManager| |$CloseClient|)
        (|sockSendInt| |$SessionManager| |$currentFrameNum|)
        (|closeInterpreterFrame| nil))
       (t
        (setq x (upcase (|queryUserKeyedMsg| 's2iz0072 nil)))
        (when (memq (string2id-n x 1) '(yes y)) (bye)))))))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{compiler help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<compiler.help>>=
====================================================================
A.7.  )compile
====================================================================
 
User Level Required:  compiler
 
Command Syntax: 
 
  -  )compile
  -  )compile fileName
  -  )compile fileName.as
  -  )compile directory/fileName.as
  -  )compile fileName.ao
  -  )compile directory/fileName.ao
  -  )compile fileName.al
  -  )compile directory/fileName.al
  -  )compile fileName.lsp
  -  )compile directory/fileName.lsp
  -  )compile fileName.spad
  -  )compile directory/fileName.spad
  -  )compile fileName )new
  -  )compile fileName )old
  -  )compile fileName )translate
  -  )compile fileName )quiet
  -  )compile fileName )noquiet
  -  )compile fileName )moreargs
  -  )compile fileName )onlyargs
  -  )compile fileName )break
  -  )compile fileName )nobreak
  -  )compile fileName )library
  -  )compile fileName )nolibrary
  -  )compile fileName )vartrace
  -  )compile fileName )constructor nameOrAbbrev
 
Command Description: 
 
You use this command to invoke the new AXIOM library compiler or the old
AXIOM system compiler. The )compile system command is actually a combination
of AXIOM processing and a call to the AXIOM-XL compiler. It is performing
double-duty, acting as a front-end to both the AXIOM-XL compiler and the old
AXIOM system compiler. (The old AXIOM system compiler was written in Lisp and
was an integral part of the AXIOM environment. The AXIOM-XL compiler is
written in C and executed by the operating system when called from within
AXIOM.)
 
The command compiles files with file extensions .as, .ao and .al with the
AXIOM-XL compiler and files with file extension .spad with the old AXIOM
system compiler. It also can compile files with file extension .lsp. These
are assumed to be Lisp files genererated by the AXIOM-XL compiler. If you
omit the file extension, the command looks to see if you have specified the
)new or )old option. If you have given one of these options, the
corresponding compiler is used. Otherwise, the command first looks in the
standard system directories for files with extension .as, .ao and .al and
then files with extension .spad. The first file found has the appropriate
compiler invoked on it. If the command cannot find a matching file, an error
message is displayed and the command terminates.
 
The )translate option is used to invoke a special version of the old system
compiler that will translate a .spad file to a .as file. That is, the .spad
file will be parsed and analyzed and a file using the new syntax will be
created. By default, the .as file is created in the same directory as the
.spad file. If that directory is not writable, the current directory is used.
If the current directory is not writable, an error message is given and the
command terminates. Note that )translate implies the )old option so the file
extension can safely be omitted. If )translate is given, all other options
are ignored. Please be aware that the translation is not necessarily one
hundred percent complete or correct. You should attempt to compile the output
with the AXIOM-XL compiler and make any necessary corrections.
 
We now describe the options for the new AXIOM-XL compiler.
 
The first thing )compile does is look for a source code filename among its
arguments. Thus
 
)compile mycode.as
)compile /u/jones/as/mycode.as
)compile mycode
 
all invoke )compiler on the file /u/jones/as/mycode.as if the current AXIOM
working directory is /u/jones/as. (Recall that you can set the working
directory via the )cd command. If you don't set it explicitly, it is the
directory from which you started AXIOM.)
 
This is frequently all you need to compile your file. This simple command:
 
  -  Invokes the AXIOM-XL compiler and produces Lisp output.
  -  Calls the Lisp compiler if the AXIOM-XL compilation was
  successful.
  -  Use the )library command to tell AXIOM about
  the contents of your compiled file and arrange to have those contents
  loaded on demand.
 
Should you not want the )library command automatically invoked, call )compile
with the )nolibrary option. For example,
 
)compile mycode.as )nolibrary
 
The general description of AXIOM-XL command line arguments is in the AXIOM-XL
documentation. The default options used by the )compile command can be viewed
and set using the )set compiler args AXIOM system command. The current
defaults are
 
-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom
 
These options mean:
 
  -  -O: perform all optimizations,
  -  -Fasy: generate a .asy file,
  -  -Fao: generate a .ao file,
  -  -Flsp: generate a .lsp (Lisp)
  file,
  -  -laxiom: use the axiom library libaxiom.al,
  -  -Mno-AXL_W_WillObsolete: do not display messages
  about older generated files becoming obsolete, and
  -  -DAxiom: define the global assertion Axiom so that the
  AXIOM-XL libraries for generating stand-alone code are not accidentally
  used with AXIOM.
 
To supplement these default arguments, use the )moreargs option on )compile.
For example,
 
)compile mycode.as )moreargs "-v"
 
uses the default arguments and appends the -v (verbose) argument flag. The
additional argument specification must be enclosed in double quotes.
 
To completely replace these default arguments for a particular use of
)compile, use the )onlyargs option. For example,
 
)compile mycode.as )onlyargs "-v -O"
 
only uses the -v (verbose) and -O (optimize) arguments. The argument
specification must be enclosed in double quotes. In this example, Lisp code
is not produced and so the compilation output will not be available to AXIOM.
 
To completely replace the default arguments for all calls to )compile within
your AXIOM session, use )set compiler args. For example, to use the above
arguments for all compilations, issue
 
)set compiler args "-v -O"
 
Make sure you include the necessary -l and -Y arguments along with those
needed for Lisp file creation. As above, the argument specification must be
enclosed in double quotes.
 
By default, the )library system command exposes all domains and categories it
processes. This means that the AXIOM intepreter will consider those domains
and categories when it is trying to resolve a reference to a function.
Sometimes domains and categories should not be exposed. For example, a domain
may just be used privately by another domain and may not be meant for
top-level use. The )library command should still be used, though, so that the
code will be loaded on demand. In this case, you should use the )nolibrary
option on )compile and the )noexpose option in the )library command. For
example,
 
)compile mycode.as )nolibrary
)library mycode )noexpose
 
Once you have established your own collection of compiled code, you may find
it handy to use the )dir option on the )library command. This causes )library
to process all compiled code in the specified directory. For example,
 
)library )dir /u/jones/as/quantum
 
You must give an explicit directory after )dir, even if you want all compiled
code in the current working directory processed.
 
)library )dir .
 
The )compile command works with several file extensions. We saw above what
happens when it is invoked on a file with extension .as. A .ao file is a
portable binary compiled version of a .as file, and )compile simply passes
the .ao file onto AXIOM-XL. The generated Lisp file is compiled and )library
is automatically called, just as if you had specified a .as file.
 
A .al file is an archive file containing .ao files. The archive is created
(on Unix systems) with the ar program. When )compile is given a .al file, it
creates a directory whose name is based on that of the archive. For example,
if you issue
 
)compile mylib.al
 
the directory mylib.axldir is created. All members of the archive are
unarchived into the directory and )compile is called on each .ao file found.
It is your responsibility to remove the directory and its contents, if you
choose to do so.
 
A .lsp file is a Lisp source file, presumably, in our context, generated by
AXIOM-XL when called with the -Flsp option. When )compile is used with a .lsp
file, the Lisp file is compiled and )library is called. You must also have
present a .asy generated from the same source file.
 
The following are descriptions of options for the old system compiler.
 
You can compile category, domain, and package constructors contained in files
with file extension .spad. You can compile individual constructors or every
constructor in a file.
 
The full filename is remembered between invocations of this command and )edit
commands. The sequence of commands
 
)compile matrix.spad
)edit
)compile
 
will call the compiler, edit, and then call the compiler again on the file
matrix.spad. If you do not specify a directory, the working current directory
(see description of command )cd ) is searched for the file. If the file is
not found, the standard system directories are searched.
 
If you do not give any options, all constructors within a file are compiled.
Each constructor should have an )abbreviation command in the file in which it
is defined. We suggest that you place the )abbreviation commands at the top
of the file in the order in which the constructors are defined. The list of
commands serves as a table of contents for the file.
 
The )library option causes directories containing the compiled code for each
constructor to be created in the working current directory. The name of such
a directory consists of the constructor abbreviation and the .NRLIB file
extension. For example, the directory containing the compiled code for the
MATRIX constructor is called MATRIX.NRLIB. The )nolibrary option says that
such files should not be created. The default is )library. Note that the
semantics of )library and )nolibrary for the new AXIOM-XL compiler and for
the old system compiler are completely different.
 
The )vartrace option causes the compiler to generate extra code for the
constructor to support conditional tracing of variable assignments. (see
description of command )trace ). Without this option, this code is suppressed
and one cannot use the )vars option for the trace command.
 
The )constructor option is used to specify a particular constructor to
compile. All other constructors in the file are ignored. The constructor name
or abbreviation follows )constructor. Thus either
 
)compile matrix.spad )constructor RectangularMatrix
 
or
 
)compile matrix.spad )constructor RMATRIX
 
compiles the RectangularMatrix constructor defined in matrix.spad.
 
The )break and )nobreak options determine what the old system compiler does
when it encounters an error. )break is the default and it indicates that
processing should stop at the first error. The value of the )set break
variable then controls what happens.
 
Also See: 
o )abbreviation
o )edit
o )library

@ 
\footnote{
\fnref{abbreviation}
\fnref{edit}
\fnref{library}}

\section{Functions}

\defvar{/editfile}
<<initvars>>=
(defvar /editfile nil)

@


\defun{compiler}{compiler}
\calls{compiler}{helpSpad2Cmd}
\calls{compiler}{selectOptionLC}
\calls{compiler}{new}
\calls{compiler}{translate}
\calls{compiler}{constructor}
\calls{compiler}{old}
\calls{compiler}{throwKeyedMsg}
\calls{compiler}{pathname}
\calls{compiler}{pathnameType}
\callsdollar{compiler}{findfile}
\calls{compiler}{compileAsharpCmd}
\calls{compiler}{compileSpad2Cmd}
\calls{compiler}{compileAsharpLispCmd}
\calls{compiler}{compileSpadLispCmd}
\calls{compiler}{compileAsharpArchiveCmd}
\calls{compiler}{mergePathnames}
\calls{compiler}{boot-equal}
\usesdollar{compiler}{newConlist}
\usesdollar{compiler}{options}
\uses{compiler}{/editfile}
<<defun compiler>>=
(defun |compiler| (args)
 (let (|$newConlist| optlist optname optargs havenew haveold aft ef af af1)
  (declare (special |$newConlist| |$options| /editfile))
  (setq |$newConlist| nil)
  (cond
   ((and (null args) (null |$options|) (null /editfile))
     (|helpSpad2Cmd| '(|compiler|)))
   (t
    (cond ((null args) (setq args (cons /editfile nil))))
    (setq optlist '(|new| |old| |translate| |constructor|))
    (setq havenew nil)
    (setq haveold nil)
    (do ((t0 |$options| (cdr t0)) (opt nil))
        ((or (atom t0) 
             (progn (setq opt (car t0)) nil)
             (null (null (and havenew haveold))))
          nil)
     (setq optname (car opt))
     (setq optargs (cdr opt))
     (case (|selectOptionLC| optname optlist nil)
      (|new|         (setq havenew t))
      (|translate|   (setq haveold t))
      (|constructor| (setq haveold t))
      (|old|         (setq haveold t))))
    (cond
     ((and havenew haveold) (|throwKeyedMsg| 's2iz0081 nil))
     (t
      (setq af (|pathname| args))
      (setq aft (|pathnameType| af))
      (cond
       ((or havenew (string= aft "as"))
        (if (null (setq af1 ($findfile af '(|as|))))
          (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil))
          (|compileAsharpCmd| (cons af1 nil))))
       ((or haveold (string= aft "spad"))
        (if (null (setq af1 ($findfile af '(|spad|))))
           (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil))
           (|compileSpad2Cmd| (cons af1 nil))))
       ((string= aft "lsp")
        (if (null (setq af1 ($findfile af '(|lsp|))))
          (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil))
          (|compileAsharpLispCmd| (cons af1 nil))))
       ((string= aft "nrlib")
        (if (null (setq af1 ($findfile af '(|nrlib|))))
          (|throwKeyedMsg| 'S2IL0003 (cons (namestring af) nil))
          (|compileSpadLispCmd| (cons af1 nil))))
       ((string= aft "ao")
        (if (null (setq af1 ($findfile af '(|ao|))))
          (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil))
         (|compileAsharpCmd| (cons af1 nil))))
       ((string= aft "al")
        (if (null (setq af1 ($findfile af '(|al|))))
          (|throwKeyedMsg| 's2il0003 (cons (namestring af) nil))
          (|compileAsharpArchiveCmd| (cons af1 nil))))
       (t
        (setq af1 ($findfile af '(|as| |spad| |ao| |asy|)))
        (cond
         ((and af1 (string= (|pathnameType| af1) "as"))
          (|compileAsharpCmd| (cons af1 nil)))
         ((and af1 (string= (|pathnameType| af1) "ao"))
          (|compileAsharpCmd| (cons af1 nil)))
         ((and af1 (string= (|pathnameType| af1) "spad"))
          (|compileSpad2Cmd| (cons af1 nil)))
         ((and af1 (string= (|pathnameType| af1) "asy"))
          (|compileAsharpArchiveCmd| (cons af1 nil)))
         (t
          (setq ef (|pathname| /editfile))
          (setq ef (|mergePathnames| af ef))
          (cond
           ((boot-equal ef af) (|throwKeyedMsg| 's2iz0039 nil))
           (t
            (setq af ef)
            (cond
             ((string= (|pathnameType| af) "as")
              (|compileAsharpCmd| args))
             ((string= (|pathnameType| af) "ao")
              (|compileAsharpCmd| args))
             ((string= (|pathnameType| af) "spad")
              (|compileSpad2Cmd| args))
             (t
              (setq af1 ($findfile af '(|as| |spad| |ao| |asy|)))
              (cond
               ((and af1 (string= (|pathnameType| af1) "as"))
                 (|compileAsharpCmd| (cons af1 nil)))
               ((and af1 (string= (|pathnameType| af1) "ao"))
                 (|compileAsharpCmd| (cons af1 nil)))
               ((and af1 (string= (|pathnameType| af1) "spad"))
                 (|compileSpad2Cmd| (cons af1 nil)))
               ((and af1 (string= (|pathnameType| af1) "asy"))
                (|compileAsharpArchiveCmd| (cons af1 nil)))
               (t (|throwKeyedMsg| 's2iz0039 nil)))))))))))))))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{copyright help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<copyright.help>>=
The term Axiom, in the field of computer algebra software, 
along with AXIOM and associated images are common-law 
trademarks. While the software license allows copies, the 
trademarks may only be used when referring to this project.

Axiom is distributed under terms of the Modified BSD license.
Axiom was released under this license as of September 3, 2002.
Source code is freely available at:
http://savannah.nongnu.org/projects/axiom
Copyrights remain with the original copyright holders.
Use of this material is by permission and/or license.
Individual files contain reference to these applicable copyrights.
The copyright and license statements are collected here for reference.

Portions Copyright (c) 2003- The Axiom Team

The Axiom Team is the collective name for the people who have
contributed to this project. Where no other copyright statement
is noted in a file this copyright will apply. 

Portions Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    - Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    - Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.

    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Portions Copyright (C) 1989-95 GROUPE BULL

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
GROUPE BULL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of GROUPE BULL shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from GROUPE BULL.

Portions Copyright (C) 2002, Codemist Ltd.  All rights reserved.
acn@codemist.co.uk


                         CCL Public License 1.0
                         ======================

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

(1) Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer. 

(2) Redistributions in binary form must reproduce the above copyright
notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution. 

(3) Neither the name of Codemist nor the names of other contributors may 
be used to endorse or promote products derived from this software without
specific prior written permission. 

(4) If you distribute a modified form or either source or binary code 
  (a) you must make the source form of these modification available 
      to Codemist;
  (b) you grant Codemist a royalty-free license to use, modify
      or redistribute your modifications without limitation;
  (c) you represent that you are legally entitled to grant these rights 
      and that you are not providing Codemist with any code that violates
      any law or breaches any contract.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Portions Copyright (C) 1995-1997 Eric Young (eay@mincom.oz.au)
All rights reserved.

This package is an SSL implementation written
by Eric Young (eay@mincom.oz.au).
The implementation was written so as to conform with Netscapes SSL.
 
This library is free for commercial and non-commercial use as long as
the following conditions are aheared to.  The following conditions
apply to all code found in this distribution, be it the RC4, RSA,
lhash, DES, etc., code; not just the SSL code.  The SSL documentation
included with this distribution is covered by the same copyright terms
except that the holder is Tim Hudson (tjh@mincom.oz.au).
 
Copyright remains Eric Young's, and as such any Copyright notices in
the code are not to be removed.
If this package is used in a product, Eric Young should be given attribution
as the author of the parts of the library used.
This can be in the form of a textual message at program startup or
in documentation (online or textual) provided with the package.
 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
   "This product includes cryptographic software written by
    Eric Young (eay@mincom.oz.au)"
   The word 'cryptographic' can be left out if the rouines from the library
   being used are not cryptographic related :-).
4. If you include any Windows specific code (or a derivative thereof) from 
   the apps directory (application code) you must include an acknowledgement:
   "This product includes software written by Tim Hudson (tjh@mincom.oz.au)"

THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

The licence and distribution terms for any publically available version or
derivative of this code cannot be changed.  i.e. this code cannot simply be
copied and put under another distribution licence
[including the GNU Public Licence.]

Portions Copyright (C) 1988 by Leslie Lamport.

Portions Copyright (c) 1998 Free Software Foundation, Inc.      
                                                                         
Permission is hereby granted, free of charge, to any person obtaining a  
copy of this software and associated documentation files (the            
"Software"), to deal in the Software without restriction, including      
without limitation the rights to use, copy, modify, merge, publish,      
distribute, distribute with modifications, sublicense, and/or sell       
copies of the Software, and to permit persons to whom the Software is    
furnished to do so, subject to the following conditions:                 
                                                                         
The above copyright notice and this permission notice shall be included  
in all copies or substantial portions of the Software.                   
                                                                         
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   
IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    
THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               
                                                                         
Except as contained in this notice, the name(s) of the above copyright   
holders shall not be used in advertising or otherwise to promote the     
sale, use or other dealings in this Software without prior written       
authorization.                                                           

Portions Copyright 1989-2000 by Norman Ramsey.  All rights reserved.

Noweb is protected by copyright.  It is not public-domain
software or shareware, and it is not protected by a ``copyleft''
agreement like the one used by the Free Software Foundation.

Noweb is available free for any use in any field of endeavor.  You may
redistribute noweb in whole or in part provided you acknowledge its
source and include this COPYRIGHT file.  You may modify noweb and
create derived works, provided you retain this copyright notice, but
the result may not be called noweb without my written consent.  

You may sell noweb if you wish.  For example, you may sell a CD-ROM
including noweb.  

You may sell a derived work, provided that all source code for your
derived work is available, at no additional charge, to anyone who buys
your derived work in any form.  You must give permisson for said
source code to be used and modified under the terms of this license.
You must state clearly that your work uses or is based on noweb and
that noweb is available free of change.  You must also request that
bug reports on your work be reported to you.

Portions Copyright (c) 1987 The RAND Corporation.  All rights reserved.

Portions Copyright 1988-1995 by Stichting Mathematisch Centrum, Amsterdam, The
Netherlands.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the names of Stichting Mathematisch
Centrum or CWI not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.

STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Portions Copyright (c) Renaud Rioboo and the University Paris 6.

Portions Copyright (c) 2003-2010 Jocelyn Guidry

Portions Copyright (c) 2001-2010 Timothy Daly

@
\section{Functions}
\defun{copyright}{copyright}
\calls{copyright}{obey}
\calls{copyright}{concat}
\calls{copyright}{getenviron}
<<defun copyright>>=
(defun |copyright| ()
 (obey (concat "cat " (getenviron "AXIOM") "/doc/spadhelp/copyright.help")))

@
\defun{trademark}{trademark}
<<defun trademark>>=
(defun |trademark| ()
 (format t "The term Axiom, in the field of computer algebra software, ~%")
 (format t "along with AXIOM and associated images are common-law ~%")
 (format t "trademarks. While the software license allows copies, the ~%")
 (format t "trademarks may only be used when referring to this project ~%"))

@

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{credits help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Variables Used}
\section{Functions}
\defun{credits}{credits}
\uses{credits}{credits}
<<defun credits>>=
(defun |credits| ()
 (declare (special credits))
 (mapcar #'(lambda (x) (princ x) (terpri)) credits))

@

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{describe help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<describe.help>>=
====================================================================
  )describe
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  -  )describe categoryName
  -  )describe domainName
  -  )describe packageName
 
Command Description: 
 
This command is used to display the comments for the operation, category,
domain or package. The comments are part of the algebra source code.
 
The commands
 
)describe <categoryName> [internal]
)describe <domainName>   [internal]
)describe <packageName>  [internal]
 
will show a properly formatted version of the "Description:" keyword
from the comments in the algebra source for the category, domain,
or package requested. 

If 'internal' is requested, then the internal format of the domain or 
package is described. Categories do not have an internal representation.
 
@ 

\defdollar{describeOptions}
The current value of \$describeOptions is
<<initvars>>=
(defvar $describeOptions '(|category| |domain| |package|))

@

\section{Functions}
\defun{describe}{Print comment strings from algebra libraries}
This trivial function satisfies the standard pattern of making a
user command match the name of the function which implements the
command. That command immediatly invokes a ``Spad2Cmd'' version.
\calls{describe}{describespad2cmd}
<<defun describe>>=
(defun |describe| (l)
 (describeSpad2Cmd l)) 

@

\defun{describeSpad2Cmd}{describeSpad2Cmd}
The describe command prints cleaned-up comment strings from the algebra
libraries. It can print strings associated with a category, domain, package,
or by operation.

This implements command line options of the form:
\begin{verbatim}
  )describe categoryName [internal]
  )describe domainName   [internal]
  )describe packageName  [internal]
\end{verbatim}
The describeInternal function will either call the ``dc'' function
to describe the internal representation of the argument or it will
print a cleaned up version of the text for the "Description" keyword
in the Category, Domain, or Package source code.
\calls{describeSpad2Cmd}{selectOptionLC}
\calls{describeSpad2Cmd}{flatten}
\calls{describeSpad2Cmd}{cleanline}
\calls{describeSpad2Cmd}{getdatabase}
\calls{describeSpad2Cmd}{sayMessage}
\usesdollar{describeSpad2Cmd}{e}
\usesdollar{describeSpad2Cmd}{EmptyEnvironment}
\usesdollar{describeSpad2Cmd}{describeOptions}
<<defun describeSpad2Cmd>>=
(defun describeSpad2Cmd (l)
 (labels (
  (describeInternal (cdp internal?)
   (if internal?
    (progn
     (unless (eq (getdatabase cdp 'constructorkind) '|category|) (|dc| cdp))
     (showdatabase cdp))
    (mapcar #'(lambda (x) (if (stringp x) (cleanline x)))
     (flatten  (car (getdatabase cdp 'documentation)))))))
 (let ((|$e| |$EmptyEnvironment|) (opt (second l)))
  (declare (special |$e| |$EmptyEnvironment| $describeOptions))
  (if (and (pairp l) (not (eq opt '?)))
    (describeInternal (first l) (second l))
   (|sayMessage|
    (append 
     '("  )describe keyword arguments are")
     (mapcar #'(lambda (x) (format nil "~%     ~a" x)) $describeOptions)
     (format nil "~%  or abbreviations thereof")))))))

@

\defun{cleanline}{cleanline}
<<defun cleanline>>=
(defun cleanline (line)
 (labels (
   (replaceInLine (thing other line)
    (do ((mark (search thing line) (search thing line)))
        ((null mark) line)
     (setq line
      (concatenate 'string (subseq line 0 mark) other
                           (subseq line (+ mark (length thing)))))))

   (removeFromLine (thing line) (replaceInLine thing "" line))

   (removeKeyword (str line)
    (do ((mark (search str line) (search str line)))
     ((null mark) line)
     (let (left point mid right)
      (setq left (subseq line 0 mark))
      (setq point (search "}" line :start2 mark))
      (setq mid (subseq line (+ mark (length str)) point))
      (setq right (subseq line (+ point 1)))
      (setq line (concatenate 'string left mid right)))))

   (addSpaces (str line)
    (do ((mark (search str line) (search str line)) (cnt))
     ((null mark) line)
     (let (left point mid right)
      (setq left (subseq line 0 mark))
      (setq point (search "}" line :start2 mark))
      (setq mid (subseq line (+ mark (length str)) point))
      (if (setq cnt (parse-integer mid :junk-allowed t))
        (setq mid (make-string cnt :initial-element #\ ))
        (setq mid ""))
      (setq right (subseq line (+ point 1)))
      (setq line (concatenate 'string left mid right)))))

   (splitAtNewline (line) 
    (do ((mark (search "~%" line) (search "~%" line)) (lines))
        ((null mark) 
          (push " " lines)
          (push line lines)
          (nreverse lines))
      (push (subseq line 0 mark) lines)
      (setq line (subseq line (+ mark 2)))))

   (wrapOneLine (line margin result) 
    (if (null line) 
      (nreverse result)
      (if (< (length line) margin)
        (wrapOneLine nil margin (append (list line) result))
        (let (oneline spill aspace)
         (setq aspace (position #\space (subseq line 0 margin) :from-end t))
         (setq oneline (string-trim '(#\space) (subseq line 0 aspace)))
         (setq spill (string-trim '(#\space) (subseq line aspace)))
         (wrapOneLine spill margin (append (list oneline) result))))))

   (reflowParagraph (line) 
    (let (lst1)
     (setq lst1 (splitAtNewLine line))
     (dolist (x lst1)
      (mapcar #'(lambda(y) (format t "~a~%" y))
       (wrapOneLine x 70 nil))))))

 (setq line (removeFromLine "{}" line))
 (setq line (replaceInLine "\\blankline" "~%~%" line))
 (setq line (replaceInLine "\\br" "~%" line))
 (setq line (removeFromLine "\\" line))
 (dolist (str '("spad{" "spadtype{" "spadop{" "spadfun{" "spadatt{"
                "axiom{" "axiomType{" "spadignore{" "axiomFun{"
                "centerline{" "inputbitmap{" "axiomOp{" "spadgloss{"))
  (setq line (removeKeyword str line)))
 (setq line (replaceInLine "{e.g.}" "e.g." line))
 (dolist (str '("tab{" "indented{" ))
   (setq line (addSpaces str line)))
  (reflowParagraph line)))

@

\defun{flatten}{flatten}
<<defun flatten>>=
(defun flatten (x)
 (labels (
  (rec (x acc)
   (cond
    ((null x) acc)
    ((atom x) (cons x acc))
    (t (rec (car x) (rec (cdr x) acc))))))
  (rec x nil)))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{display help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<display.help>>=
====================================================================
A.8.  )display
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  -  )display all
  -  )display properties
  -  )display properties all
  -  )display properties [obj1 [obj2 ...] ]
  -  )display value all
  -  )display value [obj1 [obj2 ...] ]
  -  )display mode all
  -  )display mode [obj1 [obj2 ...] ]
  -  )display names
  -  )display operations opName
 
Command Description: 
 
This command is used to display the contents of the workspace and signatures
of functions with a given name. (A signature gives the argument and return
types of a function.) 
 
The command
 
)display names
 
lists the names of all user-defined objects in the workspace. This is useful
if you do not wish to see everything about the objects and need only be
reminded of their names.
 
The commands
 
)display all
)display properties
)display properties all
 
all do the same thing: show the values and types and declared modes of all
variables in the workspace. If you have defined functions, their signatures
and definitions will also be displayed.
 
To show all information about a particular variable or user functions, for
example, something named d, issue
 
)display properties d
 
To just show the value (and the type) of d, issue
 
)display value d
 
To just show the declared mode of d, issue
 
)display mode d
 
All modemaps for a given operation may be displayed by using )display
operations. A modemap is a collection of information about a particular
reference to an operation. This includes the types of the arguments and the
return value, the location of the implementation and any conditions on the
types. The modemap may contain patterns. The following displays the modemaps
for the operation FromcomplexComplexCategory:
 
)d op complex
 
Also See: 
o )clear
o )history
o )set
o )show
o )what
 
@ 
\footnote{
\fnref{clear}
\fnref{history}
\fnref{set}
\fnref{show}
\fnref{what}}

\defdollar{displayOptions}
The current value of \$displayOptions is
<<initvars>>=
(defvar |$displayOptions| 
 '(|abbreviations| |all| |macros| |modes| |names| |operations| 
   |properties| |types| |values|))

@

\section{Functions}
\defun{display}{display}
This trivial function satisfies the standard pattern of making a
user command match the name of the function which implements the
command. That command immediatly invokes a ``Spad2Cmd'' version.
\calls{display}{displayspad2cmd}
<<defun display>>=
(defun |display| (l)
 (displaySpad2Cmd l)) 

@

\subsection{displaySpad2Cmd}
We process the options to the command and call the appropriate
display function. There are really only 4 display functions.
All of the other options are just subcases.

There is a slight mismatch between the \$displayOptions list of
symbols and the options this command accepts so we have a cond
branch to clean up the option variable. This allows for the options
to be plural.

If we fall all the way thru we use the \$displayOptions list
to construct a list of strings for the sayMessage function
and tell the user what options are available.
\calls{displaySpad2Cmd}{abbQuery}
\calls{displaySpad2Cmd}{opOf}
\calls{displaySpad2Cmd}{listConstructorAbbreviations}
\calls{displaySpad2Cmd}{displayOperations}
\calls{displaySpad2Cmd}{displayMacros}
\calls{displaySpad2Cmd}{displayWorkspaceNames}
\calls{displaySpad2Cmd}{displayProperties}
\calls{displaySpad2Cmd}{PAIRP}
\calls{displaySpad2Cmd}{selectOptionLC}
\calls{displaySpad2Cmd}{sayMessage}
\usesdollar{displaySpad2Cmd}{e}
\usesdollar{displaySpad2Cmd}{EmptyEnvironment}
\usesdollar{displaySpad2Cmd}{displayOptions}
<<defun displaySpad2Cmd>>=
(defun displaySpad2Cmd (l)
 (let ((|$e| |$EmptyEnvironment|) (opt (car l)) (vl (cdr l)) option)
  (declare (special |$e| |$EmptyEnvironment| |$displayOptions|))
  (if (and (pairp l) (not (eq opt '?)))
   (progn
    (setq option (|selectOptionLC| opt |$displayOptions| '|optionError|))
    (cond
     ((eq option '|all|)
       (setq l (list '|properties|))
       (setq option '|properties|))
     ((or (eq option '|modes|) (eq option '|types|))
       (setq l (cons '|type| vl))
       (setq option '|type|))
     ((eq option '|values|)
       (setq l (cons '|value| vl))
       (setq option '|value|)))
    (cond 
     ((eq option '|abbreviations|)
      (if (null vl)
        (|listConstructorAbbreviations|)
        (dolist (v vl) (|abbQuery| (|opOf| v)))))
     ((eq option '|operations|) (|displayOperations| vl))
     ((eq option '|macros|) (|displayMacros| vl))
     ((eq option '|names|) (|displayWorkspaceNames|))
     (t (|displayProperties| option l))))
   (|sayMessage|
    (append 
      '("  )display keyword arguments are")
      (mapcar #'(lambda (x) (format nil "~%     ~a" x)) |$displayOptions|)
      (format nil "~%  or abbreviations thereof"))))))

@

\defun{abbQuery}{abbQuery}
\calls{abbQuery}{getdatabase}
\calls{abbQuery}{sayKeyedMsg}
<<defun abbQuery>>=
(defun |abbQuery| (x)
 (let (abb)
  (cond
   ((setq abb (getdatabase x 'abbreviation))
    (|sayKeyedMsg| 's2iz0001 (list abb (getdatabase x 'constructorkind) x)))
   ((setq abb (getdatabase x 'constructor))
    (|sayKeyedMsg| 's2iz0001 (list x (getdatabase abb 'constructorkind) abb)))
   (t
     (|sayKeyedMsg| 's2iz0003 (list x))))))

@
\defun{displayOperations}{displayOperations}
This function takes a list of operation names. If the list is null
we query the user to see if they want all operations printed. Otherwise
we print the information for the requested symbols.
\calls{displayOperations}{reportOpSymbol}
\calls{displayOperations}{yesanswer}
\calls{displayOperations}{sayKeyedMsg}
<<defun displayOperations>>=
(defun |displayOperations| (l)
 (if l
  (dolist (op l) (|reportOpSymbol| op))
  (if (yesanswer)
   (dolist (op (|allOperations|)) (|reportOpSymbol| op))
   (|sayKeyedMsg| 's2iz0059 nil))))

@
\defun{yesanswer}{yesanswer}
This is a trivial function to simplify the logic of displaySpad2Cmd.
If the user didn't supply an argument to the )display op command
we ask if they wish to have all information about all Axiom operations
displayed. If the answer is either Y or YES we return true else nil.
\calls{yesanswer}{memq}
\calls{yesanswer}{string2id-n}
\calls{yesanswer}{upcase}
\calls{yesanswer}{queryUserKeyedMsg}
<<defun yesanswer>>=
(defun yesanswer ()
 (memq (string2id-n (upcase (|queryUserKeyedMsg| 's2iz0058 nil)) 1) '(y yes)))

@

\defun{displayMacros}{displayMacros}
\calls{displayMacros}{getInterpMacroNames}
\calls{displayMacros}{getParserMacroNames}
\calls{displayMacros}{remdup}
\calls{displayMacros}{sayBrightly}
\calls{displayMacros}{member}
\calls{displayMacros}{displayParserMacro}
\calls{displayMacros}{seq}
\calls{displayMacros}{exit}
\calls{displayMacros}{displayMacro}
<<defun displayMacros>>=
(defun |displayMacros| (names)
 (let (imacs pmacs macros first)
  (setq imacs (|getInterpMacroNames|))
  (setq pmacs (|getParserMacroNames|))
  (if names
    (setq macros names)
    (setq macros (append imacs pmacs)))
  (setq macros (remdup macros))
  (cond
   ((null macros) (|sayBrightly| "   There are no Axiom macros."))
   (t
     (setq first t)
     (do ((t0 macros (cdr t0)) (macro nil))
         ((or (atom t0) (progn (setq macro (car t0)) nil)) nil)
      (seq
       (exit
        (cond
         ((|member| macro pmacs)
           (cond
            (first (|sayBrightly|
             (cons '|%l| (cons "User-defined macros:" nil))) (setq first nil)))
           (|displayParserMacro| macro))
         ((|member| macro imacs) '|iterate|)
         (t (|sayBrightly|
          (cons "   "
           (cons '|%b|
            (cons macro
             (cons '|%d| (cons " is not a known Axiom macro." nil)))))))))))
     (setq first t)
     (do ((t1 macros (cdr t1)) (macro nil))
         ((or (atom t1) (progn (setq macro (car t1)) nil)) nil)
      (seq
       (exit
        (cond
         ((|member| macro imacs)
           (cond
            ((|member| macro pmacs) '|iterate|)
            (t 
             (cond
              (first
               (|sayBrightly|
                (cons '|%l|
                 (cons "System-defined macros:" nil))) (setq first nil)))
             (|displayMacro| macro))))
         ((|member| macro pmacs) '|iterate|)))))
     nil)))) 

@

\defun{sayExample}{sayExample}
This function expects 2 arguments, the documentation string and
the name of the operation. It searches the documentation string for
\verb|++X| lines. These lines are examples lines for functions. 
They look like ordinary \verb|++| comments and fit into the ordinary
comment blocks. So, for example, in the plot.spad.pamphlet file we
find the following function signature:
\begin{verbatim}
    plot: (F -> F,R) -> %
      ++ plot(f,a..b) plots the function \spad{f(x)} 
      ++ on the interval \spad{[a,b]}.
      ++ 
      ++X fp:=(t:DFLOAT):DFLOAT +-> sin(t)
      ++X plot(fp,-1.0..1.0)$PLOT
\end{verbatim}
This function splits out and prints the lines that begin with \verb|++X|.

A minor complication of printing the examples is that the lines have
been processed into internal compiler format. Thus the lines that read:
\begin{verbatim}
      ++X fp:=(t:DFLOAT):DFLOAT +-> sin(t)
      ++X plot(fp,-1.0..1.0)$PLOT
\end{verbatim}
are actually stored as one long line containing the example lines
\begin{verbatim}
"\\indented{1}{plot(\\spad{f},{}a..\\spad{b}) plots the function
 \\spad{f(x)}} \\indented{1}{on the interval \\spad{[a,{}b]}.}
 \\blankline
 \\spad{X} fp:=(t:DFLOAT):DFLOAT +-> sin(\\spad{t})
 \\spad{X} plot(\\spad{fp},{}\\spad{-1}.0..1.0)\\$PLOT"
\end{verbatim}

So when we have an example line starting with ++X, it gets
converted to the compiler to \verb|\spad{X}|. So each 
example line is delimited by \verb|\spad{X}|. 

The compiler also removes the newlines so
if there is a subsequent \verb|\spad{X}| in the docstring
then it implies multiple example lines and we loop over them, 
splitting them up at the delimiter.

If there is only one then we clean it up and print it.
\calls{sayexample}{cleanupline}
\calls{sayexample}{sayNewLine}
<<defun sayExample>>=
(defun sayExample (docstring)
 (let (line point)
  (when (setq point (search "spad{X}" docstring))
   (setq line (subseq docstring (+ point 8)))
   (do ((mark (search "spad{X}" line) (search "spad{X}" line)))
     ((null mark))
    (princ (cleanupLine (subseq line 0 mark)))
    (|sayNewLine|)
    (setq line (subseq line (+ mark 8))))
   (princ (cleanupLine line))
   (|sayNewLine|)
   (|sayNewLine|))))

@

\defun{cleanupLine}{cleanupLine}
This function expects example lines in internal format that has been
partially processed to remove the prefix. Thus we get lines that look 
like:
\begin{verbatim}
 fp:=(t:DFLOAT):DFLOAT +-> sin(\\spad{t}) 
 plot(\\spad{fp},{}\\spad{-1}.0..1.0)\\$PLOT
\end{verbatim}

It removes all instances of \verb|{}|, and \verb|\|, and unwraps the
\verb|spad{}| call, leaving only the argument.

We return lines that look like:
\begin{verbatim}
 fp:=(t:DFLOAT):DFLOAT +-> sin(t)
 plot(fp,-1.0..1.0)$PLOT
\end{verbatim}
which is hopefully exactly what the user wrote.

The compiler inserts \verb|{}| as a space so we remove it.
We remove all of the \verb|\| characters.
We remove all of the \verb|spad{...}| delimiters which will
occur around other spad variables. Technically we should
search recursively for the matching delimiter rather than the
next brace but the problem does not arise in practice.
<<defun cleanupLine>>=
(defun cleanupLine (line)
 (do ((mark (search "{}" line) (search "{}" line)))
  ((null mark))
  (setq line
   (concatenate 'string (subseq line 0 mark) (subseq line (+ mark 2)))))
 (do ((mark (search "\\" line) (search "\\" line)))
  ((null mark))
  (setq line
   (concatenate 'string (subseq line 0 mark) (subseq line (+ mark 1)))))
 (do ((mark (search "spad{" line) (search "spad{" line)))
  ((null mark))
  (let (left point mid right)
   (setq left (subseq line 0 mark))
   (setq point (search "}" line :start2 mark))
   (setq mid (subseq line (+ mark 5) point))
   (setq right (subseq line (+ point 1)))
   (setq line (concatenate 'string left mid right))))
 line)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{edit help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<edit.help>>=
====================================================================
A.9.  )edit
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )edit [filename]
 
Command Description: 
 
This command is used to edit files. It works in conjunction with the )read
and )compile commands to remember the name of the file on which you are
working. By specifying the name fully, you can edit any file you wish. Thus
 
)edit /u/julius/matrix.input
 
will place you in an editor looking at the file /u/julius/matrix.input. By
default, the editor is vi, but if you have an EDITOR shell environment
variable defined, that editor will be used. When AXIOM is running under the X
Window System, it will try to open a separate xterm running your editor if it
thinks one is necessary. For example, under the Korn shell, if you issue
 
export EDITOR=emacs
 
then the emacs editor will be used by )edit.
 
If you do not specify a file name, the last file you edited, read or compiled
will be used. If there is no ``last file'' you will be placed in the editor
editing an empty unnamed file.
 
It is possible to use the )system command to edit a file directly. For
example,
 
)system emacs /etc/rc.tcpip
 
calls emacs to edit the file.
 
Also See: 
o )system
o )compile
o )read
 
@ 
\footnote{
\fnref{system}
\fnref{compile}
\fnref{read}}

\section{Functions}
\defun{edit}{edit}
\calls{edit}{editSpad2Cmd}
<<defun edit>>=
(defun |edit| (l) (|editSpad2Cmd| l)) 

@

\defun{editSpad2Cmd}{editSpad2Cmd}
\calls{editSpad2Cmd}{pathname}
\calls{editSpad2Cmd}{pathnameDirectory}
\calls{editSpad2Cmd}{pathnameType}
\callsdollar{editSpad2Cmd}{FINDFILE}
\calls{editSpad2Cmd}{pathnameName}
\calls{editSpad2Cmd}{editFile}
\calls{editSpad2Cmd}{updateSourceFiles}
\uses{editSpad2Cmd}{/editfile}
<<defun editSpad2Cmd>>=
(defun |editSpad2Cmd| (l)
 (let (olddir filetypes ll rc)
 (declare (special /editfile))
    (setq l (cond ((null l) /editfile) (t (car l))))
    (setq l (|pathname| l))
    (setq olddir (|pathnameDirectory| l))
    (setq filetypes
     (cond 
      ((|pathnameType| l) (list (|pathnameType| l)))
      ((eq |$UserLevel| '|interpreter|) '("input" "INPUT" "spad" "SPAD"))
      ((eq |$UserLevel| '|compiler|) '("input" "INPUT" "spad" "SPAD"))
      (t '("input" "INPUT" "spad" "SPAD" "boot" "BOOT" 
           "lisp" "LISP" "meta" "META"))))
    (setq ll
     (cond
      ((string= olddir "")
        (|pathname| ($findfile (|pathnameName| l) filetypes)))
      (t l)))
    (setq l (|pathname| ll))
    (setq /editfile l)
    (setq rc (|editFile| l))
    (|updateSourceFiles| l)
    rc))

@

\defun{editFile}{Implement the )edit command}
\calls{editFile}{memq}
\calls{editFile}{strconc}
\calls{editFile}{namestring}
\calls{editFile}{pathname}
\calls{editFile}{obey}
<<defun editFile>>=
(defun |editFile| (file)
 (cond
  ((memq (intern "WIN32" (find-package 'keyword)) *features*)
   (obey (strconc "notepad " (|namestring| (|pathname| file)))))
  (t
   (obey
    (strconc "$AXIOM/lib/SPADEDIT " (|namestring| (|pathname| file)))))))

@

\defun{updateSourceFiles}{updateSourceFiles}
\calls{updateSourceFiles}{pathname}
\calls{updateSourceFiles}{pathnameName}
\calls{updateSourceFiles}{pathnameType}
\calls{updateSourceFiles}{makeInputFilename}
\calls{updateSourceFiles}{member}
\calls{updateSourceFiles}{pathnameTypeId}
\calls{updateSourceFiles}{insert}
\usesdollar{updateSourceFiles}{sourceFiles}
<<defun updateSourceFiles>>=
(defun |updateSourceFiles| (arg)
 (declare (special |$sourceFiles|))
  (setq arg (|pathname| arg))
  (setq arg (|pathname| (list (|pathnameName| arg) (|pathnameType| arg) "*")))
  (when (and (makeInputFilename arg)
             (|member| (|pathnameTypeId| arg) '(boot lisp meta)))
   (setq |$sourceFiles| (|insert| arg |$sourceFiles|)))
  arg)

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{fin help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<fin.help>>=
====================================================================
A.10.  )fin
====================================================================
 
User Level Required:  development
 
Command Syntax: 
 
  -  )fin
 
Command Description: 
 
This command is used by AXIOM developers to leave the AXIOM system and return
to the underlying Lisp system. To return to AXIOM, issue the ``(|spad|)''
function call to Lisp.
 
Also See: 
o )pquit
o )quit
 
@ 
\footnote{
\fnref{pquit}
\fnref{quit}}

\defun{fin}{Exit from the interpreter to lisp}
\throws{fin}{spad-reader}
\uses{fin}{eof}
<<defun>>=
(defun |fin| ()
 (setq *eof* t)
 (throw 'spad_reader nil))

@

\section{Functions}

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{frame help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<frame.help>>=
====================================================================
A.11.  )frame
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )frame  new  frameName
  - )frame  drop  [frameName]
  - )frame  next
  - )frame  last
  - )frame  names
  - )frame  import frameName [objectName1 [objectName2 ...] ]
  - )set message frame on | off
  - )set message prompt frame
 
Command Description: 
 
A frame can be thought of as a logical session within the physical session
that you get when you start the system. You can have as many frames as you
want, within the limits of your computer's storage, paging space, and so on.
Each frame has its own step number, environment and history. You can have a
variable named a in one frame and it will have nothing to do with anything
that might be called a in any other frame.
 
Some frames are created by the HyperDoc program and these can have pretty
strange names, since they are generated automatically. To find out the names
of all frames, issue
 
)frame names
 
It will indicate the name of the current frame.
 
You create a new frame ``quark'' by issuing
 
)frame new quark
 
The history facility can be turned on by issuing either )set history on or
)history )on. If the history facility is on and you are saving history
information in a file rather than in the AXIOM environment then a history
file with filename quark.axh will be created as you enter commands. If you
wish to go back to what you were doing in the ``initial'' frame, use
 
)frame next
 
or
 
)frame last
 
to cycle through the ring of available frames to get back to ``initial''.
 
If you want to throw away a frame (say ``quark''), issue
 
)frame drop quark
 
If you omit the name, the current frame is dropped.
 
If you do use frames with the history facility on and writing to a file, you
may want to delete some of the older history files. These are directories, so
you may want to issue a command like rm -r quark.axh to the operating system.
 
You can bring things from another frame by using )frame import. For example,
to bring the f and g from the frame ``quark'' to the current frame, issue
 
)frame import quark f g
 
If you want everything from the frame ``quark'', issue
 
)frame import quark
 
You will be asked to verify that you really want everything.
 
There are two )set flags to make it easier to tell where you are.
 
)set message frame on | off
 
will print more messages about frames when it is set on. By default, it is
off.
 
)set message prompt frame
 
will give a prompt that looks like
 
initial (1) ->
 
when you start up. In this case, the frame name and step make up the prompt.
 
Also See: 
o )history
o )set
 
@ 
\footnote{
\fnref{history}
\fnref{set}}

\section{Variables Used}
The frame mechanism uses several dollar variables.
\subsection{Primary variables}
Primary variables are those which exist solely to make the frame
mechanism work. 

The \$interpreterFrameName contains a symbol which is the name
of the current frame in use. 

The \$interpreterFrameRing contains a list of all of the existing
frames. The first frame on the list is the ``current'' frame. When
AXIOMsys is started directly there is only one frame named ``initial''.

If the system is started under sman (using the axiom shell script,
for example), there are two frames, ``initial'' and ``frame0''. In
this case, ``frame0'' is the current frame. This can cause subtle
problems because functions defined in the axiom initialization file
(.axiom.input) will be defined in frame ``initial'' but the current
frame will be ``frame0''. They will appear to be undefined. However,
if the user does ``)frame next'' they can switch to the ``initial''
frame and see the functions correctly defined.

The \$frameMessages variable controls when frame messages will be
displayed. The variable is initially NIL. It can be set on (T) or off (NIL)
using the system command:
\begin{verbatim}
    )set message frame on | off
\end{verbatim}
Setting frame messages on will output a line detailing the 
current frame after every output is complete. 

\subsection{Used variables}

The frame collects and uses a few top level variables. These are:
\$InteractiveFrame, \$IOindex, \$HiFiAccess, \$HistList, \$HistListLen,
\$HistListAct, \$HistRecord, \$internalHistoryTable, and \$localExposureData.

These variables can also be changed by the frame mechanism when the user
requests changing to a different frame.

\section{Data Structures}
\subsection{Frames and the Interpreter Frame Ring}
\label{TheFrameMechanism}

Axiom has the notion of ``frames''. A frame is a data structure which
holds all the vital data from an Axiom session. There can be multiple
frames and these live in a top-level variable called
\$interpreterFrameRing. This variable holds a circular list of frames.
The parts of a frame and their initial, default values are:

\begin{verbatim}
  $interpreterFrameName      a string, named on creation
  $InteractiveFrame          (list (list nil))
  $IOindex                   an integer, 1
  $HiFiAccess                $HiFiAccess, see the variable description
  $HistList                  $HistList, see the variable description
  $HistListLen               $HistListLen, see the variable description
  $HistListAct               $HistListAct, see the variable description
  $HistRecord                $HistRecord, see the variable description
  $internalHistoryTable      nil
  $localExposureData         a copy of $localExposureData
\end{verbatim}

\section{Accessor Functions}
These could be macros but we wish to export them to the API code
in the algebra so we keep them as functions.
\subsection{0th Frame Component -- frameName}
\defun{frameName}{frameName}
<<defun frameName>>=
(defun frameName (frame)
 (car frame)) 

@
\subsection{1st Frame Component -- frameInteractive}
<<defun frameInteractive>>=
(defun frameInteractive (frame)
 (nth 1 frame))

@
\subsection{2nd Frame Component -- frameIOIndex}
<<defun frameIOIndex>>=
(defun frameIOIndex (frame)
 (nth 2 frame))

@
\subsection{3rd Frame Component -- frameHiFiAccess}
<<defun frameHiFiAccess>>=
(defun frameHiFiAccess (frame)
 (nth 3 frame))

@
\subsection{4th Frame Component -- frameHistList}
<<defun frameHistList>>=
(defun frameHistList (frame)
 (nth 4 frame))

@
\subsection{5th Frame Component -- frameHistListLen}
<<defun frameHistListLen>>=
(defun frameHistListLen (frame)
 (nth 5 frame))

@
\subsection{6th Frame Component -- frameHistListAct}
<<defun frameHistListAct>>=
(defun frameHistListAct (frame)
 (nth 6 frame))

@
\subsection{7th Frame Component -- frameHistRecord}
<<defun frameHistRecord>>=
(defun frameHistRecord (frame)
 (nth 7 frame))

@
\subsection{8th Frame Component -- frameHistoryTable}
<<defun frameHistoryTable>>=
(defun frameHistoryTable (frame)
 (nth 8 frame))

@
\subsection{9th Frame Component -- frameExposureData}
<<defun frameExposureData>>=
(defun frameExposureData (frame)
 (nth 9 frame))

@

\section{Functions}
\defunsec{initializeInterpreterFrameRing}
{Initializing the Interpreter Frame Ring}

Now that we know what a frame looks like we need a function to
initialize the list of frames. This function sets the initial frame
name to ``initial'' and creates a list of frames containing an empty
frame. This list is the interpreter frame ring and is not actually
circular but is managed as a circular list. 

As a final step we update the world from this frame. This has the
side-effect of resetting all the important global variables to their
initial values.

\calls{initializeInterpreterFrameRing}{emptyInterpreterFrame}
\calls{initializeInterpreterFrameRing}{updateFromCurrentInterpreterFrame}
\usesdollar{initializeInterpreterFrameRing}{interpreterFrameName}
\usesdollar{initializeInterpreterFrameRing}{interpreterFrameRing}
<<defun initializeInterpreterFrameRing>>=
(defun |initializeInterpreterFrameRing| ()
 "Initializing the Interpreter Frame Ring"
 (declare (special |$interpreterFrameName| |$interpreterFrameRing|))
 (setq |$interpreterFrameName| '|initial|)
 (setq |$interpreterFrameRing|
   (list (|emptyInterpreterFrame| |$interpreterFrameName|)))
 (|updateFromCurrentInterpreterFrame|)
 nil) 

@
\defunsec{frameNames}{Creating a List of all of the Frame Names}
This function simply walks across the frame in the frame ring and
returns a list of the name of each frame. 
\usesdollar{frameNames}{interpreterFrameRing}
<<defun frameNames>>=
(defun |frameNames| () 
 "Creating a List of all of the Frame Names"
 (declare (special |$interpreterFrameRing|))
 (mapcar #'frameName |$interpreterFrameRing|))

@

\defunsec{frameEnvironment}{Get Named Frame Environment (aka Interactive)}
If the frame is found we return the environment portion of the frame
otherwise we construct an empty environment and return it.
The initial values of an empty frame are created here. This function
returns a single frame that will be placed in the frame ring.
\calls{frameEnvironment}{frameInteractive}
<<defun frameEnvironment>>=
(defun |frameEnvironment| (fname)
 "Get Named Frame Environment (aka Interactive)"
 (let ((frame (|findFrameInRing| fname)))
  (if frame
   (frameInteractive frame)
   (list (list nil)))))

@
\defunsec{emptyInterpreterFrame}{Create a new, empty Interpreter Frame}
\usesdollar{emptyInterpreterFrame}{HiFiAccess}
\usesdollar{emptyInterpreterFrame}{HistList}
\usesdollar{emptyInterpreterFrame}{HistListLen}
\usesdollar{emptyInterpreterFrame}{HistListAct}
\usesdollar{emptyInterpreterFrame}{HistRecord}
\usesdollar{emptyInterpreterFrame}{localExposureDataDefault}
<<defun emptyInterpreterFrame>>=
(defun |emptyInterpreterFrame| (name)
 "Create a new, empty Interpreter Frame"
 (declare (special |$HiFiAccess| |$HistList| |$HistListLen| |$HistListAct| 
   |$HistRecord| |$localExposureDataDefault|))
 (list name                                 ; frame name
   (list (list nil))                        ; environment
   1                                        ; $IOindex
   |$HiFiAccess|                        
   |$HistList| 
   |$HistListLen| 
   |$HistListAct| 
   |$HistRecord| 
   nil                                      ; $internalHistoryTable
   (copy-seq |$localExposureDataDefault|))) ; $localExposureData

@
\defunsec{createCurrentInterpreterFrame}
{Collecting up the Environment into a Frame}

We can collect up all the current environment information into
one frame element with this call. It creates a list of the current
values of the global variables and returns this as a frame element.

\usesdollar{createCurrentInterpreterFrame}{interpreterFrameName}
\usesdollar{createCurrentInterpreterFrame}{InteractiveFrame}
\usesdollar{createCurrentInterpreterFrame}{IOindex}
\usesdollar{createCurrentInterpreterFrame}{HiFiAccess}
\usesdollar{createCurrentInterpreterFrame}{HistList}
\usesdollar{createCurrentInterpreterFrame}{HistListLen}
\usesdollar{createCurrentInterpreterFrame}{HistListAct}
\usesdollar{createCurrentInterpreterFrame}{HistRecord}
\usesdollar{createCurrentInterpreterFrame}{internalHistoryTable}
\usesdollar{createCurrentInterpreterFrame}{localExposureData}
<<defun createCurrentInterpreterFrame>>=
(defun |createCurrentInterpreterFrame| ()
 "Collecting up the Environment into a Frame"
 (declare (special |$interpreterFrameName| |$InteractiveFrame| |$IOindex| 
   |$HiFiAccess| |$HistList| |$HistListLen| |$HistListAct| |$HistRecord| 
   |$internalHistoryTable| |$localExposureData|))
 (list 
   |$interpreterFrameName| 
   |$InteractiveFrame| 
   |$IOindex| 
   |$HiFiAccess| 
   |$HistList| 
   |$HistListLen| 
   |$HistListAct| 
   |$HistRecord| 
   |$internalHistoryTable| 
   |$localExposureData|)) 

@

\defunsec{updateFromCurrentInterpreterFrame}{Update from the Current Frame}
The frames are kept on a circular list. The first element on that
list is known as ``the current frame''. This will initialize all
of the interesting interpreter data structures from that frame.
\calls{updateFromCurrentInterpreterFrame}{sayMessage}
\usesdollar{updateFromCurrentInterpreterFrame}{interpreterFrameRing}
\usesdollar{updateFromCurrentInterpreterFrame}{interpreterFrameName}
\usesdollar{updateFromCurrentInterpreterFrame}{InteractiveFrame}
\usesdollar{updateFromCurrentInterpreterFrame}{IOindex}
\usesdollar{updateFromCurrentInterpreterFrame}{HiFiAccess}
\usesdollar{updateFromCurrentInterpreterFrame}{HistList}
\usesdollar{updateFromCurrentInterpreterFrame}{HistListLen}
\usesdollar{updateFromCurrentInterpreterFrame}{HistListAct}
\usesdollar{updateFromCurrentInterpreterFrame}{HistRecord}
\usesdollar{updateFromCurrentInterpreterFrame}{internalHistoryTable}
\usesdollar{updateFromCurrentInterpreterFrame}{localExposureData}
\usesdollar{updateFromCurrentInterpreterFrame}{frameMessages}
<<defun updateFromCurrentInterpreterFrame>>=
(defun |updateFromCurrentInterpreterFrame| ()
 "Update from the Current Frame"
 (let (tmp1)
  (declare (special |$interpreterFrameRing| |$interpreterFrameName|
    |$InteractiveFrame| |$IOindex| |$HiFiAccess| |$HistList| |$HistListLen|
    |$HistListAct| |$HistRecord| |$internalHistoryTable| |$localExposureData|
    |$frameMessages|))
  (setq tmp1 (first |$interpreterFrameRing|))
  (setq |$interpreterFrameName| (nth 0 tmp1))
  (setq |$InteractiveFrame|     (nth 1 tmp1))
  (setq |$IOindex|              (nth 2 tmp1))
  (setq |$HiFiAccess|           (nth 3 tmp1))
  (setq |$HistList|             (nth 4 tmp1))
  (setq |$HistListLen|          (nth 5 tmp1))
  (setq |$HistListAct|          (nth 6 tmp1))
  (setq |$HistRecord|           (nth 7 tmp1))
  (setq |$internalHistoryTable| (nth 8 tmp1))
  (setq |$localExposureData|    (nth 9 tmp1))
  (when |$frameMessages| 
   (|sayMessage| 
    `("   Current interpreter frame is called" 
      ,#(|bright| |$interpreterFrameName|))))))

@
\defunsec{findFrameInRing}{Find a Frame in the Frame Ring by Name}
Each frame contains its name as the 0th element.  We simply walk all
the frames and if we find one we return it.
\calls{findFrameInRing}{boot-equal}
\calls{findFrameInRing}{frameName}
\usesdollar{findFrameInRing}{interpreterFrameRing}
<<defun findFrameInRing>>=
(defun |findFrameInRing| (name)
 "Find a Frame in the Frame Ring by Name"
 (let (result)
  (declare (special |$interpreterFrameRing|))
  (dolist (frame |$interpreterFrameRing|)
    (when (boot-equal (frameName frame) name) 
      (setq result frame)))
  result))

@

\defunsec{updateCurrentInterpreterFrame}{Update the Current Interpreter Frame}
This function collects the normal contents of the world into a 
frame object, places it first on the frame list, and then sets
the current values of the world from the frame object. 
\calls{updateCurrentInterpreterFrame}{createCurrentInterpreterFrame}
\calls{updateCurrentInterpreterFrame}{updateFromCurrentInterpreterFrame}
\usesdollar{updateCurrentInterpreterFrame}{interpreterFrameRing}
<<defun updateCurrentInterpreterFrame>>=
(defun |updateCurrentInterpreterFrame| ()
  "Update the Current Interpreter Frame"
  (declare (special |$interpreterFrameRing|))
  (rplaca |$interpreterFrameRing| (|createCurrentInterpreterFrame|))
  (|updateFromCurrentInterpreterFrame|))

@
\defunsec{nextInterpreterFrame}{Move to the next Interpreter Frame in Ring}
This function updates the current frame to make sure all of the
current information is recorded. If there are more frame elements
in the list then this will destructively move the current frame
to the end of the list, that is, assume the frame list reads (1 2 3)
this function will destructively change it to (2 3 1).
Note: the nconc2 function destructively inserts the second list at the
end of the first.
\calls{nextInterpreterFrame}{nconc2}
\calls{nextInterpreterFrame}{updateFromCurrentInterpreterFrame}
\usesdollar{nextInterpreterFrame}{interpreterFrameRing}
<<defun nextInterpreterFrame>>=
(defun |nextInterpreterFrame| ()
  "Move to the next Interpreter Frame in Ring"
  (declare (special |$interpreterFrameRing|))
  (when (cdr |$interpreterFrameRing|)
   (setq |$interpreterFrameRing|
    (nconc2 (cdr |$interpreterFrameRing|) 
      (list (car |$interpreterFrameRing|))))
   (|updateFromCurrentInterpreterFrame|)))

@
\defunsec{changeToNamedInterpreterFrame}{Change to the Named Interpreter Frame}
\calls{changeToNamedInterpreterFrame}{updateCurrentInterpreterFrame}
\calls{changeToNamedInterpreterFrame}{findFrameInRing}
\calls{changeToNamedInterpreterFrame}{nremove}
\calls{changeToNamedInterpreterFrame}{updateFromCurrentInterpreterFrame}
\usesdollar{changeToNamedInterpreterFrame}{interpreterFrameRing}
<<defun changeToNamedInterpreterFrame>>=
(defun |changeToNamedInterpreterFrame| (name)
 "Change to the Named Interpreter Frame"
 (let (frame)
 (declare (special |$interpreterFrameRing|))
   (|updateCurrentInterpreterFrame|)
   (setq frame (|findFrameInRing| name))
   (when frame
     (setq |$interpreterFrameRing|
       (cons frame (nremove |$interpreterFrameRing| frame)))
     (|updateFromCurrentInterpreterFrame|))))

@
\defunsec{previousInterpreterFrame}
{Move to the previous Interpreter Frame in Ring}
\calls{previousInterpreterFrame}{updateCurrentInterpreterFrame}
\calls{previousInterpreterFrame}{nconc2}
\calls{previousInterpreterFrame}{updateFromCurrentInterpreterFrame}
\usesdollar{previousInterpreterFrame}{interpreterFrameRing}
<<defun previousInterpreterFrame>>=
(defun |previousInterpreterFrame| ()
 "Move to the previous Interpreter Frame in Ring"
 (let (tmp1 l b)
 (declare (special |$interpreterFrameRing|))
  (|updateCurrentInterpreterFrame|)
  (when  (cdr |$interpreterFrameRing|)
    (setq tmp1 (reverse |$interpreterFrameRing|))
    (setq l (car tmp1))
    (setq b (nreverse (cdr tmp1)))
    (setq |$interpreterFrameRing| (nconc2 (cons l nil) b))
    (|updateFromCurrentInterpreterFrame|))))

@
\defunsec{addNewInterpreterFrame}{Add a New Interpreter Frame}
\calls{addNewInterpreterFrame}{boot-equal}
\calls{addNewInterpreterFrame}{framename}
\calls{addNewInterpreterFrame}{throwKeyedMsg}
\calls{addNewInterpreterFrame}{updateCurrentInterpreterFrame}
\calls{addNewInterpreterFrame}{initHistList}
\calls{addNewInterpreterFrame}{emptyInterpreterFrame}
\calls{addNewInterpreterFrame}{updateFromCurrentInterpreterFrame}
\callsdollar{addNewInterpreterFrame}{erase}
\calls{addNewInterpreterFrame}{histFileName}
\usesdollar{addNewInterpreterFrame}{interpreterFrameRing}
<<defun addNewInterpreterFrame>>=
(defun |addNewInterpreterFrame| (name)
 "Add a New Interpreter Frame"
 (declare (special |$interpreterFrameRing|))
 (if (null name)
   (|throwKeyedMsg| 's2iz0018 nil)  ; you must provide a name for new frame
   (progn
     (|updateCurrentInterpreterFrame|)
     (dolist (f |$interpreterFrameRing|)
       (when (boot-equal name (frameName f)) ; existing frame with same name
         (|throwKeyedMsg| 's2iz0019 (list name))))
     (|initHistList|)
     (setq |$interpreterFrameRing|
       (cons (|emptyInterpreterFrame| name) |$interpreterFrameRing|))
     (|updateFromCurrentInterpreterFrame|)
     ($erase (|histFileName|)))))

@
\defunsec{closeInterpreterFrame}{Close an Interpreter Frame}
\calls{closeInterpreterFrame}{nequal}
\calls{closeInterpreterFrame}{framename}
\calls{closeInterpreterFrame}{throwKeyedMsg}
\callsdollar{closeInterpreterFrame}{erase}
\calls{closeInterpreterFrame}{makeHistFileName}
\calls{closeInterpreterFrame}{updateFromCurrentInterpreterFrame}
\usesdollar{closeInterpreterFrame}{interpreterFrameRing}
\usesdollar{closeInterpreterFrame}{interpreterFrameName}
<<defun closeInterpreterFrame>>=
(defun |closeInterpreterFrame| (name)
 "Close an Interpreter Frame"
 (declare (special |$interpreterFrameRing| |$interpreterFrameName|))
 (let (ifr found)
    (if (null (cdr |$interpreterFrameRing|))
     (if (and name (nequal name |$interpreterFrameName|))
       (|throwKeyedMsg| 's2iz0020 ; 1 frame left. not the correct name.
          (cons |$interpreterFrameName| nil))
       (|throwKeyedMsg| 's2iz0021 nil)) ; only 1 frame left, not closed
     (progn
       (if (null name)
        (setq |$interpreterFrameRing| (cdr |$interpreterFrameRing|))
        (progn
          (setq found nil)
          (setq ifr nil)
          (dolist (f |$interpreterFrameRing|)
            (if (or found (nequal name (frameName f)))
              (setq ifr (cons f ifr)))
              (setq found t))
          (if (null found) 
           (|throwKeyedMsg| 's2iz0022 (cons name nil))
           (progn
             ($erase (|makeHistFileName| name))
             (setq |$interpreterFrameRing| (nreverse ifr))))))
       (|updateFromCurrentInterpreterFrame|)))))

@
\defunsec{displayFrameNames}{Display the Frame Names}
\calls{displayFrameNames}{bright}
\calls{displayFrameNames}{framename}
\calls{displayFrameNames}{sayKeyedMsg}
\usesdollar{displayFrameNames}{interpreterFrameRing}
<<defun displayFrameNames>>=
(defun |displayFrameNames| ()
 "Display the Frame Names"
 (declare (special |$interpreterFrameRing|))
 (let (t1)
  (setq t1
   (mapcar #'(lambda (f) `(|%l| "     " ,@(|bright| (frameName f))))
   |$interpreterFrameRing|))
 (|sayKeyedMsg| 's2iz0024 (list (apply #'append t1)))))

@
\defunsec{importFromFrame}{Import items from another frame}
\calls{importFromFrame}{member}
\calls{importFromFrame}{frameNames}
\calls{importFromFrame}{throwKeyedMsg}
\calls{importFromFrame}{boot-equal}
\calls{importFromFrame}{framename}
\calls{importFromFrame}{frameEnvironment}
\calls{importFromFrame}{upcase}
\calls{importFromFrame}{queryUserKeyedMsg}
\calls{importFromFrame}{memq}
\calls{importFromFrame}{string2id-n}
\calls{importFromFrame}{importFromFrame}
\calls{importFromFrame}{sayKeyedMsg}
\calls{importFromFrame}{clearCmdParts}
\calls{importFromFrame}{seq}
\calls{importFromFrame}{exit}
\calls{importFromFrame}{putHist}
\calls{importFromFrame}{get}
\calls{importFromFrame}{getalist}
\usesdollar{importFromFrame}{interpreterFrameRing}
<<defun importFromFrame>>=
(defun |importFromFrame| (args)
 "Import items from another frame"
 (prog (temp1 fname fenv x v props vars plist prop val m)
 (declare (special |$interpreterFrameRing|))
  (when (and args (atom args)) (setq args (cons args nil))) 
  (if (null args)
   (|throwKeyedMsg| 'S2IZ0073 nil) ; missing frame name
   (progn
     (setq temp1 args)
     (setq fname (car temp1))
     (setq args (cdr temp1))
     (cond
      ((null (|member| fname (|frameNames|)))
        (|throwKeyedMsg| 'S2IZ0074 (cons fname nil))) ; not frame name
      ((boot-equal fname (frameName (car |$interpreterFrameRing|)))
        (|throwKeyedMsg| 'S2IZ0075 NIL)) ; cannot import from curr frame
      (t
        (setq fenv (|frameEnvironment| fname))
        (cond
         ((null args)
           (setq x
             (upcase (|queryUserKeyedMsg| 'S2IZ0076 (cons fname nil))))
                                          ; import everything?
           (cond
            ((memq (string2id-n x 1) '(y yes))
              (setq vars nil)
              (do ((tmp0 (caar fenv) (cdr tmp0)) (tmp1 nil))
                  ((or (atom tmp0) 
                       (progn (setq tmp1 (car tmp0)) nil)
                       (progn 
                        (progn 
                         (setq v (car tmp1))
                         (setq props (cdr tmp1))
                         tmp1)
                        nil))
                    nil)
               (cond
                ((eq v '|--macros|)
                  (do ((tmp2 props (cdr tmp2))
                       (tmp3 nil))
                      ((or (atom tmp2) 
                           (progn (setq tmp3 (car tmp2)) nil)
                           (progn 
                            (progn (setq m (car tmp3)) tmp3)
                            nil))
                         nil)
                     (setq vars (cons m vars))))
                (t (setq vars (cons v vars)))))
              (|importFromFrame| (cons fname vars)))
            (t
              (|sayKeyedMsg| 'S2IZ0077 (cons fname nil)))))
         (t
          (do ((tmp4 args (cdr tmp4)) (v nil))
              ((or (atom tmp4) (progn (setq v (car tmp4)) nil)) nil)
           (seq
            (exit
             (progn
              (setq plist (getalist (caar fenv) v))
              (cond
               (plist 
                (|clearCmdParts| (cons '|propert| (cons v nil)))
                (do ((tmp5 plist (cdr tmp5)) (tmp6 nil))
                    ((or (atom tmp5)
                         (progn (setq tmp6 (car tmp5)) nil)
                         (progn 
                          (progn 
                           (setq prop (car tmp6))
                           (setq val (cdr tmp6))
                           tmp6)
                          nil))
                       nil)
                 (seq
                  (exit (|putHist| v prop val |$InteractiveFrame|)))))
               ((setq m (|get| '|--macros--| v fenv))
                 (|putHist| '|--macros--| v m |$InteractiveFrame|))
               (t 
                 (|sayKeyedMsg| 'S2IZ0079 ; frame not found
                   (cons v (cons fname nil)))))))))
          (|sayKeyedMsg| 'S2IZ0078 ; import complete
            (cons fname nil))))))))))

@
\defunsec{frame}{The top level frame command}
\calls{frame}{frameSpad2Cmd}
<<defun frame>>=
(defun |frame| (l)
 "The top level frame command"
 (|frameSpad2Cmd| l)) 

@
\defunsec{frameSpad2Cmd}{The top level frame command handler}
\calls{frameSpad2Cmd}{throwKeyedMsg}
\calls{frameSpad2Cmd}{helpSpad2Cmd}
\calls{frameSpad2Cmd}{selectOptionLC}
\calls{frameSpad2Cmd}{pairp}
\calls{frameSpad2Cmd}{qcdr}
\calls{frameSpad2Cmd}{qcar}
\calls{frameSpad2Cmd}{object2Identifier}
\calls{frameSpad2Cmd}{drop}
\calls{frameSpad2Cmd}{closeInterpreterFrame}
\calls{frameSpad2Cmd}{import}
\calls{frameSpad2Cmd}{importFromFrame}
\calls{frameSpad2Cmd}{last}
\calls{frameSpad2Cmd}{previousInterpreterFrame}
\calls{frameSpad2Cmd}{names}
\calls{frameSpad2Cmd}{displayFrameNames}
\calls{frameSpad2Cmd}{new}
\calls{frameSpad2Cmd}{addNewInterpreterFrame}
\calls{frameSpad2Cmd}{next}
\calls{frameSpad2Cmd}{nextInterpreterFrame}
\usesdollar{frameSpad2Cmd}{options}
<<defun frameSpad2Cmd>>=
(defun |frameSpad2Cmd| (args)
 "The top level frame command handler"
 (let (frameArgs arg a)
  (declare (special |$options|))
  (setq frameArgs '(|drop| |import| |last| |names| |new| |next|))
  (cond
   (|$options|
    (|throwKeyedMsg| 'S2IZ0016 ; frame command does not take options
     (cons ")frame" nil)))
   ((null args) (|helpSpad2Cmd| (cons '|frame| nil)))
   (t
     (setq arg (|selectOptionLC| (car args) frameArgs '|optionError|))
     (setq args (cdr args))
     (when (and (pairp args) 
            (eq (qcdr args) nil)
            (progn (setq a (qcar args)) t))
        (setq args a))
     (when (atom args) (setq args (|object2Identifier| args)))
     (case arg
      (|drop|
        (if (and args (pairp args))
          (|throwKeyedMsg| 'S2IZ0017 ; not a valid frame name
             (cons args nil))
          (|closeInterpreterFrame| args)))
      (|import| (|importFromFrame| args))
      (|last|   (|previousInterpreterFrame|))
      (|names|  (|displayFrameNames|))
      (|new|
        (if (and args (pairp args))
          (|throwKeyedMsg| 'S2IZ0017 ; not a valid frame name
             (cons args nil))
          (|addNewInterpreterFrame| args)))
      (|next| (|nextInterpreterFrame|))
      (t nil))))))

@
\section{Frame File Messages}
<<Frame File Messages>>=
S2IZ0016
 The %1b system command takes arguments but no options.
S2IZ0017
 %1b is not a valid frame name
S2IZ0018
 You must provide a name for the new frame.
S2IZ0019
 You cannot use the name %1b for a new frame because an existing
 frame already has that name.
S2IZ0020
 There is only one frame active and therefore that cannot be closed.
 Furthermore, the frame name you gave is not the name of the current frame.
 The current frame is called %1b .
S2IZ0021
 The current frame is the only active one.  Issue %b )clear all %d to
 clear its contents.
S2IZ0022
 There is no frame called %1b and so your command cannot be
 processed.
S2IZ0024
 The names of the existing frames are: %1 %l
 The current frame is the first one listed.
S2IZ0073
 %b )frame import %d must be followed by the frame name. The names
 of objects in that frame can then optionally follow the frame name.
 For example,
 %ceon %b )frame import calculus %d %ceoff
 imports all objects in the %b calculus %d frame, and
 %ceon %b )frame import calculus epsilon delta %d %ceoff
 imports the objects named %b epsilon %d and %b delta %d from the
 frame %b calculus %d .
 Please note that if the current frame contained any information
 about objects with these names, then that information would be
 cleared before the import took place.
S2IZ0074
 You cannot import anything from the frame %1b because that is not
 the name of an existing frame.
S2IZ0075
 You cannot import from the current frame (nor is there a need!).
S2IZ0076
 User verification required:
 do you really want to import everything from the frame %1b ?
 If so, please enter %b y %d or %b yes %d :
S2IZ0077
 On your request, AXIOM will not import everything from frame %1b.
S2IZ0078
 Import from frame %1b is complete. Please issue %b )display all %d
 if you wish to see the contents of the current frame.
S2IZ0079
 AXIOM cannot import %1b from frame %2b because it cannot be found.
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{help help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<help.help>>=
====================================================================
A.12.  )help
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )help
  - )help commandName
  - )help syntax
 
Command Description: 
 
This command displays help information about system commands. If you issue
 
)help
 
then this very text will be shown. You can also give the name or abbreviation
of a system command to display information about it. For example,
 
)help clear
 
will display the description of the )clear system command.

The command 

)help syntax

will give further information about the Axiom language syntax.
 
All this material is available in the AXIOM User Guide and in HyperDoc. In
HyperDoc, choose the Commands item from the Reference menu.
 
====================================================================
A.1.  Introduction
====================================================================
 
 
System commands are used to perform AXIOM environment management. Among the
commands are those that display what has been defined or computed, set up
multiple logical AXIOM environments (frames), clear definitions, read files
of expressions and commands, show what functions are available, and terminate
AXIOM.
 
Some commands are restricted: the commands
 
)set userlevel interpreter
)set userlevel compiler
)set userlevel development
 
set the user-access level to the three possible choices. All commands are
available at development level and the fewest are available at interpreter
level. The default user-level is interpreter. In addition to the )set command
(discussed in description of command )set ) you can use the HyperDoc settings
facility to change the user-level. Click on [Settings] here to immediately go
to the settings facility. 
 
Each command listing begins with one or more syntax pattern descriptions plus
examples of related commands. The syntax descriptions are intended to be easy
to read and do not necessarily represent the most compact way of specifying
all possible arguments and options; the descriptions may occasionally be
redundant.
 
All system commands begin with a right parenthesis which should be in the
first available column of the input line (that is, immediately after the
input prompt, if any). System commands may be issued directly to AXIOM or be
included in .input files.
 
A system command argument is a word that directly follows the command name
and is not followed or preceded by a right parenthesis. A system command
option follows the system command and is directly preceded by a right
parenthesis. Options may have arguments: they directly follow the option.
This example may make it easier to remember what is an option and what is an
argument:
 
         )syscmd arg1 arg2 )opt1 opt1arg1 opt1arg2 )opt2 opt2arg1 ...
 
In the system command descriptions, optional arguments and options are
enclosed in brackets (``['' and ``]''). If an argument or option name is in
italics, it is meant to be a variable and must have some actual value
substituted for it when the system command call is made. For example, the
syntax pattern description
 
)read fileName [)quietly]
 
would imply that you must provide an actual file name for fileName but need
not use the )quietly option. Thus
 
)read matrix.input
 
is a valid instance of the above pattern.
 
System command names and options may be abbreviated and may be in upper or
lower case. The case of actual arguments may be significant, depending on the
particular situation (such as in file names). System command names and
options may be abbreviated to the minimum number of starting letters so that
the name or option is unique. Thus
 
)s Integer
 
is not a valid abbreviation for the )set command, because both )set and )show
begin with the letter ``s''. Typically, two or three letters are sufficient
for disambiguating names. In our descriptions of the commands, we have used
no abbreviations for either command names or options.
 
In some syntax descriptions we use a vertical line ``|'' to indicate that you
must specify one of the listed choices. For example, in
 
)set output fortran on | off
 
only on and off are acceptable words for following boot. We also sometimes
use ``...'' to indicate that additional arguments or options of the listed
form are allowed. Finally, in the syntax descriptions we may also list the
syntax of related commands.

====================================================================
Other help topics
====================================================================
Available help topics are: 

abbreviations assignment blocks     browse     boot       cd
clear         clef       close      collection compile    describe
display       edit       fin        for        frame      help       
history       if         iterate    leave      library    lisp       
load          ltrace     parallel   pquit      quit       read       
repeat        savesystem set        show       spool      suchthat   
synonym       system     syntax     trace      undo       what       
while

Available algebra help topics are:

@ 

\section{Functions}
\defunsec{help}{The top level help command}
\calls{help}{helpSpad2Cmd}
<<defun help>>=
(defun |help| (l)
 "The top level help command"
 (|helpSpad2Cmd| l)) 

@

\defunsec{helpSpad2Cmd}{The top level help command handler}
\calls{helpSpad2Cmd}{newHelpSpad2Cmd}
\calls{helpSpad2Cmd}{sayKeyedMsg}
<<defun helpSpad2Cmd>>=
(defun |helpSpad2Cmd| (args)
 "The top level help command handler"
 (unless (|newHelpSpad2Cmd| args)
  (|sayKeyedMsg| 's2iz0025 (cons args nil))))

@

\defun{newHelpSpad2Cmd}{newHelpSpad2Cmd}
\calls{newHelpSpad2Cmd}{makeInputFilename}
\calls{newHelpSpad2Cmd}{obey}
\calls{newHelpSpad2Cmd}{concat}
\calls{newHelpSpad2Cmd}{namestring}
\calls{newHelpSpad2Cmd}{make-instream}
\calls{newHelpSpad2Cmd}{say}
\calls{newHelpSpad2Cmd}{poundsign}
\calls{newHelpSpad2Cmd}{sayKeyedMsg}
\calls{newHelpSpad2Cmd}{pname}
\calls{newHelpSpad2Cmd}{selectOptionLC}
\usesdollar{newHelpSpad2Cmd}{syscommands}
\usesdollar{newHelpSpad2Cmd}{useFullScreenHelp}
<<defun newHelpSpad2Cmd>>=
(defun |newHelpSpad2Cmd| (args)
 (let (sarg arg narg helpfile filestream line)
 (declare (special $syscommands |$useFullScreenHelp|))
  (when (null args) (setq args (list '?)))
  (if (> (|#| args) 1) 
   (|sayKeyedMsg| 's2iz0026 nil)
   (progn
    (setq sarg (pname (car args)))
    (cond
     ((string= sarg "?") (setq args (list '|help|)))
     ((string= sarg "%") (setq args (list '|history|)))
     ((string= sarg "%%") (setq args (list '|history|)))
     (t nil))
    (setq arg (|selectOptionLC| (car args) $syscommands nil))
    (cond ((null arg) (setq arg (car args))))
    (cond ((eq arg '|compiler|) (setq arg '|compile|)))
    (setq narg (pname arg))
    (cond
     ((null 
       (setq helpfile 
        (makeInputFilename 
         (cons narg (cons 'helpspad (cons '* nil))))))
       nil)
     (|$useFullScreenHelp|
      (obey (concat "$AXIOM/lib/SPADEDIT " (|namestring| helpfile))) t)
     (t
      (setq filestream (make-instream helpfile))
      (do ((line (|read-line| filestream nil) (|read-line| filestream nil)))
          ((null line) (shut filestream))
       (say line))))))
  t))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{history help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<history.help>>=
====================================================================
A.13.  )history
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )history )on
  - )history )off
  - )history )write historyInputFileName
  - )history )show [n] [both]
  - )history )save savedHistoryName
  - )history )restore [savedHistoryName]
  - )history )reset
  - )history )change n
  - )history )memory
  - )history )file
  - %
  - %%(n)
  - )set history on | off
 
Command Description: 
 
The history facility within AXIOM allows you to restore your environment to
that of another session and recall previous computational results. Additional
commands allow you to review previous input lines and to create an .input
file of the lines typed to AXIOM.
 
AXIOM saves your input and output if the history facility is turned on (which
is the default). This information is saved if either of
 
)set history on
)history )on
 
has been issued. Issuing either
 
)set history off
)history )off
 
will discontinue the recording of information.
 
Whether the facility is disabled or not, the value of % in AXIOM always
refers to the result of the last computation. If you have not yet entered
anything, % evaluates to an object of type Variable('%). The function %% may
be used to refer to other previous results if the history facility is
enabled. In that case, %%(n) is the output from step n if n > 0. If n < 0,
the step is computed relative to the current step. Thus %%(-1) is also the
previous step, %%(-2), is the step before that, and so on. If an invalid step
number is given, AXIOM will signal an error.
 
The environment information can either be saved in a file or entirely in
memory (the default). Each frame ( description of command )frame ) has its
own history database. When it is kept in a file, some of it may also be kept
in memory for efficiency. When the information is saved in a file, the name
of the file is of the form FRAME.axh where ``FRAME'' is the name of the
current frame. The history file is placed in the current working directory
(see description of command )cd ). Note that these history database files are
not text files (in fact, they are directories themselves), and so are not in
human-readable format.
 
The options to the )history command are as follows:
 
  )change n
    will set the number of steps that are saved in memory to n. This option
    only has effect when the history data is maintained in a file. If you
    have issued )history )memory (or not changed the default) there is no
    need to use )history )change.
 
  )on
    will start the recording of information. If the workspace is not empty,
    you will be asked to confirm this request. If you do so, the workspace
    will be cleared and history data will begin being saved. You can also
    turn the facility on by issuing )set history on.
 
  )off
    will stop the recording of information. The )history )show command will
    not work after issuing this command. Note that this command may be issued
    to save time, as there is some performance penalty paid for saving the
    environment data. You can also turn the facility off by issuing )set
    history off.
 
  )file
    indicates that history data should be saved in an external file on disk.
 
  )memory
    indicates that all history data should be kept in memory rather than
    saved in a file. Note that if you are computing with very large objects
    it may not be practical to kept this data in memory.
 
  )reset
    will flush the internal list of the most recent workspace calculations so
    that the data structures may be garbage collected by the underlying Lisp
    system. Like )history )change, this option only has real effect when
    history data is being saved in a file.
 
  )restore [savedHistoryName]
    completely clears the environment and restores it to a saved session, if
    possible. The )save option below allows you to save a session to a file
    with a given name. If you had issued )history )save jacobi the command
    )history )restore jacobi would clear the current workspace and load the
    contents of the named saved session. If no saved session name is
    specified, the system looks for a file called last.axh.
 
  )save savedHistoryName
    is used to save a snapshot of the environment in a file. This file is
    placed in the current working directory (see description of command )cd
    ). Use )history )restore to restore the environment to the state
    preserved in the file. This option also creates an input file containing
    all the lines of input since you created the workspace frame (for
    example, by starting your AXIOM session) or last did a )clear all or
    )clear completely.
 
  )show [n] [both]
    can show previous input lines and output results. )show will display up
    to twenty of the last input lines (fewer if you haven't typed in twenty
    lines). )show n will display up to n of the last input lines. )show both
    will display up to five of the last input lines and output results. )show
    n both will display up to n of the last input lines and output results.
 
  )write historyInputFile
    creates an .input file with the input lines typed since the start of the
    session/frame or the last )clear all or )clear completely. If
    historyInputFileName does not contain a period (``.'') in the filename,
    .input is appended to it. For example, )history )write chaos and )history
    )write chaos.input both write the input lines to a file called
    chaos.input in your current working directory. If you issued one or more
    )undo commands, )history )write eliminates all input lines backtracked
    over as a result of )undo. You can edit this file and then use )read to
    have AXIOM process the contents.
 
Also See: 
o )frame
o )read
o )set
o )undo
 
@ 
\footnote{
\fnref{frame}
\fnref{read}
\fnref{set}
\fnref{undo}}

History recording is done in two different ways:
\begin{itemize}
\item all changes in variable bindings (i.e. previous values) are
written to \verb|$HistList|, which is a circular list
\item all new bindings (including the binding to \verb|%|) are written to a
file called histFileName()
one older session is accessible via the file \verb|$oldHistFileName()|
\end{itemize}

\section{Initialized history variables}
The following global variables are used:
\begin{list}{}
\item \verb|$HistList|, \verb|$HistListLen| and \verb|$HistListAct| 
       which is the actual number of ``undoable'' steps)
\item \verb|$HistRecord| collects the input line, all variable bindings
      and the output of a step, before it is written to the file
      histFileName().
\item \verb|$HiFiAccess| is a flag, which is reset by )history )off
\end{list}

The result of step n can be accessed by \verb|%n|, which is translated
into a call of fetchOutput(n). The updateHist is called after every
interpreter step. The putHist function records all changes in the
environment to \verb|$HistList| and \verb|$HistRecord|.
 
\defdollar{oldHistoryFileName}
<<initvars>>=
(defvar |$oldHistoryFileName| '|last| "vm/370 filename name component")

@
\defdollar{historyFileType}
<<initvars>>=
(defvar |$historyFileType| '|axh|     "vm/370 filename type component")

@
\defdollar{historyDirectory}
<<initvars>>=
(defvar |$historyDirectory| 'A        "vm/370 filename disk component")

@
\defdollar{useInternalHistoryTable}
<<initvars>>=
(defvar |$useInternalHistoryTable| t  "t means keep history in core")

@
\section{Data Structures}
\section{Functions}
\defun{makeHistFileName}{makeHistFileName}
\calls{makeHistFileName}{makePathname}
<<defun makeHistFileName>>=
(defun |makeHistFileName| (fname) 
 (|makePathname| fname |$historyFileType| |$historyDirectory|)) 

@ 
\defun{oldHistFileName}{oldHistFileName}
\calls{oldHistFileName}{makeHistFileName}
\usesdollar{oldHistFileName}{oldHistoryFileName}
<<defun oldHistFileName>>=
(defun |oldHistFileName| ()
 (declare (special |$oldHistoryFileName|))
 (|makeHistFileName| |$oldHistoryFileName|))

@
\defun{histFileName}{histFileName}
\calls{histFileName}{makeHistFileName}
\usesdollar{histFileName}{interpreterFrameName}
<<defun histFileName>>=
(defun |histFileName| () 
 (declare (special |$interpreterFrameName|))
 (|makeHistFileName| |$interpreterFrameName|)) 

@
\defun{histInputFileName}{histInputFileName}
\calls{histInputFileName}{makePathname}
\usesdollar{histInputFileName}{interpreterFrameName}
\usesdollar{histInputFileName}{historyDirectory}
<<defun histInputFileName>>=
(defun |histInputFileName| (fn)
 (declare (special |$interpreterFrameName| |$historyDirectory|))
 (if (null fn)
   (|makePathname| |$interpreterFrameName| 'input |$historyDirectory|)
   (|makePathname| fn 'input |$historyDirectory|)))
@

\defun{initHist}{initHist}
\calls{initHist}{initHistList}
\calls{initHist}{oldHistFileName}
\calls{initHist}{histFileName}
\calls{initHist}{histFileErase}
\calls{initHist}{makeInputFilename}
\callsdollar{initHist}{replace}
\usesdollar{initHist}{useInternalHistoryTable}
\usesdollar{initHist}{HiFiAccess}
<<defun initHist>>=
(defun |initHist| ()
 (let (oldFile newFile)
 (declare (special |$useInternalHistoryTable| |$HiFiAccess|))
   (if |$useInternalHistoryTable| 
     (|initHistList|)
     (progn
       (setq oldFile (|oldHistFileName|))
       (setq newFile (|histFileName|))
       (|histFileErase| oldFile)
       (when (makeInputFilename newFile) (replaceFile oldFile newFile))
       (setq |$HiFiAccess| t)
       (|initHistList|)))))
 
@
\defun{initHistList}{initHistList}
\usesdollar{initHistList}{HistListLen}
\usesdollar{initHistList}{HistList}
\usesdollar{initHistList}{HistListAct}
\usesdollar{initHistList}{HistRecord}
<<defun initHistList>>=
(defun |initHistList| () 
 (let (li) 
 (declare (special |$HistListLen| |$HistList| |$HistListAct| |$HistRecord|))
   (setq |$HistListLen| 20) 
   (setq |$HistList| (list nil)) 
   (setq li |$HistList|) 
   (do ((i 1 (1+ i))) 
       ((> i |$HistListLen|) nil) 
     (setq li (cons nil li)))
   (rplacd |$HistList| li) 
   (setq |$HistListAct| 0) 
   (setq |$HistRecord| nil)))
 
@
\defunsec{history}{The top level history command}
\calls{history}{sayKeyedMsg}
\calls{history}{historySpad2Cmd}
\usesdollar{history}{options}
<<defun history>>=
(defun |history| (l) 
 "The top level history command"
 (declare (special |$options|))
 (if (or l (null |$options|)) 
  (|sayKeyedMsg| 's2ih0006 nil) ; syntax error
  (|historySpad2Cmd|)))

@
\defunsec{historySpad2Cmd}{The top level history command handler}
\calls{historySpad2Cmd}{selectOptionLC}
\calls{historySpad2Cmd}{member}
\calls{historySpad2Cmd}{sayKeyedMsg}
\calls{historySpad2Cmd}{initHistList}
\calls{historySpad2Cmd}{upcase}
\calls{historySpad2Cmd}{queryUserKeyedMsg}
\calls{historySpad2Cmd}{memq}
\calls{historySpad2Cmd}{string2id-n}
\calls{historySpad2Cmd}{histFileErase}
\calls{historySpad2Cmd}{histFileName}
\calls{historySpad2Cmd}{clearSpad2Cmd}
\calls{historySpad2Cmd}{disableHist}
\calls{historySpad2Cmd}{setHistoryCore}
\calls{historySpad2Cmd}{resetInCoreHist}
\calls{historySpad2Cmd}{saveHistory}
\calls{historySpad2Cmd}{showHistory}
\calls{historySpad2Cmd}{changeHistListLen}
\calls{historySpad2Cmd}{restoreHistory}
\calls{historySpad2Cmd}{writeInputLines}
\calls{historySpad2Cmd}{seq}
\calls{historySpad2Cmd}{exit}
\usesdollar{historySpad2Cmd}{options}
\usesdollar{historySpad2Cmd}{HiFiAccess}
\usesdollar{historySpad2Cmd}{IOindex}
<<defun historySpad2Cmd>>=
(defun |historySpad2Cmd| () 
 "The top level history command handler"
 (let (histOptions opts opt optargs x) 
 (declare (special |$options| |$HiFiAccess| |$IOindex|))
  (setq histOptions 
    '(|on| |off| |yes| |no| |change| |reset| |restore| |write| 
      |save| |show| |file| |memory|)) 
  (setq opts 
   (prog (tmp1) 
     (setq tmp1 nil) 
     (return 
      (do ((tmp2 |$options| (cdr tmp2)) (tmp3 nil))
          ((or (atom tmp2) 
               (progn 
                 (setq tmp3 (car tmp2)) 
                 nil) 
               (progn 
                (progn 
                 (setq opt (car tmp3)) 
                 (setq optargs (cdr tmp3)) 
                 tmp3) 
                nil))
             (nreverse0 tmp1))
         (setq tmp1 
          (cons 
            (cons 
              (|selectOptionLC| opt histOptions '|optionError|)
              optargs)
            tmp1))))))
  (do ((tmp4 opts (cdr tmp4)) (tmp5 nil))
      ((or (atom tmp4) 
           (progn 
             (setq tmp5 (car tmp4))
              nil) 
           (progn 
            (progn 
             (setq opt (car tmp5)) 
             (setq optargs (cdr tmp5)) 
             tmp5) 
            nil))
        nil)
    (seq 
     (exit 
      (cond 
       ((|member| opt '(|on| |yes|))
          (cond 
           (|$HiFiAccess| 
             (|sayKeyedMsg| 'S2IH0007 nil)) ; history already on
           ((eql |$IOindex| 1) 
             (setq |$HiFiAccess| t)
             (|initHistList|)
             (|sayKeyedMsg| 'S2IH0008 nil)) ; history now on
           (t 
             (setq x ; really want to turn history on?
               (upcase (|queryUserKeyedMsg| 'S2IH0009 nil)))
             (cond 
              ((memq (string2id-n x 1) '(Y YES)) 
                (|histFileErase| (|histFileName|)) 
                (setq |$HiFiAccess| t)
                (setq |$options| nil) 
                (|clearSpad2Cmd| '(|all|))
                (|sayKeyedMsg| 'S2IH0008 nil) ; history now on
                (|initHistList|)) 
              (t 
                (|sayKeyedMsg| 'S2IH0010 nil)))))) ; history still off
       ((|member| opt '(|off| |no|)) 
         (cond 
          ((null |$HiFiAccess|) 
            (|sayKeyedMsg| 'S2IH0011 nil)) ; history already off
          (t 
            (setq |$HiFiAccess| nil) 
            (|disableHist|) 
            (|sayKeyedMsg| 'S2IH0012 nil)))) ; history now off
       ((eq opt '|file|)    (|setHistoryCore| nil)) 
       ((eq opt '|memory|)  (|setHistoryCore| t)) 
       ((eq opt '|reset|)   (|resetInCoreHist|)) 
       ((eq opt '|save|)    (|saveHistory| optargs)) 
       ((eq opt '|show|)    (|showHistory| optargs)) 
       ((eq opt '|change|)  (|changeHistListLen| (car optargs))) 
       ((eq opt '|restore|) (|restoreHistory| optargs)) 
       ((eq opt '|write|)   (|writeInputLines| optargs 1)))))) 
  '|done|))

@ 
\defun{setHistoryCore}{setHistoryCore}
We case on the inCore argument value
\begin{list}{}
\item If history is already on and is kept in the same location as requested
(file or memory) then complain.
\item If history is not in use then start using the file or memory as 
requested. This is done by simply setting the \verb|$useInternalHistoryTable|
to the requested value, where T means use memory and NIL means
use a file. We tell the user.
\item If history should be in memory, that is inCore is not NIL,
and the history file already contains information we read the information
from the file, store it in memory, and erase the history file. We modify
\verb|$useInternalHistoryTable| to T to indicate that we're maintining
the history in memory and tell the user.
\item Otherwise history must be on and in memory. We erase any old history
file and then write the in-memory history to a new file
\end{list}
\calls{setHistoryCore}{boot-equal}
\calls{setHistoryCore}{sayKeyedMsg}
\calls{setHistoryCore}{nequal}
\calls{setHistoryCore}{rkeyids}
\calls{setHistoryCore}{histFileName}
\calls{setHistoryCore}{readHiFi}
\calls{setHistoryCore}{disableHist}
\calls{setHistoryCore}{histFileErase}
\calls{setHistoryCore}{rdefiostream}
\calls{setHistoryCore}{spadrwrite}
\calls{setHistoryCore}{object2Identifier}
\calls{setHistoryCore}{rshut}
\usesdollar{setHistoryCore}{useInternalHistoryTable}
\usesdollar{setHistoryCore}{internalHistoryTable}
\usesdollar{setHistoryCore}{HiFiAccess}
\usesdollar{setHistoryCore}{IOindex}
<<defun setHistoryCore>>=
(defun |setHistoryCore| (inCore) 
 (let (l vec str n rec) 
 (declare (special |$useInternalHistoryTable| |$internalHistoryTable|
     |$HiFiAccess| |$IOindex|))
  (cond 
   ((boot-equal inCore |$useInternalHistoryTable|) 
     (if inCore 
        (|sayKeyedMsg| 's2ih0030 nil) ; memory history already in use
        (|sayKeyedMsg| 's2ih0029 nil))) ; file history already in use
   ((null |$HiFiAccess|) 
     (setq |$useInternalHistoryTable| inCore) 
     (if inCore 
        (|sayKeyedMsg| 's2ih0032 nil) ; use memory history
        (|sayKeyedMsg| 's2ih0031 nil))) ; use file history
   (inCore 
     (setq |$internalHistoryTable| nil) 
     (cond 
      ((nequal |$IOindex| 0) 
        (setq l (length (rkeyids (|histFileName|)))) 
        (do ((i 1 (1+ i)))
            ((> i l) nil)
          (setq vec (unwind-protect (|readHiFi| i) (|disableHist|)))
          (setq |$internalHistoryTable| 
            (cons (cons i vec) |$internalHistoryTable|)))
        (|histFileErase| (|histFileName|)))) 
     (setq |$useInternalHistoryTable| t) 
     (|sayKeyedMsg| 'S2IH0032 nil)) ; use memory history
   (t 
     (setq |$HiFiAccess| nil)
     (|histFileErase| (|histFileName|))
     (setq str 
      (rdefiostream 
       (cons 
         '(mode . output) 
          (cons
            (cons 'file (|histFileName|))
             nil))))
     (do ((tmp0 (reverse |$internalHistoryTable|) (cdr tmp0))
          (tmp1 nil))
         ((or (atom tmp0) 
              (progn 
                (setq tmp1 (car tmp0))
                nil) 
              (progn 
               (progn 
                (setq n (car tmp1))
                (setq rec (cdr tmp1))
                tmp1) 
               nil)) 
              nil)
       (spadrwrite (|object2Identifier| n) rec str))
     (rshut str)
     (setq |$HiFiAccess| t)
     (setq |$internalHistoryTable| nil)
     (setq |$useInternalHistoryTable| nil)
     (|sayKeyedMsg| 's2ih0031 nil))))) ; use file history

@
\defdollar{underbar}
Also used in the output routines.
<<initvars>>=
(defvar underbar "_")

@

\defun{writeInputLines}{writeInputLines}
\calls{writeInputLines}{sayKeyedMsg}
\calls{writeInputLines}{throwKeyedMsg}
\calls{writeInputLines}{size}
\calls{writeInputLines}{spaddifference}
\calls{writeInputLines}{memq}
\calls{writeInputLines}{concat}
\calls{writeInputLines}{substring}
\calls{writeInputLines}{readHiFi}
\calls{writeInputLines}{histInputFileName}
\calls{writeInputLines}{histFileErase}
\calls{writeInputLines}{defiostream}
\calls{writeInputLines}{nequal}
\calls{writeInputLines}{namestring}
\calls{writeInputLines}{shut}
\uses{writeInputLines}{underbar}
\usesdollar{writeInputLines}{HiFiAccess}
\usesdollar{writeInputLines}{IOindex}
<<defun writeInputLines>>=
(defun |writeInputLines| (fn initial) 
 (let (maxn breakChars vecl k svec done n lineList file inp) 
 (declare (special underbar |$HiFiAccess| |$IOindex|))
  (cond 
   ((null |$HiFiAccess|) (|sayKeyedMsg| 's2ih0013 nil)) ; history is not on
   ((null fn) (|throwKeyedMsg| 's2ih0038 nil)) ; missing file name
   (t 
     (setq maxn 72)
     (setq breakChars (cons '| | (cons '+ nil)))
     (do ((tmp0 (spaddifference |$IOindex| 1))
          (i initial (+ i 1)))
         ((> i tmp0) nil)
       (setq vecl (car (|readHiFi| i)))
       (when (stringp vecl) (setq vecl (cons vecl nil)))
       (dolist (vec vecl)
         (setq n (size vec))
         (do () 
             ((null (> n maxn)) nil) 
             (setq done nil)
             (do ((j 1 (1+ j)))
                 ((or (> j maxn) (null (null done))) nil)
               (setq k (spaddifference (1+ maxn) j))
               (when (memq (elt vec k) breakChars)
                 (setq svec (concat (substring vec 0 (1+ k)) underbar))
                 (setq lineList (cons svec lineList))
                 (setq done t)
                 (setq vec (substring vec (1+ k) nil))
                 (setq n (size vec))))
             (when done (setq n 0)))
         (setq lineList (cons vec lineList))))
     (setq file (|histInputFileName| fn))
     (|histFileErase| file)
     (setq inp 
      (defiostream 
       (cons 
        '(mode . output) 
        (cons (cons 'file file) nil)) 255 0))
     (dolist (x (|removeUndoLines| (nreverse lineList)))
       (write-line x inp))
     (cond 
      ((nequal fn '|redo|) 
        (|sayKeyedMsg| 's2ih0014 ; edit this file to see input lines
          (list (|namestring| file)))))
     (shut inp)
     nil))))

@ 
\defun{resetInCoreHist}{resetInCoreHist}
\usesdollar{resetInCoreHist}{HistListAct}
\usesdollar{resetInCoreHist}{HistListLen}
\usesdollar{resetInCoreHist}{HistList}
<<defun resetInCoreHist>>=
(defun |resetInCoreHist| () 
 (declare (special |$HistListAct| |$HistListLen| |$HistList|))
 (setq |$HistListAct| 0) 
 (do ((i 1 (1+ i)))
     ((> i |$HistListLen|) nil)
   (setq |$HistList| (cdr |$HistList|))
   (rplaca |$HistList| nil)))

@
\defun{changeHistListLen}{changeHistListLen}
\calls{changeHistListLen}{sayKeyedMsg}
\calls{changeHistListLen}{spaddifference}
\usesdollar{changeHistListLen}{HistListLen}
\usesdollar{changeHistListLen}{HistList}
\usesdollar{changeHistListLen}{HistListAct}
<<defun changeHistListLen>>=
(defun |changeHistListLen| (n)
 (let (dif l) 
 (declare (special |$HistListLen| |$HistList| |$HistListAct|))
 (if (null (integerp n)) 
   (|sayKeyedMsg| 's2ih0015 (list n)) ; only positive integers
   (progn
     (setq dif (spaddifference n |$HistListLen|))
     (setq |$HistListLen| n) 
     (setq l (cdr |$HistList|)) 
     (cond 
      ((> dif 0) 
        (do ((i 1 (1+ i)))
            ((> i dif) nil)
           (setq l (cons nil l))))
      ((minusp dif)
        (do ((tmp0 (spaddifference dif)) 
             (i 1 (1+ i)))
            ((> i tmp0) nil)
           (setq l (cdr l)))
        (cond
         ((> |$HistListAct| n) (setq |$HistListAct| n))
         (t nil))))
     (rplacd |$HistList| l) 
     '|done|))))

@
\defun{updateHist}{updateHist}
\calls{updateHist}{startTimingProcess}
\calls{updateHist}{updateInCoreHist}
\calls{updateHist}{writeHiFi}
\calls{updateHist}{disableHist}
\calls{updateHist}{updateCurrentInterpreterFrame}
\calls{updateHist}{stopTimingProcess}
\usesdollar{updateHist}{IOindex}
\usesdollar{updateHist}{HiFiAccess}
\usesdollar{updateHist}{HistRecord}
\usesdollar{updateHist}{mkTestInputStack}
\usesdollar{updateHist}{currentLine}
<<defun updateHist>>=
(defun |updateHist| () 
 (declare (special |$IOindex| |$HiFiAccess| |$HistRecord| |$mkTestInputStack|
   |$currentLine|))
 (when |$IOindex|
   (|startTimingProcess| '|history|)
   (|updateInCoreHist|)
   (when |$HiFiAccess| 
      (unwind-protect (|writeHiFi|) (|disableHist|))
      (setq |$HistRecord| nil))
   (incf |$IOindex|)
   (|updateCurrentInterpreterFrame|)
   (setq |$mkTestInputStack| nil)
   (setq |$currentLine| nil)
   (|stopTimingProcess| '|history|)))

@
\defun{updateInCoreHist}{updateInCoreHist}
\usesdollar{updateInCoreHist}{HistList}
\usesdollar{updateInCoreHist}{HistListLen}
\usesdollar{updateInCoreHist}{HistListAct}
<<defun updateInCoreHist>>=
(defun |updateInCoreHist| ()
 (declare (special |$HistList| |$HistListLen| |$HistListAct|))
  (setq |$HistList| (cdr |$HistList|))
  (rplaca |$HistList| nil) 
  (when (> |$HistListLen| |$HistListAct|) 
    (setq |$HistListAct| (1+ |$HistListAct|))))

@
\defun{putHist}{putHist}
\calls{putHist}{recordOldValue}
\calls{putHist}{get}
\calls{putHist}{recordNewValue}
\calls{putHist}{putIntSymTab}
\usesdollar{putHist}{HiFiAccess}
<<defun putHist>>=
(defun |putHist| (x prop val e)
  (declare (special |$HiFiAccess|))
  (when (null (eq x '%)) (|recordOldValue| x prop (|get| x prop e)))
  (when |$HiFiAccess| (|recordNewValue| x prop val))
  (|putIntSymTab| x prop val e))

@
\defun{recordNewValue}{recordNewValue}
\calls{recordNewValue}{startTimingProcess}
\calls{recordNewValue}{recordNewValue0}
\calls{recordNewValue}{stopTimingProcess}
<<defun recordNewValue>>=
(defun |recordNewValue| (x prop val)
  (|startTimingProcess| '|history|)
  (|recordNewValue0| x prop val)
  (|stopTimingProcess| '|history|))

@
\defun{recordNewValue0}{recordNewValue0}
\calls{recordNewValue0}{assq}
\usesdollar{recordNewValue0}{HistRecord}
<<defun recordNewValue0>>=
(defun |recordNewValue0| (x prop val)
 (let (p1 p2 p)
 (declare (special |$HistRecord|))
   (if (setq p1 (assq x |$HistRecord|))
    (if (setq p2 (assq prop (cdr p1))) 
      (rplacd p2 val)
      (rplacd p1 (cons (cons prop val) (cdr p1))))
    (progn
      (setq p (cons x (list (cons prop val))))
      (setq |$HistRecord| (cons p |$HistRecord|))))))

@
\defun{recordOldValue}{recordOldValue}
\calls{recordOldValue}{startTimingProcess}
\calls{recordOldValue}{recordOldValue0}
\calls{recordOldValue}{stopTimingProcess}
\calls{recordOldValue0}{assq}
<<defun recordOldValue>>=
(defun |recordOldValue| (x prop val)
  (|startTimingProcess| '|history|)
  (|recordOldValue0| x prop val)
  (|stopTimingProcess| '|history|))

@
\defun{recordOldValue0}{recordOldValue0}
\usesdollar{recordOldValue0}{HistList}
<<defun recordOldValue0>>=
(defun |recordOldValue0| (x prop val)
 (let (p1 p)
 (declare (special |$HistList|))
 (when (setq p1 (assq x (car |$HistList|)))
   (when (null (assq prop (cdr p1)))
      (rplacd p1 (cons (cons prop val) (cdr p1)))))
 (setq p (cons x (list (cons prop val))))
 (rplaca |$HistList| (cons p (car |$HistList|)))))

@
\defun{undoInCore}{undoInCore}
\calls{undoInCore}{undoChanges}
\calls{undoInCore}{spaddifference}
\calls{undoInCore}{readHiFi}
\calls{undoInCore}{disableHist}
\calls{undoInCore}{assq}
\calls{undoInCore}{sayKeyedMsg}
\calls{undoInCore}{putHist}
\calls{undoInCore}{updateHist}
\usesdollar{undoInCore}{HistList}
\usesdollar{undoInCore}{HistListLen}
\usesdollar{undoInCore}{IOindex}
\usesdollar{undoInCore}{HiFiAccess}
\usesdollar{undoInCore}{InteractiveFrame}
<<defun undoInCore>>=
(defun |undoInCore| (n)
 (let (li vec p p1 val)
 (declare (special |$HistList| |$HistListLen| |$IOindex| |$HiFiAccess|
    |$InteractiveFrame|))
  (setq li |$HistList|) 
  (do ((i n (+ i 1)))
      ((> i |$HistListLen|) nil)
   (setq li (cdr li)))
  (|undoChanges| li)
  (setq n (spaddifference (spaddifference |$IOindex| n) 1))
  (and
    (> n 0)
    (if |$HiFiAccess|
     (progn
       (setq vec (cdr (unwind-protect (|readHiFi| n) (|disableHist|))))
       (setq val 
        (and 
         (setq p (assq '% vec))
         (setq p1 (assq '|value| (cdr p)))
         (cdr p1))))
      (|sayKeyedMsg| 's2ih0019 (cons n nil)))) ; no history file
  (setq |$InteractiveFrame| (|putHist| '% '|value| val |$InteractiveFrame|))
  (|updateHist|)))

@
\defun{undoChanges}{undoChanges}
\calls{undoChanges}{boot-equal}
\calls{undoChanges}{undoChanges}
\calls{undoChanges}{putHist}
\usesdollar{undoChanges}{HistList}
\usesdollar{undoChanges}{InteractiveFrame}
<<defun undoChanges>>=
(defun |undoChanges| (li)
 (let (x)
 (declare (special |$HistList| |$InteractiveFrame|))
  (when (null (boot-equal (cdr li) |$HistList|)) (|undoChanges| (cdr li)))
  (dolist (p1 (car li))
    (setq x (car p1))
    (dolist (p2 (cdr p1))
     (|putHist| x (car p2) (cdr p2) |$InteractiveFrame|)))))

@
\defun{undoFromFile}{undoFromFile}
\calls{undoFromFile}{seq}
\calls{undoFromFile}{exit}
\calls{undoFromFile}{recordOldValue}
\calls{undoFromFile}{recordNewValue}
\calls{undoFromFile}{readHiFi}
\calls{undoFromFile}{disableHist}
\calls{undoFromFile}{putHist}
\calls{undoFromFile}{assq}
\calls{undoFromFile}{updateHist}
\usesdollar{undoFromFile}{InteractiveFrame}
\usesdollar{undoFromFile}{HiFiAccess}
<<defun undoFromFile>>=
(defun |undoFromFile| (n)
 (let (varl prop vec x p p1 val)
 (declare (special |$InteractiveFrame| |$HiFiAccess|))
  (do ((tmp0 (caar |$InteractiveFrame|) (cdr tmp0)) (tmp1 nil))
      ((or (atom tmp0) 
           (progn (setq tmp1 (car tmp0)) nil) 
           (progn
             (progn
              (setq x (car tmp1)) 
              (setq varl (cdr tmp1))
              tmp1)
              nil))
            nil)
   (seq
    (exit
     (do ((tmp2 varl (cdr tmp2)) (p nil))
         ((or (atom tmp2) (progn (setq p (car tmp2)) nil)) nil)
      (seq
       (exit
        (progn
         (setq prop (car p))
         (setq val (cdr p))
         (when val 
           (progn
             (when (null (eq x '%))
               (|recordOldValue| x prop val))
             (when |$HiFiAccess| 
               (|recordNewValue| x prop val))
             (rplacd p nil))))))))))
  (do ((i 1 (1+ i)))
      ((> i n) nil)
    (setq vec 
      (unwind-protect (cdr (|readHiFi| i)) (|disableHist|)))
    (do ((tmp3 vec (cdr tmp3)) (p1 nil))
        ((or (atom tmp3) (progn (setq p1 (car tmp3)) nil)) nil)
     (setq x (car p1))
     (do ((tmp4 (cdr p1) (cdr tmp4)) (p2 nil))
         ((or (atom tmp4) (progn (setq p2 (car tmp4)) nil)) nil)
      (setq |$InteractiveFrame| 
         (|putHist| x (car p2) (CDR p2) |$InteractiveFrame|)))))
  (setq val
   (and 
    (setq p (assq '% vec))
    (setq p1 (assq '|value| (cdr p)))
    (cdr p1)))
  (setq |$InteractiveFrame| (|putHist| '% '|value| val |$InteractiveFrame|))
  (|updateHist|)))

@
\defun{saveHistory}{saveHistory}
\calls{saveHistory}{sayKeyedMsg}
\calls{saveHistory}{makeInputFilename}
\calls{saveHistory}{histFileName}
\calls{saveHistory}{throwKeyedMsg}
\calls{saveHistory}{makeHistFileName}
\calls{saveHistory}{histInputFileName}
\calls{saveHistory}{writeInputLines}
\calls{saveHistory}{histFileErase}
\calls{saveHistory}{rdefiostream}
\calls{saveHistory}{spadrwrite0}
\calls{saveHistory}{object2Identifier}
\calls{saveHistory}{rshut}
\calls{saveHistory}{namestring}
\usesdollar{saveHistory}{seen}
\usesdollar{saveHistory}{HiFiAccess}
\usesdollar{saveHistory}{useInternalHistoryTable}
\usesdollar{saveHistory}{internalHistoryTable}
<<defun saveHistory>>=
(defun |saveHistory| (fn)
 (let (|$seen| savefile inputfile saveStr n rec val)
 (declare (special |$seen| |$HiFiAccess| |$useInternalHistoryTable|
     |$internalHistoryTable|))
 (setq |$seen| (make-hash-table :test #'eq))
 (cond 
  ((null |$HiFiAccess|) 
    (|sayKeyedMsg| 's2ih0016 nil)) ; the history file is not on
  ((and (null |$useInternalHistoryTable|) 
        (null (makeInputFilename (|histFileName|))))
    (|sayKeyedMsg| 's2ih0022 nil)) ; no history saved yet
  ((null fn) 
    (|throwKeyedMsg| 's2ih0037 nil)) ; need to specify a history filename
  (t 
    (setq savefile (|makeHistFileName| fn))
    (setq inputfile (|histInputFileName| fn))
    (|writeInputLines| fn 1)
    (|histFileErase| savefile)
    (when |$useInternalHistoryTable| 
      (setq saveStr 
        (rdefiostream 
         (cons '(mode . output) 
           (cons (cons 'file savefile) nil))))
      (do ((tmp0 (reverse |$internalHistoryTable|) (cdr tmp0))
           (tmp1 nil))
          ((or (atom tmp0) 
               (progn (setq tmp1 (car tmp0)) nil)
               (progn
                (progn
                 (setq n (car tmp1)) 
                 (setq rec (cdr tmp1)) 
                 tmp1) 
                nil)) 
               nil)
        (setq val (spadrwrite0 (|object2Identifier| n) rec saveStr))
        (when (eq val '|writifyFailed|)
         (|sayKeyedMsg| 's2ih0035 ; can't save the value of step
          (list n inputfile))))
      (rshut saveStr))
    (|sayKeyedMsg| 's2ih0018 ; saved history file is
      (cons (|namestring| savefile) nil))
    nil))))

@
\defun{restoreHistory}{restoreHistory}
\calls{restoreHistory}{pairp}
\calls{restoreHistory}{qcdr}
\calls{restoreHistory}{qcar}
\calls{restoreHistory}{identp}
\calls{restoreHistory}{throwKeyedMsg}
\calls{restoreHistory}{makeHistFileName}
\calls{restoreHistory}{putHist}
\calls{restoreHistory}{makeInputFilename}
\calls{restoreHistory}{sayKeyedMsg}
\calls{restoreHistory}{namestring}
\calls{restoreHistory}{clearSpad2Cmd}
\calls{restoreHistory}{histFileName}
\calls{restoreHistory}{histFileErase}
\callsdollar{restoreHistory}{fcopy}
\calls{restoreHistory}{rkeyids}
\calls{restoreHistory}{readHiFi}
\calls{restoreHistory}{disableHist}
\calls{restoreHistory}{updateInCoreHist}
\calls{restoreHistory}{get}
\calls{restoreHistory}{rempropI}
\calls{restoreHistory}{clearCmdSortedCaches}
\usesdollar{restoreHistory}{options}
\usesdollar{restoreHistory}{internalHistoryTable}
\usesdollar{restoreHistory}{HiFiAccess}
\usesdollar{restoreHistory}{e}
\usesdollar{restoreHistory}{useInternalHistoryTable}
\usesdollar{restoreHistory}{InteractiveFrame}
\usesdollar{restoreHistory}{oldHistoryFileName}
<<defun restoreHistory>>=
(defun |restoreHistory| (fn)
 (let (|$options| fnq restfile curfile l oldInternal vec line x a)
 (declare (special |$options| |$internalHistoryTable| |$HiFiAccess| |$e|
     |$useInternalHistoryTable| |$InteractiveFrame| |$oldHistoryFileName|))
 (cond 
   ((null fn) (setq fnq |$oldHistoryFileName|))
   ((and (pairp fn) 
         (eq (qcdr fn) nil)
         (progn
          (setq fnq (qcar fn))
          t)
         (identp fnq))
     (setq fnq fnq))
   (t (|throwKeyedMsg| 's2ih0023 (cons fnq nil)))) ; invalid filename
 (setq restfile (|makeHistFileName| fnq))
 (if (null (makeInputFilename restfile))
  (|sayKeyedMsg| 's2ih0024  ; file does not exist
       (cons (|namestring| restfile) nil))
  (progn 
    (setq |$options| nil)
    (|clearSpad2Cmd| '(|all|))
    (setq curfile (|histFileName|))
    (|histFileErase| curfile)
    ($fcopy restfile curfile)
    (setq l (length (rkeyids curfile)))
    (setq |$HiFiAccess| t)
    (setq oldInternal |$useInternalHistoryTable|)
    (setq |$useInternalHistoryTable| nil)
    (when oldInternal (setq |$internalHistoryTable| nil))
    (do ((i 1 (1+ i)))
        ((> i l) nil)
      (setq vec (unwind-protect (|readHiFi| i) (|disableHist|)))
      (when oldInternal
        (setq |$internalHistoryTable| 
         (cons (cons i vec) |$internalHistoryTable|)))
      (setq line (car vec))
      (dolist (p1 (cdr vec))
        (setq x (car p1))
        (do ((tmp1 (cdr p1) (cdr tmp1)) (p2 nil))
            ((or (atom tmp1) (progn (setq p2 (car tmp1)) nil)) nil)
         (setq |$InteractiveFrame| 
           (|putHist| x 
            (car p2) (cdr p2) |$InteractiveFrame|))))
      (|updateInCoreHist|))
    (setq |$e| |$InteractiveFrame|)
    (do ((tmp2 (caar |$InteractiveFrame|) (cdr tmp2)) (tmp3 nil))
        ((or (atom tmp2) 
             (progn
               (setq tmp3 (car tmp2))
               nil) 
             (progn
              (progn
                (setq a (car tmp3))
                tmp3) 
                nil))
             nil)
       (when (|get| a '|localModemap| |$InteractiveFrame|)
          (|rempropI| a '|localModemap|)
          (|rempropI| a '|localVars|)
          (|rempropI| a '|mapBody|)))
    (setq |$IOindex| (1+ l))
    (setq |$useInternalHistoryTable| oldInternal)
    (|sayKeyedMsg| 'S2IH0025 ; workspace restored
      (cons (|namestring| restfile) nil))
    (|clearCmdSortedCaches|)
     nil))))

@

\defun{setIOindex}{setIOindex}
\usesdollar{setIOindex}{IOindex}
<<defun setIOindex>>=
(defun |setIOindex| (n)
  (declare (special |$IOindex|))
  (setq |$IOindex| n)) 

@
\defun{showInput}{showInput}
\calls{showInput}{tab}
\calls{showInput}{readHiFi}
\calls{showInput}{disableHist}
\calls{showInput}{sayMSG}
<<defun showInput>>=
(defun |showInput| (mini maxi)
 (let (vec l)
  (do ((|ind| mini (+ |ind| 1)))
      ((> |ind| maxi) nil)
    (setq vec (unwind-protect (|readHiFi| |ind|) (|disableHist|)))
    (cond
     ((> 10 |ind|) (tab 2))
     ((> 100 |ind|) (tab 1))
     (t nil))
    (setq l (car vec))
    (if (stringp l)
      (|sayMSG| (list "   [" |ind| "] " (car vec)))
      (progn
       (|sayMSG| (list "   [" |ind| "] "))
       (do ((tmp0 l (cdr tmp0)) (ln nil))
           ((or (atom tmp0) (progn (setq ln (car tmp0)) nil)) nil)
         (|sayMSG| (list "      " ln))))))))

@
\defun{showInOut}{showInOut}
\calls{showInOut}{assq}
\calls{showInOut}{spadPrint}
\calls{showInOut}{objValUnwrap}
\calls{showInOut}{objMode}
\calls{showInOut}{readHiFi}
\calls{showInOut}{disableHist}
\calls{showInOut}{sayMSG}
<<defun showInOut>>=
(defun |showInOut| (mini maxi)
 (let (vec Alist triple)
  (do ((ind mini (+ ind 1)))
      ((> ind maxi) nil)
   (setq vec (unwind-protect (|readHiFi| ind) (|disableHist|)))
   (|sayMSG| (cons (car vec) nil))
   (cond
    ((setq Alist (assq '% (cdr vec)))
      (setq triple (cdr (assq '|value| (cdr Alist))))
      (setq |$IOindex| ind)
      (|spadPrint| (|objValUnwrap| triple) (|objMode| triple)))))))

@
\defun{fetchOutput}{fetchOutput}
\calls{fetchOutput}{boot-equal}
\calls{fetchOutput}{spaddifference}
\calls{fetchOutput}{getI}
\calls{fetchOutput}{throwKeyedMsg}
\calls{fetchOutput}{readHiFi}
\calls{fetchOutput}{disableHist}
\calls{fetchOutput}{assq}
<<defun fetchOutput>>=
(defun |fetchOutput| (n)
 (let (vec Alist val)
  (cond
   ((and (boot-equal n (spaddifference 1)) (setq val (|getI| '% '|value|)))
     val)
   (|$HiFiAccess|
    (setq n
     (cond
      ((minusp n) (+ |$IOindex| n))
      (t n)))
    (cond
     ((>= n |$IOindex|) 
       (|throwKeyedMsg| 'S2IH0001 (cons n nil))) ; no step n yet
     ((> 1 n)
       (|throwKeyedMsg| 's2ih0002 (cons n nil))) ; only nonzero steps
     (t
       (setq vec (unwind-protect (|readHiFi| n) (|disableHist|)))
       (cond
        ((setq Alist (assq '% (cdr vec)))
          (cond
            ((setq val (cdr (assq '|value| (cdr Alist))))
              val)
            (t
              (|throwKeyedMsg| 's2ih0003 (cons n nil))))) ; no step value
        (t (|throwKeyedMsg| 's2ih0003 (cons n nil))))))) ; no step value
   (t (|throwKeyedMsg| 's2ih0004 nil))))) ; history not on

@
\defunsec{readHiFi}{Read the history file using index n}
\calls{readHiFi}{assoc}
\calls{readHiFi}{keyedSystemError}
\calls{readHiFi}{qcdr}
\calls{readHiFi}{rdefiostream}
\calls{readHiFi}{histFileName}
\calls{readHiFi}{spadrread}
\calls{readHiFi}{object2Identifier}
\calls{readHiFi}{rshut}
\usesdollar{readHiFi}{useInternalHistoryTable}
\usesdollar{readHiFi}{internalHistoryTable}
<<defun readHiFi>>=
(defun |readHiFi| (n)
 "Read the history file using index n"
 (let (pair HiFi vec)
  (declare (special |$useInternalHistoryTable| |$internalHistoryTable|))
  (if |$useInternalHistoryTable|
   (progn
    (setq pair (|assoc| n |$internalHistoryTable|))
    (if (atom pair) 
     (|keyedSystemError| 's2ih0034 nil) ; missing element
     (setq vec (qcdr pair))))
   (progn
     (setq HiFi
      (rdefiostream
       (cons
        '(mode . input)
         (cons
          (cons 'file (|histFileName|)) nil))))
     (setq vec (spadrread (|object2Identifier| n) HiFi))
     (rshut HiFi)))
  vec))

@
\defunsec{writeHiFi}{Write information of the current step to history file}
\calls{writeHiFi}{rdefiostream}
\calls{writeHiFi}{histFileName}
\calls{writeHiFi}{spadrwrite}
\calls{writeHiFi}{object2Identifier}
\calls{writeHiFi}{rshut}
\usesdollar{writeHiFi}{useInternalHistoryTable}
\usesdollar{writeHiFi}{internalHistoryTable}
\usesdollar{writeHiFi}{IOindex}
\usesdollar{writeHiFi}{HistRecord}
\usesdollar{writeHiFi}{currentLine}
<<defun writeHiFi>>=
(defun |writeHiFi| ()
 "Writes information of the current step to history file"
 (let (HiFi)
 (declare (special |$useInternalHistoryTable| |$internalHistoryTable|
     |$IOindex| |$HistRecord| |$currentLine|))
   (if |$useInternalHistoryTable|
     (setq |$internalHistoryTable|
      (cons
       (cons |$IOindex|
        (cons |$currentLine| |$HistRecord|))
        |$internalHistoryTable|))
    (progn
      (setq HiFi
        (rdefiostream
         (cons
           '(mode . output)
            (cons (cons 'file (|histFileName|)) nil))))
      (spadrwrite (|object2Identifier| |$IOindex|)
        (cons |$currentLine| |$HistRecord|) HiFi)
      (rshut HiFi)))))

@
\defunsec{disableHist}{Disable history if an error occurred}
\calls{disableHist}{histFileErase}
\calls{disableHist}{histFileName}
\usesdollar{disableHist}{HiFiAccess}
<<defun disableHist>>=
(defun |disableHist| () 
 "Disable history if an error occurred"
 (declare (special |$HiFiAccess|))
 (cond
  ((null |$HiFiAccess|) 
    (|histFileErase| (|histFileName|)))
  (t nil))) 

@
\defun{writeHistModesAndValues}{writeHistModesAndValues}
\calls{writeHistModesAndValues}{get}
\calls{writeHistModesAndValues}{putHist}
\usesdollar{writeHistModesAndValues}{InteractiveFrame}
<<defun writeHistModesAndValues>>=
(defun |writeHistModesAndValues| ()
 (let (a x)
 (declare (special |$InteractiveFrame|))
  (do ((tmp0 (caar |$InteractiveFrame|) (cdr tmp0)) (tmp1 nil))
      ((or (atom tmp0) 
           (progn
             (setq tmp1 (car tmp0))
             nil)
           (progn
             (progn
               (setq a (car tmp1))
               tmp1)
           nil))
       nil)
     (cond
      ((setq x (|get| a '|value| |$InteractiveFrame|))
        (|putHist| a '|value| x |$InteractiveFrame|))
      ((setq x (|get| a '|mode| |$InteractiveFrame|))
        (|putHist| a '|mode| x |$InteractiveFrame|))))))

@
\section{Lisplib output transformations}
Lisplib output transformations

Some types of objects cannot be saved by LISP/VM in lisplibs.
These functions transform an object to a writable form and back.
\defun{spadrwrite0}{spadrwrite0}
\calls{spadrwrite0}{safeWritify}
\calls{spadrwrite0}{rwrite}
<<defun spadrwrite0>>=
(defun spadrwrite0 (vec item stream)
 (let (val)
  (setq val (|safeWritify| item))
  (if (eq val '|writifyFailed|)
    val
    (progn
     (|rwrite| vec val stream)
     item))))

@

\defun{rwrite}{Random write to a stream}
\calls{rwrite}{rwrite}
\calls{rwrite}{pname}
\calls{rwrite}{identp}
<<defun rwrite>>=
(defun |rwrite| (key val stream)
  (when (identp key) (setq key (pname key)))
  (rwrite key val stream))) 

@

\defun{spadrwrite}{spadrwrite}
\calls{spadrwrite}{spadrwrite0}
\calls{spadrwrite}{throwKeyedMsg}
<<defun spadrwrite>>=
(defun spadrwrite (vec item stream)
 (let (val)
  (setq val (spadrwrite0 vec item stream))
  (if (eq val '|writifyFailed|)
   (|throwKeyedMsg| 's2ih0036 nil) ; cannot save value to file
   item)))

@
\defun{spadrread}{spadrread}
\calls{SPADRREAD}{dewritify}
\calls{SPADRREAD}{rread}
<<defun spadrread>>=
(defun spadrread (vec stream)
 (|dewritify| (|rread| vec stream nil))) 

@ 

\defun{rread}{Random read a key from a stream}
RREAD takes erroval to return if key is missing
\calls{rread}{rread}
\calls{rwrite}{identp}
\calls{rwrite}{pname}
<<defun rread>>=
(defun |rread| (key rstream errorval)
  (when (identp key) (setq key (pname key)))
  (rread key rstream errorval))

@

\defun{unwritable?}{unwritable?}
\calls{unwritable?}{pairp}
\calls{unwritable?}{vecp}
\calls{unwritable?}{hashtablep}
\calls{unwritable?}{placep}
<<defun unwritable?>>=
(defun |unwritable?| (ob)
 (cond
  ((or (pairp ob) (vecp ob)) nil)
  ((or (compiled-function-p ob) (hashtablep ob)) t)
  ((or (placep ob) (readtablep ob)) t)
  ((floatp ob) t)
  (t nil))) 

@
\defun{writifyComplain}{writifyComplain}
Create a full isomorphic object which can be saved in a lisplib.  Note
that {\tt dewritify(writify(x))} preserves UEQUALity of hashtables.
HASHTABLEs go both ways.  READTABLEs cannot presently be transformed
back.
\calls{writifyComplain}{sayKeyedMsg}
\usesdollar{writifyComplain}{writifyComplained}
<<defun writifyComplain>>=
(defun |writifyComplain| (s)
 (declare (special |$writifyComplained|))
 (unless |$writifyComplained|
  (setq |$writifyComplained| t)
  (|sayKeyedMsg| 's2ih0027 (list s)))) ; cannot save value

@
\defun{safeWritify}{safeWritify}
\catches{safeWritify}{writifyTag}
\calls{safeWritify}{writify}
<<defun safeWritify>>=
(defun |safeWritify| (ob)
 (catch '|writifyTag| (|writify| ob))) 

@
\defun{writify,writifyInner}{writify,writifyInner}
\throws{writify,writifyInner}{writifyTag}
\calls{writify,writifyInner}{seq}
\calls{writify,writifyInner}{exit}
\calls{writify,writifyInner}{hget}
\calls{writify,writifyInner}{pairp}
\calls{writify,writifyInner}{qcar}
\calls{writify,writifyInner}{qcdr}
\calls{writify,writifyInner}{spadClosure?}
\calls{writify,writifyInner}{writify,writifyInner}
\calls{writify,writifyInner}{hput}
\calls{writify,writifyInner}{qrplaca}
\calls{writify,writifyInner}{qrplacd}
\calls{writify,writifyInner}{vecp}
\calls{writify,writifyInner}{isDomainOrPackage}
\calls{writify,writifyInner}{mkEvalable}
\calls{writify,writifyInner}{devaluate}
\calls{writify,writifyInner}{qvmaxindex}
\calls{writify,writifyInner}{qsetvelt}
\calls{writify,writifyInner}{qvelt}
\calls{writify,writifyInner}{constructor?}
\calls{writify,writifyInner}{hashtablep}
\calls{writify,writifyInner}{hkeys}
\calls{writify,writifyInner}{hashtable-class}
\calls{writify,writifyInner}{placep}
\calls{writify,writifyInner}{boot-equal}
\usesdollar{writify,writifyInner}{seen}
\usesdollar{writify,writifyInner}{NonNullStream}
\usesdollar{writify,writifyInner}{NullStream}
<<defun writify,writifyInner>>=
(defun |writify,writifyInner| (ob)
 (prog (e name tmp1 tmp2 tmp3 x qcar qcdr d n keys nob)
  (declare (special |$seen| |$NonNullStream| |$NullStream|))
  (return
   (seq
    (when (null ob) (exit nil))
    (when (setq e (hget |$seen| ob)) (exit e))
    (when (pairp ob)
     (exit
      (seq
       (setq qcar (qcar ob))
       (setq qcdr (qcdr ob))
       (when (setq name (|spadClosure?| ob))
        (exit
         (seq
          (setq d (|writify,writifyInner| (qcdr ob)))
          (setq nob 
           (cons 'writified!!
            (cons 'spadclosure 
             (cons d (cons name nil)))))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when 
        (and 
         (and (pairp ob)
              (eq (qcar ob) 'lambda-closure)
              (progn
               (setq tmp1 (qcdr ob))
               (and (pairp tmp1)
                    (progn 
                     (setq tmp2 (qcdr tmp1))
                     (and 
                      (pairp tmp2)
                      (progn 
                       (setq tmp3 (qcdr tmp2))
                       (and (pairp tmp3)
                            (progn
                             (setq x (qcar tmp3))
                             t)))))))) x)
        (exit
         (throw '|writifyTag| '|writifyFailed|)))
       (setq nob (cons qcar qcdr))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (setq qcar (|writify,writifyInner| qcar))
       (setq qcdr (|writify,writifyInner| qcdr))
       (qrplaca nob qcar)
       (qrplacd nob qcdr)
       (exit nob))))
    (when (vecp ob)
     (exit
      (seq
       (when (|isDomainOrPackage| ob)
         (setq d (|mkEvalable| (|devaluate| ob)))
         (setq nob (list 'writified!! 'devaluated (|writify,writifyInner| d)))
         (hput |$seen| ob nob)
         (hput |$seen| nob nob)
         (exit nob))
       (setq n (qvmaxindex ob))
       (setq nob (make-array (1+ n)))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (do ((i 0 (=! i)))
           ((> i n) nil)
         (qsetvelt nob i (|writify,writifyInner| (qvelt ob i))))
       (exit nob))))
    (when (eq ob 'writified!!)
     (exit
      (cons 'writified!! (cons 'self nil))))
    (when (|constructor?| ob)
     (exit ob))
    (when (compiled-function-p ob)
     (exit
      (throw '|writifyTag| '|writifyFailed|)))
    (when (hashtablep ob)
       (setq nob (cons 'writified!! nil))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (setq keys (hkeys ob))
       (qrplacd nob
        (cons 
          'hashtable
          (cons 
            (hashtable-class ob)
            (cons
              (|writify,writifyInner| keys)
              (cons
                (prog (tmp0)
                  (setq tmp0 nil)
                  (return
                   (do ((tmp1 keys (cdr tmp1)) (k nil))
                       ((or (atom tmp1)
                            (progn
                             (setq k (car tmp1))
                              nil))
                            (nreverse0 tmp0))
                    (setq tmp0 
                     (cons (|writify,writifyInner| (hget ob k)) tmp0)))))
                nil)))))
       (exit nob))
    (when (placep ob)
       (setq nob (cons 'writified!! (cons 'place nil)))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (exit nob))
    (when (readtablep ob)
     (exit
      (throw '|writifyTag| '|writifyFailed|)))
    (when (stringp ob)
     (exit
      (seq
       (when (eq ob |$NullStream|)
        (exit
         (cons 'writified!! (cons 'nullstream nil))))
       (when (eq ob |$NonNullStream|)
        (exit
         (cons 'writified!! (cons 'nonnullstream nil))))
       (exit ob))))
    (when (floatp ob)
     (exit
      (seq
       (when (boot-equal ob (read-from-string (princ-to-string ob)))
        (exit ob))
       (exit
        (cons 'writified!!
         (cons 'float 
          (cons ob 
           (multiple-value-list (integer-decode-float ob)))))))))
    (exit ob))))) 

@
\defun{writify}{writify}
\calls{writify}{ScanOrPairVec}
\calls{writify}{function}
\calls{writify}{writify,writifyInner}
\usesdollar{writify}{seen}
\usesdollar{writify}{writifyComplained}
<<defun writify>>=
(defun |writify| (ob)
 (let (|$seen| |$writifyComplained|)
 (declare (special |$seen| |$writifyComplained|))
  (if (null (|ScanOrPairVec| (|function| |unwritable?|) ob))
    ob
    (progn
     (setq |$seen| (make-hash-table :test #'eq))
     (setq |$writifyComplained| nil)
     (|writify,writifyInner| ob)))))

@
\defun{spadClosure?}{spadClosure?}
\calls{spadClosure?}{qcar}
\calls{spadClosure?}{bpiname}
\calls{spadClosure?}{qcdr}
\calls{spadClosure?}{vecp}
<<defun spadClosure?>>=
(defun |spadClosure?| (ob)
 (let (fun name vec)
  (setq fun (qcar ob))
  (if (null (setq name (bpiname fun)))
   nil
   (progn
     (setq vec (qcdr ob))
     (if (null (vecp vec)) 
      nil
      name)))))

@
\defun{dewritify,is?}{dewritify,is?}
<<defun dewritify,is?>>=
(defun |dewritify,is?| (a)
 (eq a 'writified!!))

@

\defdollar{NonNullStream}
<<initvars>>=
(defvar |$NonNullStream| "NonNullStream")

@

\defdollar{NullStream}
<<initvars>>=
(defvar |$NullStream| "NullStream")

@

\defun{dewritify,dewritifyInner}{dewritify,dewritifyInner}
\calls{dewritify,dewritifyInner}{seq}
\calls{dewritify,dewritifyInner}{exit}
\calls{dewritify,dewritifyInner}{hget}
\calls{dewritify,dewritifyInner}{pairp}
\calls{dewritify,dewritifyInner}{intp}
\calls{dewritify,dewritifyInner}{gensymmer}
\calls{dewritify,dewritifyInner}{error}
\calls{dewritify,dewritifyInner}{poundsign}
\calls{dewritify,dewritifyInner}{nequal}
\calls{dewritify,dewritifyInner}{hasheq}
\calls{dewritify,dewritifyInner}{hput}
\calls{dewritify,dewritifyInner}{dewritify,dewritifyInner}
\calls{dewritify,dewritifyInner}{concat}
\calls{dewritify,dewritifyInner}{vmread}
\calls{dewritify,dewritifyInner}{make-instream}
\calls{dewritify,dewritifyInner}{spaddifference}
\calls{dewritify,dewritifyInner}{qcar}
\calls{dewritify,dewritifyInner}{qcdr}
\calls{dewritify,dewritifyInner}{qrplaca}
\calls{dewritify,dewritifyInner}{qrplacd}
\calls{dewritify,dewritifyInner}{vecp}
\calls{dewritify,dewritifyInner}{qvmaxindex}
\calls{dewritify,dewritifyInner}{qsetvelt}
\calls{dewritify,dewritifyInner}{qvelt}
\usesdollar{dewritify,dewritifyInner}{seen}
\usesdollar{dewritify,dewritifyInner}{NullStream}
\usesdollar{dewritify,dewritifyInner}{NonNullStream}
<<defun dewritify,dewritifyInner>>=
(defun |dewritify,dewritifyInner| (ob)
 (prog (e type oname f vec name tmp1 signif expon sign fval qcar qcdr n nob)
  (declare (special |$seen| |$NullStream| |$NonNullStream|))
  (return
   (seq
    (when (null ob) 
      (exit nil))
    (when (setq e (hget |$seen| ob)) 
      (exit e))
    (when (and (pairp ob) (eq (car ob) 'writified!!))
     (exit
      (seq
       (setq type (elt ob 1))
       (when (eq type 'self) 
        (exit 'writified!!))
       (when (eq type 'bpi)
        (exit
         (seq
          (setq oname (elt ob 2))
          (setq f 
           (seq 
            (when (integerp oname) (exit (eval (gensymmer oname))))
            (exit (symbol-function oname))))
          (when (null (compiled-function-p f))
           (exit (|error| "A required BPI does not exist.")))
          (when (and (> (|#| ob) 3) (nequal (hasheq f) (elt ob 3)))
           (exit (|error| "A required BPI has been redefined.")))
          (hput |$seen| ob f)
          (exit f))))
       (when (eq type 'hashtable)
        (exit
         (seq
          (setq nob (make-hash-table :test #'equal))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (do ((tmp0 (elt ob 3) (cdr tmp0))
               (k nil)
               (tmp1 (elt ob 4) (cdr tmp1))
               (e nil))
              ((or (atom tmp0) 
                   (progn
                    (setq k (car tmp0))
                    nil) 
                   (atom tmp1) 
                   (progn
                    (setq e (car tmp1))
                    nil))
                   nil)
           (seq
            (exit
             (hput nob (|dewritify,dewritifyInner| k) 
              (|dewritify,dewritifyInner| e)))))
          (exit nob))))
       (when (eq type 'devaluated)
        (exit
         (seq
          (setq nob (eval (|dewritify,dewritifyInner| (elt ob 2))))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when (eq type 'spadclosure)
        (exit
         (seq
          (setq vec (|dewritify,dewritifyInner| (elt ob 2)))
          (setq name (ELT ob 3))
          (when (null (fboundp name))
           (exit
            (|error| 
             (concat "undefined function: " (symbol-name name)))))
          (setq nob (cons (symbol-function name) vec))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when (eq type 'place) 
        (exit
         (seq
          (setq nob (vmread (make-instream nil)))
          (hput |$seen| ob nob)
          (hput |$seen| nob nob)
          (exit nob))))
       (when (eq type 'readtable)
        (exit (|error| "Cannot de-writify a read table.")))
       (when (eq type 'nullstream)
        (exit |$NullStream|))
       (when (eq type 'nonnullstream) 
        (exit |$NonNullStream|))
       (when (eq type 'float) 
        (exit
         (seq
          (progn
           (setq tmp1 (cddr ob))
           (setq fval (car tmp1))
           (setq signif (cadr tmp1))
           (setq expon (caddr tmp1))
           (setq sign (cadddr tmp1))
           tmp1)
          (setq fval (scale-float (float signif fval) expon))
          (when (minusp sign)
           (exit (spaddifference fval)))
          (exit fval))))
       (exit (|error| "Unknown type to de-writify.")))))
    (when (pairp ob)
     (exit
      (seq
       (setq qcar (qcar ob))
       (setq qcdr (qcdr ob))
       (setq nob (cons qcar qcdr))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (qrplaca nob (|dewritify,dewritifyInner| qcar))
       (qrplacd nob (|dewritify,dewritifyInner| qcdr))
       (exit nob))))
    (when (vecp ob)
     (exit
      (seq
       (setq n (qvmaxindex ob))
       (setq nob (make-array (1+ n)))
       (hput |$seen| ob nob)
       (hput |$seen| nob nob)
       (do ((i 0 (1+ i)))
           ((> i n) nil)
        (seq
         (exit
          (qsetvelt nob i 
            (|dewritify,dewritifyInner| (qvelt ob i))))))
       (exit nob))))
    (exit ob))))) 

@

\defun{dewritify}{dewritify}
\calls{dewritify}{ScanOrPairVec}
\calls{dewritify}{function}
\calls{dewritify}{dewritify,dewritifyInner}
\usesdollar{dewritify}{seen}
<<defun dewritify>>=
(defun |dewritify| (ob)
 (let (|$seen|)
 (declare (special |$seen|))
   (if (null (|ScanOrPairVec| (|function| |dewritify,is?|) ob))
    ob
    (progn
      (setq |$seen| (make-hash-table :test #'eq))
      (|dewritify,dewritifyInner| ob)))))

@

\defun{ScanOrPairVec,ScanOrInner}{ScanOrPairVec,ScanOrInner}
\throws{ScanOrPairVec,ScanOrInner}{ScanOrPairVecAnswer}
\calls{ScanOrPairVec,ScanOrInner}{hget}
\calls{ScanOrPairVec,ScanOrInner}{pairp}
\calls{ScanOrPairVec,ScanOrInner}{hput}
\calls{ScanOrPairVec,ScanOrInner}{ScanOrPairVec,ScanOrInner}
\calls{ScanOrPairVec,ScanOrInner}{qcar}
\calls{ScanOrPairVec,ScanOrInner}{qcdr}
\calls{ScanOrPairVec,ScanOrInner}{vecp}
\usesdollar{ScanOrPairVec,ScanOrInner}{seen}
<<defun ScanOrPairVec,ScanOrInner>>=
(defun |ScanOrPairVec,ScanOrInner| (f ob)
  (declare (special |$seen|))
  (when (hget |$seen| ob) nil)
  (when (pairp ob) 
    (hput |$seen| ob t)
    (|ScanOrPairVec,ScanOrInner| f (qcar ob))
    (|ScanOrPairVec,ScanOrInner| f (qcdr ob)))
  (when (vecp ob) 
     (hput |$seen| ob t)
     (do ((tmp0 (spaddifference (|#| ob) 1)) (i 0 (1+ i)))
         ((> i tmp0) nil)
       (|ScanOrPairVec,ScanOrInner| f (elt ob i))))
  (when (funcall f ob) (throw '|ScanOrPairVecAnswer| t))
  nil)

@

\defun{ScanOrPairVec}{ScanOrPairVec}
\catches{ScanOrPairVec}{ScanOrPairVecAnswer}
\calls{ScanOrPairVec}{ScanOrPairVec,ScanOrInner}
\usesdollar{ScanOrPairVec}{seen}
<<defun ScanOrPairVec>>=
(defun |ScanOrPairVec| (f ob)
 (let (|$seen|) 
 (declare (special |$seen|)) 
  (setq |$seen| (make-hash-table :test #'eq))
  (catch '|ScanOrPairVecAnswer| (|ScanOrPairVec,ScanOrInner| f ob))))

@
\defun{gensymInt}{gensymInt}
\calls{gensymInt}{gensymp}
\calls{gensymInt}{error}
\calls{gensymInt}{pname}
\calls{gensymInt}{charDigitVal}
<<defun gensymInt>>=
(defun |gensymInt| (g) 
 (let (p n)
  (if (null (gensymp g)) 
   (|error| "Need a GENSYM")
   (progn
     (setq p (pname g))
     (setq n 0)
     (do ((tmp0 (spaddifference (|#| p) 1)) (i 2 (1+ i)))
         ((> i tmp0) nil)
       (setq n (+ (* 10 n) (|charDigitVal| (elt p i)))))
     n))))

@
\defun{charDigitVal}{charDigitVal}
\calls{charDigitVal}{spaddifference}
\calls{charDigitVal}{error}
<<defun charDigitVal>>=
(defun |charDigitVal| (c)
 (let (digits n)
  (setq digits "0123456789")
  (setq n (spaddifference 1)) 
  (do ((tmp0 (spaddifference (|#| digits) 1)) (i 0 (1+ i)))
      ((or (> i tmp0) (null (minusp n))) nil)
   (if (char= c (elt digits i))
    (setq n i)
    nil))
  (if (minusp n) 
   (|error| "Character is not a digit")
   n)))

@
\defun{histFileErase}{histFileErase}
<<defun histFileErase>>=
(defun |histFileErase| (file)
 (when (probe-file file) (delete-file file)))

@
\section{History File Messages}
<<History File Messages>>=
S2IH0001
 You have not reached step %1b yet, and so its value cannot be
 supplied.
S2IH0002
 Cannot supply value for step %1b because 1 is the first step.
S2IH0003
 Step %1b has no value.
S2IH0004
 The history facility is not on, so you cannot use %b %% %d .
S2IH0006
 You have not used the correct syntax for the %b history %d command.
 Issue %b )help history %d for more information.
S2IH0007
 The history facility is already on.
S2IH0008
 The history facility is now on.
S2IH0009
 Turning on the history facility will clear the contents of the
 workspace.
 Please enter %b y %d or %b yes %d if you really want to do this:
S2IH0010
 The history facility is still off.
S2IH0011
 The history facility is already off.
S2IH0012
 The history facility is now off.
S2IH0013
 The history facility is not on, so the .input file containing your user input
 cannot be created.
S2IH0014
 Edit %b %1 %d to see the saved input lines.
S2IH0015
 The argument %b n %d for %b )history )change n must be a nonnegative
 integer and your argument, %1b , is not one.
S2IH0016
 The history facility is not on, so no information can be saved.
S2IH0018
 The saved history file is %1b .
S2IH0019
 There is no history file, so value of step %1b is
 undefined.
S2IH0022
 No history information had been saved yet.
S2IH0023
 %1b is not a valid filename for the history file.
S2IH0024
 History information cannot be restored from %1b because the file does
 not exist.
S2IH0025
 The workspace has been successfully restored from the history file
 %1b .
S2IH0026
 The history facility command %1b cannot be performed because the
 history facility is not on.
S2IH0027
 A value containing a %1b is being saved in a history file or a
 compiled input file INLIB. This type
 is not yet usable in other history operations.  You might want to issue
 %b )history )off %d
S2IH0029
 History information is already being maintained in an external file
 (and not in memory).
S2IH0030
 History information is already being maintained in memory (and not
 in an external file).
S2IH0031
 When the history facility is active, history information will be
 maintained in a file (and not in an internal table).
S2IH0032
 When the history facility is active, history information will be
 maintained in memory (and not in an external file).
S2IH0034
 Missing element in internal history table.
S2IH0035
 Can't save the value of step number %1b.  You can re-generate this value
 by running the input file %2b.
S2IH0036
 The value specified cannot be saved to a file.
S2IH0037
 You must specify a file name to the history save command
S2IH0038
 You must specify a file name to the history write command
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{include help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<include.help>>=

User Level Required: interpreter

Command Syntax:

 )include filename

Command Description:

The )include command can be used in .input files to place the contents
of another file inline with the current file.  The path can be an
absolute or relative pathname.

@
\section{Functions}
\defun{ncloopInclude1}{ncloopInclude1}
\calls{ncloopInclude1}{ncloopIncFileName}
\calls{ncloopInclude1}{ncloopInclude}
<<defun ncloopInclude1>>=
(defun |ncloopInclude1| (name n)
 (let (a)
  (if (setq a (|ncloopIncFileName| name))
    (|ncloopInclude| a n)
    n)))

@
\defunsec{ncloopIncFileName}
{Returns the first non-blank substring of the given string}
\calls{ncloopIncFileName}{incFileName}
\calls{ncloopIncFileName}{concat}
<<defun ncloopIncFileName>>=
(defun |ncloopIncFileName| (string)
 "Returns the first non-blank substring of the given string"
 (let (fn)
  (unless (setq fn (|incFileName| string))
   (write-line (concat string " not found")))
 fn))

@

\defunsec{ncloopInclude}{Open the include file and read it in} 
The ncloopInclude0 function is part
of the parser and lives in int-top.boot.
\calls{ncloopInclude}{ncloopInclude0}
<<defun ncloopInclude>>=
(defun |ncloopInclude| (name n)
 "Open the include file and read it in"
 (with-open-file (st name) (|ncloopInclude0| st name n)))

@

\defunsec{incFileName}{Return the include filename}
Given a string we return the first token from the string which is
the first non-blank substring.
\calls{incFileName}{incBiteOff}
<<defun incFileName>>=
(defun |incFileName| (x)
 "Return the include filename"
  (car (|incBiteOff| x)))

@

\defunsec{incBiteOff}{Return the next token}
Takes a sequence and returns the a list of the first token and the
remaining string characters. If there are no remaining string characters
the second string is of length 0. Effectively it "bites off" the first 
token in the string. If the string only 0 or more blanks it returns nil.
<<defun incBiteOff>>=
(defun |incBiteOff| (x)
 "Return the next token"
 (let (blank nonblank)
  (setq x (string x))
  (when (setq nonblank (position #\space x :test-not #'char=))
    (setq blank (position #\space x :start nonblank))
    (if blank
     (list (subseq x nonblank blank) (subseq x blank))
     (list (subseq x nonblank) "")))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{library help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<library.help>>=
====================================================================
A.14.  )library
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )library libName1  [libName2 ...]
  - )library )dir dirName
  - )library )only objName1  [objlib2 ...]
  - )library )noexpose
 
Command Description: 
 
This command replaces the )load system command that was available in AXIOM
releases before version 2.0. The )library command makes available to AXIOM
the compiled objects in the libraries listed.
 
For example, if you )compile dopler.as in your home directory, issue )library
dopler to have AXIOM look at the library, determine the category and domain
constructors present, update the internal database with various properties of
the constructors, and arrange for the constructors to be automatically loaded
when needed. If the )noexpose option has not been given, the constructors
will be exposed (that is, available) in the current frame.
 
If you compiled a file with the old system compiler, you will have an NRLIB
present, for example, DOPLER.NRLIB, where DOPLER is a constructor
abbreviation. The command )library DOPLER will then do the analysis and
database updates as above.
 
To tell the system about all libraries in a directory, use )library )dir
dirName where dirName is an explicit directory. You may specify ``.'' as the
directory, which means the current directory from which you started the
system or the one you set via the )cd command. The directory name is required.
 
You may only want to tell the system about particular constructors within a
library. In this case, use the )only option. The command )library dopler
)only Test1 will only cause the Test1 constructor to be analyzed, autoloaded,
etc..
 
Finally, each constructor in a library are usually automatically exposed when
the )library command is used. Use the )noexpose option if you not want them
exposed. At a later time you can use )set expose add constructor to expose
any hidden constructors.
 
Note for AXIOM beta testers: At various times this command was called )local
and )with before the name )library became the official name.
 
Also See: 
o )cd
o )compile
o )frame
o )set
 
@ 
\footnote{
\fnref{cd}
\fnref{compile}
\fnref{frame}
\fnref{set}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{lisp help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<lisp.help>>=
====================================================================
A.15.  )lisp
====================================================================
 
User Level Required:  development
 
Command Syntax: 
 
  -  )lisp [lispExpression]
 
Command Description: 
 
This command is used by AXIOM system developers to have single expressions
evaluated by the Lisp system on which AXIOM is built. The lispExpression is
read by the Lisp reader and evaluated. If this expression is not complete
(unbalanced parentheses, say), the reader will wait until a complete
expression is entered.
 
Since this command is only useful for evaluating single expressions, the )fin
command may be used to drop out of AXIOM into Lisp.
 
Also See: 
o )system
o )boot
o )fin
 
@ 
\footnote{
\fnref{system}
\fnref{boot}
\fnref{fin}}

\section{Functions}

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{load help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<load.help>>=
====================================================================
A.16.  )load
====================================================================
 
User Level Required:  interpreter
 
Command Description: 
 
This command is obsolete. Use )library instead.
 
@ 

\defun{load}{The )load command (obsolete)}
We keep this command around in case anyone has the original Axiom book.
\calls{load}{sayKeyedMsg}
<<defun load>>=
(defun |load| (ignore)
 (declare (ignore ignore))
 (|sayKeyedMsg| 'S2IU0003 nil))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{ltrace help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<ltrace.help>>=
====================================================================
A.17.  )ltrace
====================================================================
 
User Level Required:  development
 
Command Syntax: 
 
This command has the same arguments as options as the )trace command.
 
Command Description: 
 
This command is used by AXIOM system developers to trace Lisp or BOOT
functions. It is not supported for general use.
 
Also See: 
o )boot
o )lisp
o )trace
 
@ 
\footnote{
\fnref{boot}
\fnref{lisp}
\fnref{trace}}

\defun{ltrace}{The top level )ltrace function}
\calls{ltrace}{trace}
<<defun ltrace>>=
(defun |ltrace| (arg) (|trace| arg)) 

@

\section{Variables Used}
\section{Functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{pquit help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<pquit.help>>=
====================================================================
A.18.  )pquit
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )pquit
 
Command Description: 
 
This command is used to terminate AXIOM and return to the operating system.
Other than by redoing all your computations or by using the )history )restore
command to try to restore your working environment, you cannot return to
AXIOM in the same state.
 
)pquit differs from the )quit in that it always asks for confirmation that
you want to terminate AXIOM (the ``p'' is for ``protected''). When you enter
the )pquit command, AXIOM responds
 
      Please enter y or yes if you really want to leave the interactive 
                environment and return to the operating system:
 
If you respond with y or yes, you will see the message
 
            You are now leaving the AXIOM interactive environment. 
    Issue the command axiom to the operating system to start a new session.
 
and AXIOM will terminate and return you to the operating system (or the
environment from which you invoked the system). If you responded with
something other than y or yes, then the message
 
        You have chosen to remain in the AXIOM interactive environment.
 
will be displayed and, indeed, AXIOM would still be running.
 
Also See: 
o )fin
o )history
o )close
o )quit
o )system
 
@ 
\footnote{
\fnref{fin}
\fnref{history}
\fnref{close}
\fnref{quit}
\fnref{system}}

\section{Functions}
\defunsec{pquit}{The top level pquit command}
\calls{pquit}{pquitSpad2Cmd}
<<defun pquit>>=
(defun |pquit| ()
 "The top level pquit command"
 (|pquitSpad2Cmd|)) 

@

\defunsec{pquitSpad2Cmd}{The top level pquit command handler}
\calls{pquitSpad2Cmd}{quitSpad2Cmd}
\usesdollar{pquitSpad2Cmd}{quitCommandType}
<<defun pquitSpad2Cmd>>=
(defun |pquitSpad2Cmd| ()
 "The top level pquit command handler"
 (let ((|$quitCommandType| '|protected|))
  (declare (special |$quitCommandType|))
  (|quitSpad2Cmd|)))

@

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{quit help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<quit.help>>=
====================================================================
A.19.  )quit
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )quit
  - )set quit protected | unprotected
 
Command Description: 
 
This command is used to terminate AXIOM and return to the operating system.
Other than by redoing all your computations or by using the )history )restore
command to try to restore your working environment, you cannot return to
AXIOM in the same state.
 
)quit differs from the )pquit in that it asks for confirmation only if the
command
 
)set quit protected
 
has been issued. Otherwise, )quit will make AXIOM terminate and return you to
the operating system (or the environment from which you invoked the system).
 
The default setting is )set quit protected so that )quit and )pquit behave in
the same way. If you do issue
 
)set quit unprotected
 
we suggest that you do not (somehow) assign )quit to be executed when you
press, say, a function key.
 
Also See: 
o )fin
o )history
o )close
o )pquit
o )system
 
@ 
\footnote{
\fnref{fin}
\fnref{history}
\fnref{close}
\fnref{pquit}
\fnref{system}}

\section{Functions}
\defunsec{quit}{The top level quit command}
\calls{quit}{quitSpad2Cmd}
<<defun quit>>=
(defun |quit| ()
 "The top level quit command"
 (|quitSpad2Cmd|))

@
\defunsec{quitSpad2Cmd}{The top level quit command handler}
\calls{quitSpad2Cmd}{upcase}
\calls{quitSpad2Cmd}{queryUserKeyedMsg}
\calls{quitSpad2Cmd}{memq}
\calls{quitSpad2Cmd}{string2id-n}
\calls{quitSpad2Cmd}{leaveScratchpad}
\calls{quitSpad2Cmd}{sayKeyedMsg}
\calls{quitSpad2Cmd}{tersyscommand}
\usesdollar{quitSpad2Cmd}{quitCommandType}
<<defun quitSpad2Cmd>>=
(defun |quitSpad2Cmd| ()
 "The top level quit command handler"
 (declare (special |$quitCommandType|))
 (if (eq |$quitCommandType| '|protected|)
  (let (x)
   (setq x (upcase (|queryUserKeyedMsg| 's2iz0031 nil)))
   (when (memq (string2id-n x 1) '(y yes)) (|leaveScratchpad|))
   (|sayKeyedMsg| 's2iz0032 nil)
   (tersyscommand))
   (|leaveScratchpad|)))

@

\defunsec{leaveScratchpad}{Leave the Axiom interpreter}
<<defun leaveScratchpad>>=
(defun |leaveScratchpad| () 
 "Leave the Axiom interpreter"
 (bye)) 

@

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{read help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<read.help>>=
====================================================================
A.20.  )read
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  -  )read [fileName]
  -  )read [fileName] [)quiet] [)ifthere]
 
Command Description: 
 
This command is used to read .input files into AXIOM. The command
 
)read matrix.input
 
will read the contents of the file matrix.input into AXIOM. The ``.input''
file extension is optional. See the AXIOM User Guide index for more
information about .input files.
 
This command remembers the previous file you edited, read or compiled. If you
do not specify a file name, the previous file will be read.
 
The )ifthere option checks to see whether the .input file exists. If it does
not, the )read command does nothing. If you do not use this option and the
file does not exist, you are asked to give the name of an existing .input
file.
 
The )quiet option suppresses output while the file is being read.
 
Also See: 
o )compile
o )edit
o )history
 
@ 
\footnote{
\fnref{compile}
\fnref{edit}
\fnref{history}}

\defun{read}{The )read command}
\calls{read}{readSpad2Cmd}
<<defun read>>=
(defun |read| (arg) (|readSpad2Cmd| arg)) 

@

\defun{readSpad2Cmd}{Implement the )read command}
\calls{readSpad2Cmd}{selectOptionLC}
\calls{readSpad2Cmd}{optionError}
\calls{readSpad2Cmd}{pathname}
\calls{readSpad2Cmd}{pathnameTypeId}
\calls{readSpad2Cmd}{makePathname}
\calls{readSpad2Cmd}{pathnameName}
\calls{readSpad2Cmd}{mergePathnames}
\calls{readSpad2Cmd}{findfile}
\calls{readSpad2Cmd}{throwKeyedMsg}
\calls{readSpad2Cmd}{namestring}
\calls{readSpad2Cmd}{upcase}
\calls{readSpad2Cmd}{member}
\calls{readSpad2Cmd}{/read}
\usesdollar{readSpad2Cmd}{InteractiveMode}
\usesdollar{readSpad2Cmd}{findfile}
\usesdollar{readSpad2Cmd}{UserLevel}
\usesdollar{readSpad2Cmd}{options}
\uses{readSpad2Cmd}{/editfile}
<<defun readSpad2Cmd>>=
(defun |readSpad2Cmd| (arg)
 (prog (|$InteractiveMode| fullopt ifthere quiet ef devFTs fileTypes 
        ll ft upft fs)
 (declare (special |$InteractiveMode| $findfile |$UserLevel| |$options|
                      /editfile))
  (setq |$InteractiveMode| t)
  (dolist (opt |$options|)
   (setq fullopt
    (|selectOptionLC| (caar opt) '(|quiet| |test| |ifthere|) '|optionError|))
    (cond
     ((eq fullopt '|ifthere|) (setq ifthere t))
     ((eq fullopt '|quiet|)   (setq quiet t))))
  (setq ef (|pathname| /editfile))
  (when (eq (|pathnameTypeId| ef) 'spad)
    (setq ef (|makePathname| (|pathnameName| ef) "*" "*")))
  (if arg 
   (setq arg (|mergePathnames| (|pathname| arg) ef))
   (setq arg ef))
  (setq devFTs '("input" "INPUT" "boot" "BOOT" "lisp" "LISP"))
  (setq fileTypes
   (cond
    ((eq |$UserLevel| '|interpreter|) '("input" "INPUT"))
    ((eq |$UserLevel| '|compiler|)    '("input" "INPUT"))
    (t devFTs)))
  (setq ll ($findfile arg fileTypes))
  (unless ll
    (if ifthere 
     (return nil)
     (|throwKeyedMsg| 'S2IL0003  (list (|namestring| arg)))))
  (setq ll (|pathname| ll))
  (setq ft (|pathnameType| ll))
  (setq upft (upcase ft))
  (cond
   ((null (|member| upft fileTypes))
     (setq fs (|namestring| arg))
     (if (|member| upft devFTs)
      (|throwKeyedMsg| 'S2IZ0033 (list fs))
      (|throwKeyedMsg| 'S2IZ0034 (list fs))))
   (t
    (setq /editfile ll)
    (when (string= upft "BOOT") (setq |$InteractiveMode| nil))
    (/read ll quiet)))))

@

\defun{/read}{/read}
\calls{/read}{}
\uses{/read}{/editfile}
<<defun /read>>=
(defun /read (l q)
 (declare (special /editfile))
  (setq /editfile l)
  (cond
    (q	(/rq))
    (t (/rf)) )
  (flag |boot-NewKEY| 'key)
  (|terminateSystemCommand|)
  (|spadPrompt|))


@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{savesystem help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<savesystem.help>>=
====================================================================
A.8.  )savesystem
====================================================================
 
User Level Required:  interpreter
 
 
Command Syntax: 
 
  - )savesystem filename
 
Command Description: 
 
 This command is used to save an AXIOM image to disk.  This creates an
executable file which, when started, has everything loaded into it
that was there when the image was saved.  Thus, after executing commands
which cause the loading of some packages, the command:
 
)savesystem /tmp/savesys

will create an image that can be restarted  with the UNIX command:

axiom -ws /tmp/savesys

This new system will not need to reload the packages and domains that
were already loaded when the system was saved.

There is currently a restriction that only systems started with the 
command "AXIOMsys" may be saved.

@ 

\defun{savesystem}{The )savesystem command}
\calls{savesystem}{nequal}
\calls{savesystem}{helpSpad2Cmd}
\calls{savesystem}{spad-save}
<<defun savesystem>>=
(defun |savesystem| (arg)
  (if (or (nequal (|#| arg) 1) (null (symbolp (car arg))))
    (|helpSpad2Cmd| '(|savesystem|))
    (spad-save (symbol-name (car arg)))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{set help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<set.help>>=
====================================================================
A.21.  )set
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  -  )set
  -  )set label1 [... labelN]
  -  )set label1 [... labelN] newValue
 
Command Description: 
 
The )set command is used to view or set system variables that control what
messages are displayed, the type of output desired, the status of the history
facility, the way AXIOM user functions are cached, and so on. Since this
collection is very large, we will not discuss them here. Rather, we will show
how the facility is used. We urge you to explore the )set options to
familiarize yourself with how you can modify your AXIOM working environment.
There is a HyperDoc version of this same facility available from the main
HyperDoc menu. Click [here] to go to it. 
 
The )set command is command-driven with a menu display. It is
tree-structured. To see all top-level nodes, issue )set by itself.
 
)set
 
Variables with values have them displayed near the right margin. Subtrees of
selections have ``...'' displayed in the value field. For example, there are
many kinds of messages, so issue )set message to see the choices.
 
)set message
 
The current setting for the variable that displays whether computation times
are displayed is visible in the menu displayed by the last command. To see
more information, issue
 
)set message time
 
This shows that time printing is on now. To turn it off, issue
 
)set message time off
 
As noted above, not all settings have so many qualifiers. For example, to
change the )quit command to being unprotected (that is, you will not be
prompted for verification), you need only issue
 
)set quit unprotected
 
Also See: 
o )quit

@
\footnote{\fnref{quit}}

\section{Overview}
This section contains tree of information used to initialize the {\bf )set} 
command in the interpreter. The current list is:
\begin{verbatim}

Variable     Description                           Current Value
-----------------------------------------------------------------
compiler   Library compiler options                   ... 
breakmode  execute break processing on error          break 
expose     control interpreter constructor exposure   ... 
functions  some interpreter function options          ... 
fortran    view and set options for FORTRAN output    ... 
kernel     library functions built into the kernel for 
           efficiency                                 ...
hyperdoc   options in using HyperDoc                  ... 
help       view and set some help options             ... 
history    save workspace values in a history file    on 
messages   show messages for various system features  ... 
naglink    options for NAGLink                        ... 
output     view and set some output options           ... 
quit       protected or unprotected quit              unprotected 
streams    set some options for working with streams  ... 
system     set some system development variables      ... 
userlevel  operation access level of system user      development 

Variables with current values of ... have further sub-options. 
For example, issue )set  system to see what the options are 
for system. For more information, issue )help set .

\end{verbatim}
\section{Variables Used}
\section{Functions}
\defunsec{initializeSetVariables}{Initialize the set variables}
The argument settree is initially the \verb|$setOption| variable.
The fourth element is a union-style switch symbol.
The fifth element is usually a variable to set.
The sixth element is a subtree to recurse for the TREE switch.
The seventh element is usually the default value. For more detailed
explanations see the list structure section \ref{Theliststructure}.
\calls{initializeSetVariables}{sayMSG}
\calls{initializeSetVariables}{literals}
\calls{initializeSetVariables}{translateYesNo2TrueFalse}
\calls{initializeSetVariables}{tree}
\calls{initializeSetVariables}{initializeSetVariables}
<<defun initializeSetVariables>>=
(defun |initializeSetVariables| (settree) 
 "Initialize the set variables"
 (dolist (setdata settree)
  (case (fourth setdata)
   (function
      (if (functionp (fifth setdata))
        (funcall (fifth setdata) '|%initialize%|)
        (|sayMSG| (concatenate 'string "   Function not implemented. "
         (package-name *package*) ":" (string (fifth setdata))))))
   (integer (set (fifth setdata) (seventh setdata)))
   (string  (set (fifth setdata) (seventh setdata)))
   (literals
       (set (fifth setdata) (|translateYesNo2TrueFalse| (seventh setdata))))
   (tree  (|initializeSetVariables| (sixth setdata))))))

@

\defunsec{resetWorkspaceVariables}{Reset the workspace variables}
\calls{resetWorkspaceVariables}{copy}
\calls{resetWorkspaceVariables}{initializeSetVariables}
\uses{resetWorkspaceVariables}{/countlist}
\uses{resetWorkspaceVariables}{/editfile}
\uses{resetWorkspaceVariables}{/sourcefiles}
\uses{resetWorkspaceVariables}{/pretty}
\uses{resetWorkspaceVariables}{/spacelist}
\uses{resetWorkspaceVariables}{/timerlist}
\usesdollar{resetWorkspaceVariables}{sourceFiles}
\usesdollar{resetWorkspaceVariables}{existingFiles}
\usesdollar{resetWorkspaceVariables}{functionTable}
\usesdollar{resetWorkspaceVariables}{boot}
\usesdollar{resetWorkspaceVariables}{compileMapFlag}
\usesdollar{resetWorkspaceVariables}{echoLineStack}
\usesdollar{resetWorkspaceVariables}{operationNameList}
\usesdollar{resetWorkspaceVariables}{slamFlag}
\usesdollar{resetWorkspaceVariables}{CommandSynonymAlist}
\usesdollar{resetWorkspaceVariables}{InitialCommandSynonymAlist}
\usesdollar{resetWorkspaceVariables}{UserAbbreviationsAlist}
\usesdollar{resetWorkspaceVariables}{msgAlist}
\usesdollar{resetWorkspaceVariables}{msgDatabase}
\usesdollar{resetWorkspaceVariables}{msgDatabaseName}
\usesdollar{resetWorkspaceVariables}{dependeeClosureAlist}
\usesdollar{resetWorkspaceVariables}{IOindex}
\usesdollar{resetWorkspaceVariables}{coerceIntByMapCounter}
\usesdollar{resetWorkspaceVariables}{e}
\usesdollar{resetWorkspaceVariables}{env}
\usesdollar{resetWorkspaceVariables}{setOptions}
<<defun resetWorkspaceVariables>>=
(defun |resetWorkspaceVariables| () 
 "Reset the workspace variables"
 (declare (special /countlist /editfile /sourcefiles |$sourceFiles| /pretty
    /spacelist /timerlist |$existingFiles| |$functionTable| $boot 
    |$compileMapFlag| |$echoLineStack| |$operationNameList| |$slamFlag|
    |$CommandSynonymAlist| |$InitialCommandSynonymAlist|
    |$UserAbbreviationsAlist| |$msgAlist| |$msgDatabase| |$msgDatabaseName|
    |$dependeeClosureAlist| |$IOindex| |$coerceIntByMapCounter| |$e| |$env|
    |$setOptions|))
  (setq /countlist nil)
  (setq /editfile nil)
  (setq /sourcefiles nil)
  (setq |$sourceFiles| nil)
  (setq /pretty nil)
  (setq /spacelist nil)
  (setq /timerlist nil)
  (setq |$existingFiles| (make-hash-table :test #'equal))
  (setq |$functionTable| nil)
  (setq $boot nil)
  (setq |$compileMapFlag| nil)
  (setq |$echoLineStack| nil)
  (setq |$operationNameList| nil)
  (setq |$slamFlag| nil)
  (setq |$CommandSynonymAlist| (copy |$InitialCommandSynonymAlist|))
  (setq |$UserAbbreviationsAlist| nil)
  (setq |$msgAlist| nil)
  (setq |$msgDatabase| nil)
  (setq |$msgDatabaseName| nil)
  (setq |$dependeeClosureAlist| nil)
  (setq |$IOindex| 1)
  (setq |$coerceIntByMapCounter| 0)
  (setq |$e| (cons (cons nil nil) nil))
  (setq |$env| (cons (cons nil nil) nil))
  (|initializeSetVariables| |$setOptions|)) 

@

\defunsec{displaySetOptionInformation}{Display the set option information}
\calls{displaySetOptionInformation}{displaySetVariableSettings}
\calls{displaySetOptionInformation}{centerAndHighlight}
\calls{displaySetOptionInformation}{concat}
\calls{displaySetOptionInformation}{object2String}
\calls{displaySetOptionInformation}{specialChar}
\calls{displaySetOptionInformation}{sayBrightly}
\calls{displaySetOptionInformation}{bright}
\calls{displaySetOptionInformation}{sayMSG}
\calls{displaySetOptionInformation}{boot-equal}
\calls{displaySetOptionInformation}{sayMessage}
\calls{displaySetOptionInformation}{eval}
\calls{displaySetOptionInformation}{literals}
\calls{displaySetOptionInformation}{translateTrueFalse2YesNo}
\usesdollar{displaySetOptionInformation}{linelength}
<<defun displaySetOptionInformation>>=
(defun |displaySetOptionInformation| (arg setdata)
 "Display the set option information"
 (let (current)
 (declare (special $linelength))
  (cond
   ((eq (fourth setdata) 'tree)
    (|displaySetVariableSettings| (sixth setdata) (first setdata)))
   (t 
    (|centerAndHighlight|
     (concat "The " (|object2String| arg) " Option")
      $linelength (|specialChar| '|hbar|))
    (|sayBrightly|
     `(|%l| ,@(|bright| "Description:") ,(second setdata)))
    (case (fourth setdata)
     (function
      (terpri)
      (if (functionp (fifth setdata))
        (funcall (fifth setdata) '|%describe%|)
        (|sayMSG| "   Function not implemented.")))
     (integer
      (|sayMessage| 
        `(" The" ,@(|bright| arg) "option" 
          " may be followed by an integer in the range" 
          ,@(|bright| (elt (sixth setdata) 0)) "to" 
          |%l| ,@(|bright| (elt (sixth setdata) 1)) "inclusive." 
          " The current setting is" ,@(|bright| (|eval| (fifth setdata))))))
     (string
      (|sayMessage| 
        `(" The" ,@(|bright| arg) "option" 
          " is followed by a string enclosed in double quote marks." 
          '|%l| " The current setting is" 
          ,@(|bright| (list '|"| (|eval| (fifth setdata)) '|"|)))))
     (literals
       (|sayMessage|
        `(" The" ,@(|bright| arg) "option"
              " may be followed by any one of the following:"))
       (setq current 
        (|translateTrueFalse2YesNo| (|eval| (fifth setdata))))
       (dolist (name (sixth setdata))
         (if (boot-equal name current)
           (|sayBrightly| `( " ->" ,@(|bright| (|object2String| name))))
           (|sayBrightly| (list "    " (|object2String| name)))))
       (|sayMessage| " The current setting is indicated.")))))))

@

\defunsec{displaySetVariableSettings}{Display the set variable settings}
\calls{displaySetVariableSettings}{concat}
\calls{displaySetVariableSettings}{object2String}
\calls{displaySetVariableSettings}{centerAndHighlight}
\calls{displaySetVariableSettings}{sayBrightly}
\calls{displaySetVariableSettings}{say}
\calls{displaySetVariableSettings}{fillerSpaces}
\calls{displaySetVariableSettings}{specialChar}
\calls{displaySetVariableSettings}{pairp}
\calls{displaySetVariableSettings}{concat}
\calls{displaySetVariableSettings}{satisfiesUserLevel}
\calls{displaySetVariableSettings}{spaddifference}
\calls{displaySetVariableSettings}{poundsign}
\calls{displaySetVariableSettings}{eval}
\calls{displaySetVariableSettings}{bright}
\calls{displaySetVariableSettings}{literals}
\calls{displaySetVariableSettings}{translateTrueFalse2YesNo}
\calls{displaySetVariableSettings}{tree}
\usesdollar{displaySetVariableSettings}{linelength}
<<defun displaySetVariableSettings>>=
(defun |displaySetVariableSettings| (settree label)
 "Display the set variable settings"
 (let (setoption opt subtree subname)
 (declare (special $linelength))
  (if (eq label '||) 
    (setq label ")set")
    (setq label (concat "  " (|object2String| label) " ")))
  (|centerAndHighlight|
    (concat "Current Values of" label " Variables") $linelength '| |)
  (terpri)
  (|sayBrightly| 
   (list "Variable     " "Description                                "
         "Current Value" ))
  (say (|fillerSpaces| $linelength (|specialChar| '|hbar|)))
  (setq subtree nil)
  (dolist (setdata settree)
   (when (|satisfiesUserLevel| (third setdata))
     (setq setoption (|object2String| (first setdata)))
     (setq setoption
      (concat setoption
       (|fillerSpaces| (spaddifference 13 (|#| setoption)) " ")
       (second setdata)))
     (setq setoption
      (concat setoption
       (|fillerSpaces| (spaddifference 55 (|#| setoption)) " ")))
     (case (fourth setdata)
      (function
       (setq opt
        (if (functionp (fifth setdata))
         (funcall (fifth setdata) '|%display%|)
         "unimplemented"))
       (cond
        ((pairp opt)
         (setq opt
          (do ((t2 opt (cdr t2)) t1 (o nil))
              ((or (atom t2) (progn (setq o (car t2)) nil)) t1)
           (setq t1 (append t1 (cons o (cons " " nil))))))))
       (|sayBrightly| (|concat| setoption '|%b| opt '|%d|)))
      (string
       (setq opt (|object2String| (|eval| (fifth setdata))))
       (|sayBrightly| `(,setoption ,@(|bright| opt))))
      (integer
       (setq opt (|object2String| (|eval| (fifth setdata))))
       (|sayBrightly| `(,setoption ,@(|bright| opt))))
      (literals
       (setq opt (|object2String| 
             (|translateTrueFalse2YesNo| (|eval| (fifth setdata)))))
       (|sayBrightly| `(,setoption ,@(|bright| opt))))
      (TREE
         (|sayBrightly| `(,setoption ,@(|bright| "...")))
         (setq subtree t)
         (setq subname (|object2String| (first setdata)))))))
  (terpri)
  (when subtree
     (|sayBrightly|
      `("Variables with current values of" ,@(|bright| "...")
            "have further sub-options. For example,"))
     (|sayBrightly|
      `("issue" ,@(|bright| ")set ") ,subname
        " to see what the options are for" ,@(|bright| subname) "."
        |%l| "For more information, issue" ,@(|bright| ")help set") ".")))))

@

\defunsec{translateYesNo2TrueFalse}{Translate options values to t or nil}
\calls{translateYesNo2TrueFalse}{member}
<<defun translateYesNo2TrueFalse>>=
(defun |translateYesNo2TrueFalse| (x)
 "Translate options values to t or nil"
 (cond
  ((|member| x '(|yes| |on|)) t)
  ((|member| x '(|no| |off|)) nil)
  (t x))) 

@

\defunsec{translateTrueFalse2YesNo}{Translate t or nil to option values}
<<defun translateTrueFalse2YesNo>>=
(defun |translateTrueFalse2YesNo| (x)
 "Translate t or nil to option values"
 (cond
  ((eq x t) '|on|)
  ((null x) '|off|)
  (t x))) 

@
\section{The list structure}
\label{Theliststructure}
The structure of each list item consists of 7 items.  Consider this 
example:
\begin{verbatim}
  (userlevel
   "operation access level of system user"
   interpreter
   LITERALS
   $UserLevel
   (interpreter compiler development)
   development)
\end{verbatim}
The list looks like (the names in bold are accessor names that can be
found in {\bf property.lisp.pamphlet\cite{1}}. Look for "setName".):
\begin{list}{}
\item {\bf 1} {\sl Name} the keyword the user will see. In this example
the user would say "{\bf )set output userlevel}".
\item {\bf 2} {\sl Label} the message the user will see. In this example
the user would see "operation access level of system user".
\item {\bf 3} {\sl Level} the level where the command will be 
accepted. There are three levels: interpreter, compiler, development.
These commands are restricted to keep the user from causing damage.
\item {\bf 4} {\sl Type} a symbol, one of {\bf FUNCTION}, {\bf INTEGER},
{\bf STRING}, {\bf LITERALS}, {\bf FILENAME} or {\bf TREE}. 
\item {\bf 5} {\sl Var} 
\begin{list}{}
\item FUNCTION is the function to call
\item INTEGER is the variable holding the current user setting.
\item STRING is the variable holding the current user setting.
\item LITERALS variable which holds the current user setting.
\item FILENAME is the variable that holds the current user setting.
\item TREE
\end{list}
\item {\bf 6} {\sl Leaf} 
\begin{list}{}
\item FUNCTION is the list of all possible values
\item INTEGER is the range of possible values
\item STRING is a list of all possible values
\item LITERALS is a list of all of the possible values
\item FILENAME is the function to check the filename
\item TREE
\end{list}
\item {\bf 7} {\sl Def} is the default value 
\begin{list}{}
\item FUNCTION is the default setting
\item INTEGER is the default setting
\item STRING is the default setting
\item LITERALS is the default setting
\item FILENAME is the default value
\item TREE
\end{list}
\end{list}
\section{breakmode}
\begin{verbatim}
-------------------- The breakmode Option ---------------------

 Description: execute break processing on error

 The breakmode option may be followed by any one of the 
 following:

    nobreak
 -> break 
    query
    resume
    fastlinks
    quit

 The current setting is indicated.

\end{verbatim}
\defdollar{BreakMode}
<<initvars>>=
(defvar |$BreakMode| '|nobreak| "execute break processing on error")

@
<<breakmode>>=
  (|breakmode|
   "execute break processing on error"
   |interpreter|
   LITERALS
   |$BreakMode|
   (|nobreak| |break| |query| |resume| |fastlinks| |quit|)
   |nobreak|)         ; needed to avoid possible startup looping
@
\section{debug}
\begin{verbatim}
                  Current Values of debug Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
lambdatype   Show type information for #1 syntax     off
dalymode     Interpret leading open paren as lisp    off

\end{verbatim}
<<debug>>=
   (|debug|
    "debug options"
    |interpreter|
    TREE
    |novar|
    (
<<debuglambdatype>>
<<debugdalymode>>
    ))
@
\section{debug lambda type}
\begin{verbatim}
---------------------- The lambdatype Option ----------------------

 Description: Show type information for #1 syntax

\end{verbatim}
\defdollar{lambdatype}
<<initvars>>=
(defvar $lambdatype nil "show type information for #1 syntax")

@
<<debuglambdatype>>=
      (|lambdatype|
       "show type information for #1 syntax"
       |interpreter|
       LITERALS
       $lambdatype
       (|on| |off|)
       |off|)
@
\section{debug dalymode}
The \verb|$dalymode| variable is used in a case statement in 
intloopReadConsole. This variable can be set to any non-nil
value. When not nil the interpreter will send any line that begins
with an ``('' to be sent to the underlying lisp. This is useful
for debugging Axiom. The normal value of this variable is NIL.

This variable was created as an alternative to prefixing every lisp
command with )lisp. When doing a lot of debugging this is tedious
and error prone. This variable was created to shortcut that process.
Clearly it breaks some semantics of the language accepted by the
interpreter as parens are used for grouping expressions.

\begin{verbatim}
---------------------- The dalymode Option ----------------------

 Description: Interpret leading open paren as lisp

\end{verbatim}
\defdollar{dalymode}
<<initvars>>=
(defvar $dalymode nil "Interpret leading open paren as lisp")

@
<<debugdalymode>>=
      (|dalymode|
       "Interpret leading open paren as lisp"
       |interpreter|
       LITERALS
       $dalymode
       (|on| |off|)
       |off|)
@
\section{compiler}
\begin{verbatim}
                  Current Values of  compiler  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
output       library in which to place compiled code     
input        controls libraries from which to load compiled code  
args         arguments for compiling AXIOM code         
             -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete 
             -DAxiom -Y $AXIOM/algebra 

\end{verbatim}
<<compiler>>=
   (|compiler|
    "Library compiler options"
    |interpreter|
    TREE
    |novar|
    (
<<compileroutput>>
<<compilerinput>>
<<compilerargs>>
    ))
@
\section{compiler output}
\begin{verbatim}
---------------------- The output Option ----------------------

 Description: library in which to place compiled code

\end{verbatim}
<<compileroutput>>=
      (|output|
       "library in which to place compiled code"
       |interpreter|
       FUNCTION
       |setOutputLibrary|
       NIL
       |htSetOutputLibrary|
	)
@
\section{Variables Used}
\section{Functions}
\defunsec{setOutputLibrary}{The set output command handler}
\calls{setOutputLibrary}{poundsign}
\calls{setOutputLibrary}{describeOutputLibraryArgs}
\calls{setOutputLibrary}{filep}
\calls{setOutputLibrary}{openOutputLibrary}
\usesdollar{setOutputLibrary}{outputLibraryName}
<<defun setOutputLibrary>>=
(defun |setOutputLibrary| (arg)
 "The set output command handler"
 (let (fn)
 (declare (special |$outputLibraryName|))
   (cond
    ((eq arg '|%initialize%|) (setq |$outputLibraryName| nil))
    ((eq arg '|%display%|) (or |$outputLibraryName| "user.lib"))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?) (/= (|#| arg) 1))
     (|describeOutputLibraryArgs|))
    (t
     (when (probe-file (setq fn (princ-to-string (car arg))))
       (setq fn (truename fn)))
     (|openOutputLibrary| (setq |$outputLibraryName| fn))))))

@

\defunsec{describeOutputLibraryArgs}{Describe the set output library arguments}
\calls{describeOutputLibraryArgs}{sayBrightly}
<<defun describeOutputLibraryArgs>>=
(defun |describeOutputLibraryArgs| ()
 "Describe the set output library arguments"
 (|sayBrightly| (list
  '|%b| ")set compiler output library"
  '|%d| "is used to tell the compiler where to place"
  '|%l| "compiled code generated by the library compiler.  By default it goes"
  '|%l| "in a file called"
  '|%b| "user.lib"
  '|%d| "in the current directory.")))

@

\defunsec{openOutputLibrary}{Open the output library}
The input-libraries and output-library are now truename based.
\calls{openOutputLibrary}{dropInputLibrary}
\uses{openOutputLibrary}{output-library}
\uses{openOutputLibrary}{input-libraries}
<<defun openOutputLibrary>>=
(defun |openOutputLibrary| (lib)
 "Open the output library"
 (declare (special output-library input-libraries))
  (|dropInputLibrary| lib)
  (setq output-library (truename lib))
  (push output-library input-libraries))

@

\section{compiler input}
\begin{verbatim}
---------------------- The input Option -----------------------

 Description: controls libraries from which to load compiled code

 )set compiler input add library is used to tell AXIOM to add 
  library to the front of the path which determines where 
  compiled code is loaded from.
 )set compiler input drop library is used to tell AXIOM to remove 
  library from this path.
\end{verbatim}
<<compilerinput>>=
      (|input|
       "controls libraries from which to load compiled code"
       |interpreter|
       FUNCTION
       |setInputLibrary|
       NIL
       |htSetInputLibrary|)
@

\section{Variables Used}
\section{Functions}
\defunsec{setInputLibrary}{The set input library command handler}
The input-libraries is now maintained as a list of truenames.
\calls{setInputLibrary}{describeInputLibraryArgs}
\calls{setInputLibrary}{pairp}
\calls{setInputLibrary}{qcar}
\calls{setInputLibrary}{qcdr}
\calls{setInputLibrary}{selectOptionLC}
\calls{setInputLibrary}{addInputLibrary}
\calls{setInputLibrary}{dropInputLibrary}
\calls{setInputLibrary}{setInputLibrary}
\uses{setInputLibrary}{input-libraries}
<<defun setInputLibrary>>=
(defun |setInputLibrary| (arg)
 "The set input library command handler"
 (declare (special input-libraries))
 (let (tmp1 filename act)
  (cond
   ((eq arg '|%initialize%|) t)
   ((eq arg '|%display%|) (mapcar #'namestring input-libraries))
   ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
    (|describeInputLibraryArgs|))
   ((and (pairp arg)
         (progn
          (setq act (qcar arg))
          (setq tmp1 (qcdr arg))
          (and (pairp tmp1)
               (eq (qcdr tmp1) nil)
               (progn (setq filename (qcar tmp1)) t)))
         (setq act (|selectOptionLC| act '(|add| |drop|) nil)))
    (cond
     ((eq act '|add|)
      (|addInputLibrary| (truename (princ-to-string filename))))
     ((eq act '|drop|)
      (|dropInputLibrary| (truename (princ-to-string filename))))))
   (t (|setInputLibrary| nil)))))

@

\defunsec{describeInputLibraryArgs}{Describe the set input library arguments}
\calls{describeInputLibraryArgs}{sayBrightly}
<<defun describeInputLibraryArgs>>=
(defun |describeInputLibraryArgs| ()
 "Describe the set input library arguments"
 (|sayBrightly| (list
  '|%b| ")set compiler input add library"
  '|%d| "is used to tell AXIOM to add"
  '|%b| "library"
  '|%d| "to"
  '|%l| "the front of the path used to find compile code."
  '|%l|
  '|%b| ")set compiler input drop library"
  '|%d| "is used to tell AXIOM to remove"
  '|%b| "library"
  '|%d|
  '|%l| "from this path.")))

@

\defunsec{addInputLibrary}{Add the input library to the list}
The input-libraries variable is now maintained as a list of truenames.
\calls{addInputLibrary}{dropInputLibrary}
\usesdollar{addInputLibrary}{input-libraries}
<<defun addInputLibrary>>=
(defun |addInputLibrary| (lib)
 "Add the input library to the list"
 (declare (special input-libraries))
  (|dropInputLibrary| lib)
  (push (truename lib) input-libraries))

@

\defunsec{dropInputLibrary}{Drop an input library from the list}
\usesdollar{dropInputLibrary}{input-libraries}
<<defun dropInputLibrary>>=
(defun |dropInputLibrary| (lib) 
 "Drop an input library from the list"
 (declare (special input-libraries))
 (setq input-libraries (delete (truename lib) input-libraries :test #'equal)))

@

\section{compiler args}
\begin{verbatim}
----------------------- The args Option -----------------------

 Description: arguments for compiling AXIOM code

 )set compiler args  is used to tell AXIOM how to invoke the 
  library compiler when compiling code for AXIOM.
  The args option is followed by a string enclosed in double 
  quotes.

 The current setting is
 "-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete 
  -DAxiom -Y $AXIOM/algebra" 
\end{verbatim}
\defdollar{asharpCmdlineFlags}
<<initvars>>=
(defvar |$asharpCmdlineFlags| 
  "-O -Fasy -Fao -Flsp -laxiom -Mno-AXL__W__WillObsolete -DAxiom -Y $AXIOM/algebra"
  "arguments for compiling AXIOM code")

@
<<compilerargs>>=
      (|args|
       "arguments for compiling AXIOM code"
       |interpreter|
       FUNCTION
       |setAsharpArgs|
       (("enter compiler options "
          STRING
          |$asharpCmdlineFlags|
          |chkDirectory|
          "-O -Fasy -Fao -Flsp -laxiom -Mno-AXL__W__WillObsolete -DAxiom -Y $AXIOM/algebra"))
       NIL)
@

\section{Variables Used}
\section{Functions}
\defunsec{setAsharpArgs}{Handle the set compiler command arguments}
\calls{setAsharpArgs}{describeAsharpArgs}
\usesdollar{setAsharpArgs}{asharpCmdlineFlags}
<<defun setAsharpArgs>>=
(defun |setAsharpArgs| (arg)
 "Handle the set compiler command arguments"
 (declare (special |$asharpCmdlineFlags|))
 (cond
  ((eq arg '|%initialize%|)
   (setq |$asharpCmdlineFlags|
    "-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra"))
  ((eq arg '|%display%|) |$asharpCmdlineFlags|)
  ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
   (|describeAsharpArgs|))
  (t (setq |$asharpCmdlineFlags| (car arg))))) 

@

\defunsec{describeAsharpArgs}{Describe the set compiler command arguments}
\calls{describeAsharpArgs}{sayBrightly}
\usesdollar{describeAsharpArgs}{asharpCmdlineFlags}
<<defun describeAsharpArgs>>=
(defun |describeAsharpArgs| () 
 "Describe the set compiler command arguments"
 (declare (special |$asharpCmdlineFlags|))
 (|sayBrightly| (list
  '|%b| ")set compiler args "
  '|%d| "is used to tell AXIOM how to invoke the library compiler "
  '|%l| " when compiling code for AXIOM."
  '|%l| " The args option is followed by a string enclosed in double quotes."
  '|%l|
  '|%l| " The current setting is"
  '|%l|
  '|%b| "\"" |$asharpCmdlineFlags| "\""
  '|%d|)))

@

\section{expose}
\begin{verbatim}
---------------------- The expose Option ----------------------

 Description: control interpreter constructor exposure

   The following groups are explicitly exposed in the current 
   frame (called initial ):
                                   basic                                   
                                categories                                 
                                  naglink                                  
                                   anna                                    
 
   The following constructors are explicitly exposed in the 
   current frame:
               there are no explicitly exposed constructors                
 
   The following constructors are explicitly hidden in the 
   current frame:
                there are no explicitly hidden constructors                
 
   When )set expose is followed by no arguments, the information
   you now see is displayed. When followed by the initialize 
   argument, the exposure group data in the file interp.exposed 
   is read and is then available. The arguments add and drop are 
   used to add or drop exposure groups or explicit constructors 
   from the local frame exposure data. Issue
                  )set expose add    or    )set expose drop 
   for more information.
\end{verbatim}
<<expose>>=
  (|expose|
   "control interpreter constructor exposure"
   |interpreter|
   FUNCTION
   |setExpose|
   NIL
   |htSetExpose|)
@

\section{Variables Used}
NOTE: If you add new algebra you must also update this list
otherwise the new algebra won't be loaded by the interpreter when needed.

\defdollar{globalExposureGroupAlist}
<<initvars>>=
(defvar |$globalExposureGroupAlist|
 '(
 ;;define the groups |basic| |naglink| |anna| |categories| |Hidden| |defaults|
  (|basic| 
   (|AffineSpace| . AFFSP)
   (|AlgebraicManipulations| . ALGMANIP)
   (|AlgebraicNumber| . AN)
   (|AlgFactor| . ALGFACT)
   (|AlgebraicMultFact| . ALGMFACT)
   (|AlgebraPackage| . ALGPKG)
   (|AlgebraGivenByStructuralConstants| . ALGSC)
   (|Any| . ANY)
   (|AnyFunctions1| . ANY1)
   (|ApplicationProgramInterface| . API)
   (|ArrayStack| . ASTACK)
   (|AssociatedJordanAlgebra| . JORDAN)
   (|AssociatedLieAlgebra| . LIE)
   (|AttachPredicates| . PMPRED)
   (|AxiomServer| . AXSERV)
   (|BalancedBinaryTree| . BBTREE)
   (|BasicOperator| . BOP)
   (|BasicOperatorFunctions1| . BOP1)
   (|Bezier| . BEZIER)
   (|BinaryExpansion| . BINARY)
   (|BinaryFile| . BINFILE)
   (|BinarySearchTree| . BSTREE)
   (|BinaryTournament| . BTOURN)
   (|BinaryTree| . BTREE)
   (|Bits| . BITS)
   (|BlasLevelOne| . BLAS1)
   (|BlowUpWithHamburgerNoether| . BLHN)
   (|BlowUpWithQuadTrans| . BLQT)
   (|Boolean| . BOOLEAN)
   (|CardinalNumber| . CARD)
   (|CartesianTensor| . CARTEN)
   (|CartesianTensorFunctions2| . CARTEN2)
   (|Character| . CHAR)
   (|CharacterClass| . CCLASS)
   (|CharacteristicPolynomialPackage| . CHARPOL)
   (|CliffordAlgebra| . CLIF)
   (|Color| . COLOR)
   (|CommonDenominator| . CDEN)
   (|Commutator| . COMM)
   (|Complex| . COMPLEX)
   (|ComplexFactorization| . COMPFACT)
   (|ComplexFunctions2| . COMPLEX2)
   (|ComplexRootPackage| . CMPLXRT)
   (|ComplexTrigonometricManipulations| . CTRIGMNP)
   (|ContinuedFraction| . CONTFRAC)
   (|CoordinateSystems| . COORDSYS)
   (|CRApackage| . CRAPACK)
   (|CycleIndicators| . CYCLES)
   (|Database| . DBASE)
   (|DataList| . DLIST)
   (|DecimalExpansion| . DECIMAL)
   (|DenavitHartenbergMatrix| . DHMATRIX)
   (|Dequeue| . DEQUEUE)
   (|DiophantineSolutionPackage| . DIOSP)
   (|DirectProductFunctions2| . DIRPROD2)
   (|DisplayPackage| . DISPLAY)
   (|DistinctDegreeFactorize| . DDFACT)
   (|DoubleFloat| . DFLOAT)
   (|DoubleFloatSpecialFunctions| . DFSFUN)
   (|DrawComplex| . DRAWCX)
   (|DrawNumericHack| . DRAWHACK)
   (|DrawOption| . DROPT)
   (|EigenPackage| . EP)
   (|ElementaryFunctionDefiniteIntegration| . DEFINTEF)
   (|ElementaryFunctionLODESolver| . LODEEF)
   (|ElementaryFunctionODESolver| . ODEEF)
   (|ElementaryFunctionSign| . SIGNEF)
   (|ElementaryFunctionStructurePackage| . EFSTRUC)
   (|Equation| . EQ)
   (|EquationFunctions2| . EQ2)
   (|ErrorFunctions| . ERROR)
   (|EuclideanGroebnerBasisPackage| . GBEUCLID)
   (|Exit| . EXIT)
   (|Expression| . EXPR)
   (|ExpressionFunctions2| . EXPR2)
   (|ExpressionSolve| . EXPRSOL)
   (|ExpressionSpaceFunctions2| . ES2)
   (|ExpressionSpaceODESolver| . EXPRODE)
   (|ExpressionToOpenMath| . OMEXPR)
   (|ExpressionToUnivariatePowerSeries| . EXPR2UPS)
   (|Factored| . FR)
   (|FactoredFunctions2| . FR2)
  (|FactorisationOverPseudoAlgebraicClosureOfAlgExtOfRationalNumber| . FACTEXT)
   (|FactorisationOverPseudoAlgebraicClosureOfRationalNumber| . FACTRN)
   (|File| . FILE)
   (|FileName| . FNAME)
   (|FiniteAbelianMonoidRingFunctions2| . FAMR2)
   (|FiniteDivisorFunctions2| . FDIV2)
   (|FiniteFieldFactorizationWithSizeParseBySideEffect| . FFFACTSE)
   (|FiniteField| . FF)
   (|FiniteFieldCyclicGroup| . FFCG)
   (|FiniteFieldPolynomialPackage2| . FFPOLY2)
   (|FiniteFieldNormalBasis| . FFNB)
   (|FiniteFieldHomomorphisms| . FFHOM)
   (|FiniteFieldSquareFreeDecomposition| . FFSQFR)
   (|FiniteLinearAggregateFunctions2| . FLAGG2)
   (|FiniteLinearAggregateSort| . FLASORT)
   (|FiniteSetAggregateFunctions2| . FSAGG2)
   (|FlexibleArray| . FARRAY)
   (|Float| . FLOAT)
   (|FloatingRealPackage| . FLOATRP)
   (|FloatingComplexPackage| . FLOATCP)
   (|FourierSeries| . FSERIES)
   (|Fraction| . FRAC)
   (|FractionalIdealFunctions2| . FRIDEAL2)
   (|FractionFreeFastGaussian| . FFFG)
   (|FractionFreeFastGaussianFractions| . FFFGF)
   (|FractionFunctions2| . FRAC2)
   (|FreeNilpotentLie| . FNLA)
   (|FullPartialFractionExpansion| . FPARFRAC)
   (|FunctionFieldCategoryFunctions2| . FFCAT2)
   (|FunctionSpaceAssertions| . PMASSFS)
   (|FunctionSpaceAttachPredicates| . PMPREDFS)
   (|FunctionSpaceComplexIntegration| . FSCINT)
   (|FunctionSpaceFunctions2| . FS2)
   (|FunctionSpaceIntegration| . FSINT)
   (|FunctionSpacePrimitiveElement| . FSPRMELT)
   (|FunctionSpaceSum| . SUMFS)
   (|GaussianFactorizationPackage| . GAUSSFAC)
   (|GeneralUnivariatePowerSeries| . GSERIES)
   (|GenerateUnivariatePowerSeries| . GENUPS)
   (|GraphicsDefaults| . GRDEF)
   (|GroebnerPackage| . GB)
   (|GroebnerFactorizationPackage| . GBF)
   (|Guess| . GUESS)
   (|GuessAlgebraicNumber| . GUESSAN)
   (|GuessFinite| . GUESSF)
   (|GuessFiniteFunctions| . GUESSF1)
   (|GuessInteger| . GUESSINT)
   (|GuessOption| . GOPT)
   (|GuessOptionFunctions0| . GOPT0)
   (|GuessPolynomial| . GUESSP)
   (|GuessUnivariatePolynomial| . GUESSUP)
   (|HallBasis| . HB)
   (|Heap| . HEAP)
   (|HexadecimalExpansion| . HEXADEC)
   (|IndexCard| . ICARD)
   (|IdealDecompositionPackage| . IDECOMP)
   (|InfiniteProductCharacteristicZero| . INFPROD0)
   (|InfiniteProductFiniteField| . INPRODFF)
   (|InfiniteProductPrimeField| . INPRODPF)
   (|InfiniteTuple| . ITUPLE)
   (|InfiniteTupleFunctions2| . ITFUN2)
   (|InfiniteTupleFunctions3| . ITFUN3)
   (|Infinity| . INFINITY)
   (|Integer| . INT)
   (|IntegerCombinatoricFunctions| . COMBINAT)
   (|IntegerLinearDependence| . ZLINDEP)
   (|IntegerNumberTheoryFunctions| . INTHEORY)
   (|IntegerPrimesPackage| . PRIMES)
   (|IntegerRetractions| . INTRET)
   (|IntegerRoots| . IROOT)
   (|IntegrationResultFunctions2| . IR2)
   (|IntegrationResultRFToFunction| . IRRF2F)
   (|IntegrationResultToFunction| . IR2F)
   (|InterfaceGroebnerPackage| . INTERGB)
   (|Interval| . INTRVL)
   (|InventorDataSink| . IVDATA)
   (|InventorViewPort| . IVVIEW)
   (|InventorRenderPackage| . IVREND)
   (|InverseLaplaceTransform| . INVLAPLA)
   (|IrrRepSymNatPackage| . IRSN)
   (|KernelFunctions2| . KERNEL2)
   (|KeyedAccessFile| . KAFILE)
   (|LaplaceTransform| . LAPLACE)
   (|LazardMorenoSolvingPackage| . LAZM3PK)
   (|Library| . LIB)
   (|LieSquareMatrix| . LSQM)
   (|LinearOrdinaryDifferentialOperator| . LODO)
   (|LinearSystemMatrixPackage| . LSMP)
   (|LinearSystemMatrixPackage1| . LSMP1)
   (|LinearSystemFromPowerSeriesPackage| . LISYSER)
   (|LinearSystemPolynomialPackage| . LSPP)
   (|List| . LIST)
   (|LinesOpPack| . LOP)
   (|ListFunctions2| . LIST2)
   (|ListFunctions3| . LIST3)
   (|ListToMap| . LIST2MAP)
   (|MakeFloatCompiledFunction| . MKFLCFN)
   (|MakeFunction| . MKFUNC)
   (|MakeRecord| . MKRECORD)
   (|MappingPackage1| . MAPPKG1)
   (|MappingPackage2| . MAPPKG2)
   (|MappingPackage3| . MAPPKG3)
   (|MappingPackage4| . MAPPKG4)
   (|MathMLFormat| . MMLFORM)
   (|Matrix| . MATRIX)
   (|MatrixCategoryFunctions2| . MATCAT2)
   (|MatrixCommonDenominator| . MCDEN)
   (|MatrixLinearAlgebraFunctions| . MATLIN)
   (|MergeThing| . MTHING)
   (|ModularDistinctDegreeFactorizer| . MDDFACT)
   (|ModuleOperator| . MODOP)
   (|MonoidRingFunctions2| . MRF2)
   (|MoreSystemCommands| . MSYSCMD)
   (|MPolyCatFunctions2| . MPC2)
   (|MPolyCatRationalFunctionFactorizer| . MPRFF)
   (|Multiset| . MSET)
   (|MultivariateFactorize| . MULTFACT)
   (|MultivariatePolynomial| . MPOLY)
   (|MultFiniteFactorize| . MFINFACT)
   (|MyUnivariatePolynomial| . MYUP)
   (|MyExpression| . MYEXPR)
   (|NeitherSparseOrDensePowerSeries| . NSDPS)
   (|NoneFunctions1| . NONE1)
   (|NonNegativeInteger| . NNI)
   (|NottinghamGroup| . NOTTING)
   (|NormalizationPackage| . NORMPK)
   (|NormInMonogenicAlgebra| . NORMMA)
   (|NumberTheoreticPolynomialFunctions| . NTPOLFN)
   (|Numeric| . NUMERIC)
   (|NumericalOrdinaryDifferentialEquations| . NUMODE)
   (|NumericalQuadrature| . NUMQUAD)
   (|NumericComplexEigenPackage| . NCEP)
   (|NumericRealEigenPackage| . NREP)
   (|NumericContinuedFraction| . NCNTFRAC)
   (|Octonion| . OCT)
   (|OctonionCategoryFunctions2| . OCTCT2)
   (|OneDimensionalArray| . ARRAY1)
   (|OneDimensionalArrayFunctions2| . ARRAY12)
   (|OnePointCompletion| . ONECOMP)
   (|OnePointCompletionFunctions2| . ONECOMP2)
   (|OpenMathConnection| . OMCONN)
   (|OpenMathDevice| . OMDEV)
   (|OpenMathEncoding| . OMENC)
   (|OpenMathError| . OMERR)
   (|OpenMathErrorKind| . OMERRK)
   (|OpenMathPackage| . OMPKG)
   (|OpenMathServerPackage| . OMSERVER)
   (|OperationsQuery| . OPQUERY)
   (|OrderedCompletion| . ORDCOMP)
   (|OrderedCompletionFunctions2| . ORDCOMP2)
   (|OrdinaryDifferentialRing| . ODR)
   (|OrdSetInts| . OSI)
   (|OrthogonalPolynomialFunctions| . ORTHPOL)
   (|OutputPackage| . OUT)
   (|PadeApproximantPackage| . PADEPAC)
   (|Palette| . PALETTE)
   (|PartialFraction| . PFR)
   (|PatternFunctions2| . PATTERN2)
   (|ParametricPlaneCurve| . PARPCURV)
   (|ParametricSpaceCurve| . PARSCURV)
   (|ParametricSurface| . PARSURF)
   (|ParametricPlaneCurveFunctions2| . PARPC2)
   (|ParametricSpaceCurveFunctions2| . PARSC2)
   (|ParametricSurfaceFunctions2| . PARSU2)
   (|PartitionsAndPermutations| . PARTPERM)
   (|PatternMatch| . PATMATCH)
   (|PatternMatchAssertions| . PMASS)
   (|PatternMatchResultFunctions2| . PATRES2)
   (|PendantTree| . PENDTREE)
   (|Permanent| . PERMAN)
   (|PermutationGroupExamples| . PGE)
   (|PermutationGroup| . PERMGRP)
   (|Permutation| . PERM)
   (|Pi| . HACKPI)
   (|PiCoercions| . PICOERCE)
   (|PointFunctions2| . PTFUNC2)
   (|PolyGroebner| . PGROEB)
   (|Polynomial| . POLY)
   (|PolynomialAN2Expression| . PAN2EXPR)
   (|PolynomialComposition| . PCOMP)
   (|PolynomialDecomposition| . PDECOMP)
   (|PolynomialFunctions2| . POLY2)
   (|PolynomialIdeals| . IDEAL)
   (|PolynomialToUnivariatePolynomial| . POLY2UP)
   (|PositiveInteger| . PI)
   (|PowerSeriesLimitPackage| . LIMITPS)
   (|PrimeField| . PF)
   (|PrimitiveArrayFunctions2| . PRIMARR2)
   (|PrintPackage| . PRINT)
   (|ProjectivePlane| . PROJPL)
   (|ProjectivePlaneOverPseudoAlgebraicClosureOfFiniteField| . PROJPLPS)
   (|ProjectiveSpace| . PROJSP)
   (|QuadraticForm| . QFORM)
   (|QuasiComponentPackage| . QCMPACK)
   (|Quaternion| . QUAT)
   (|QuaternionCategoryFunctions2| . QUATCT2)
   (|QueryEquation| . QEQUAT)
   (|Queue| . QUEUE)
   (|QuotientFieldCategoryFunctions2| . QFCAT2)
   (|RadicalEigenPackage| . REP)
   (|RadicalSolvePackage| . SOLVERAD)
   (|RadixExpansion| . RADIX)
   (|RadixUtilities| . RADUTIL)
   (|RandomNumberSource| . RANDSRC)
   (|RationalFunction| . RF)
   (|RationalFunctionDefiniteIntegration| . DEFINTRF)
   (|RationalFunctionFactor| . RFFACT)
   (|RationalFunctionFactorizer| . RFFACTOR)
   (|RationalFunctionIntegration| . INTRF)
   (|RationalFunctionLimitPackage| . LIMITRF)
   (|RationalFunctionSign| . SIGNRF)
   (|RationalFunctionSum| . SUMRF)
   (|RationalRetractions| . RATRET)
   (|RealClosure| . RECLOS)
   (|RealPolynomialUtilitiesPackage| . POLUTIL)
   (|RealZeroPackage| . REAL0)
   (|RealZeroPackageQ| . REAL0Q)
   (|RecurrenceOperator| . RECOP)
   (|RectangularMatrixCategoryFunctions2| . RMCAT2)
   (|RegularSetDecompositionPackage| . RSDCMPK)
   (|RegularTriangularSet| . REGSET)
   (|RegularTriangularSetGcdPackage| . RSETGCD)
   (|RepresentationPackage1| . REP1)
   (|RepresentationPackage2| . REP2)
   (|ResolveLatticeCompletion| . RESLATC)
   (|RewriteRule| . RULE)
   (|RightOpenIntervalRootCharacterization| . ROIRC) 
   (|RomanNumeral| . ROMAN)
   (|RootsFindingPackage| . RFP)
   (|Ruleset| . RULESET)
   (|ScriptFormulaFormat| . FORMULA)
   (|ScriptFormulaFormat1| . FORMULA1)
   (|Segment| . SEG)
   (|SegmentBinding| . SEGBIND)
   (|SegmentBindingFunctions2| . SEGBIND2)
   (|SegmentFunctions2| . SEG2)
   (|Set| . SET)
   (|SimpleAlgebraicExtensionAlgFactor| . SAEFACT)
   (|SimplifyAlgebraicNumberConvertPackage| . SIMPAN)
   (|SingleInteger| . SINT)
   (|SmithNormalForm| . SMITH)
   (|SparseUnivariatePolynomialExpressions| . SUPEXPR)
   (|SparseUnivariatePolynomialFunctions2| . SUP2)
   (|SpecialOutputPackage| . SPECOUT)
   (|SquareFreeRegularSetDecompositionPackage| . SRDCMPK)
   (|SquareFreeRegularTriangularSet| . SREGSET)
   (|SquareFreeRegularTriangularSetGcdPackage| . SFRGCD)
   (|SquareFreeQuasiComponentPackage| . SFQCMPK)
   (|Stack| . STACK)
   (|Stream| . STREAM)
   (|StreamFunctions1| . STREAM1)
   (|StreamFunctions2| . STREAM2)
   (|StreamFunctions3| . STREAM3)
   (|String| . STRING)
   (|SturmHabichtPackage| . SHP)
   (|Symbol| . SYMBOL)
   (|SymmetricGroupCombinatoricFunctions| . SGCF)
   (|SystemSolvePackage| . SYSSOLP)
   (|SAERationalFunctionAlgFactor| . SAERFFC)
   (|Tableau| . TABLEAU)
   (|TaylorSeries| . TS)
   (|TaylorSolve| . UTSSOL)
   (|TexFormat| . TEX)
   (|TexFormat1| . TEX1)
   (|TextFile| . TEXTFILE)
   (|ThreeDimensionalViewport| . VIEW3D)
   (|ThreeSpace| . SPACE3)
   (|Timer|  . TIMER)
   (|TopLevelDrawFunctions| . DRAW)
   (|TopLevelDrawFunctionsForAlgebraicCurves| . DRAWCURV)
   (|TopLevelDrawFunctionsForCompiledFunctions| . DRAWCFUN)
   (|TopLevelDrawFunctionsForPoints| .  DRAWPT )
   (|TopLevelThreeSpace| . TOPSP)
   (|TranscendentalManipulations| . TRMANIP)
   (|TransSolvePackage| . SOLVETRA)
   (|Tree| . TREE)
   (|TrigonometricManipulations| . TRIGMNIP)
   (|UnivariateLaurentSeriesFunctions2| . ULS2)
   (|UnivariateFormalPowerSeries| . UFPS)
   (|UnivariateFormalPowerSeriesFunctions| . UFPS1)
   (|UnivariatePolynomial| . UP)
   (|UnivariatePolynomialCategoryFunctions2| . UPOLYC2)
   (|UnivariatePolynomialCommonDenominator| . UPCDEN)
   (|UnivariatePolynomialFunctions2| . UP2)
   (|UnivariatePolynomialMultiplicationPackage| . UPMP)
   (|UnivariateTaylorSeriesCZero| . UTSZ)
   (|UnivariatePuiseuxSeriesFunctions2| . UPXS2)
   (|UnivariateTaylorSeriesFunctions2| . UTS2)
   (|UniversalSegment| . UNISEG)
   (|UniversalSegmentFunctions2| . UNISEG2)
   (|UserDefinedVariableOrdering| . UDVO)
   (|Vector| . VECTOR)
   (|VectorFunctions2| . VECTOR2)
   (|ViewDefaultsPackage| . VIEWDEF)
   (|Void| . VOID)
   (|WuWenTsunTriangularSet| . WUTSET))
 (|naglink|
   (|Asp1| . ASP1)
   (|Asp4| . ASP4)
   (|Asp6| . ASP6)
   (|Asp7| . ASP7)
   (|Asp8| . ASP8)
   (|Asp9| . ASP9)
   (|Asp10| . ASP10)
   (|Asp12| . ASP12)
   (|Asp19| . ASP19)
   (|Asp20| . ASP20)
   (|Asp24| . ASP24)
   (|Asp27| . ASP27)
   (|Asp28| . ASP28)
   (|Asp29| . ASP29)
   (|Asp30| . ASP30)
   (|Asp31| . ASP31)
   (|Asp33| . ASP33)
   (|Asp34| . ASP34)
   (|Asp35| . ASP35)
   (|Asp41| . ASP41)
   (|Asp42| . ASP42)
   (|Asp49| . ASP49)
   (|Asp50| . ASP50)
   (|Asp55| . ASP55)
   (|Asp73| . ASP73)
   (|Asp74| . ASP74)
   (|Asp77| . ASP77)
   (|Asp78| . ASP78)
   (|Asp80| . ASP80)
   (|FortranCode| . FC)
   (|FortranCodePackage1| . FCPAK1)
   (|FortranExpression| . FEXPR)
   (|FortranMachineTypeCategory| . FMTC)
   (|FortranMatrixCategory| . FMC)
   (|FortranMatrixFunctionCategory| . FMFUN)
   (|FortranOutputStackPackage| . FOP)
   (|FortranPackage| . FORT)
   (|FortranProgramCategory| . FORTCAT)
   (|FortranProgram| . FORTRAN)
   (|FortranFunctionCategory| . FORTFN)
   (|FortranScalarType| . FST)
   (|FortranType| . FT)
   (|FortranTemplate| . FTEM)
   (|FortranVectorFunctionCategory| . FVFUN)
   (|FortranVectorCategory| . FVC)
   (|MachineComplex| . MCMPLX)
   (|MachineFloat| . MFLOAT)
   (|MachineInteger| . MINT)
   (|MultiVariableCalculusFunctions| . MCALCFN)
   (|NagDiscreteFourierTransformInterfacePackage| . NAGDIS)
   (|NagEigenInterfacePackage| . NAGEIG)
   (|NAGLinkSupportPackage| . NAGSP)
   (|NagOptimisationInterfacePackage| . NAGOPT)
   (|NagQuadratureInterfacePackage| . NAGQUA)
   (|NagResultChecks| . NAGRES)
   (|NagSpecialFunctionsInterfacePackage| . NAGSPE)
   (|NagPolynomialRootsPackage| . NAGC02)
   (|NagRootFindingPackage| . NAGC05)
   (|NagSeriesSummationPackage| . NAGC06)
   (|NagIntegrationPackage| . NAGD01)
   (|NagOrdinaryDifferentialEquationsPackage| . NAGD02)
   (|NagPartialDifferentialEquationsPackage| . NAGD03)
   (|NagInterpolationPackage| . NAGE01)
   (|NagFittingPackage| . NAGE02)
   (|NagOptimisationPackage| . NAGE04)
   (|NagMatrixOperationsPackage| . NAGF01)
   (|NagEigenPackage| . NAGF02)
   (|NagLinearEquationSolvingPackage| . NAGF04)
   (|NagLapack| . NAGF07)
   (|NagSpecialFunctionsPackage| . NAGS)
   (|PackedHermitianSequence| . PACKED)
   (|Result| . RESULT)
   (|SimpleFortranProgram| . SFORT)
   (|Switch| . SWITCH)
   (|SymbolTable| . SYMTAB)
   (|TemplateUtilities| . TEMUTL)
   (|TheSymbolTable| . SYMS)
   (|ThreeDimensionalMatrix| . M3D))
 (|anna|
   (|AnnaNumericalIntegrationPackage| . INTPACK)
   (|AnnaNumericalOptimizationPackage| . OPTPACK)
   (|AnnaOrdinaryDifferentialEquationPackage| . ODEPACK)
   (|AnnaPartialDifferentialEquationPackage| . PDEPACK)
   (|AttributeButtons| . ATTRBUT)
   (|BasicFunctions| . BFUNCT)
   (|d01ajfAnnaType| . D01AJFA)
   (|d01akfAnnaType| . D01AKFA)
   (|d01alfAnnaType| . D01ALFA)
   (|d01amfAnnaType| . D01AMFA)
   (|d01anfAnnaType| . D01ANFA)
   (|d01apfAnnaType| . D01APFA)
   (|d01aqfAnnaType| . D01AQFA)
   (|d01asfAnnaType| . D01ASFA)
   (|d01fcfAnnaType| . D01FCFA)
   (|d01gbfAnnaType| . D01GBFA)
   (|d01AgentsPackage| . D01AGNT)
   (|d01TransformFunctionType| . D01TRNS)
   (|d01WeightsPackage| . D01WGTS)
   (|d02AgentsPackage| . D02AGNT)
   (|d02bbfAnnaType| . D02BBFA)
   (|d02bhfAnnaType| . D02BHFA)
   (|d02cjfAnnaType| . D02CJFA)
   (|d02ejfAnnaType| . D02EJFA)
   (|d03AgentsPackage| . D03AGNT)
   (|d03eefAnnaType| . D03EEFA)
   (|d03fafAnnaType| . D03FAFA)
   (|e04AgentsPackage| . E04AGNT)
   (|e04dgfAnnaType| . E04DGFA)
   (|e04fdfAnnaType| . E04FDFA)
   (|e04gcfAnnaType| . E04GCFA)
   (|e04jafAnnaType| . E04JAFA)
   (|e04mbfAnnaType| . E04MBFA)
   (|e04nafAnnaType| . E04NAFA)
   (|e04ucfAnnaType| . E04UCFA)
   (|ExpertSystemContinuityPackage| . ESCONT)
   (|ExpertSystemContinuityPackage1| . ESCONT1)
   (|ExpertSystemToolsPackage| . ESTOOLS)
   (|ExpertSystemToolsPackage1| . ESTOOLS1)
   (|ExpertSystemToolsPackage2| . ESTOOLS2)
   (|NumericalIntegrationCategory| . NUMINT)
   (|NumericalIntegrationProblem| . NIPROB)
   (|NumericalODEProblem| . ODEPROB)
   (|NumericalOptimizationCategory| . OPTCAT)
   (|NumericalOptimizationProblem| . OPTPROB)
   (|NumericalPDEProblem| . PDEPROB)
   (|ODEIntensityFunctionsTable| . ODEIFTBL)
   (|IntegrationFunctionsTable| . INTFTBL)
   (|OrdinaryDifferentialEquationsSolverCategory| . ODECAT)
   (|PartialDifferentialEquationsSolverCategory| . PDECAT)
   (|RoutinesTable| . ROUTINE))
 (|categories| 
   (|AbelianGroup| . ABELGRP)
   (|AbelianMonoid| . ABELMON)
   (|AbelianMonoidRing| . AMR)
   (|AbelianSemiGroup| . ABELSG)
   (|AffineSpaceCategory| . AFSPCAT)
   (|Aggregate| . AGG)
   (|Algebra| . ALGEBRA)
   (|AlgebraicallyClosedField| . ACF)
   (|AlgebraicallyClosedFunctionSpace| . ACFS)
   (|ArcHyperbolicFunctionCategory| . AHYP)
   (|ArcTrigonometricFunctionCategory| . ATRIG)
   (|AssociationListAggregate| . ALAGG)
   (|AttributeRegistry| . ATTREG)
   (|BagAggregate| . BGAGG)
   (|BasicType| . BASTYPE)
   (|BiModule| . BMODULE)
   (|BinaryRecursiveAggregate| . BRAGG)
   (|BinaryTreeCategory| . BTCAT)
   (|BitAggregate| . BTAGG)
   (|BlowUpMethodCategory| . BLMETCT)
   (|CachableSet| . CACHSET)
   (|CancellationAbelianMonoid| . CABMON)
   (|CharacteristicNonZero| . CHARNZ)
   (|CharacteristicZero| . CHARZ)
   (|CoercibleTo| . KOERCE)
   (|Collection| . CLAGG)
   (|CombinatorialFunctionCategory| . CFCAT)
   (|CombinatorialOpsCategory| . COMBOPC)
   (|CommutativeRing| . COMRING)
   (|ComplexCategory| . COMPCAT)
   (|ConvertibleTo| . KONVERT)
   (|DequeueAggregate| . DQAGG)
   (|Dictionary| . DIAGG)
   (|DictionaryOperations| . DIOPS)
   (|DifferentialExtension| . DIFEXT)
   (|DifferentialPolynomialCategory| . DPOLCAT)
   (|DifferentialRing| . DIFRING)
   (|DifferentialVariableCategory| . DVARCAT)
   (|DirectProductCategory| . DIRPCAT)
   (|DivisionRing| . DIVRING)
   (|DoublyLinkedAggregate| . DLAGG)
   (|ElementaryFunctionCategory| . ELEMFUN)
   (|Eltable| . ELTAB)
   (|EltableAggregate| . ELTAGG)
   (|EntireRing| . ENTIRER)
   (|EuclideanDomain| . EUCDOM)
   (|Evalable| . EVALAB)
   (|ExpressionSpace| . ES)
   (|ExtensibleLinearAggregate| . ELAGG)
   (|ExtensionField| . XF)
   (|Field| . FIELD)
   (|FieldOfPrimeCharacteristic| . FPC)
   (|Finite| . FINITE)
   (|FileCategory| . FILECAT)
   (|FileNameCategory| . FNCAT)
   (|FiniteAbelianMonoidRing| . FAMR)
   (|FiniteAlgebraicExtensionField| . FAXF)
   (|FiniteDivisorCategory| . FDIVCAT)
   (|FiniteFieldCategory| . FFIELDC)
   (|FiniteLinearAggregate| . FLAGG)
   (|FiniteRankNonAssociativeAlgebra| . FINAALG)
   (|FiniteRankAlgebra| . FINRALG)
   (|FiniteSetAggregate| . FSAGG)
   (|FloatingPointSystem| . FPS)
   (|FramedAlgebra| . FRAMALG)
   (|FramedNonAssociativeAlgebra| . FRNAALG)
   (|FramedNonAssociativeAlgebraFunctions2| . FRNAAF2)
   (|FreeAbelianMonoidCategory| . FAMONC)
   (|FreeLieAlgebra| . FLALG)
   (|FreeModuleCat| . FMCAT)
   (|FullyEvalableOver| . FEVALAB)
   (|FullyLinearlyExplicitRingOver| . FLINEXP)
   (|FullyPatternMatchable| . FPATMAB)
   (|FullyRetractableTo| . FRETRCT)
   (|FunctionFieldCategory| . FFCAT)
   (|FunctionSpace| . FS)
   (|GcdDomain| . GCDDOM)
   (|GradedAlgebra| . GRALG)
   (|GradedModule| . GRMOD)
   (|Group| . GROUP)
   (|HomogeneousAggregate| . HOAGG)
   (|HyperbolicFunctionCategory| . HYPCAT)
   (|IndexedAggregate| . IXAGG)
   (|IndexedDirectProductCategory| . IDPC)
   (|InnerEvalable| . IEVALAB)
   (|IntegerNumberSystem| . INS)
   (|IntegralDomain| . INTDOM)
   (|IntervalCategory| . INTCAT)
   (|KeyedDictionary| . KDAGG)
   (|LazyStreamAggregate| . LZSTAGG)
   (|LeftAlgebra| . LALG)
   (|LeftModule| . LMODULE)
   (|LieAlgebra| . LIECAT)
   (|LinearAggregate| . LNAGG)
   (|LinearlyExplicitRingOver| . LINEXP)
   (|LinearOrdinaryDifferentialOperatorCategory| . LODOCAT)
   (|LiouvillianFunctionCategory| . LFCAT)
   (|ListAggregate| . LSAGG)
   (|LocalPowerSeriesCategory| . LOCPOWC)
   (|Logic| . LOGIC)
   (|MatrixCategory| . MATCAT)
   (|Module| . MODULE)
   (|Monad| . MONAD)
   (|MonadWithUnit| . MONADWU)
   (|Monoid| . MONOID)
   (|MonogenicAlgebra| . MONOGEN)
   (|MonogenicLinearOperator| . MLO)
   (|MultiDictionary| . MDAGG)
   (|MultisetAggregate| . MSETAGG)
   (|MultivariateTaylorSeriesCategory| . MTSCAT)
   (|NonAssociativeAlgebra| . NAALG)
   (|NonAssociativeRing| . NASRING)
   (|NonAssociativeRng| . NARNG)
   (|NormalizedTriangularSetCategory| . NTSCAT)
   (|Object| . OBJECT)
   (|OctonionCategory| . OC)
   (|OneDimensionalArrayAggregate| . A1AGG)
   (|OpenMath| . OM)
   (|OrderedAbelianGroup| . OAGROUP)
   (|OrderedAbelianMonoid| . OAMON)
   (|OrderedAbelianMonoidSup| . OAMONS)
   (|OrderedAbelianSemiGroup| . OASGP)
   (|OrderedCancellationAbelianMonoid| . OCAMON)
   (|OrderedFinite| . ORDFIN)
   (|OrderedIntegralDomain| . OINTDOM)
   (|OrderedMonoid| . ORDMON)
   (|OrderedMultisetAggregate| . OMSAGG)
   (|OrderedRing| . ORDRING)
   (|OrderedSet| . ORDSET)
   (|PAdicIntegerCategory| . PADICCT)
   (|PartialDifferentialRing| . PDRING)
   (|PartialTranscendentalFunctions| . PTRANFN)
   (|Patternable| . PATAB)
   (|PatternMatchable| . PATMAB)
   (|PermutationCategory| . PERMCAT)
   (|PlottablePlaneCurveCategory| . PPCURVE)
   (|PlottableSpaceCurveCategory| . PSCURVE)
   (|PointCategory| . PTCAT)
   (|PolynomialCategory| . POLYCAT)
   (|PolynomialFactorizationExplicit| . PFECAT)
   (|PolynomialSetCategory| . PSETCAT)
   (|PowerSeriesCategory| . PSCAT)
   (|PrimitiveFunctionCategory| . PRIMCAT)
   (|PrincipalIdealDomain| . PID)
   (|PriorityQueueAggregate| . PRQAGG)
   (|ProjectiveSpaceCategory| . PRSPCAT)
   (|PseudoAlgebraicClosureofAlgExtOfRationalNumberCategory| . PACEXTC)
   (|PseudoAlgebraicClosureOfFiniteField| . PACOFF)
   (|PseudoAlgebraicClosureOfFiniteFieldCategory| . PACFFC)
   (|PseudoAlgebraicClosureOfPerfectFieldCategory| . PACPERC)
   (|PseudoAlgebraicClosureOfRationalNumber| . PACRAT)
   (|PseudoAlgebraicClosureOfRationalNumberCategory| . PACRATC)
   (|QuaternionCategory| . QUATCAT)
   (|QueueAggregate| . QUAGG)
   (|QuotientFieldCategory| . QFCAT)
   (|RadicalCategory| . RADCAT)
   (|RealClosedField| . RCFIELD)
   (|RealConstant| . REAL)
   (|RealNumberSystem| . RNS)
   (|RealRootCharacterizationCategory| . RRCC)
   (|RectangularMatrixCategory| . RMATCAT)
   (|RecursiveAggregate| . RCAGG)
   (|RecursivePolynomialCategory| . RPOLCAT)
   (|RegularChain| . RGCHAIN)
   (|RegularTriangularSetCategory| . RSETCAT)
   (|RetractableTo| . RETRACT)
   (|RightModule| . RMODULE)
   (|Ring| . RING)
   (|Rng| . RNG)
   (|SegmentCategory| . SEGCAT)
   (|SegmentExpansionCategory| . SEGXCAT)
   (|SemiGroup| . SGROUP)
   (|SetAggregate| . SETAGG)
   (|SetCategory| . SETCAT)
   (|SetCategoryWithDegree| . SETCATD)
   (|SExpressionCategory| . SEXCAT)
   (|SpecialFunctionCategory| . SPFCAT)
   (|SquareFreeNormalizedTriangularSetCategory| . SNTSCAT)
   (|SquareFreeRegularTriangularSetCategory| . SFRTCAT)
   (|SquareMatrixCategory| . SMATCAT)
   (|StackAggregate| . SKAGG)
   (|StepThrough| . STEP)
   (|StreamAggregate| . STAGG)
   (|StringAggregate| . SRAGG)
   (|StringCategory| . STRICAT)
   (|StructuralConstantsPackage| . SCPKG)
   (|TableAggregate| . TBAGG)
   (|ThreeSpaceCategory| . SPACEC)
   (|TranscendentalFunctionCategory| . TRANFUN)
   (|TriangularSetCategory| . TSETCAT)
   (|TrigonometricFunctionCategory| . TRIGCAT)
   (|TwoDimensionalArrayCategory| . ARR2CAT)
   (|Type| . TYPE)
   (|UnaryRecursiveAggregate| . URAGG)
   (|UniqueFactorizationDomain| . UFD)
   (|UnivariateLaurentSeriesCategory| . ULSCAT)
   (|UnivariateLaurentSeriesConstructorCategory| . ULSCCAT)
   (|UnivariatePolynomialCategory| . UPOLYC)
   (|UnivariatePowerSeriesCategory| . UPSCAT)
   (|UnivariatePuiseuxSeriesCategory| . UPXSCAT)
   (|UnivariatePuiseuxSeriesConstructorCategory| . UPXSCCA)
   (|UnivariateSkewPolynomialCategory| . OREPCAT)
   (|UnivariateTaylorSeriesCategory| . UTSCAT)
   (|VectorCategory| . VECTCAT)
   (|VectorSpace| . VSPACE)
   (|XAlgebra| . XALG)
   (|XFreeAlgebra| . XFALG)
   (|XPolynomialsCat| . XPOLYC)
   (|ZeroDimensionalSolvePackage| . ZDSOLVE))
 (|Hidden| 
   (|AlgebraicFunction| . AF)
   (|AlgebraicFunctionField| . ALGFF)
   (|AlgebraicHermiteIntegration| . INTHERAL)
   (|AlgebraicIntegrate| . INTALG)
   (|AlgebraicIntegration| . INTAF)
   (|AnonymousFunction| . ANON)
   (|AntiSymm| . ANTISYM)
   (|ApplyRules| . APPRULE)
   (|ApplyUnivariateSkewPolynomial| . APPLYORE)
   (|ArrayStack| . ASTACK)
   (|AssociatedEquations| . ASSOCEQ)
   (|AssociationList| . ALIST)
   (|Automorphism| . AUTOMOR)
   (|BalancedFactorisation| . BALFACT)
   (|BalancedPAdicInteger| . BPADIC)
   (|BalancedPAdicRational| . BPADICRT)
   (|BezoutMatrix| . BEZOUT)
   (|BoundIntegerRoots| . BOUNDZRO)
   (|BrillhartTests| . BRILL)
   (|ChangeOfVariable| . CHVAR)
   (|CharacteristicPolynomialInMonogenicalAlgebra| . CPIMA)
   (|ChineseRemainderToolsForIntegralBases| . IBACHIN)
   (|CoerceVectorMatrixPackage| . CVMP)
   (|CombinatorialFunction| . COMBF)
   (|CommonOperators| . COMMONOP)
   (|CommuteUnivariatePolynomialCategory| . COMMUPC)
   (|ComplexIntegerSolveLinearPolynomialEquation| . CINTSLPE)
   (|ComplexPattern| . COMPLPAT)
   (|ComplexPatternMatch| . CPMATCH)
   (|ComplexRootFindingPackage| . CRFP)
   (|ConstantLODE| . ODECONST)
   (|CyclicStreamTools| . CSTTOOLS)
   (|CyclotomicPolynomialPackage| . CYCLOTOM)
   (|DefiniteIntegrationTools| . DFINTTLS)
   (|DegreeReductionPackage| . DEGRED)
   (|DeRhamComplex| . DERHAM)
   (|DifferentialSparseMultivariatePolynomial| . DSMP)
   (|DirectProduct| . DIRPROD)
   (|DirectProductMatrixModule| . DPMM)
   (|DirectProductModule| . DPMO)
   (|DiscreteLogarithmPackage| . DLP)
   (|DistributedMultivariatePolynomial| . DMP)
   (|DoubleResultantPackage| . DBLRESP)
   (|DrawOptionFunctions0| . DROPT0)
   (|DrawOptionFunctions1| . DROPT1)
   (|ElementaryFunction| . EF)
   (|ElementaryFunctionsUnivariateLaurentSeries| . EFULS)
   (|ElementaryFunctionsUnivariatePuiseuxSeries| . EFUPXS)
   (|ElementaryIntegration| . INTEF)
   (|ElementaryRischDE| . RDEEF)
   (|ElementaryRischDESystem| . RDEEFS)
   (|EllipticFunctionsUnivariateTaylorSeries| . ELFUTS)
   (|EqTable| . EQTBL)
   (|EuclideanModularRing| . EMR)
   (|EvaluateCycleIndicators| . EVALCYC)
   (|ExponentialExpansion| . EXPEXPAN)
   (|ExponentialOfUnivariatePuiseuxSeries| . EXPUPXS)
   (|ExpressionSpaceFunctions1| . ES1)
   (|ExpressionTubePlot| . EXPRTUBE)
   (|ExtAlgBasis| . EAB)
   (|FactoredFunctions| . FACTFUNC)
   (|FactoredFunctionUtilities| . FRUTIL)
   (|FactoringUtilities| . FACUTIL)
   (|FGLMIfCanPackage| . FGLMICPK)
   (|FindOrderFinite| . FORDER)
   (|FiniteDivisor| . FDIV)
   (|FiniteFieldCyclicGroupExtension| . FFCGX)
   (|FiniteFieldCyclicGroupExtensionByPolynomial| . FFCGP)
   (|FiniteFieldExtension| . FFX)
   (|FiniteFieldExtensionByPolynomial| . FFP)
   (|FiniteFieldFunctions| . FFF)
   (|FiniteFieldNormalBasisExtension| . FFNBX)
   (|FiniteFieldNormalBasisExtensionByPolynomial| . FFNBP)
   (|FiniteFieldPolynomialPackage| . FFPOLY)
   (|FiniteFieldSolveLinearPolynomialEquation| . FFSLPE)
   (|FormalFraction| . FORMAL)
   (|FourierComponent| . FCOMP)
   (|FractionalIdeal| . FRIDEAL)
   (|FramedModule| . FRMOD)
   (|FreeAbelianGroup| . FAGROUP)
   (|FreeAbelianMonoid| . FAMONOID)
   (|FreeGroup| . FGROUP)
   (|FreeModule| . FM)
   (|FreeModule1| . FM1)
   (|FreeMonoid| . FMONOID)
   (|FunctionalSpecialFunction| . FSPECF)
   (|FunctionCalled| . FUNCTION)
   (|FunctionFieldIntegralBasis| . FFINTBAS)
   (|FunctionSpaceReduce| . FSRED)
   (|FunctionSpaceToUnivariatePowerSeries| . FS2UPS)
   (|FunctionSpaceToExponentialExpansion| . FS2EXPXP)
   (|FunctionSpaceUnivariatePolynomialFactor| . FSUPFACT)
   (|GaloisGroupFactorizationUtilities| . GALFACTU)
   (|GaloisGroupFactorizer| . GALFACT)
   (|GaloisGroupPolynomialUtilities| . GALPOLYU)
   (|GaloisGroupUtilities| . GALUTIL)
   (|GeneralHenselPackage| . GHENSEL)
   (|GeneralDistributedMultivariatePolynomial| . GDMP)
   (|GeneralPolynomialGcdPackage| . GENPGCD)
   (|GeneralSparseTable| . GSTBL)
   (|GenericNonAssociativeAlgebra| . GCNAALG)
   (|GenExEuclid| . GENEEZ)
   (|GeneralizedMultivariateFactorize| . GENMFACT)
   (|GeneralModulePolynomial| . GMODPOL)
   (|GeneralPolynomialSet| . GPOLSET)
   (|GeneralTriangularSet| . GTSET)
   (|GenUFactorize| . GENUFACT)
   (|GenusZeroIntegration| . INTG0)
   (|GosperSummationMethod| . GOSPER)
   (|GraphImage| . GRIMAGE)
   (|GrayCode| . GRAY)
   (|GroebnerInternalPackage| . GBINTERN)
   (|GroebnerSolve| . GROEBSOL)
   (|HashTable| . HASHTBL)
   (|Heap| . HEAP)
   (|HeuGcd| . HEUGCD)
   (|HomogeneousDistributedMultivariatePolynomial| . HDMP)
   (|HyperellipticFiniteDivisor| . HELLFDIV)
   (|IncrementingMaps| . INCRMAPS)
   (|IndexedBits| . IBITS)
   (|IndexedDirectProductAbelianGroup| . IDPAG)
   (|IndexedDirectProductAbelianMonoid| . IDPAM)
   (|IndexedDirectProductObject| . IDPO)
   (|IndexedDirectProductOrderedAbelianMonoid| . IDPOAM)
   (|IndexedDirectProductOrderedAbelianMonoidSup| . IDPOAMS)
   (|IndexedExponents| . INDE)
   (|IndexedFlexibleArray| . IFARRAY)
   (|IndexedList| . ILIST)
   (|IndexedMatrix| . IMATRIX)
   (|IndexedOneDimensionalArray| . IARRAY1)
   (|IndexedString| . ISTRING)
   (|IndexedTwoDimensionalArray| . IARRAY2)
   (|IndexedVector| . IVECTOR)
   (|InnerAlgFactor| . IALGFACT)
   (|InnerAlgebraicNumber| . IAN)
   (|InnerCommonDenominator| . ICDEN)
   (|InnerFiniteField| . IFF)
   (|InnerFreeAbelianMonoid| . IFAMON)
   (|InnerIndexedTwoDimensionalArray| . IIARRAY2)
   (|InnerMatrixLinearAlgebraFunctions| . IMATLIN)
   (|InnerMatrixQuotientFieldFunctions| . IMATQF)
   (|InnerModularGcd| . INMODGCD)
   (|InnerMultFact| . INNMFACT)
   (|InnerNormalBasisFieldFunctions| . INBFF)
   (|InnerNumericEigenPackage| . INEP)
   (|InnerNumericFloatSolvePackage| . INFSP)
   (|InnerPAdicInteger| . IPADIC)
   (|InnerPolySign| . INPSIGN)
   (|InnerPolySum| . ISUMP)
   (|InnerPrimeField| . IPF)
   (|InnerSparseUnivariatePowerSeries| . ISUPS)
   (|InnerTable| . INTABL)
   (|InnerTaylorSeries| . ITAYLOR)
   (|InnerTrigonometricManipulations| . ITRIGMNP)
   (|InputForm| . INFORM)
   (|InputFormFunctions1| . INFORM1)
   (|IntegerBits| . INTBIT)
   (|IntegerFactorizationPackage| . INTFACT)
   (|IntegerMod| . ZMOD)
   (|IntegerSolveLinearPolynomialEquation| . INTSLPE)
   (|IntegralBasisPolynomialTools| . IBPTOOLS)
   (|IntegralBasisTools| . IBATOOL)
   (|IntegrationResult| . IR)
   (|IntegrationTools| . INTTOOLS)
   (|InternalPrintPackage| . IPRNTPK)
   (|InternalRationalUnivariateRepresentationPackage| . IRURPK)
   (|IrredPolyOverFiniteField| . IRREDFFX)
   (|Kernel| . KERNEL)
   (|Kovacic| . KOVACIC)
   (|LaurentPolynomial| . LAUPOL)
   (|LeadingCoefDetermination| . LEADCDET)
   (|LexTriangularPackage| . LEXTRIPK)
   (|LieExponentials| . LEXP)
   (|LiePolynomial| . LPOLY)
   (|LinearDependence| . LINDEP)
   (|LinearOrdinaryDifferentialOperatorFactorizer| . LODOF)
   (|LinearOrdinaryDifferentialOperator1| . LODO1)
   (|LinearOrdinaryDifferentialOperator2| . LODO2)
   (|LinearOrdinaryDifferentialOperatorsOps| . LODOOPS)
   (|LinearPolynomialEquationByFractions| . LPEFRAC)
   (|LinGroebnerPackage| . LGROBP)
   (|LiouvillianFunction| . LF)
   (|ListMonoidOps| . LMOPS)
   (|ListMultiDictionary| . LMDICT)
   (|LocalAlgebra| . LA)
   (|Localize| . LO)
   (|LyndonWord| . LWORD)
   (|Magma| . MAGMA)
   (|MakeBinaryCompiledFunction| . MKBCFUNC)
   (|MakeCachableSet| . MKCHSET)
   (|MakeUnaryCompiledFunction| . MKUCFUNC)
   (|MappingPackageInternalHacks1| . MAPHACK1)
   (|MappingPackageInternalHacks2| . MAPHACK2)
   (|MappingPackageInternalHacks3| . MAPHACK3)
   (|MeshCreationRoutinesForThreeDimensions| . MESH)
   (|ModMonic| . MODMON)
   (|ModularField| . MODFIELD)
   (|ModularHermitianRowReduction| . MHROWRED)
   (|ModularRing| . MODRING)
   (|ModuleMonomial| . MODMONOM)
   (|MoebiusTransform| . MOEBIUS)
   (|MonoidRing| . MRING)
   (|MonomialExtensionTools| . MONOTOOL)
   (|MPolyCatPolyFactorizer| . MPCPF)
   (|MPolyCatFunctions3| . MPC3)
   (|MRationalFactorize| . MRATFAC)
   (|MultipleMap| . MMAP)
   (|MultivariateLifting| . MLIFT)
   (|MultivariateSquareFree| . MULTSQFR)
   (|HomogeneousDirectProduct| . HDP)
   (|NewSparseMultivariatePolynomial| . NSMP)
   (|NewSparseUnivariatePolynomial| . NSUP)
   (|NewSparseUnivariatePolynomialFunctions2| . NSUP2)
   (|NonCommutativeOperatorDivision| . NCODIV)
   (|NewtonInterpolation| . NEWTON)
   (|None| . NONE)
   (|NonLinearFirstOrderODESolver| . NODE1)
   (|NonLinearSolvePackage| . NLINSOL)
   (|NormRetractPackage| . NORMRETR)
   (|NPCoef| . NPCOEF)
   (|NumberFormats| . NUMFMT)
   (|NumberFieldIntegralBasis| . NFINTBAS)
   (|NumericTubePlot| . NUMTUBE)
   (|ODEIntegration| . ODEINT)
   (|ODETools| . ODETOOLS)
   (|Operator| . OP)
   (|OppositeMonogenicLinearOperator| . OMLO)
   (|OrderedDirectProduct| . ODP)
   (|OrderedFreeMonoid| . OFMONOID)
   (|OrderedVariableList| . OVAR)
   (|OrderingFunctions| . ORDFUNS)
   (|OrderlyDifferentialPolynomial| . ODPOL)
   (|OrderlyDifferentialVariable| . ODVAR)
   (|OrdinaryWeightedPolynomials| . OWP)
   (|OutputForm| . OUTFORM)
   (|PadeApproximants| . PADE)
   (|PAdicInteger| . PADIC)
   (|PAdicRational| . PADICRAT)
   (|PAdicRationalConstructor| . PADICRC)
   (|PAdicWildFunctionFieldIntegralBasis| . PWFFINTB)
   (|ParadoxicalCombinatorsForStreams| . YSTREAM)
   (|ParametricLinearEquations| . PLEQN)
   (|PartialFractionPackage| . PFRPAC)
   (|Partition| . PRTITION)
   (|Pattern| . PATTERN)
   (|PatternFunctions1| . PATTERN1)
   (|PatternMatchFunctionSpace| . PMFS)
   (|PatternMatchIntegerNumberSystem| . PMINS)
   (|PatternMatchIntegration| . INTPM)
   (|PatternMatchKernel| . PMKERNEL)
   (|PatternMatchListAggregate| . PMLSAGG)
   (|PatternMatchListResult| . PATLRES)
   (|PatternMatchPolynomialCategory| . PMPLCAT)
   (|PatternMatchPushDown| . PMDOWN)
   (|PatternMatchQuotientFieldCategory| . PMQFCAT)
   (|PatternMatchResult| . PATRES)
   (|PatternMatchSymbol| . PMSYM)
   (|PatternMatchTools| . PMTOOLS)
   (|PlaneAlgebraicCurvePlot| . ACPLOT)
   (|Plot| . PLOT)
   (|PlotFunctions1| . PLOT1)
   (|PlotTools| . PLOTTOOL)
   (|Plot3D| . PLOT3D)
   (|PoincareBirkhoffWittLyndonBasis| . PBWLB)
   (|Point| . POINT)
   (|PointsOfFiniteOrder| . PFO)
   (|PointsOfFiniteOrderRational| . PFOQ)
   (|PointsOfFiniteOrderTools| . PFOTOOLS)
   (|PointPackage| . PTPACK)
   (|PolToPol| . POLTOPOL)
   (|PolynomialCategoryLifting| . POLYLIFT)
   (|PolynomialCategoryQuotientFunctions| . POLYCATQ)
   (|PolynomialFactorizationByRecursion| . PFBR)
   (|PolynomialFactorizationByRecursionUnivariate| . PFBRU)
   (|PolynomialGcdPackage| . PGCD)
   (|PolynomialInterpolation| . PINTERP)
   (|PolynomialInterpolationAlgorithms| . PINTERPA)
   (|PolynomialNumberTheoryFunctions| . PNTHEORY)
   (|PolynomialRing| . PR)
   (|PolynomialRoots| . POLYROOT)
   (|PolynomialSetUtilitiesPackage| . PSETPK)
   (|PolynomialSolveByFormulas| . SOLVEFOR)
   (|PolynomialSquareFree| . PSQFR)
   (|PrecomputedAssociatedEquations| . PREASSOC)
   (|PrimitiveArray| . PRIMARR)
   (|PrimitiveElement| . PRIMELT)
   (|PrimitiveRatDE| . ODEPRIM)
   (|PrimitiveRatRicDE| . ODEPRRIC)
   (|Product| . PRODUCT)
   (|PseudoRemainderSequence| . PRS)
   (|PseudoLinearNormalForm| . PSEUDLIN)
   (|PureAlgebraicIntegration| . INTPAF)
   (|PureAlgebraicLODE| . ODEPAL)
   (|PushVariables| . PUSHVAR)
   (|QuasiAlgebraicSet| . QALGSET)
   (|QuasiAlgebraicSet2| . QALGSET2)
   (|RadicalFunctionField| . RADFF)
   (|RandomDistributions| . RDIST)
   (|RandomFloatDistributions| . RFDIST)
   (|RandomIntegerDistributions| . RIDIST)
   (|RationalFactorize| . RATFACT)
   (|RationalIntegration| . INTRAT)
   (|RationalInterpolation| . RINTERP)
   (|RationalLODE| . ODERAT)
   (|RationalRicDE| . ODERTRIC)
   (|RationalUnivariateRepresentationPackage| . RURPK)
   (|RealSolvePackage| . REALSOLV)
   (|RectangularMatrix| . RMATRIX)
   (|ReducedDivisor| . RDIV)
   (|ReduceLODE| . ODERED)
   (|ReductionOfOrder| . REDORDER)
   (|Reference| . REF)
   (|RepeatedDoubling| . REPDB)
   (|RepeatedSquaring| . REPSQ)
   (|ResidueRing| . RESRING)
   (|RetractSolvePackage| . RETSOL)
   (|RuleCalled| . RULECOLD)
   (|SetOfMIntegersInOneToN| . SETMN)
   (|SExpression| . SEX)
   (|SExpressionOf| . SEXOF)
   (|SequentialDifferentialPolynomial| . SDPOL)
   (|SequentialDifferentialVariable| . SDVAR)
   (|SimpleAlgebraicExtension| . SAE)
   (|SingletonAsOrderedSet| . SAOS)
   (|SortedCache| . SCACHE)
   (|SortPackage| . SORTPAK)
   (|SparseMultivariatePolynomial| . SMP)
   (|SparseMultivariateTaylorSeries| . SMTS)
   (|SparseTable| . STBL)
   (|SparseUnivariatePolynomial| . SUP)
   (|SparseUnivariateSkewPolynomial| . ORESUP)
   (|SparseUnivariateLaurentSeries| . SULS)
   (|SparseUnivariatePuiseuxSeries| . SUPXS)
   (|SparseUnivariateTaylorSeries| . SUTS)
   (|SplitHomogeneousDirectProduct| . SHDP)
   (|SplittingNode| . SPLNODE)
   (|SplittingTree| . SPLTREE)
   (|SquareMatrix| . SQMATRIX)
   (|Stack| . STACK)
   (|StorageEfficientMatrixOperations| . MATSTOR)
   (|StreamInfiniteProduct| . STINPROD)
   (|StreamTaylorSeriesOperations| . STTAYLOR)
   (|StreamTranscendentalFunctions| . STTF)
   (|StreamTranscendentalFunctionsNonCommutative| . STTFNC)
   (|StringTable| . STRTBL)
   (|SubResultantPackage| . SUBRESP)
   (|SubSpace| . SUBSPACE)
   (|SubSpaceComponentProperty| . COMPPROP)
   (|SuchThat| . SUCH)
   (|SupFractionFactorizer| . SUPFRACF)
   (|SymmetricFunctions| . SYMFUNC)
   (|SymmetricPolynomial| . SYMPOLY)
   (|SystemODESolver| . ODESYS)
   (|Table| . TABLE)
   (|TableauxBumpers| . TABLBUMP)
   (|TabulatedComputationPackage| . TBCMPPK)
   (|TangentExpansions| . TANEXP)
   (|ToolsForSign| . TOOLSIGN)
   (|TranscendentalHermiteIntegration| . INTHERTR)
   (|TranscendentalIntegration| . INTTR)
   (|TranscendentalRischDE| . RDETR)
   (|TranscendentalRischDESystem| . RDETRS)
   (|TransSolvePackageService| . SOLVESER)
   (|TriangularMatrixOperations| . TRIMAT)
   (|TubePlot| . TUBE)
   (|TubePlotTools| . TUBETOOL)
   (|Tuple| . TUPLE)
   (|TwoDimensionalArray| . ARRAY2)
   (|TwoDimensionalPlotClipping| . CLIP)
   (|TwoDimensionalViewport| . VIEW2D)
   (|TwoFactorize| . TWOFACT)
   (|UnivariateFactorize| . UNIFACT)
   (|UnivariateLaurentSeries| . ULS)
   (|UnivariateLaurentSeriesConstructor| . ULSCONS)
   (|UnivariatePolynomialDecompositionPackage| . UPDECOMP)
   (|UnivariatePolynomialDivisionPackage| . UPDIVP)
   (|UnivariatePolynomialSquareFree| . UPSQFREE)
   (|UnivariatePuiseuxSeries| . UPXS)
   (|UnivariatePuiseuxSeriesConstructor| . UPXSCONS)
   (|UnivariatePuiseuxSeriesWithExponentialSingularity| . UPXSSING)
   (|UnivariateSkewPolynomial| . OREUP)
   (|UnivariateSkewPolynomialCategoryOps| . OREPCTO)
   (|UnivariateTaylorSeries| . UTS)
   (|UnivariateTaylorSeriesODESolver| . UTSODE)
   (|UserDefinedPartialOrdering| . UDPO)
   (|UTSodetools| . UTSODETL)
   (|Variable| . VARIABLE)
   (|ViewportPackage| . VIEW)
   (|WeierstrassPreparation| . WEIER)
   (|WeightedPolynomials| . WP)
   (|WildFunctionFieldIntegralBasis| . WFFINTBS)
   (|XDistributedPolynomial| . XDPOLY)
   (|XExponentialPackage| . XEXPPKG)
   (|XPBWPolynomial| . XPBWPOLY)
   (|XPolynomial| . XPOLY)
   (|XPolynomialRing| . XPR)
   (|XRecursivePolynomial| . XRPOLY))
 (|defaults| 
   (|AbelianGroup&| . ABELGRP-)
   (|AbelianMonoid&| . ABELMON-)
   (|AbelianMonoidRing&| . AMR-)
   (|AbelianSemiGroup&| . ABELSG-)
   (|Aggregate&| . AGG-)
   (|Algebra&| . ALGEBRA-)
   (|AlgebraicallyClosedField&| . ACF-)
   (|AlgebraicallyClosedFunctionSpace&| . ACFS-)
   (|ArcTrigonometricFunctionCategory&| . ATRIG-)
   (|BagAggregate&| . BGAGG-)
   (|BasicType&| . BASTYPE-)
   (|BinaryRecursiveAggregate&| . BRAGG-)
   (|BinaryTreeCategory&| . BTCAT-)
   (|BitAggregate&| . BTAGG-)
   (|Collection&| . CLAGG-)
   (|ComplexCategory&| . COMPCAT-)
   (|Dictionary&| . DIAGG-)
   (|DictionaryOperations&| . DIOPS-)
   (|DifferentialExtension&| . DIFEXT-)
   (|DifferentialPolynomialCategory&| . DPOLCAT-)
   (|DifferentialRing&| . DIFRING-)
   (|DifferentialVariableCategory&| . DVARCAT-)
   (|DirectProductCategory&| . DIRPCAT-)
   (|DivisionRing&| . DIVRING-)
   (|ElementaryFunctionCategory&| . ELEMFUN-)
   (|EltableAggregate&| . ELTAGG-)
   (|EuclideanDomain&| . EUCDOM-)
   (|Evalable&| . EVALAB-)
   (|ExpressionSpace&| . ES-)
   (|ExtensibleLinearAggregate&| . ELAGG-)
   (|ExtensionField&| . XF-)
   (|Field&| . FIELD-)
   (|FieldOfPrimeCharacteristic&| . FPC-)
   (|FiniteAbelianMonoidRing&| . FAMR-)
   (|FiniteAlgebraicExtensionField&| . FAXF-)
   (|FiniteDivisorCategory&| . FDIVCAT-)
   (|FiniteFieldCategory&| . FFIELDC-)
   (|FiniteLinearAggregate&| . FLAGG-)
   (|FiniteSetAggregate&| . FSAGG-)
   (|FiniteRankAlgebra&| . FINRALG-)
   (|FiniteRankNonAssociativeAlgebra&| . FINAALG-)
   (|FloatingPointSystem&| . FPS-)
   (|FramedAlgebra&| . FRAMALG-)
   (|FramedNonAssociativeAlgebra&| . FRNAALG-)
   (|FullyEvalableOver&| . FEVALAB-)
   (|FullyLinearlyExplicitRingOver&| . FLINEXP-)
   (|FullyRetractableTo&| . FRETRCT-)
   (|FunctionFieldCategory&| . FFCAT-)
   (|FunctionSpace&| . FS-)
   (|GcdDomain&| . GCDDOM-)
   (|GradedAlgebra&| . GRALG-)
   (|GradedModule&| . GRMOD-)
   (|Group&| . GROUP-)
   (|HomogeneousAggregate&| . HOAGG-)
   (|HyperbolicFunctionCategory&| . HYPCAT-)
   (|IndexedAggregate&| . IXAGG-)
   (|InnerEvalable&| . IEVALAB-)
   (|IntegerNumberSystem&| . INS-)
   (|IntegralDomain&| . INTDOM-)
   (|KeyedDictionary&| . KDAGG-)
   (|LazyStreamAggregate&| . LZSTAGG-)
   (|LeftAlgebra&| . LALG-)
   (|LieAlgebra&| . LIECAT-)
   (|LinearAggregate&| . LNAGG-)
   (|ListAggregate&| . LSAGG-)
   (|Logic&| . LOGIC-)
   (|LinearOrdinaryDifferentialOperatorCategory&| . LODOCAT-)
   (|MatrixCategory&| . MATCAT-)
   (|Module&| . MODULE-)
   (|Monad&| . MONAD-)
   (|MonadWithUnit&| . MONADWU-)
   (|Monoid&| . MONOID-)
   (|MonogenicAlgebra&| . MONOGEN-)
   (|NonAssociativeAlgebra&| . NAALG-)
   (|NonAssociativeRing&| . NASRING-)
   (|NonAssociativeRng&| . NARNG-)
   (|OctonionCategory&| . OC-)
   (|OneDimensionalArrayAggregate&| . A1AGG-)
   (|OrderedRing&| . ORDRING-)
   (|OrderedSet&| . ORDSET-)
   (|PartialDifferentialRing&| . PDRING-)
   (|PolynomialCategory&| . POLYCAT-)
   (|PolynomialFactorizationExplicit&| . PFECAT-)
   (|PolynomialSetCategory&| . PSETCAT-)
   (|PowerSeriesCategory&| . PSCAT-)
   (|QuaternionCategory&| . QUATCAT-)
   (|QuotientFieldCategory&| . QFCAT-)
   (|RadicalCategory&| . RADCAT-)
   (|RealClosedField&| . RCFIELD-)
   (|RealNumberSystem&| . RNS-)
   (|RealRootCharacterizationCategory&| . RRCC-)
   (|RectangularMatrixCategory&| . RMATCAT-)
   (|RecursiveAggregate&| . RCAGG-)
   (|RecursivePolynomialCategory&| . RPOLCAT-)
   (|RegularTriangularSetCategory&| . RSETCAT-)
   (|RetractableTo&| . RETRACT-)
   (|Ring&| . RING-)
   (|SemiGroup&| . SGROUP-)
   (|SetAggregate&| . SETAGG-)
   (|SetCategory&| . SETCAT-)
   (|SquareMatrixCategory&| . SMATCAT-)
   (|StreamAggregate&| . STAGG-)
   (|StringAggregate&| . SRAGG-)
   (|TableAggregate&| . TBAGG-)
   (|TranscendentalFunctionCategory&| . TRANFUN-)
   (|TriangularSetCategory&| . TSETCAT-)
   (|TrigonometricFunctionCategory&| . TRIGCAT-)
   (|TwoDimensionalArrayCategory&| . ARR2CAT-)
   (|UnaryRecursiveAggregate&| . URAGG-)
   (|UniqueFactorizationDomain&| . UFD-)
   (|UnivariateLaurentSeriesConstructorCategory&| . ULSCCAT-)
   (|UnivariatePolynomialCategory&| . UPOLYC-)
   (|UnivariatePowerSeriesCategory&| . UPSCAT-)
   (|UnivariatePuiseuxSeriesConstructorCategory&| . UPXSCCA-)
   (|UnivariateSkewPolynomialCategory&| . OREPCAT-)
   (|UnivariateTaylorSeriesCategory&| . UTSCAT-)
   (|VectorCategory&| . VECTCAT-)
   (|VectorSpace&| . VSPACE-))))

@

\defdollar{localExposureDataDefault}
<<initvars>>=
(defvar |$localExposureDataDefault|
  (vector
    ;;These groups will be exposed 
   (list '|basic| '|categories| '|naglink| '|anna|)
    ;;These constructors will be explicitly exposed
   (list )
    ;;These constructors will be explicitly hidden
   (list )))

@

\defdollar{localExposureData}
<<initvars>>=
(defvar |$localExposureData|  (copy-seq |$localExposureDataDefault|))

@

\section{Functions}
\defunsec{setExpose}{The top level set expose command handler}
\calls{setExpose}{displayExposedGroups}
\calls{setExpose}{sayMSG}
\calls{setExpose}{displayExposedConstructors}
\calls{setExpose}{displayHiddenConstructors}
\calls{setExpose}{sayKeyedMsg}
\calls{setExpose}{namestring}
\calls{setExpose}{pathname}
\calls{setExpose}{pairp}
\calls{setExpose}{qcar}
\calls{setExpose}{qcdr}
\calls{setExpose}{selectOptionLC}
\calls{setExpose}{setExposeAdd}
\calls{setExpose}{setExposeDrop}
\calls{setExpose}{setExpose}
<<defun setExpose>>=
(defun |setExpose| (arg)
 "The top level set expose command handler"
 (let (fnargs fn)
   (cond
    ((eq arg '|%initialize%|))
    ((eq arg '|%display%|) "...")
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|displayExposedGroups|)
     (|sayMSG| " ")
     (|displayExposedConstructors|)
     (|sayMSG| " ")
     (|displayHiddenConstructors|)
     (|sayMSG| " "))
    ((and (pairp arg)
          (progn (setq fn (qcar arg)) (setq fnargs (qcdr arg)) t)
          (setq fn (|selectOptionLC| fn '(|add| |drop|) nil)))
     (cond
      ((eq fn '|add|) (|setExposeAdd| fnargs))
      ((eq fn '|drop|) (|setExposeDrop| fnargs))
      (t nil)))
    (t (|setExpose| nil)))))

@

\defunsec{setExposeAdd}{The top level set expose add command handler}
\calls{setExposeAdd}{centerAndHighlight}
\calls{setExposeAdd}{specialChar}
\calls{setExposeAdd}{displayExposedGroups}
\calls{setExposeAdd}{sayMSG}
\calls{setExposeAdd}{displayExposedConstructors}
\calls{setExposeAdd}{sayKeyedMsg}
\calls{setExposeAdd}{pairp}
\calls{setExposeAdd}{qcar}
\calls{setExposeAdd}{qcdr}
\calls{setExposeAdd}{selectOptionLC}
\calls{setExposeAdd}{setExposeAddGroup}
\calls{setExposeAdd}{setExposeAddConstr}
\calls{setExposeAdd}{setExposeAdd}
\usesdollar{setExposeAdd}{linelength}
<<defun setExposeAdd>>=
(defun |setExposeAdd| (arg)
 "The top level set expose add command handler"
 (declare (special $linelength))
 (let (fnargs fn)
   (cond
    ((null arg)
     (|centerAndHighlight| 
      '|The add Option| $linelength (|specialChar| '|hbar|))
     (|displayExposedGroups|)
     (|sayMSG| " ")
     (|displayExposedConstructors|)
     (|sayMSG| " ")
     (|sayKeyedMsg| 's2iz0049e nil))
    ((and (pairp arg) 
          (progn (setq fn (qcar arg)) (setq fnargs (qcdr arg)) t)
          (setq fn (|selectOptionLC| fn '(|group| |constructor|) nil)))
     (cond
      ((eq fn '|group|) (|setExposeAddGroup| fnargs))
      ((eq fn '|constructor|) (|setExposeAddConstr| fnargs))
      (t nil)))
    (t (|setExposeAdd| nil))))) 

@

\defunsec{setExposeAddGroup}{Expose a group}
Note that \verb|$localExposureData| is a vector of lists.
It consists of [exposed groups,exposed constructors,hidden constructors]
\calls{setExposeAddGroup}{object2String}
\calls{setExposeAddGroup}{pairp}
\calls{setExposeAddGroup}{qcar}
\calls{setExposeAddGroup}{setelt}
\calls{setExposeAddGroup}{displayExposedGroups}
\calls{setExposeAddGroup}{sayMSG}
\calls{setExposeAddGroup}{displayExposedConstructors}
\calls{setExposeAddGroup}{displayHiddenConstructors}
\calls{setExposeAddGroup}{clearClams}
\calls{setExposeAddGroup}{getalist}
\calls{setExposeAddGroup}{sayKeyedMsg}
\calls{setExposeAddGroup}{member}
\calls{setExposeAddGroup}{msort}
\calls{setExposeAddGroup}{centerAndHighlight}
\calls{setExposeAddGroup}{specialChar}
\calls{setExposeAddGroup}{namestring}
\calls{setExposeAddGroup}{pathname}
\calls{setExposeAddGroup}{sayAsManyPerLineAsPossible}
\usesdollar{setExposeAddGroup}{globalExposureGroupAlist}
\usesdollar{setExposeAddGroup}{localExposureData}
\usesdollar{setExposeAddGroup}{interpreterFrameName}
\usesdollar{setExposeAddGroup}{linelength}
<<defun setExposeAddGroup>>=
(defun |setExposeAddGroup| (arg)
 "Expose a group"
 (declare (special |$globalExposureGroupAlist| |$localExposureData|
                   |$interpreterFrameName| $linelength))
 (if (null arg)
  (progn
   (|centerAndHighlight| 
    '|The group Option| $linelength (|specialChar| '|hbar|))
   (|displayExposedGroups|)
   (|sayMSG| " ")
   (|sayAsManyPerLineAsPossible|
    (mapcar #'(lambda (x) (|object2String| (first x))) 
      |$globalExposureGroupAlist|)))
  (dolist (x arg)
    (when (pairp x) (setq x (qcar x)))
    (cond
     ((eq x '|all|)
      (setelt |$localExposureData| 0
        (mapcar #'first |$globalExposureGroupAlist|))
      (setelt |$localExposureData| 1 nil)
      (setelt |$localExposureData| 2 nil)
      (|displayExposedGroups|)
      (|sayMSG| " ")
      (|displayExposedConstructors|)
      (|sayMSG| " ")
      (|displayHiddenConstructors|)
      (|clearClams|))
     ((null (getalist |$globalExposureGroupAlist| x))
      (|sayKeyedMsg| 's2iz0049h (cons x nil)))
     ((|member| x (elt |$localExposureData| 0))
      (|sayKeyedMsg| 's2iz0049i (list x |$interpreterFrameName|)))
     (t
      (setelt |$localExposureData| 0
        (msort (cons x (elt |$localExposureData| 0))))
      (|sayKeyedMsg| 's2iz0049r (list x |$interpreterFrameName|))
      (|clearClams|))))))

@

\defunsec{setExposeAddConstr}{The top level set expose add constructor handler}
\calls{setExposeAddConstr}{unabbrev}
\calls{setExposeAddConstr}{pairp}
\calls{setExposeAddConstr}{qcar}
\calls{setExposeAddConstr}{getdatabase}
\calls{setExposeAddConstr}{sayKeyedMsg}
\calls{setExposeAddConstr}{member}
\calls{setExposeAddConstr}{setelt}
\calls{setExposeAddConstr}{delete}
\calls{setExposeAddConstr}{msort}
\calls{setExposeAddConstr}{clearClams}
\calls{setExposeAddConstr}{centerAndHighlight}
\calls{setExposeAddConstr}{specialChar}
\calls{setExposeAddConstr}{displayExposedConstructors}
\usesdollar{setExposeAddConstr}{linelength}
\usesdollar{setExposeAddConstr}{localExposureData}
\usesdollar{setExposeAddConstr}{interpreterFrameName}
<<defun setExposeAddConstr>>=
(defun |setExposeAddConstr| (arg)
 "The top level set expose add constructor handler"
 (declare (special $linelength |$localExposureData| |$interpreterFrameName|))
 (if (null arg)
   (progn
    (|centerAndHighlight| 
     '|The constructor Option| $linelength (|specialChar| '|hbar|))
    (|displayExposedConstructors|))
   (dolist (x arg)
     (setq x (|unabbrev| x))
     (when (pairp x) (setq x (qcar x)))
     (cond
      ((null (getdatabase x 'constructorkind))
       (|sayKeyedMsg| 's2iz0049j (list x)))
      ((|member| x (elt |$localExposureData| 1))
       (|sayKeyedMsg| 's2iz0049k (list x |$interpreterFrameName| )))
      (t
       (when (|member| x (elt |$localExposureData| 2))
         (setelt |$localExposureData| 2
          (|delete| x (elt |$localExposureData| 2))))
       (setelt |$localExposureData| 1
        (msort (cons x (elt |$localExposureData| 1))))
       (|clearClams|)
       (|sayKeyedMsg| 's2iz0049p (list x |$interpreterFrameName| )))))))

@

\defunsec{setExposeDrop}{The top level set expose drop handler}
\calls{setExposeDrop}{centerAndHighlight}
\calls{setExposeDrop}{specialChar}
\calls{setExposeDrop}{displayHiddenConstructors}
\calls{setExposeDrop}{sayMSG}
\calls{setExposeDrop}{sayKeyedMsg}
\calls{setExposeDrop}{pairp}
\calls{setExposeDrop}{qcar}
\calls{setExposeDrop}{qcdr}
\calls{setExposeDrop}{selectOptionLC}
\calls{setExposeDrop}{setExposeDropGroup}
\calls{setExposeDrop}{setExposeDropConstr}
\calls{setExposeDrop}{setExposeDrop}
\usesdollar{setExposeDrop}{linelength}
<<defun setExposeDrop>>=
(defun |setExposeDrop| (arg)
 "The top level set expose drop handler"
 (declare (special $linelength))
 (let (fnargs fn)
   (cond
    ((null arg)
     (|centerAndHighlight|
      '|The drop Option| $linelength (|specialChar| '|hbar|))
     (|displayHiddenConstructors|)
     (|sayMSG| " ")
     (|sayKeyedMsg| 's2iz0049f nil))
    ((and (pairp arg) 
          (progn (setq fn (qcar arg)) (setq fnargs (qcdr arg)) t)
          (setq fn (|selectOptionLC| fn '(|group| |constructor|) nil)))
     (cond
      ((eq fn '|group|) (|setExposeDropGroup| fnargs))
      ((eq fn '|constructor|) (|setExposeDropConstr| fnargs))
      (t nil)))
    (t (|setExposeDrop| nil))))) 

@

\defunsec{setExposeDropGroup}{The top level set expose drop group handler}
\calls{setExposeDropGroup}{pairp}
\calls{setExposeDropGroup}{qcar}
\calls{setExposeDropGroup}{setelt}
\calls{setExposeDropGroup}{displayExposedGroups}
\calls{setExposeDropGroup}{sayMSG}
\calls{setExposeDropGroup}{displayExposedConstructors}
\calls{setExposeDropGroup}{displayHiddenConstructors}
\calls{setExposeDropGroup}{clearClams}
\calls{setExposeDropGroup}{member}
\calls{setExposeDropGroup}{delete}
\calls{setExposeDropGroup}{sayKeyedMsg}
\calls{setExposeDropGroup}{getalist}
\calls{setExposeDropGroup}{centerAndHighlight}
\calls{setExposeDropGroup}{specialChar}
\usesdollar{setExposeDropGroup}{linelength}
\usesdollar{setExposeDropGroup}{localExposureData}
\usesdollar{setExposeDropGroup}{interpreterFrameName}
\usesdollar{setExposeDropGroup}{globalExposureGroupAlist}
<<defun setExposeDropGroup>>=
(defun |setExposeDropGroup| (arg)
 "The top level set expose drop group handler"
 (declare (special $linelength |$localExposureData| |$interpreterFrameName|
                   |$globalExposureGroupAlist|))
 (if (null arg)
  (progn
   (|centerAndHighlight|
     '|The group Option| $linelength (|specialChar| '|hbar|))
   (|sayKeyedMsg| 's2iz0049l nil)
   (|sayMSG| " ")
   (|displayExposedGroups|))
  (dolist (x arg)
    (when (pairp x) (setq x (qcar x)))
    (cond
     ((eq x '|all|)
      (setelt |$localExposureData| 0 nil)
      (setelt |$localExposureData| 1 nil)
      (setelt |$localExposureData| 2 nil)
      (|displayExposedGroups|)
      (|sayMSG| " ")
      (|displayExposedConstructors|)
      (|sayMSG| " ")
      (|displayHiddenConstructors|)
      (|clearClams|))
     ((|member| x (elt |$localExposureData| 0))
      (setelt |$localExposureData| 0
       (|delete| x (elt |$localExposureData| 0)))
      (|clearClams|)
      (|sayKeyedMsg| 's2iz0049s (list x |$interpreterFrameName| )))
     ((getalist |$globalExposureGroupAlist| x)
      (|sayKeyedMsg| 's2iz0049i (list x |$interpreterFrameName| )))
     (t (|sayKeyedMsg| 's2iz0049h (list x )))))))

@
\defunsec{setExposeDropConstr}
{The top level set expose drop constructor handler}
\calls{setExposeDropConstr}{unabbrev}
\calls{setExposeDropConstr}{pairp}
\calls{setExposeDropConstr}{qcar}
\calls{setExposeDropConstr}{getdatabase}
\calls{setExposeDropConstr}{sayKeyedMsg}
\calls{setExposeDropConstr}{member}
\calls{setExposeDropConstr}{setelt}
\calls{setExposeDropConstr}{delete}
\calls{setExposeDropConstr}{msort}
\calls{setExposeDropConstr}{clearClams}
\calls{setExposeDropConstr}{centerAndHighlight}
\calls{setExposeDropConstr}{specialChar}
\calls{setExposeDropConstr}{sayMSG}
\calls{setExposeDropConstr}{displayExposedConstructors}
\calls{setExposeDropConstr}{displayHiddenConstructors}
\usesdollar{setExposeDropConstr}{linelength}
\usesdollar{setExposeDropConstr}{localExposureData}
\usesdollar{setExposeDropConstr}{interpreterFrameName}
<<defun setExposeDropConstr>>=
(defun |setExposeDropConstr| (arg)
 "The top level set expose drop constructor handler"
 (declare (special $linelength |$localExposureData| |$interpreterFrameName|))
 (if (null arg)
  (progn
   (|centerAndHighlight| 
    '|The constructor Option| $linelength (|specialChar| '|hbar|))
   (|sayKeyedMsg| 's2iz0049n nil)
   (|sayMSG| " ")
   (|displayExposedConstructors|)
   (|sayMSG| " ")
   (|displayHiddenConstructors|))
  (dolist (x arg)
    (setq x (|unabbrev| x))
    (when (pairp x) (setq x (qcar x)))
    (cond
     ((null (getdatabase x 'constructorkind))
      (|sayKeyedMsg| 's2iz0049j (list x)))
     ((|member| x (elt |$localExposureData| 2))
      (|sayKeyedMsg| 's2iz0049o (list x |$interpreterFrameName|)))
     (t
      (when (|member| x (elt |$localExposureData| 1))
       (setelt |$localExposureData| 1 
        (|delete| x (elt |$localExposureData| 1))))
      (setelt |$localExposureData| 2
        (msort (cons x (elt |$localExposureData| 2))))
      (|clearClams|)
      (|sayKeyedMsg| 's2iz0049q (list x |$interpreterFrameName|)))))))

@

\defunsec{displayExposedGroups}{Display exposed groups}
\calls{displayExposedGroups}{sayKeyedMsg}
\calls{displayExposedGroups}{centerAndHighlight}
\usesdollar{displayExposedGroups}{interpreterFrameName}
\usesdollar{displayExposedGroups}{localExposureData}
<<defun displayExposedGroups>>=
(defun |displayExposedGroups| ()
 "Display exposed groups"
 (declare (special |$interpreterFrameName| |$localExposureData|))
 (|sayKeyedMsg| 's2iz0049a (list |$interpreterFrameName|))
 (if  (null (elt |$localExposureData| 0))
  (|centerAndHighlight| "there are no exposed groups")
  (dolist (c (elt |$localExposureData| 0))
     (|centerAndHighlight| c))))

@

\defunsec{displayExposedConstructors}{Display exposed constructors}
\calls{displayExposedConstructors}{sayKeyedMsg}
\calls{displayExposedConstructors}{centerAndHighlight}
\usesdollar{displayExposedConstructors}{localExposureData}
<<defun displayExposedConstructors>>=
(defun |displayExposedConstructors| ()
 "Display exposed constructors"
 (declare (special |$localExposureData|))
 (|sayKeyedMsg| 's2iz0049b nil)
 (if  (null (elt |$localExposureData| 1))
  (|centerAndHighlight| "there are no explicitly exposed constructors")
  (dolist (c (elt |$localExposureData| 1))
     (|centerAndHighlight| c))))

@

\defunsec{displayHiddenConstructors}{Display hidden constructors}
\calls{displayHiddenConstructors}{sayKeyedMsg}
\calls{displayHiddenConstructors}{centerAndHighlight}
\usesdollar{displayHiddenConstructors}{localExposureData}
<<defun displayHiddenConstructors>>=
(defun |displayHiddenConstructors| ()
 "Display hidden constructors"
 (declare (special |$localExposureData|))
 (|sayKeyedMsg| 's2iz0049c nil)
 (if (null (elt |$localExposureData| 2))
   (|centerAndHighlight| "there are no explicitly hidden constructors")
   (dolist (c (elt |$localExposureData| 2))
     (|centerAndHighlight| c))))

@
\section{functions}
\begin{verbatim}
             Current Values of  functions  Variables                  

Variable     Description                           Current Value
-----------------------------------------------------------------
cache        number of function results to cache        0 
compile      compile, don't just define function bodies off 
recurrence   specially compile recurrence relations     on 

\end{verbatim}
<<functions>>=
  (|functions|
   "some interpreter function options"
   |interpreter|
   TREE
   |novar|
   (
<<functionscache>>
<<functionscompile>>
<<functionsrecurrence>>
  ))
@
\section{functions cache}
\begin{verbatim}
---------------------- The cache Option -----------------------

 Description: number of function results to cache

 )set functions cache is used to tell AXIOM how many  values 
  computed by interpreter functions should be saved.  This can 
  save quite a bit of time in recursive functions, though one 
  must consider that the cached values will take up (perhaps 
  valuable) room in the workspace.

 The value given  after cache must either be the word all or 
 a positive integer. This may be followed by any number of 
 function names whose cache sizes you wish to so set.  If no 
 functions are given, the default cache  size is set.

 Examples:   )set fun cache all
             )set fun cache 10 f g Legendre

 In general, functions will cache no returned values.
\end{verbatim}
<<functionscache>>=
     (|cache|
      "number of function results to cache"
      |interpreter|
      FUNCTION
      |setFunctionsCache|
      NIL
      |htSetCache|)
@
\section{Variables Used}
\defdollar{cacheAlist}
<<initvars>>=
(defvar |$cacheAlist| nil) 

@

\section{Functions}
\defunsec{setFunctionsCache}{The top level set functions cache handler}
\begin{verbatim}
\calls{setFunctionsCache}{object2String}
\calls{setFunctionsCache}{describeSetFunctionsCache}
\calls{setFunctionsCache}{sayAllCacheCounts}
\calls{setFunctionsCache}{nequal}
\calls{setFunctionsCache}{sayMessage}
\calls{setFunctionsCache}{bright}
\calls{setFunctionsCache}{terminateSystemCommand}
\calls{setFunctionsCache}{countCache}
\usesdollar{setFunctionsCache}{options}
\usesdollar{setFunctionsCache}{cacheCount}
\usesdollar{setFunctionsCache}{cacheAlist}
<<defun setFunctionsCache>>=
(defun |setFunctionsCache| (arg)
 "The top level set functions cache handler"
 (let (|$options| n)
  (declare (special |$options| |$cacheCount| |$cacheAlist|))
  (cond
    ((eq arg '|%initialize%|)
      (setq |$cacheCount| 0)
      (setq |$cacheAlist| nil))
    ((eq arg '|%display%|)
      (if (null |$cacheAlist|)
       (|object2String| |$cacheCount|)
       "..."))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
      (|describeSetFunctionsCache|)
      (terpri)
      (|sayAllCacheCounts|))
    (t
      (setq n (car arg))
      (cond
       ((and (nequal n '|all|) (or (null (integerp n)) (minusp n)))
        (|sayMessage|
         `("Your value of" ,@(|bright| n) "is invalid because ..."))
        (|describeSetFunctionsCache|)
        (|terminateSystemCommand|))
       (t
        (when (cdr arg) (list (cons '|vars| (cdr arg))))
        (|countCache| n)))))))

@

\defunsec{countCache}{Display a particular cache count}
\calls{countCache}{pairp}
\calls{countCache}{qcdr}
\calls{countCache}{qcar}
\calls{countCache}{identp}
\calls{countCache}{sayKeyedMsg}
\calls{countCache}{insertAlist}
\calls{countCache}{internl}
\calls{countCache}{sayCacheCount}
\calls{countCache}{optionError}
\usesdollar{countCache}{options}
\usesdollar{countCache}{cacheAlist}
\usesdollar{countCache}{cacheCount}
<<defun countCache>>=
(defun |countCache| (n)
 "Display a particular cache count"
 (let (tmp1 l cachecountname)
 (declare (special |$options| |$cacheAlist| |$cacheCount|))
 (cond 
  (|$options|
   (cond
    ((and (pairp |$options|)
          (eq (qcdr |$options|) nil)
          (progn 
           (setq tmp1 (qcar |$options|))
           (and (pairp tmp1)
                (eq (qcar tmp1) '|vars|)
                (progn (setq l (qcdr tmp1)) t))))
     (dolist (x l)
       (if (null (identp x))
         (|sayKeyedMsg| 's2if0007 (list x))
         (progn
          (setq |$cacheAlist| (|insertAlist| x n |$cacheAlist|))
          (setq cachecountname (internl x ";COUNT"))
          (set cachecountname n)
          (|sayCacheCount| x n)))))
    (t (|optionError| (caar |$options|) nil))))
  (t
   (|sayCacheCount| nil (setq |$cacheCount| n))))))

@

\defunsec{describeSetFunctionsCache}{Describe the set functions cache}
\calls{describeSetFunctionsCache}{sayBrightly}
<<defun describeSetFunctionsCache>>=
(defun |describeSetFunctionsCache| ()
 "Describe the set functions cache"
 (|sayBrightly| (list
  '|%b| ")set functions cache"
  '|%d| "is used to tell AXIOM how many"
  '|%l| " values computed by interpreter functions should be saved.  This"
  '|%l| " can save quite a bit of time in recursive functions, though one" 
  '|%l| " must consider that the cached values will take up (perhaps"
  '|%l| " valuable) room in the workspace."
  '|%l|
  '|%l| " The value given after"
  '|%b| "cache"
  '|%d| "must either be the word"
  '|%b| "all"
  '|%d| "or a positive integer."
  '|%l| " This may be followed by any number of function names whose cache"
  '|%l| " sizes you wish to so set.  If no functions are given, the default" 
  '|%l| " cache size is set."
  '|%l|
  '|%l|  " Examples:"
  '|%l|  "   )set fun cache all         )set fun cache 10 f g Legendre")))

@

\defunsec{sayAllCacheCounts}{Display all cache counts}
\calls{sayAllCacheCounts}{sayCacheCount}
\calls{sayAllCacheCounts}{nequal}
\usesdollar{sayAllCacheCounts}{cacheCount}
\usesdollar{sayAllCacheCounts}{cacheAlist}
<<defun sayAllCacheCounts>>=
(defun |sayAllCacheCounts| ()
 "Display all cache counts"
 (let (x n)
 (declare (special |$cacheCount| |$cacheAlist|))
   (|sayCacheCount| nil |$cacheCount|)
   (when |$cacheAlist|
     (do ((t0 |$cacheAlist| (cdr t0)) (t1 nil))
         ((or (atom t0)
              (progn (setq t1 (car t0)) nil)
              (progn
               (progn (setq x (car t1)) (setq n (cdr t1)) t1)
               nil)) 
             nil)
       (when (nequal n |$cacheCount|) (|sayCacheCount| x n))))))

@

\defunsec{sayCacheCount}{Describe the cache counts}
\calls{sayCacheCount}{bright}
\calls{sayCacheCount}{linearFormatName}
\calls{sayCacheCount}{sayBrightly}
<<defun sayCacheCount>>=
(defun |sayCacheCount| (fn n)
 "Describe the cache counts"
 (let (prefix phrase)
    (setq prefix
     (cond 
      (fn (cons '|function| (|bright| (|linearFormatName| fn))))
      ((eql n 0) (list '|interpreter functions |))
      (t (list '|In general, interpreter functions |))))
    (cond
     ((eql n 0)
      (cond
       (fn
        (|sayBrightly|
         `("   Caching for " ,prefix "is turned off")))
       (t 
        (|sayBrightly| " In general, functions will cache no returned values."
         ))))
     (t
      (setq phrase
       (cond
        ((eq n '|all|) `(,@(|bright| '|all|) |values.|))
        ((eql n 1) (list '| only the last value.|))
        (t `(| the last| ,@(|bright| n) |values.|))))
      (|sayBrightly| 
       `("   " ,@prefix "will cache" ,@phrase))))))

@

\section{functions compile}
\begin{verbatim}
--------------------- The compile Option ----------------------

 Description: compile, don't just define function bodies

 The compile option may be followed by any one of the following:

 -> on
    off 

 The current setting is indicated.

\end{verbatim}
\defdollar{compileDontDefineFunctions}
<<initvars>>=
(defvar |$compileDontDefineFunctions| t
   "compile, don't just define function bodies")

@
<<functionscompile>>=
     (|compile|
      "compile, don't just define function bodies"
      |interpreter|
      LITERALS
      |$compileDontDefineFunctions|
      (|on| |off|)
      |on|)
@
\section{functions recurrence}
\begin{verbatim}
-------------------- The recurrence Option --------------------

 Description: specially compile recurrence relations

 The recurrence option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{compileRecurrence}
<<initvars>>=
(defvar |$compileRecurrence| t "specially compile recurrence relations")

@
<<functionsrecurrence>>=
     (|recurrence|
      "specially compile recurrence relations"
      |interpreter|
      LITERALS
      |$compileRecurrence|
      (|on| |off|)
      |on|)
@
\section{fortran}
\begin{verbatim}
              Current Values of  fortran  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
ints2floats  where sensible, coerce integers to reals   on 
fortindent   the number of characters indented          6 
fortlength   the number of characters on a line         72 
typedecs     print type and dimension lines             on 
defaulttype  default generic type for FORTRAN object    REAL 
precision    precision of generated FORTRAN objects     double 
intrinsic    whether to use INTRINSIC FORTRAN functions off 
explength    character limit for FORTRAN expressions    1320 
segment      split long FORTRAN expressions             on 
optlevel     FORTRAN optimisation level                 0 
startindex   starting index for FORTRAN arrays          1 
calling      options for external FORTRAN calls         ... 

Variables with current values of ... have further sub-options. 
For example, issue )set calling to see what the options are for 
calling.
For more information, issue )help set .
\end{verbatim}
<<fortran>>=
  (|fortran|
   "view and set options for FORTRAN output"
   |interpreter|
   TREE
   |novar|
    (
<<fortranints2floats>>
<<fortranfortindent>>
<<fortranfortlength>>
<<fortrantypedecs>>
<<fortrandefaulttype>>
<<fortranprecision>>
<<fortranintrinsic>>
<<fortranexplength>>
<<fortransegment>>
<<fortranoptlevel>>
<<fortranstartindex>>
<<fortrancalling>>
  ))
@
\subsection{ints2floats}
\begin{verbatim}
------------------- The ints2floats Option --------------------

 Description: where sensible, coerce integers to reals

 The ints2floats option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{fortInts2Floats}
<<initvars>>=
(defvar |$fortInts2Floats| t "where sensible, coerce integers to reals")

@
<<fortranints2floats>>=
     (|ints2floats|
      "where sensible, coerce integers to reals"
      |interpreter|
      LITERALS
      |$fortInts2Floats|
      (|on| |off|)
      |on|)
@
\subsection{fortindent}
\begin{verbatim}
-------------------- The fortindent Option --------------------

 Description: the number of characters indented

 The fortindent option may be followed by an integer in the range 
 0 to inclusive. The current setting is 6 

\end{verbatim}
\defdollar{fortIndent}
<<initvars>>=
(defvar |$fortIndent| 6 "the number of characters indented")

@
<<fortranfortindent>>=
     (|fortindent|
      "the number of characters indented"
      |interpreter|
      INTEGER
      |$fortIndent|
      (0 NIL)
      6)
@
\subsection{fortlength}
\begin{verbatim}
-------------------- The fortlength Option --------------------

 Description: the number of characters on a line

 The fortlength option may be followed by an integer in the range 
 1 to inclusive. The current setting is 72 

\end{verbatim}
\defdollar{fortLength}
<<initvars>>=
(defvar |$fortLength| 72 "the number of characters on a line")

@
<<fortranfortlength>>=
     (|fortlength|
      "the number of characters on a line"
      |interpreter|
      INTEGER
      |$fortLength|
      (1 NIL)
      72)
@
\subsection{typedecs}
\begin{verbatim}
--------------------- The typedecs Option ---------------------

 Description: print type and dimension lines

 The typedecs option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{printFortranDecs}
<<initvars>>=
(defvar |$printFortranDecs| t "print type and dimension lines")

@
<<fortrantypedecs>>=
     (|typedecs|
      "print type and dimension lines"
      |interpreter|
      LITERALS
      |$printFortranDecs|
      (|on| |off|)
      |on|)
@
\subsection{defaulttype}
\begin{verbatim}
------------------- The defaulttype Option --------------------

 Description: default generic type for FORTRAN object

 The defaulttype option may be followed by any one of the 
 following:

 -> REAL 
    INTEGER
    COMPLEX
    LOGICAL
    CHARACTER

 The current setting is indicated.

\end{verbatim}
\defdollar{defaultFortranType}
<<initvars>>=
(defvar |$defaultFortranType| 'real "default generic type for FORTRAN object")

@
<<fortrandefaulttype>>=
     (|defaulttype|
      "default generic type for FORTRAN object"
      |interpreter|
      LITERALS
      |$defaultFortranType|
      (REAL INTEGER COMPLEX LOGICAL CHARACTER)
      REAL)
@
\subsection{precision}
\begin{verbatim}
-------------------- The precision Option ---------------------

 Description: precision of generated FORTRAN objects

 The precision option may be followed by any one of the 
 following:

    single
 -> double 

 The current setting is indicated.

\end{verbatim}
\defdollar{fortranPrecision}
<<initvars>>=
(defvar |$fortranPrecision| '|double| "precision of generated FORTRAN objects")

@
<<fortranprecision>>=
      (|precision|
      "precision of generated FORTRAN objects"
       |interpreter|
       LITERALS
       |$fortranPrecision|
       (|single| |double|)
       |double|)
@
\subsection{intrinsic}
\begin{verbatim}
-------------------- The intrinsic Option ---------------------

 Description: whether to use INTRINSIC FORTRAN functions

 The intrinsic option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{useIntrinsicFunctions}
<<initvars>>=
(defvar |$useIntrinsicFunctions| nil
   "whether to use INTRINSIC FORTRAN functions")

@
<<fortranintrinsic>>=
      (|intrinsic|
       "whether to use INTRINSIC FORTRAN functions"
       |interpreter|
       LITERALS
       |$useIntrinsicFunctions|
       (|on| |off|)
       |off|)
@
\subsection{explength}
\begin{verbatim}
-------------------- The explength Option ---------------------

 Description: character limit for FORTRAN expressions

 The explength option may be followed by an integer in the range 
 0 to inclusive. The current setting is 1320 

\end{verbatim}
\defdollar{maximumFortranExpressionLength}
<<initvars>>=
(defvar |$maximumFortranExpressionLength| 1320
  "character limit for FORTRAN expressions")

@
<<fortranexplength>>=
      (|explength|
       "character limit for FORTRAN expressions"
       |interpreter|
       INTEGER
       |$maximumFortranExpressionLength|
       (0 NIL)
       1320)
@
\subsection{segment}
\begin{verbatim}
--------------------- The segment Option ----------------------

 Description: split long FORTRAN expressions

 The segment option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{fortranSegment}
<<initvars>>=
(defvar |$fortranSegment| t "split long FORTRAN expressions")

@
<<fortransegment>>=
      (|segment|
       "split long FORTRAN expressions"
       |interpreter|
       LITERALS
       |$fortranSegment|
       (|on| |off|)
       |on|)
@
\subsection{optlevel}
\begin{verbatim}
--------------------- The optlevel Option ---------------------

 Description: FORTRAN optimisation level

 The optlevel option may be followed by an integer in the range 
 0 to 2 inclusive. The current setting is 0 

\end{verbatim}
\defdollar{fortranOptimizationLevel}
<<initvars>>=
(defvar |$fortranOptimizationLevel| 0 "FORTRAN optimisation level")

@
<<fortranoptlevel>>=
      (|optlevel|
       "FORTRAN optimisation level"
       |interpreter|
       INTEGER
       |$fortranOptimizationLevel|
       (0 2)
       0)
@
\subsection{startindex}
\begin{verbatim}
-------------------- The startindex Option --------------------

 Description: starting index for FORTRAN arrays

 The startindex option may be followed by an integer in the range 
 0 to 1 inclusive. The current setting is 1 

\end{verbatim}
\defdollar{fortranArrayStartingIndex}
<<initvars>>=
(defvar |$fortranArrayStartingIndex| 1 "starting index for FORTRAN arrays")

@
<<fortranstartindex>>=
      (|startindex|
       "starting index for FORTRAN arrays"
       |interpreter|
       INTEGER
       |$fortranArrayStartingIndex|
       (0 1)
       1)
@
\subsection{calling}
\begin{verbatim}
              Current Values of  calling  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
tempfile     set location of temporary data files       /tmp/ 
directory    set location of generated FORTRAN files    ./ 
linker       linker arguments (e.g. libraries to search) -lxlf 

\end{verbatim}
<<fortrancalling>>=
      (|calling|
      "options for external FORTRAN calls"
      |interpreter|
      TREE
      |novar|
      (
<<callingtempfile>>
<<callingdirectory>>
<<callinglinker>>
       )
      )
@
\subsubsection{tempfile}
\begin{verbatim}
--------------------- The tempfile Option ---------------------

 Description: set location of temporary data files

 )set fortran calling tempfile  is used to tell AXIOM where
 to place intermediate FORTRAN data files . This must be the 
 name of a valid existing directory to which you have permission 
 to write (including the final slash).

 Syntax:
   )set fortran calling tempfile DIRECTORYNAME

 The current setting is /tmp/ 
\end{verbatim}
\defdollar{fortranTmpDir}
<<initvars>>=
(defvar |$fortranTmpDir| "/tmp/" "set location of temporary data files")

@
<<callingtempfile>>=
        (|tempfile|
         "set location of temporary data files"
         |interpreter|
         FUNCTION
         |setFortTmpDir|
         (("enter directory name for which you have write-permission"
           DIRECTORY
           |$fortranTmpDir|
           |chkDirectory|
           "/tmp/"))
         NIL)
@

\defunsec{setFortTmpDir}{The top level set fortran calling tempfile handler}
\calls{setFortTmpDir}{pname}
\calls{setFortTmpDir}{describeSetFortTmpDir}
\calls{setFortTmpDir}{validateOutputDirectory}
\calls{setFortTmpDir}{sayBrightly}
\calls{setFortTmpDir}{bright}
\usesdollar{setFortTmpDir}{fortranTmpDir}
<<defun setFortTmpDir>>=
(defun |setFortTmpDir| (arg)
 "The top level set fortran calling tempfile handler"
 (let (mode)
   (declare (special |$fortranTmpDir|))
   (cond
    ((eq arg '|%initialize%|) (setq |$fortranTmpDir| "/tmp/"))
    ((eq arg '|%display%|)
     (if (stringp |$fortranTmpDir|)
      |$fortranTmpDir|
      (pname |$fortranTmpDir|)))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeSetFortTmpDir|))
    ((null (setq mode (|validateOutputDirectory| arg)))
     (|sayBrightly| 
      `(" Sorry, but your argument(s)" ,@(|bright| arg) 
            "is(are) not valid." |%l|))
      (|describeSetFortTmpDir|))
    (t (setq |$fortranTmpDir| mode)))))

@

\defunsec{validateOutputDirectory}{Validate the output directory}
<<defun validateOutputDirectory>>=
(defun |validateOutputDirectory| (x)
 "Validate the output directory"
 (let ((dirname (car x)))
  (when (and (pathname-directory dirname) (null (probe-file dirname)))
   dirname)))

@

\defunsec{describeSetFortTmpDir}{Describe the set fortran calling tempfile}
\calls{describeSetFortTmpDir}{sayBrightly}
\usesdollar{describeSetFortTmpDir}{fortranTmpDir}
<<defun describeSetFortTmpDir>>=
(defun |describeSetFortTmpDir| ()
 "Describe the set fortran calling tempfile"
 (declare (special |$fortranTmpDir|))
 (|sayBrightly| (list
  '|%b| ")set fortran calling tempfile"
  '|%d| " is used to tell AXIOM where"
  '|%l| " to place intermediate FORTRAN data files . This must be the "
  '|%l| " name of a valid existing directory to which you have permission "
  '|%l| " to write (including the final slash)."
  '|%l|
  '|%l| " Syntax:"
  '|%l| "   )set fortran calling tempfile DIRECTORYNAME"
  '|%l|
  '|%l| " The current setting is"
  '|%b| |$fortranTmpDir|
  '|%d|)))

@


\subsubsection{directory}
\begin{verbatim}
-------------------- The directory Option ---------------------

 Description: set location of generated FORTRAN files

 )set fortran calling directory  is used to tell AXIOM where
 to place generated FORTRAN files. This must be the name 
 of a valid existing directory to which you have permission 
 to write (including the final slash).

 Syntax:
   )set fortran calling directory DIRECTORYNAME

 The current setting is ./ 
\end{verbatim}
\defdollar{fortranDirectory}
<<initvars>>=
(defvar |$fortranDirectory| "./" "set location of generated FORTRAN files")

@
<<callingdirectory>>=
        (|directory|
         "set location of generated FORTRAN files"
         |interpreter|
         FUNCTION
         |setFortDir|
         (("enter directory name for which you have write-permission"
           DIRECTORY
           |$fortranDirectory|
           |chkDirectory|
           "./"))
         NIL)
@

\defun{setFortDir}{setFortDir}
\calls{setFortDir}{pname}
\calls{setFortDir}{describeSetFortDir}
\calls{setFortDir}{validateOutputDirectory}
\calls{setFortDir}{sayBrightly}
\calls{setFortDir}{bright}
\usesdollar{setFortDir}{fortranDirectory}
<<defun setFortDir>>=
(defun |setFortDir| (arg)
 (declare (special |$fortranDirectory|))
 (let (mode)
   (COND
    ((eq arg '|%initialize%|) (setq |$fortranDirectory| "./"))
    ((eq arg '|%display%|)
     (if (stringp |$fortranDirectory|) 
      |$fortranDirectory|
      (pname |$fortranDirectory|)))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
      (|describeSetFortDir|))
    ((null (setq mode (|validateOutputDirectory| arg)))
     (|sayBrightly|
      `(" Sorry, but your argument(s)" ,@(|bright| arg) 
        "is(are) not valid." |%l|))
     (|describeSetFortDir|))
    (t (setq |$fortranDirectory| mode)))))

@
\defun{describeSetFortDir}{describeSetFortDir}
\calls{describeSetFortDir}{sayBrightly}
\usesdollar{describeSetFortDir}{fortranDirectory}
<<defun describeSetFortDir>>=
(defun |describeSetFortDir| ()
 (declare (special |$fortranDirectory|))
 (|sayBrightly| (list
  '|%b| ")set fortran calling directory"
  '|%d| " is used to tell AXIOM where"
  '|%l| " to place generated FORTRAN files. This must be the name "
  '|%l| " of a valid existing directory to which you have permission "
  '|%l| " to write (including the final slash)."
  '|%l|
  '|%l| " Syntax:"
  '|%l| "   )set fortran calling directory DIRECTORYNAME"
  '|%l|
  '|%l| " The current setting is"
  '|%b| |$fortranDirectory|
  '|%d|)))

@
\subsubsection{linker}
\begin{verbatim}
---------------------- The linker Option ----------------------

 Description: linker arguments (e.g. libraries to search)

 )set fortran calling linkerargs is used to pass arguments to 
 the linker when using  mkFort  to create functions which call 
 Fortran code. For example, it might give a list of libraries 
 to be searched, and their locations.
 The string is passed verbatim, so must be the correct syntax for
 the particular linker being used.

 Example: )set fortran calling linker "-lxlf"

 The current setting is -lxlf 
\end{verbatim}
\defdollar{fortranLibraries}
<<initvars>>=
(defvar |$fortranLibraries| "-lxlf" 
  "linker arguments (e.g. libraries to search)")

@
<<callinglinker>>=
        (|linker|
         "linker arguments (e.g. libraries to search)"
         |interpreter|
         FUNCTION
         |setLinkerArgs|
         (("enter linker arguments "
           STRING
           |$fortranLibraries|
           |chkDirectory|
           "-lxlf"))
         NIL
         )
@

\defun{setLinkerArgs}{setLinkerArgs}
\calls{setLinkerArgs}{object2String}
\calls{setLinkerArgs}{describeSetLinkerArgs}
\usesdollar{setLinkerArgs}{fortranLibraries}
<<defun setLinkerArgs>>=
(defun |setLinkerArgs| (arg)
 (declare (special |$fortranLibraries|))
 (cond
  ((eq arg '|%initialize%|) (setq |$fortranLibraries| "-lxlf"))
  ((eq arg '|%display%|) (|object2String| |$fortranLibraries|))
  ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
    (|describeSetLinkerArgs|))
  ((and (listp arg) (stringp (car arg)))
    (setq |$fortranLibraries| (car arg)))
  (t (|describeSetLinkerArgs|)))) 

@

\defun{describeSetLinkerArgs}{describeSetLinkerArgs}
\calls{describeSetLinkerArgs}{sayBrightly}
\usesdollar{describeSetLinkerArgs}{fortranLibraries}
<<defun describeSetLinkerArgs>>=
(defun |describeSetLinkerArgs| ()
 (declare (special |$fortranLibraries|))
 (|sayBrightly| (list
  '|%b| ")set fortran calling linkerargs"
  '|%d| " is used to pass arguments to the linker"
  '|%l| " when using "
  '|%b| "mkFort"
  '|%d| " to create functions which call Fortran code."
  '|%l| " For example, it might give a list of libraries to be searched,"
  '|%l| " and their locations."
  '|%l| " The string is passed verbatim, so must be the correct syntax for"
  '|%l| " the particular linker being used."
  '|%l|
  '|%l| " Example: )set fortran calling linker \"-lxlf\""
  '|%l|
  '|%l| " The current setting is"
  '|%b| |$fortranLibraries|
  '|%d|)))

@

\section{kernel}
\begin{verbatim}
              Current Values of  kernel  Variables                    

Variable     Description                           Current Value
-----------------------------------------------------------------
warn         warn when re-definition is attempted       off 
protect      prevent re-definition of kernel functions  off 

\end{verbatim}
<<kernel>>=
  (|kernel|
   "library functions built into the kernel for efficiency"
   |interpreter|
   TREE
   |novar|
   (
<<kernelwarn>>
<<kernelprotect>>
   )
  )
@
\subsection{kernelwarn}
\begin{verbatim}
----------------------- The warn Option -----------------------

 Description: warn when re-definition is attempted

Some AXIOM library functions are compiled into the kernel for 
efficiency reasons. To prevent them being re-defined when loaded 
from a library they are specially protected. If a user wishes to 
know when an attempt is made to re-define such a function, he or 
she should issue the command:
        )set kernel warn on
To restore the default behaviour, he or she should issue the 
command:
        )set kernel warn off
\end{verbatim}
<<kernelwarn>>=
     (|warn|
      "warn when re-definition is attempted"
      |interpreter|
      FUNCTION
      |protectedSymbolsWarning|
      NIL
      |htSetKernelWarn|)
@
\defun{protectedSymbolsWarning}{protectedSymbolsWarning}
\calls{protectedSymbolsWarning}{protected-symbol-warn}
\calls{protectedSymbolsWarning}{describeProtectedSymbolsWarning}
\calls{protectedSymbolsWarning}{translateYesNo2TrueFalse}
<<defun protectedSymbolsWarning>>=
(defun |protectedSymbolsWarning| (arg)
 (let (v)
   (cond
    ((eq arg '|%initialize%|) (protected-symbol-warn nil))
    ((eq arg '|%display%|)
     (setq v (protected-symbol-warn t))
     (protected-symbol-warn v) 
     (if v "on" "off"))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeProtectedSymbolsWarning|))
    (t (protected-symbol-warn (|translateYesNo2TrueFalse| (car arg)))))))

@

\defun{describeProtectedSymbolsWarning}{describeProtectedSymbolsWarning}
\calls{describeProtectedSymbolsWarning}{sayBrightly}
<<defun describeProtectedSymbolsWarning>>=
(defun |describeProtectedSymbolsWarning| ()
 (|sayBrightly| (list
  "Some AXIOM library functions are compiled into the kernel for efficiency"
  '|%l| "reasons.  To prevent them being re-defined when loaded from a library"
  '|%l|
  "they are specially protected.  If a user wishes to know when an attempt"
  '|%l|
  "is made to re-define such a function, he or she should issue the command:"
  '|%l| "        )set kernel warn on"
  '|%l| "To restore the default behaviour, he or she should issue the command:"
  '|%l| "        )set kernel warn off")))

@
\subsection{kernelprotect}
\begin{verbatim}
--------------------- The protect Option ----------------------

 Description: prevent re-definition of kernel functions

Some AXIOM library functions are compiled into the kernel for 
efficiency reasons. To prevent them being re-defined when loaded
from a library they are specially protected.  If a user wishes 
to re-define these functions, he or she should issue the command:
        )set kernel protect off
To restore the default behaviour, he or she should issue the 
command:
        )set kernel protect on
\end{verbatim}
<<kernelprotect>>=
     (|protect|
      "prevent re-definition of kernel functions"
      |interpreter|
      FUNCTION
      |protectSymbols|
      NIL
      |htSetKernelProtect|)
@

\defun{protectSymbols}{protectSymbols}
\calls{protectSymbols}{protect-symbols}
\calls{protectSymbols}{describeProtectSymbols}
\calls{protectSymbols}{translateYesNo2TrueFalse}
<<defun protectSymbols>>=
(defun |protectSymbols| (arg)
 (let (v)
   (cond
    ((eq arg '|%initialize%|) (protect-symbols  t))
    ((eq arg '|%display%|)
     (setq v (protect-symbols t))
     (protect-symbols v)
     (if v "on" "off"))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeProtectSymbols|))
    (t (protect-symbols (|translateYesNo2TrueFalse| (car arg)))))))

@
\defun{describeProtectSymbols}{describeProtectSymbols}
\calls{describeProtectSymbols}{sayBrightly}
<<defun describeProtectSymbols>>=
(defun |describeProtectSymbols| ()
 (|sayBrightly| (list 
  "Some AXIOM library functions are compiled into the kernel for efficiency"
  '|%l|
  "reasons.  To prevent them being re-defined when loaded from a library"
  '|%l| "they are specially protected.  If a user wishes to re-define these"
  '|%l| "functions, he or she should issue the command:"
  '|%l| "        )set kernel protect off"
  '|%l|
  "To restore the default behaviour, he or she should issue the command:"
  '|%l| "        )set kernel protect on")))

@
\section{hyperdoc}
\begin{verbatim}
             Current Values of  hyperdoc  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
fullscreen   use full screen for this facility          off 
mathwidth    screen width for history output            120 

\end{verbatim}
<<hyperdoc>>=
  (|hyperdoc|
   "options in using HyperDoc"
   |interpreter|
   TREE
   |novar|
   (
<<hyperdocfullscreen>>
<<hyperdocmathwidth>>
   ))
@
\subsection{fullscreen}
\begin{verbatim}
-------------------- The fullscreen Option --------------------

 Description: use full screen for this facility

 The fullscreen option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{fullScreenSysVars}
<<initvars>>=
(defvar |$fullScreenSysVars| nil "use full screen for this facility")

@
<<hyperdocfullscreen>>=
     (|fullscreen|
      "use full screen for this facility"
      |interpreter|
      LITERALS
      |$fullScreenSysVars|
      (|on| |off|)
      |off|)
@
\subsection{mathwidth}
\begin{verbatim}
-------------------- The mathwidth Option ---------------------

 Description: screen width for history output

 The mathwidth option may be followed by an integer in the range 
 0 to inclusive. The current setting is 120 

\end{verbatim}
\defdollar{historyDisplayWidth}
<<initvars>>=
(defvar |$historyDisplayWidth| 120 "screen width for history output")

@
<<hyperdocmathwidth>>=
     (|mathwidth|
      "screen width for history output"
      |interpreter|
      INTEGER
      |$historyDisplayWidth|
      (0 NIL)
      120)
@
\section{help}
\begin{verbatim}
               Current Values of  help  Variables                     

Variable     Description                           Current Value
-----------------------------------------------------------------
fullscreen   use fullscreen facility, if possible       off 

\end{verbatim}
<<help>>=
  (|help|
   "view and set some help options"
   |interpreter|
   TREE
   |novar|
   (
<<helpfullscreen>>
   ))
@
\subsection{fullscreen}
\begin{verbatim}
-------------------- The fullscreen Option --------------------

 Description: use fullscreen facility, if possible

 The fullscreen option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{useFullScreenHelp}
<<initvars>>=
(defvar |$useFullScreenHelp| nil "use fullscreen facility, if possible")

@
<<helpfullscreen>>=
    (|fullscreen|
     "use fullscreen facility, if possible"
     |interpreter|
     LITERALS
     |$useFullScreenHelp|
     (|on| |off|)
     |off|)
@
\section{history}
\begin{verbatim}
--------------------- The history Option ----------------------

 Description: save workspace values in a history file

 The history option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{HiFiAccess}
<<initvars>>=
(defvar |$HiFiAccess| t "save workspace values in a history file")

@
<<history>>=
  (|history|
   "save workspace values in a history file"
   |interpreter|
   LITERALS
   |$HiFiAccess|
   (|on| |off|)
   |on|)
@
\section{messages}
\begin{verbatim}
             Current Values of  messages  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
autoload     print file auto-load messages              off 
bottomup     display bottom up modemap selection        off 
coercion     display datatype coercion messages         off 
dropmap      display old map defn when replaced         off 
expose       warning for unexposed functions            off 
file         print msgs also to SPADMSG LISTING         off 
frame        display messages about frames              off 
highlighting use highlighting in system messages        off 
instant      present instantiation summary              off 
insteach     present instantiation info                 off 
interponly   say when function code is interpreted      on 
number       display message number with message        off 
prompt       set type of input prompt to display        step 
selection    display function selection msgs            off 
set          show )set setting after assignment         off 
startup      display messages on start-up               off 
summary      print statistics after computation         off 
testing      print system testing header                off 
time         print timings after computation            off 
type         print type after computation               on 
void         print Void value when it occurs            off 
any          print the internal type of objects of domain Any on 
naglink      show NAGLink messages                      on 

\end{verbatim}
<<messages>>=
  (|messages|
   "show messages for various system features"
   |interpreter|
   TREE
   |novar|
   (
<<messagesany>>
<<messagesautoload>>
<<messagesbottomup>>
<<messagescoercion>>
<<messagesdropmap>>
<<messagesexpose>>
<<messagesfile>>
<<messagesframe>>
<<messageshighlighting>>
<<messagesinstant>>
<<messagesinsteach>>
<<messagesinterponly>>
<<messagesnaglink>>
<<messagesnumber>>
<<messagesprompt>>
<<messagesselection>>
<<messagesset>>
<<messagesstartup>>
<<messagessummary>>
<<messagestesting>>
<<messagestime>>
<<messagestype>>
<<messagesvoid>>
   ))
@
\subsection{any}
\begin{verbatim}
----------------------- The any Option ------------------------

 Description: print the internal type of objects of domain Any

 The any option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{printAnyIfTrue}
<<initvars>>=
(defvar |$printAnyIfTrue| t
   "print the internal type of objects of domain Any")

@
<<messagesany>>=
     (|any|
      "print the internal type of objects of domain Any"
      |interpreter|
      LITERALS
      |$printAnyIfTrue|
      (|on| |off|)
      |on|)
@
\subsection{autoload}
\begin{verbatim}
--------------------- The autoload Option ---------------------

 Description: print file auto-load messages

\end{verbatim}
\defdollar{printLoadMsgs}
<<initvars>>=
(defvar |$printLoadMsgs| nil "print file auto-load messages")

@
<<messagesautoload>>=
     (|autoload|
      "print file auto-load messages"
      |interpreter|
      LITERALS
      |$printLoadMsgs|
      (|on| |off|)
      |on|)
@

\subsection{bottomup}
\begin{verbatim}
--------------------- The bottomup Option ---------------------

 Description: display bottom up modemap selection

 The bottomup option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{reportBottomUpFlag}
<<initvars>>=
(defvar |$reportBottomUpFlag| nil "display bottom up modemap selection")

@
<<messagesbottomup>>=
     (|bottomup|
      "display bottom up modemap selection"
      |development|
      LITERALS
      |$reportBottomUpFlag|
      (|on| |off|)
      |off|)
@
\subsection{coercion}
\begin{verbatim}
--------------------- The coercion Option ---------------------

 Description: display datatype coercion messages

 The coercion option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{reportCoerceIfTrue}
<<initvars>>=
(defvar |$reportCoerceIfTrue| nil "display datatype coercion messages")

@
<<messagescoercion>>=
     (|coercion|
      "display datatype coercion messages"
      |development|
      LITERALS
      |$reportCoerceIfTrue|
      (|on| |off|)
      |off|)
@
\subsection{dropmap}
\begin{verbatim}
--------------------- The dropmap Option ----------------------

 Description: display old map defn when replaced

 The dropmap option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{displayDroppedMap}
<<initvars>>=
(defvar |$displayDroppedMap| nil "display old map defn when replaced")

@
<<messagesdropmap>>=
     (|dropmap|
      "display old map defn when replaced"
      |interpreter|
      LITERALS
      |$displayDroppedMap|
      (|on| |off|)
      |off|)
@
\subsection{expose}
\begin{verbatim}
---------------------- The expose Option ----------------------

 Description: warning for unexposed functions

 The expose option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{giveExposureWarning}
<<initvars>>=
(defvar |$giveExposureWarning| nil "warning for unexposed functions")

@
<<messagesexpose>>=
     (|expose|
      "warning for unexposed functions"
      |interpreter|
      LITERALS
      |$giveExposureWarning|
      (|on| |off|)
      |off|)
@
\subsection{file}
\begin{verbatim}
----------------------- The file Option -----------------------

 Description: print msgs also to SPADMSG LISTING

 The file option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{printMsgsToFile}
<<initvars>>=
(defvar |$printMsgsToFile| nil "print msgs also to SPADMSG LISTING")

@
<<messagesfile>>=
     (|file|
      "print msgs also to SPADMSG LISTING"
      |development|
      LITERALS
      |$printMsgsToFile|
      (|on| |off|)
      |off|)
@
\subsection{frame}
\begin{verbatim}
---------------------- The frame Option -----------------------

 Description: display messages about frames

 The frame option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{frameMessages}
<<initvars>>=
(defvar |$frameMessages| nil "display messages about frames")

@
<<messagesframe>>=
     (|frame|
      "display messages about frames"
      |interpreter|
      LITERALS
      |$frameMessages|
      (|on| |off|)
      |off|)
@
\subsection{highlighting}
\begin{verbatim}
------------------- The highlighting Option -------------------

 Description: use highlighting in system messages

 The highlighting option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{highlightAllowed}
<<initvars>>=
(defvar |$highlightAllowed| nil "use highlighting in system messages")

@
<<messageshighlighting>>=
     (|highlighting|
      "use highlighting in system messages"
      |interpreter|
      LITERALS
      |$highlightAllowed|
      (|on| |off|)
      |off|)
@
\subsection{instant}
\begin{verbatim}
--------------------- The instant Option ----------------------

 Description: present instantiation summary

 The instant option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{reportInstantiations}
<<initvars>>=
(defvar |$reportInstantiations| nil "present instantiation summary")

@
<<messagesinstant>>=
     (|instant|
      "present instantiation summary"
      |development|
      LITERALS
      |$reportInstantiations|
      (|on| |off|)
      |off|)
@
\subsection{insteach}
\begin{verbatim}
--------------------- The insteach Option ---------------------

 Description: present instantiation info

 The insteach option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{reportEachInstantiation|}
<<initvars>>=
(defvar |$reportEachInstantiation| nil "present instantiation info")

@
<<messagesinsteach>>=
     (|insteach|
      "present instantiation info"
      |development|
      LITERALS
      |$reportEachInstantiation|
      (|on| |off|)
      |off|)
@
\subsection{interponly}
\begin{verbatim}
-------------------- The interponly Option --------------------

 Description: say when function code is interpreted

 The interponly option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{reportInterpOnly}
<<initvars>>=
(defvar |$reportInterpOnly| t "say when function code is interpreted")

@
<<messagesinterponly>>=
     (|interponly|
      "say when function code is interpreted"
      |interpreter|
      LITERALS
      |$reportInterpOnly|
      (|on| |off|)
      |on|)
@
\subsection{naglink}
\begin{verbatim}
--------------------- The naglink Option ----------------------

 Description: show NAGLink messages

 The naglink option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{nagMessages}
<<initvars>>=
(defvar |$nagMessages| t "show NAGLink messages")

@
<<messagesnaglink>>=
     (|naglink|
      "show NAGLink messages"
      |interpreter|
      LITERALS
      |$nagMessages|
      (|on| |off|)
      |on|)
@
\subsection{number}
\begin{verbatim}
---------------------- The number Option ----------------------

 Description: display message number with message

 The number option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{displayMsgNumber}
<<initvars>>=
(defvar |$displayMsgNumber| nil "display message number with message")

@
<<messagesnumber>>=
     (|number|
      "display message number with message"
      |interpreter|
      LITERALS
      |$displayMsgNumber|
      (|on| |off|)
      |off|)
@
\subsection{prompt}
\begin{verbatim}
---------------------- The prompt Option ----------------------

 Description: set type of input prompt to display

 The prompt option may be followed by any one of the following:

    none
    frame
    plain
 -> step 
    verbose

 The current setting is indicated.

\end{verbatim}
\defdollar{inputPromptType}
<<initvars>>=
(defvar |$inputPromptType| '|step| "set type of input prompt to display")

@
<<messagesprompt>>=
     (|prompt|
      "set type of input prompt to display"
      |interpreter|
      LITERALS
      |$inputPromptType|
      (|none| |frame| |plain| |step| |verbose|)
      |step|)
@
\subsection{selection}
\begin{verbatim}
-------------------- The selection Option ---------------------

 Description: display function selection msgs

 The selection option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}

TPDHERE: This is a duplicate of )set mes bot on because both use the
\verb|$reportBottomUpFlag| flag
\index{\$reportBottomUpFlag}
\index{defvar!\$reportBottomUpFlag}
\index{\$reportBottomUpFlag!defvar}
<<messagesselection>>=
     (|selection|
      "display function selection msgs"
      |interpreter|
      LITERALS
      |$reportBottomUpFlag|
      (|on| |off|)
      |off|)
@
\subsection{set}
\begin{verbatim}
----------------------- The set Option ------------------------

 Description: show )set setting after assignment

 The set option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{displaySetValue}
<<initvars>>=
(defvar |$displaySetValue| nil "show )set setting after assignment")

@
<<messagesset>>=
     (|set|
      "show )set setting after assignment"
      |interpreter|
      LITERALS
      |$displaySetValue|
      (|on| |off|)
      |off|)
@
\subsection{startup}
\begin{verbatim}
--------------------- The startup Option ----------------------

 Description: display messages on start-up

 The startup option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{displayStartMsgs}
<<initvars>>=
(defvar |$displayStartMsgs| t "display messages on start-up")

@
<<messagesstartup>>=
     (|startup|
      "display messages on start-up"
      |interpreter|
      LITERALS
      |$displayStartMsgs|
      (|on| |off|)
      |on|)
@
\subsection{summary}
\begin{verbatim}
--------------------- The summary Option ----------------------

 Description: print statistics after computation

 The summary option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{printStatisticsSummaryIfTrue}
<<initvars>>=
(defvar |$printStatisticsSummaryIfTrue| nil
     "print statistics after computation")

@
<<messagessummary>>=
     (|summary|
      "print statistics after computation"
      |interpreter|
      LITERALS
      |$printStatisticsSummaryIfTrue|
      (|on| |off|)
      |off|)
@
\subsection{testing}
\begin{verbatim}
--------------------- The testing Option ----------------------

 Description: print system testing header

 The testing option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{testingSystem}
<<initvars>>=
(defvar |$testingSystem| nil "print system testing header")

@
<<messagestesting>>=
     (|testing|
      "print system testing header"
      |development|
      LITERALS
      |$testingSystem|
      (|on| |off|)
      |off|)
@
\subsection{time}
\begin{verbatim}
----------------------- The time Option -----------------------

 Description: print timings after computation

 The time option may be followed by any one of the following:

    on
 -> off 
    long

 The current setting is indicated.

\end{verbatim}
\defdollar{printTimeIfTrue}
<<initvars>>=
(defvar |$printTimeIfTrue| nil "print timings after computation")

@
<<messagestime>>=
     (|time|
      "print timings after computation"
      |interpreter|
      LITERALS
      |$printTimeIfTrue|
      (|on| |off| |long|)
      |off|)
@
\subsection{type}
\begin{verbatim}
----------------------- The type Option -----------------------

 Description: print type after computation

 The type option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{printTypeIfTrue}
<<initvars>>=
(defvar |$printTypeIfTrue| t "print type after computation")

@
<<messagestype>>=
     (|type|
      "print type after computation"
      |interpreter|
      LITERALS
      |$printTypeIfTrue|
      (|on| |off|)
      |on|)
@
\subsection{void}
\begin{verbatim}
----------------------- The void Option -----------------------

 Description: print Void value when it occurs

 The void option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{printVoidIfTrue}
<<initvars>>=
(defvar |$printVoidIfTrue| nil "print Void value when it occurs")

@
<<messagesvoid>>=
     (|void|
      "print Void value when it occurs"
      |interpreter|
      LITERALS
      |$printVoidIfTrue|
      (|on| |off|)
      |off|)
@
\section{naglink}
\begin{verbatim}
              Current Values of  naglink  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
host         internet address of host for NAGLink       localhost 
persistence  number of (fortran) functions to remember  1 
messages     show NAGLink messages                      on 
double       enforce DOUBLE PRECISION ASPs              on 

\end{verbatim}
<<naglink>>=
  (|naglink|
   "options for NAGLink"
   |interpreter|
   TREE
   |novar|
   (
<<naglinkhost>>
<<naglinkpersistence>>
<<naglinkmessages>>
<<naglinkdouble>>
   ))
@
\subsection{host}
\begin{verbatim}
----------------------- The host Option -----------------------

 Description: internet address of host for NAGLink

 )set naglink host is used to tell  AXIOM which  host to contact
 for a NAGLink request. An Internet address should be supplied. 
 The host specified must be running the NAGLink daemon.

 The current setting is localhost 
\end{verbatim}
\defdollar{nagHost}
<<initvars>>=
(defvar |$nagHost| "localhost" "internet address of host for NAGLink")

@
<<naglinkhost>>=
     (|host|
      "internet address of host for NAGLink"
      |interpreter|
      FUNCTION
      |setNagHost|
      (("enter host name"
        DIRECTORY
        |$nagHost|
        |chkDirectory|
        "localhost"))
      NIL)
@

\defun{setNagHost}{setNagHost}
\calls{setNagHost}{object2String}
\calls{setNagHost}{describeSetNagHost}
\usesdollar{setNagHost}{nagHost}
<<defun setNagHost>>=
(defun |setNagHost| (arg)
 (declare (special |$nagHost|))
 (cond
  ((eq arg '|%initialize%|) (setq |$nagHost| "localhost"))
  ((eq arg '|%display%|) (|object2String| |$nagHost|))
  ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?)) 
   (|describeSetNagHost|))
  (t (setq |$nagHost| (|object2String| arg)))))

@

\defun{describeSetNagHost}{describeSetNagHost}
\calls{describeSetNagHost}{sayBrightly}
\usesdollar{describeSetNagHost}{nagHost}
<<defun describeSetNagHost>>=
(defun |describeSetNagHost| ()
 (declare (special |$nagHost|))
 (|sayBrightly| (list
  '|%b| ")set naglink host"
  '|%d| "is used to tell  AXIOM which  host to contact for"
  '|%l| " a NAGLink request. An Internet address should be supplied. The host"
  '|%l| " specified must be running the NAGLink daemon."
  '|%l|
  '|%l| " The current setting is"
  '|%b| |$nagHost|
  '|%d|)))

@

\subsection{persistence}
\begin{verbatim}
------------------- The persistence Option --------------------

 Description: number of (fortran) functions to remember

 )set naglink persistence is used to tell  the  nagd  daemon how
  many ASP source and object files to keep around in case you 
  reuse them. This helps to avoid needless recompilations. The 
  number specified should be a non-negative integer.

 The current setting is 1 
\end{verbatim}
\defdollar{fortPersistence}
<<initvars>>=
(defvar |$fortPersistence| 1 "number of (fortran) functions to remember")

@
<<naglinkpersistence>>=
     (|persistence|
      "number of (fortran) functions to remember"
      |interpreter|
      FUNCTION
      |setFortPers|
      (("Requested remote storage (for asps):"
       INTEGER
       |$fortPersistence|
       (0 NIL)
       10))
      NIL)
@

\defun{setFortPers}{setFortPers}
\calls{setFortPers}{describeFortPersistence}
\calls{setFortPers}{sayMessage}
\calls{setFortPers}{bright}
\calls{setFortPers}{terminateSystemCommand}
\usesdollar{setFortPers}{fortPersistence}
<<defun setFortPers>>=
(defun |setFortPers| (arg)
 (let (n)
 (declare (special |$fortPersistence|))
   (cond
    ((eq arg '|%initialize%|) (setq |$fortPersistence| 1))
    ((eq arg '|%display%|) |$fortPersistence|)
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeFortPersistence|))
    (t
     (setq n (car arg))
     (cond
      ((or (null (integerp n)) (minusp n))
       (|sayMessage| 
        `("Your value of" ,@(|bright| n) "is invalid because ..."))
         (|describeFortPersistence|)
         (|terminateSystemCommand|))
      (t (setq |$fortPersistence| (car arg)))))))) 

@

\defun{describeFortPersistence}{describeFortPersistence}
\calls{describeFortPersistence}{sayBrightly}
\usesdollar{describeFortPersistence}{fortPersistence}
<<defun describeFortPersistence>>=
(defun |describeFortPersistence| ()
 (declare (special |$fortPersistence|))
 (|sayBrightly| (list
 '|%b| ")set naglink persistence"
 '|%d| "is used to tell  the "
 '|%b| '|nagd|
 '|%d| '| daemon how  many ASP|
 '|%l|
 " source and object files to keep around in case you reuse them. This helps"
 '|%l| " to avoid needless recompilations. The number specified should be a "
 '|%l| " non-negative integer."
 '|%l|
 '|%l| " The current setting is"
 '|%b| |$fortPersistence|
 '|%d|)))

@

\subsection{messages}
\begin{verbatim}
--------------------- The messages Option ---------------------

 Description: show NAGLink messages

 The messages option may be followed by any one of the 
 following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
TPDHERE: this is the same as )set nag mes on
\index{\$nagMessages}
\index{defvar!\$nagMessages}
\index{\$nagMessages!defvar}
<<naglinkmessages>>=
     (|messages|
      "show NAGLink messages"
      |interpreter|
      LITERALS
      |$nagMessages|
      (|on| |off|)
       |on|)
@
\subsection{double}
\begin{verbatim}
---------------------- The double Option ----------------------

 Description: enforce DOUBLE PRECISION ASPs

 The double option may be followed by any one of the following:

 -> on 
    off

 The current setting is indicated.

\end{verbatim}
\defdollar{nagEnforceDouble}
<<initvars>>=
(defvar |$nagEnforceDouble| t "enforce DOUBLE PRECISION ASPs")

@
<<naglinkdouble>>=
     (|double|
      "enforce DOUBLE PRECISION ASPs"
      |interpreter|
      LITERALS
      |$nagEnforceDouble|
      (|on| |off|)
      |on|)
@
\section{output}
The result of the {\bf )set output} command is:
\begin{verbatim}
Variable     Description                           Current Value
-----------------------------------------------------------------
abbreviate  abbreviate type names                    off 
algebra     display output in algebraic form         On:CONSOLE 
characters  choose special output character set      plain 
fortran     create output in FORTRAN format          Off:CONSOLE 
fraction    how fractions are formatted              vertical 
length      line length of output displays           77 
mathml	    create output in MathML style	     Off:CONSOLE 
openmath    create output in OpenMath style          Off:CONSOLE
script      display output in SCRIPT formula format  Off:CONSOLE 
scripts     show subscripts,... linearly             off 
showeditor  view output of )show in editor           off 
tex         create output in TeX style               Off:CONSOLE 
\end{verbatim}
Since the output option has a bunch of sub-options each suboption 
is defined within the output structure.
<<output>>=
  (|output|
   "view and set some output options"
   |interpreter|
   TREE
   |novar|
    (
<<outputabbreviate>>
<<outputalgebra>>
<<outputcharacters>>
<<outputfortran>>
<<outputfraction>>
<<outputlength>>
<<outputmathml>>
<<outputopenmath>>
<<outputscript>>
<<outputscripts>>
<<outputshoweditor>>
<<outputtex>>
 ))
@
\subsection{abbreviate}
\begin{verbatim}
-------------------- The abbreviate Option --------------------

 Description: abbreviate type names

 The abbreviate option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.
\end{verbatim}
\defdollar{abbreviateTypes}
<<initvars>>=
(defvar |$abbreviateTypes| nil "abbreviate type names")

@
<<outputabbreviate>>=
     (|abbreviate|
      "abbreviate type names"
      |interpreter|
      LITERALS
      |$abbreviateTypes|
      (|on| |off|)
      |off|)
@
\subsection{algebra}
\begin{verbatim}
--------------------- The algebra Option ----------------------

 Description: display output in algebraic form

 )set output algebra is used to tell AXIOM to turn algebra-style
  output printing on and off, and where to place the output.  By
  default, the destination for the output is the screen but 
  printing is turned off.

Syntax:   )set output algebra <arg>
    where arg can be one of
  on          turn algebra printing on (default state)
  off         turn algebra printing off
  console     send algebra output to screen (default state)
  fp<.fe>     send algebra output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .spout.

If you wish to send the output to a file, you may need to issue
this command twice: once with on and once with the file name. 
For example, to send algebra output to the file polymer.spout,
issue the two commands

  )set output algebra on
  )set output algebra polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  On:CONSOLE 
\end{verbatim}
\defdollar{algebraFormat}
<<initvars>>=
(defvar |$algebraFormat| t "display output in algebraic form")

@
\defdollar{algebraOutputFile}
<<initvars>>=
(defvar |$algebraOutputFile| "CONSOLE" 
  "where algebra printing goes (enter {\em console} or a pathname)?")

@
<<outputalgebra>>=
     (|algebra|
      "display output in algebraic form"
      |interpreter|
      FUNCTION
      |setOutputAlgebra|
      (("display output in algebraic form"
        LITERALS
        |$algebraFormat|
        (|off| |on|)
        |on|)
       (break $algebraFormat)
       ("where algebra printing goes (enter {\em console} or a pathname)?"
        FILENAME
        |$algebraOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@

\defdollar{algebraOutputStream}
<<initvars>>=
(defvar |$algebraOutputStream| *standard-output*)
 
@

\defun{setOutputAlgebra}{setOutputAlgebra}
\calls{setOutputAlgebra}{defiostream}
\calls{setOutputAlgebra}{concat}
\calls{setOutputAlgebra}{describeSetOutputAlgebra}
\calls{setOutputAlgebra}{pairp}
\calls{setOutputAlgebra}{qcdr}
\calls{setOutputAlgebra}{qcar}
\calls{setOutputAlgebra}{member}
\calls{setOutputAlgebra}{upcase}
\calls{setOutputAlgebra}{sayKeyedMsg}
\calls{setOutputAlgebra}{shut}
\calls{setOutputAlgebra}{pathnameType}
\calls{setOutputAlgebra}{pathnameDirectory}
\calls{setOutputAlgebra}{pathnameName}
\callsdollar{setOutputAlgebra}{filep}
\calls{setOutputAlgebra}{make-outstream}
\calls{setOutputAlgebra}{object2String}
\usesdollar{setOutputAlgebra}{algebraOutputStream}
\usesdollar{setOutputAlgebra}{algebraOutputFile}
\usesdollar{setOutputAlgebra}{filep}
\usesdollar{setOutputAlgebra}{algebraFormat}
<<defun setOutputAlgebra>>=
(defun |setOutputAlgebra| (arg)
 (let (label tmp1 tmp2 ptype fn ft fm filename teststream)
 (declare (special |$algebraOutputStream| |$algebraOutputFile| $filep
  |$algebraFormat|))
   (cond
    ((eq arg '|%initialize%|)
     (setq |$algebraOutputStream|
      (defiostream '((mode . output) (device . console)) 255 0))
     (setq |$algebraOutputFile| "CONSOLE")
     (setq |$algebraFormat| t))
    ((eq arg '|%display%|)
     (if |$algebraFormat|
      (setq label "On:")
      (setq label "Off:"))
     (concat label |$algebraOutputFile|))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeSetOutputAlgebra|))
    (t
     (cond
      ((and (pairp arg)
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t)
            (|member| fn '(y n ye yes no o on of off console 
                    |y| |n| |ye| |yes| |no| |o| |on| |of| |off| |console|)))
       '|ok|)
      (t (setq arg (list fn '|spout|))))
     (cond
      ((and (pairp arg)
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t))
       (cond
        ((|member| (upcase fn) '(y n ye o of))
         (|sayKeyedMsg| 's2iv0002 '(|algebra| |algebra|)))
        ((|member| (upcase fn) '(no off)) (setq |$algebraFormat| nil))
        ((|member| (upcase fn) '(yes on)) (setq |$algebraFormat| t))
        ((eq (upcase fn) 'console)
         (shut |$algebraOutputStream|)
         (setq |$algebraOutputStream| 
          (defiostream '((mode . output) (device . console)) 255 0))
         (setq |$algebraOutputFile| "CONSOLE"))))
      ((or
        (and (pairp arg)
             (progn
              (setq fn (qcar arg))
              (setq tmp1 (qcdr arg))
              (and (pairp tmp1)
                   (eq (qcdr tmp1) nil)
                   (progn (setq ft (qcar tmp1)) t))))
        (and (pairp arg)
             (progn (setq fn (qcar arg))
                    (setq tmp1 (qcdr arg))
                    (and (pairp tmp1)
                         (progn (setq ft (qcar tmp1))
                                (setq tmp2 (qcdr tmp1))
                                (and (pairp tmp2)
                                     (eq (qcdr tmp2) nil)
                                     (progn
                                      (setq fm (qcar tmp2))
                                      t)))))))
       (when (setq ptype (|pathnameType| fn))
        (setq fn (concat (|pathnameDirectory| fn) (|pathnameName| fn)))
        (setq ft ptype))
       (unless fm (setq fm 'a))
       (setq filename ($filep fn ft fm))
       (cond
        ((null filename)
         (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))
        ((setq teststream (make-outstream filename 255 0))
         (shut |$algebraOutputStream|)
         (setq |$algebraOutputStream| teststream)
         (setq |$algebraOutputFile| (|object2String| filename))
         (|sayKeyedMsg| 's2iv0004 (list "Algebra" |$algebraOutputFile|)))
        (t (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))))
      (t
       (|sayKeyedMsg| 's2iv0005 nil)
       (|describeSetOutputAlgebra|)))))))

@

\defun{describeSetOutputAlgebra}{describeSetOutputAlgebra}
\calls{describeSetOutputAlgebra}{sayBrightly}
\calls{describeSetOutputAlgebra}{setOutputAlgebra}
<<defun describeSetOutputAlgebra>>=
(defun |describeSetOutputAlgebra| ()
 (|sayBrightly| (list
 '|%b| ")set output algebra"
 '|%d| "is used to tell AXIOM to turn algebra-style output"
 '|%l| "printing on and off, and where to place the output.  By default, the"
 '|%l| "destination for the output is the screen but printing is turned off."
 '|%l|
 '|%l| "Syntax:   )set output algebra <arg>"
 '|%l| "    where arg can be one of"
 '|%l| "  on          turn algebra printing on (default state)"
 '|%l| "  off         turn algebra printing off"
 '|%l| "  console     send algebra output to screen (default state)"
 '|%l| "  fp<.fe>     send algebra output to file with file prefix fp"
 '|%l|
  "              and file extension .fe. If not given, .fe defaults to .spout."
 '|%l|
 '|%l|
 "If you wish to send the output to a file, you may need to issue this command"
 '|%l| "twice: once with"
 '|%b| "on"
 '|%d| "and once with the file name. For example, to send"
 '|%l| "algebra output to the file"
 '|%b| "polymer.spout,"
 '|%d| "issue the two commands"
 '|%l|
 '|%l| "  )set output algebra on"
 '|%l| "  )set output algebra polymer"
 '|%l|
 '|%l| "The output is placed in the directory from which you invoked AXIOM or"
 '|%l| "the one you set with the )cd system command."
 '|%l| "The current setting is: "
 '|%b| (|setOutputAlgebra| '|%display%|)
 '|%d|))) 

@

\subsection{characters}
\begin{verbatim}
-------------------- The characters Option --------------------

 Description: choose special output character set


 The characters option may be followed by any one of the 
 following:

    default
 -> plain 

 The current setting is indicated.  This 
 option  determines the special characters used for algebraic 
 output. This is what the current choice of special characters 
 looks like:
   ulc is shown as +          urc is shown as +       
   llc is shown as +          lrc is shown as +       
   vbar is shown as |         hbar is shown as -      
   quad is shown as ?         lbrk is shown as [      
   rbrk is shown as ]         lbrc is shown as {      
   rbrc is shown as }         ttee is shown as +      
   btee is shown as +         rtee is shown as +      
   ltee is shown as +         ctee is shown as +      
   bslash is shown as \    
\end{verbatim}
<<outputcharacters>>=
     (|characters|
      "choose special output character set"
      |interpreter|
      FUNCTION
      |setOutputCharacters|
      NIL
      |htSetOutputCharacters|)
@

\defun{setOutputCharacters}{setOutputCharacters}
\calls{setOutputCharacters}{sayMessage}
\calls{setOutputCharacters}{bright}
\calls{setOutputCharacters}{sayBrightly}
\calls{setOutputCharacters}{concat}
\calls{setOutputCharacters}{pname}
\calls{setOutputCharacters}{specialChar}
\calls{setOutputCharacters}{sayAsManyPerLineAsPossible}
\calls{setOutputCharacters}{pairp}
\calls{setOutputCharacters}{qcdr}
\calls{setOutputCharacters}{qcar}
\calls{setOutputCharacters}{downcase}
\calls{setOutputCharacters}{setOutputCharacters}
\usesdollar{setOutputCharacters}{specialCharacters}
\usesdollar{setOutputCharacters}{plainRTspecialCharacters}
\usesdollar{setOutputCharacters}{RTspecialCharacters}
\usesdollar{setOutputCharacters}{specialCharacterAlist}
<<defun setOutputCharacters>>=
(defun |setOutputCharacters| (arg)
 (let (current char s l fn)
 (declare (special |$specialCharacters| |$plainRTspecialCharacters|
   |$RTspecialCharacters| |$specialCharacterAlist|))
    (if (eq arg '|%initialize%|) 
     (setq |$specialCharacters| |$plainRTspecialCharacters|)
     (progn
      (setq current
       (cond
        ((eq |$specialCharacters| |$RTspecialCharacters|) "default")
        ((eq |$specialCharacters| |$plainRTspecialCharacters|) "plain")
        (t "unknown")))
      (cond
       ((eq arg '|%display%|) current)
       ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
        (|sayMessage|
         `(" The" ,@(|bright| "characters") 
           "option may be followed by any one of the following:"))
        (dolist (name '("default" "plain"))
         (if (string= (string current) name) 
          (|sayBrightly| `(" ->" ,@(|bright| name)))
          (|sayBrightly|  (list "    " name))))
        (terpri)
        (|sayBrightly|
 " The current setting is indicated within the list.  This option determines ")
        (|sayBrightly| 
        " the special characters used for algebraic output.  This is what the")
        (|sayBrightly| 
         " current choice of special characters looks like:")
        (do ((t1 |$specialCharacterAlist| (CDR t1)) (t2 nil))
           ((or (atom t1) 
                (progn (setq t2 (car t1)) nil)
                (progn (progn (setq char (car t2)) t2) nil)) nil)
         (setq s
          (concat "   " (pname char) " is shown as " 
           (pname (|specialChar| char))))
          (setq l (cons s l)))
        (|sayAsManyPerLineAsPossible| (reverse l)))
       ((and (pairp arg)
             (eq (qcdr arg) NIL)
             (progn (setq fn (qcar arg)) t)
             (setq fn (downcase fn)))
        (cond
         ((eq fn '|default|) 
          (setq |$specialCharacters| |$RTspecialCharacters|))
         ((eq fn '|plain|)
          (setq |$specialCharacters| |$plainRTspecialCharacters|))
         (t (|setOutputCharacters| nil))))
       (t (|setOutputCharacters| nil)))))))

@

\subsection{fortran}
\begin{verbatim}
--------------------- The fortran Option ----------------------

 Description: create output in FORTRAN format

 )set output fortran is used to tell AXIOM to turn FORTRAN-style
  output printing on and off, and where to place the output.  By
  default, the destination for the output is the screen but 
  printing is turned off.

Also See: )set fortran

Syntax:   )set output fortran <arg>
    where arg can be one of
  on          turn FORTRAN printing on
  off         turn FORTRAN printing off (default state)
  console     send FORTRAN output to screen (default state)
  fp<.fe>     send FORTRAN output to file with file prefix 
              fp and file extension .fe. If not given, 
              .fe defaults to .sfort.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name.
For example, to send FORTRAN output to the file polymer.sfort,
 issue the two commands

  )set output fortran on
  )set output fortran polymer

The output is placed in the directory from which you invoked
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
\defdollar{fortranFormat}
<<initvars>>=
(defvar |$fortranFormat| nil "create output in FORTRAN format")

@
\defdollar{fortranOutputFile}
<<initvars>>=
(defvar |$fortranOutputFile| "CONSOLE" 
   "where FORTRAN output goes (enter {\em console} or a a pathname)")

@
<<outputfortran>>=
     (|fortran|
      "create output in FORTRAN format"
      |interpreter|
      FUNCTION
      |setOutputFortran|
      (("create output in FORTRAN format"
        LITERALS
        |$fortranFormat|
        (|off| |on|)
        |off|)
       (|break| |$fortranFormat|)
       ("where FORTRAN output goes (enter {\em console} or a a pathname)"
        FILENAME
        |$fortranOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@

\defun{setOutputFortran}{setOutputFortran}
\calls{setOutputFortran}{defiostream}
\calls{setOutputFortran}{concat}
\calls{setOutputFortran}{describeSetOutputFortran}
\calls{setOutputFortran}{upcase}
\calls{setOutputFortran}{pairp}
\calls{setOutputFortran}{qcdr}
\calls{setOutputFortran}{qcar}
\calls{setOutputFortran}{member}
\calls{setOutputFortran}{sayKeyedMsg}
\calls{setOutputFortran}{shut}
\calls{setOutputFortran}{pathnameType}
\calls{setOutputFortran}{pathnameDirectory}
\calls{setOutputFortran}{pathnameName}
\callsdollar{setOutputFortran}{filep}
\calls{setOutputFortran}{makeStream}
\calls{setOutputFortran}{object2String}
\usesdollar{setOutputFortran}{fortranOutputStream}
\usesdollar{setOutputFortran}{fortranOutputFile}
\usesdollar{setOutputFortran}{filep}
\usesdollar{setOutputFortran}{fortranFormat}
<<defun setOutputFortran>>=
(defun |setOutputFortran| (arg)
 (let (label APPEND quiet tmp1 tmp2 ptype fn ft fm filename teststream)
 (declare (special |$fortranOutputStream| |$fortranOutputFile| $filep
    |$fortranFormat|))
  (cond
   ((eq arg '|%initialize%|) 
    (setq |$fortranOutputStream|
     (defiostream '((mode . output) (device . console)) 255 0))
    (setq |$fortranOutputFile| "CONSOLE")
    (setq |$fortranFormat| nil))
   ((eq arg '|%display%|)
    (if |$fortranFormat| 
     (setq label "On:")
     (setq label "Off:"))
    (concat label |$fortranOutputFile|))
   ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?)) 
    (|describeSetOutputFortran|))
   (t
    (DO ()
        ((null (and (listp arg) 
                    (|member| (upcase (car arg)) '(append quiet))))
       nil)
     (cond
      ((eq (upcase (car arg)) 'append) (setq append t))
      ((eq (upcase (car arg)) 'quiet) (setq quiet t))
      (t nil))
     (setq arg (cdr arg)))
    (cond
     ((and (pairp arg)
           (eq (qcdr arg) nil)
           (progn (setq fn (qcar arg)) t)
           (|member| fn '(Y N YE YES NO O ON OF OFF CONSOLE 
             |y| |n| |ye| |yes| |no| |o| |on| |of| |off| |console|)))
       '|ok|)
     (t (setq arg (list fn '|sfort|))))
    (cond
     ((and (pairp arg) (eq (qcdr arg) nil) (progn (setq fn (qcar arg)) t))
      (cond
       ((|member| (upcase fn) '(y n ye o of))
        (|sayKeyedMsg| 's2iv0002 '(fortran |fortran|)))
       ((|member| (upcase fn) '(no off)) (setq |$fortranFormat| nil))
       ((|member| (upcase fn) '(yes on)) (setq |$fortranFormat| t))
       ((eq (upcase fn) 'console)
         (shut |$fortranOutputStream|)
         (setq |$fortranOutputStream|
          (defiostream '((mode . output) (device . console)) 255 0)) 
         (setq |$fortranOutputFile| "CONSOLE"))))
     ((or 
       (and (pairp arg) 
            (progn
             (setq fn (qcar arg))
             (setq tmp1 (qcdr arg))
             (and (pairp tmp1)
                  (eq (qcdr tmp1) nil)
                  (progn (setq ft (qcar tmp1)) t))))
       (and (pairp arg)
            (progn
             (setq fn (qcar arg))
             (setq tmp1 (qcdr arg))
             (and (pairp tmp1)
                  (progn
                   (setq ft (qcar tmp1))
                   (setq tmp2 (qcdr tmp1))
                   (and (pairp tmp2)
                        (eq (qcdr tmp2) nil)
                        (progn (setq fm (qcar tmp2)) t)))))))
      (when (setq ptype (|pathnameType| fn))
        (setq fn (concat (|pathnameDirectory| fn) (|pathnameName| fn)))
        (setq ft ptype))
      (unless fm (setq fm 'a))
      (setq filename ($filep fn ft fm))
      (cond
       ((null filename)
        (|sayKeyedMsg| 'S2IV0003 (list fn ft fm)))
       ((setq teststream (|makeStream| append filename 255 0))
        (SHUT |$fortranOutputStream|)
        (setq |$fortranOutputStream| teststream)
        (setq |$fortranOutputFile| (|object2String| filename))
        (unless quiet
          (|sayKeyedMsg| 'S2IV0004 (list 'fortran |$fortranOutputFile|))))
       ((null quiet)
        (|sayKeyedMsg| 'S2IV0003 (list fn ft fm)))
       (t nil)))
     (t
      (unless quiet (|sayKeyedMsg| 'S2IV0005 nil))
      (|describeSetOutputFortran|)))))))

@

\defun{describeSetOutputFortran}{describeSetOutputFortran}
\calls{describeSetOutputFortran}{sayBrightly}
\calls{describeSetOutputFortran}{setOutputFortran}
<<defun describeSetOutputFortran>>=
(defun |describeSetOutputFortran| ()
 (|sayBrightly| (list
  '|%b| ")set output fortran"
  '|%d| "is used to tell AXIOM to turn FORTRAN-style output"
  '|%l| "printing on and off, and where to place the output.  By default, the"
  '|%l| "destination for the output is the screen but printing is turned off."
  '|%l|
  '|%l| "Also See: )set fortran"
  '|%l|
  '|%l| "Syntax:   )set output fortran <arg>"
  '|%l| "    where arg can be one of"
  '|%l| "  on          turn FORTRAN printing on"
  '|%l| "  off         turn FORTRAN printing off (default state)"
  '|%l| "  console     send FORTRAN output to screen (default state)"
  '|%l|
  "  fp<.fe>     send FORTRAN output to file with file prefix fp and file"
  '|%l| "              extension .fe. If not given, .fe defaults to .sfort."
  '|%l|
  '|%l| "If you wish to send the output to a file, you must issue this command"
  '|%l| "twice: once with"
  '|%b| "on"
  '|%d| "and once with the file name. For example, to send"
  '|%l| "FORTRAN output to the file"
  '|%b| "polymer.sfort,"
  '|%d| "issue the two commands"
  '|%l|
  '|%l| "  )set output fortran on"
  '|%l| "  )set output fortran polymer"
  '|%l|
  '|%l| "The output is placed in the directory from which you invoked AXIOM or"
  '|%l| "the one you set with the )cd system command."
  '|%l| "The current setting is: "
  '|%b| (|setOutputFortran| '|%display%|)
  '|%d|)))

@

\subsection{fraction}
\begin{verbatim}
--------------------- The fraction Option ---------------------

 Description: how fractions are formatted

 The fraction option may be followed by any one of the following:

 -> vertical 
    horizontal

 The current setting is indicated.

\end{verbatim}
\defdollar{fractionDisplayType}
<<initvars>>=
(defvar |$fractionDisplayType| '|vertical| "how fractions are formatted")

@
<<outputfraction>>=
     (|fraction|
      "how fractions are formatted"
      |interpreter|
      LITERALS
      |$fractionDisplayType|
      (|vertical| |horizontal|)
      |vertical|)
@
\subsection{length}
\begin{verbatim}
---------------------- The length Option ----------------------

 Description: line length of output displays

 The length option may be followed by an integer in the range 
 10 to 245 inclusive. The current setting is 77 

\end{verbatim}

\defdollar{margin}
<<initvars>>=
(defvar $margin 3)

@

\defdollar{linelength}
<<initvars>>=
(defvar $linelength 77 "line length of output displays")

@

<<outputlength>>=
     (|length|
      "line length of output displays"
      |interpreter|
      INTEGER
      $LINELENGTH
      (10 245)
      77)
@
\subsection{mathml}
\begin{verbatim}
----------------------- The mathml Option ------------------------

 Description: create output in MathML style

 )set output mathml is used to tell AXIOM to turn MathML-style output
printing on and off, and where to place the output.  By default,
the destination for the output is the screen but printing is 
turned off.

Syntax:   )set output mathml <arg>
    where arg can be one of
  on          turn MathML printing on
  off         turn MathML printing off (default state)
  console     send MathML output to screen (default state)
  fp<.fe>     send MathML output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .smml.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name. 
For example, to send MathML output to the file polymer.smml, 
issue the two commands

  )set output mathml on
  )set output mathml polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
\defdollar{mathmlFormat}
<<initvars>>=
(defvar |$mathmlFormat| nil "create output in MathML format")

@
\defdollar{mathmlOutputFile}
<<initvars>>=
(defvar |$mathmlOutputFile| "CONSOLE" 
   "where MathML output goes (enter {\em console} or a pathname)")

@
<<outputmathml>>=
     (|mathml|
      "create output in MathML style"
      |interpreter|
      FUNCTION
      |setOutputMathml|
      (("create output in MathML format"
        LITERALS
        |$mathmlFormat|
        (|off| |on|)
        |off|)
       (|break| |$mathmlFormat|)
       ("where MathML output goes (enter {\em console} or a pathname)"
        FILENAME
        |$mathmlOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)

@

\defun{setOutputMathml}{setOutputMathml}
\calls{setOutputMathml}{defiostream}
\calls{setOutputMathml}{concat}
\calls{setOutputMathml}{describeSetOutputMathml}
\calls{setOutputMathml}{pairp}
\calls{setOutputMathml}{qcdr}
\calls{setOutputMathml}{qcar}
\calls{setOutputMathml}{member}
\calls{setOutputMathml}{upcase}
\calls{setOutputMathml}{sayKeyedMsg}
\calls{setOutputMathml}{shut}
\calls{setOutputMathml}{pathnameType}
\calls{setOutputMathml}{pathnameDirectory}
\calls{setOutputMathml}{pathnameName}
\callsdollar{setOutputMathml}{filep}
\calls{setOutputMathml}{make-outstream}
\calls{setOutputMathml}{object2String}
\usesdollar{setOutputMathml}{mathmlOutputStream}
\usesdollar{setOutputMathml}{mathmlOutputFile}
\usesdollar{setOutputMathml}{mathmlFormat}
\usesdollar{setOutputMathml}{filep}
<<defun setOutputMathml>>=
(defun |setOutputMathml| (arg)
 (let (label tmp1 tmp2 ptype fn ft fm filename teststream)
 (declare (special |$mathmlOutputStream| |$mathmlOutputFile| |$mathmlFormat|
           $filep))
   (cond
    ((eq arg '|%initialize%|)
     (setq |$mathmlOutputStream|
      (defiostream '((mode . output) (device . console)) 255 0))
     (setq |$mathmlOutputFile| "CONSOLE")
     (setq |$mathmlFormat| nil))
    ((eq arg '|%display%|)
     (if |$mathmlFormat| 
      (setq label "On:")
      (setq label "Off:"))
     (concat label |$mathmlOutputFile|))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeSetOutputMathml|))
    (t
     (cond
      ((and (pairp arg) 
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t)
            (|member| fn '(y n ye yes no o on of off console 
                   |y| |n| |ye| |yes| |no| |o| |on| |of| |off| |console|)))
        '|ok|)
      (t (setq arg (list fn '|smml|))))
     (cond
      ((and (pairp arg) 
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t))
       (cond
        ((|member| (upcase fn) '(y n ye o of))
         (|sayKeyedMsg| 's2iv0002 '(|MathML| |mathml|)))
        ((|member| (upcase fn) '(no off)) (setq |$mathmlFormat| nil))
        ((|member| (upcase fn) '(yes on)) (setq |$mathmlFormat| t))
        ((eq (upcase fn) 'console)
         (shut |$mathmlOutputStream|)
         (setq |$mathmlOutputStream|
          (defiostream '((mode . output) (device . console)) 255 0))
         (setq |$mathmlOutputFile| "CONSOLE"))))
      ((or 
        (and (pairp arg)
             (progn
              (setq fn (qcar arg))
              (setq tmp1 (qcdr arg))
              (and (pairp tmp1)
                   (eq (qcdr tmp1) nil)
                   (progn (setq ft (qcar tmp1)) t))))
        (and (pairp arg)
             (progn (setq fn (qcar arg))
                    (setq tmp1 (qcdr arg))
                    (and (pairp tmp1)
                         (progn
                          (setq ft (qcar tmp1))
                          (setq tmp2 (qcdr tmp1))
                          (and (pairp tmp2)
                               (eq (qcdr tmp2) nil)
                               (progn
                                (setq fm (qcar tmp2))
                                t)))))))
          (when (setq ptype (|pathnameType| fn))
           (setq fn 
            (concat (|pathnameDirectory| fn) (|pathnameName| fn)))
           (setq ft ptype))
          (unless fm (setq fm 'a))
          (setq filename ($filep fn ft fm))
          (cond
           ((null filename) (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))
           ((setq teststream (make-outstream filename 255 0))
            (shut |$mathmlOutputStream|)
            (setq |$mathmlOutputStream| teststream)
            (setq |$mathmlOutputFile| (|object2String| filename))
            (|sayKeyedMsg| 's2iv0004 (list "MathML" |$mathmlOutputFile|)))
           (t (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))))
      (t 
       (|sayKeyedMsg| 's2iv0005 nil)
       (|describeSetOutputMathml|))))))) 

@

\defun{describeSetOutputMathml}{describeSetOutputMathml}
\calls{describeSetOutputMathml}{sayBrightly}
\calls{describeSetOutputMathml}{setOutputMathml}
<<defun describeSetOutputMathml>>=
(defun |describeSetOutputMathml| ()
 (|sayBrightly| (LIST
 '|%b| ")set output mathml"
 '|%d| "is used to tell AXIOM to turn MathML-style output"
 '|%l| "printing on and off, and where to place the output.  By default, the"
 '|%l| "destination for the output is the screen but printing is turned off."
 '|%l|
 '|%l| "Syntax:   )set output mathml <arg>"
 '|%l| "    where arg can be one of"
 '|%l| "  on          turn MathML printing on"
 '|%l| "  off         turn MathML printing off (default state)"
 '|%l| "  console     send MathML output to screen (default state)"
 '|%l| "  fp<.fe>     send MathML output to file with file prefix fp and file"
 '|%l| "              extension .fe. If not given, .fe defaults to .stex."
 '|%l|
 '|%l| "If you wish to send the output to a file, you must issue this command"
 '|%l| "twice: once with"
 '|%b| "on"
 '|%d| "and once with the file name. For example, to send"
 '|%l| "MathML output to the file"
 '|%b| "polymer.smml,"
 '|%d| "issue the two commands"
 '|%l|
 '|%l| "  )set output mathml on"
 '|%l| "  )set output mathml polymer"
 '|%l|
 '|%l| "The output is placed in the directory from which you invoked AXIOM or"
 '|%l| "the one you set with the )cd system command."
 '|%l| "The current setting is: "
 '|%b| (|setOutputMathml| '|%display%|)
 '|%d|)))

@

\subsection{openmath}
\begin{verbatim}
----------------------- The openmath Option ------------------------

 Description: create output in OpenMath style

 )set output tex is used to tell AXIOM to turn OpenMath output
printing on and off, and where to place the output.  By default,
the destination for the output is the screen but printing is 
turned off.

Syntax:   )set output tex <arg>
    where arg can be one of
  on          turn OpenMath printing on
  off         turn OpenMath printing off (default state)
  console     send OpenMath output to screen (default state)
  fp<.fe>     send OpenMath output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .sopen.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name. 
For example, to send OpenMath output to the file polymer.sopen, 
issue the two commands

  )set output openmath on
  )set output openmath polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
\defdollar{openMathFormat}
<<initvars>>=
(defvar |$openMathFormat| nil "create output in OpenMath format")

@
\defdollar{openMathOutputFile}
<<initvars>>=
(defvar |$openMathOutputFile| "CONSOLE"
  "where TeX output goes (enter {\em console} or a pathname)")

@
<<outputopenmath>>=
     (|openmath|
      "create output in OpenMath style"
      |interpreter|
      FUNCTION
      |setOutputOpenMath|
      (("create output in OpenMath format"
        LITERALS
        |$openMathFormat|
        (|off| |on|)
        |off|)
       (|break| |$openMathFormat|)
       ("where TeX output goes (enter {\em console} or a pathname)"
        FILENAME
        |$openMathOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@

\defun{setOutputOpenMath}{setOutputOpenMath}
\calls{setOutputOpenMath}{defiostream}
\calls{setOutputOpenMath}{concat}
\calls{setOutputOpenMath}{describeSetOutputOpenMath}
\calls{setOutputOpenMath}{pairp}
\calls{setOutputOpenMath}{qcdr}
\calls{setOutputOpenMath}{qcar}
\calls{setOutputOpenMath}{member}
\calls{setOutputOpenMath}{upcase}
\calls{setOutputOpenMath}{sayKeyedMsg}
\calls{setOutputOpenMath}{shut}
\calls{setOutputOpenMath}{pathnameType}
\calls{setOutputOpenMath}{pathnameDirectory}
\calls{setOutputOpenMath}{pathnameName}
\callsdollar{setOutputOpenMath}{filep}
\calls{setOutputOpenMath}{make-outstream}
\calls{setOutputOpenMath}{object2String}
\usesdollar{setOutputOpenMath}{openMathOutputStream}
\usesdollar{setOutputOpenMath}{openMathFormat}
\usesdollar{setOutputOpenMath}{filep}
\usesdollar{setOutputOpenMath}{openMathOutputFile}
<<defun setOutputOpenMath>>=
(defun |setOutputOpenMath| (arg)
 (let (label tmp1 tmp2 ptype fn ft fm filename teststream)
 (declare (special |$openMathOutputStream| |$openMathFormat| $filep
     |$openMathOutputFile|))
   (cond
    ((eq arg '|%initialize%|)
     (setq |$openMathOutputStream| 
      (defiostream  '((mode . output) (device . console)) 255 0))
     (setq |$openMathOutputFile| "CONSOLE")
     (setq |$openMathFormat| NIL))
    ((eq arg '|%display%|)
     (if |$openMathFormat| 
      (setq label "On:")
      (setq label "Off:"))
     (concat label |$openMathOutputFile|))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeSetOutputOpenMath|))
    (t
     (cond
      ((and (pairp arg)
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t)
            (|member| fn '(y n ye yes no o on of off console
                   |y| |n| |ye| |yes| |no| |o| |on| |of| |off| |console|)))
        '|ok|)
      (t (setq arg (list fn '|som|))))
     (cond
      ((and (pairp arg)
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t))
       (cond
        ((|member| (upcase fn) '(y n ye o of))
         (|sayKeyedMsg| 's2iv0002 '(|OpenMath| |openmath|)))
        ((|member| (upcase fn) '(no off)) (setq |$openMathFormat| nil))
        ((|member| (upcase fn) '(yes on)) (setq |$openMathFormat| t))
        ((eq (upcase fn) 'console)
         (shut |$openMathOutputStream|)
         (setq |$openMathOutputStream|
          (defiostream '((mode . output) (device . console)) 255 0))
         (setq |$openMathOutputFile| "CONSOLE"))))
      ((or
        (and (pairp arg)
             (progn (setq fn (qcar arg))
                    (setq tmp1 (qcdr arg))
                    (and (pairp tmp1)
                         (eq (qcdr tmp1) nil)
                         (progn (setq ft (qcar tmp1)) t))))
        (and (pairp arg)
             (progn
              (setq fn (qcar arg))
              (setq tmp1 (qcdr arg))
              (and (pairp tmp1)
                   (progn (setq ft (qcar tmp1))
                          (setq tmp2 (qcdr tmp1))
                          (and (pairp tmp2)
                               (eq (qcdr tmp2) nil)
                               (progn (setq fm (qcar tmp2)) t)))))))
        (when (setq ptype (|pathnameType| fn))
         (setq fn (concat (|pathnameDirectory| fn) (|pathnameName| fn)))
         (setq ft ptype))
        (unless fm (setq fm 'a))
        (setq filename ($filep fn ft fm))
        (cond
         ((null filename)
          (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))
         ((setq teststream (make-outstream filename 255 0))
          (shut |$openMathOutputStream|)
          (setq |$openMathOutputStream| teststream)
          (setq |$openMathOutputFile| (|object2String| filename))
          (|sayKeyedMsg| 's2iv0004 (list "OpenMath" |$openMathOutputFile|)))
         (t
          (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))))
      (t
       (|sayKeyedMsg| 's2iv0005 nil)
       (|describeSetOutputOpenMath|))))))) 

@

\defun{describeSetOutputOpenMath}{describeSetOutputOpenMath}
\calls{describeSetOutputOpenMath}{sayBrightly}
\calls{describeSetOutputOpenMath}{setOutputOpenMath}
<<defun describeSetOutputOpenMath>>=
(defun |describeSetOutputOpenMath| ()
 (|sayBrightly| (list
 '|%b| ")set output openmath"
 '|%d| "is used to tell AXIOM to turn OpenMath output"
 '|%l| "printing on and off, and where to place the output.  By default, the"
 '|%l| "destination for the output is the screen but printing is turned off."
 '|%l|
 '|%l| "Syntax:   )set output openmath <arg>"
 '|%l| "    where arg can be one of"
 '|%l| "  on          turn OpenMath printing on"
 '|%l| "  off         turn OpenMath printing off (default state)"
 '|%l| "  console     send OpenMath output to screen (default state)"
 '|%l| 
 "  fp<.fe>     send OpenMath output to file with file prefix fp and file"
 '|%l| "              extension .fe. If not given, .fe defaults to .som."
 '|%l|
 '|%l| "If you wish to send the output to a file, you must issue this command"
 '|%l| "twice: once with"
 '|%b| "on"
 '|%d| "and once with the file name. For example, to send"
 '|%l| "OpenMath output to the file"
 '|%b| "polymer.som,"
 '|%d| "issue the two commands"
 '|%l|
 '|%l| "  )set output openmath on"
 '|%l| "  )set output openmath polymer"
 '|%l|
 '|%l| "The output is placed in the directory from which you invoked AXIOM or"
 '|%l| "the one you set with the )cd system command."
 '|%l| "The current setting is: "
 '|%b| (|setOutputOpenMath| '|%display%|)
 '|%d|)))

@

\subsection{script}
\begin{verbatim}
---------------------- The script Option ----------------------

 Description: display output in SCRIPT formula format

 )set output script is used to tell AXIOM to turn IBM Script
 formula-style output printing on and off, and where to place
 the output.  By default, the destination for the output is the 
 screen but printing is turned off.

Syntax:   )set output script <arg>
    where arg can be one of
  on      turn IBM Script formula printing on
  off     turn IBM Script formula printing off 
          (default state)
  console send IBM Script formula output to screen 
          (default state)
  fp<.fe> send IBM Script formula output to file with file 
          prefix fp and file extension .fe. If not given, 
          .fe defaults to .sform.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file 
name. For example, to send IBM Script formula output to 
the file polymer.sform, issue the two commands

  )set output script on
  )set output script polymer

The output is placed in the directory from which you 
invoked AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
\defdollar{formulaFormat}
<<initvars>>=
(defvar |$formulaFormat| nil "display output in SCRIPT format")

@
\defdollar{formulaOutputFile}
<<initvars>>=
(defvar |$formulaOutputFile| "CONSOLE"
    "where script output goes (enter {\em console} or a a pathname)")

@
<<outputscript>>=
     (|script|
      "display output in SCRIPT formula format"
      |interpreter|
      FUNCTION
      |setOutputFormula|
      (("display output in SCRIPT format"
        LITERALS
        |$formulaFormat|
        (|off| |on|)
        |off|)
       (|break| |$formulaFormat|)
       ("where script output goes (enter {\em console} or a a pathname)"
        FILENAME
        |$formulaOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@

\defun{setOutputFormula}{setOutputFormula}
\calls{setOutputFormula}{defiostream}
\calls{setOutputFormula}{concat}
\calls{setOutputFormula}{describeSetOutputFormula}
\calls{setOutputFormula}{pairp}
\calls{setOutputFormula}{qcdr}
\calls{setOutputFormula}{qcar}
\calls{setOutputFormula}{member}
\calls{setOutputFormula}{upcase}
\calls{setOutputFormula}{sayKeyedMsg}
\calls{setOutputFormula}{shut}
\calls{setOutputFormula}{pathnameType}
\calls{setOutputFormula}{pathnameDirectory}
\calls{setOutputFormula}{pathnameName}
\callsdollar{setOutputFormula}{filep}
\calls{setOutputFormula}{make-outstream}
\calls{setOutputFormula}{object2String}
\usesdollar{setOutputFormula}{formulaOutputStream}
\usesdollar{setOutputFormula}{formulaOutputFile}
\usesdollar{setOutputFormula}{filep}
\usesdollar{setOutputFormula}{formulaFormat}
<<defun setOutputFormula>>=
(defun |setOutputFormula| (arg)
 (let (label tmp1 tmp2 ptype fn ft fm filename teststream)
 (declare (special |$formulaOutputStream| |$formulaOutputFile| $filep
    |$formulaFormat|))
   (cond
    ((eq arg '|%initialize%|)
     (setq |$formulaOutputStream|
      (defiostream '((mode . output) (device . console)) 255 0))
     (setq |$formulaOutputFile| "CONSOLE")
     (setq |$formulaFormat| nil))
    ((eq arg '|%display%|)
     (if |$formulaFormat|
      (setq label "On:")
      (setq label "Off:"))
     (concat label |$formulaOutputFile|))
    ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?)) 
     (|describeSetOutputFormula|))
    (t
     (cond
      ((and (pairp arg)
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t)
            (|member| fn '(y n ye yes no o on of off console
                      |y| |n| |ye| |yes| |no| |o| |on| |of| |off| |console|)))
        '|ok|)
      (t (setq arg (list fn '|sform|))))
     (cond
      ((and (pairp arg)
            (eq (qcdr arg) nil)
            (progn (setq fn (qcar arg)) t))
       (cond
        ((|member| (upcase fn) '(y n ye o of))
         (|sayKeyedMsg| 's2iv0002 '(|script| |script|)))
        ((|member| (upcase fn) '(no off)) (setq |$formulaFormat| nil))
        ((|member| (upcase fn) '(yes on)) (setq |$formulaFormat| t))
        ((eq (upcase fn) 'console)
         (SHUT |$formulaOutputStream|)
         (setq |$formulaOutputStream|
          (defiostream '((mode . output) (device . console)) 255 0))
         (setq |$formulaOutputFile| "CONSOLE"))))
      ((or
        (and (pairp arg)
             (progn (setq fn (qcar arg))
                    (setq tmp1 (qcdr arg))
                    (and (pairp tmp1)
                         (eq (qcdr tmp1) nil)
                         (progn (setq ft (qcar tmp1)) t))))
        (and (pairp arg)
             (progn (setq fn (qcar arg))
                    (setq tmp1 (qcdr arg))
                    (and (pairp tmp1)
                         (progn (setq ft (qcar tmp1))
                                (setq tmp2 (qcdr tmp1))
                                (and (pairp tmp2)
                                     (eq (qcdr tmp2) nil)
                                     (progn 
                                      (setq fm (qcar tmp2)) t)))))))
        (if (setq ptype (|pathnameType| fn))
          (setq fn (concat (|pathnameDirectory| fn) (|pathnameName| fn)))
          (setq ft ptype))
        (unless fm (setq fm 'a))
        (setq filename ($filep fn ft fm))
        (cond
         ((null filename) (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))
         ((setq teststream (make-outstream filename 255 0))
          (shut |$formulaOutputStream|)
          (setq |$formulaOutputStream| teststream)
          (setq |$formulaOutputFile| (|object2String| filename))
          (|sayKeyedMsg| 's2iv0004 
           (list "IBM Script formula" |$formulaOutputFile| )))
         (t
          (|sayKeyedMsg| 's2iv0003 (list fn ft fm)))))
      (t
       (|sayKeyedMsg| 's2iv0005 nil)
       (|describeSetOutputFormula|))))))) 

@
\defun{describeSetOutputFormula}{describeSetOutputFormula}
\calls{describeSetOutputFormula}{sayBrightly}
\calls{describeSetOutputFormula}{setOutputFormula}
<<defun describeSetOutputFormula>>=
(defun |describeSetOutputFormula| ()
 (|sayBrightly| (list
 '|%b| ")set output script"
 '|%d| "is used to tell AXIOM to turn IBM Script formula-style"
 '|%l|
 "output printing on and off, and where to place the output.  By default, the"
 '|%l| "destination for the output is the screen but printing is turned off."
 '|%l|
 '|%l| "Syntax:   )set output script <arg>"
 '|%l| "    where arg can be one of"
 '|%l| "  on          turn IBM Script formula printing on"
 '|%l| "  off         turn IBM Script formula printing off (default state)"
 '|%l| "  console     send IBM Script formula output to screen (default state)"
 '|%l|
 "  fp<.fe>     send IBM Script formula output to file with file prefix fp"
 '|%l|
 "              and file extension .fe. If not given, .fe defaults to .sform."
 '|%l|
 '|%l| "If you wish to send the output to a file, you must issue this command"
 '|%l| "twice: once with"
 '|%b| "on"
 '|%d| "and once with the file name. For example, to send"
 '|%l| "IBM Script formula output to the file"
 '|%b| "polymer.sform,"
 '|%d| "issue the two commands"
 '|%l|
 '|%l| "  )set output script on"
 '|%l| "  )set output script polymer"
 '|%l|
 '|%l| "The output is placed in the directory from which you invoked AXIOM or"
 '|%l| "the one you set with the )cd system command."
 '|%l| "The current setting is: "
 '|%b| (|setOutputFormula| '|%display%|)
 '|%d|)))

@

\subsection{scripts}
\begin{verbatim}
--------------------- The scripts Option ----------------------

 Description: show subscripts,... linearly

 The scripts option may be followed by any one of the following:

    yes
    no

 The current setting is indicated.

\end{verbatim}
\defdollar{linearFormatScripts}
<<initvars>>=
(defvar |$linearFormatScripts| nil "show subscripts,... linearly")

@
<<outputscripts>>=
     (|scripts|
      "show subscripts,... linearly"
      |interpreter|
      LITERALS
      |$linearFormatScripts|
      (|on| |off|)
      |off|)
@
\subsection{showeditor}
\begin{verbatim}
-------------------- The showeditor Option --------------------

 Description: view output of )show in editor

 The showeditor option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{useEditorForShowOutput}
<<initvars>>=
(defvar |$useEditorForShowOutput| nil "view output of )show in editor")

@
<<outputshoweditor>>=
     (|showeditor|
      "view output of )show in editor"
      |interpreter|
      LITERALS
      |$useEditorForShowOutput|
      (|on| |off|)
      |off|)
@
\subsection{tex}
\begin{verbatim}
----------------------- The tex Option ------------------------

 Description: create output in TeX style

 )set output tex is used to tell AXIOM to turn TeX-style output
printing on and off, and where to place the output.  By default,
the destination for the output is the screen but printing is 
turned off.

Syntax:   )set output tex <arg>
    where arg can be one of
  on          turn TeX printing on
  off         turn TeX printing off (default state)
  console     send TeX output to screen (default state)
  fp<.fe>     send TeX output to file with file prefix fp
              and file extension .fe. If not given, 
              .fe defaults to .stex.

If you wish to send the output to a file, you must issue 
this command twice: once with on and once with the file name. 
For example, to send TeX output to the file polymer.stex, 
issue the two commands

  )set output tex on
  )set output tex polymer

The output is placed in the directory from which you invoked 
AXIOM or the one you set with the )cd system command.
The current setting is:  Off:CONSOLE 
\end{verbatim}
\defdollar{texFormat}
<<initvars>>=
(defvar |$texFormat| nil "create output in TeX format")

@
\defdollar{texOutputFile}
<<initvars>>=
(defvar |$texOutputFile| "CONSOLE" 
    "where TeX output goes (enter {\em console} or a pathname)")

@
<<outputtex>>=
     (|tex|
      "create output in TeX style"
      |interpreter|
      FUNCTION
      |setOutputTex|
      (("create output in TeX format"
        LITERALS
        |$texFormat|
        (|off| |on|)
        |off|)
       (|break| |$texFormat|)
       ("where TeX output goes (enter {\em console} or a pathname)"
        FILENAME
        |$texOutputFile|
        |chkOutputFileName|
        "console"))
      NIL)
@

\defun{setOutputTex}{setOutputTex}
\calls{setOutputTex}{defiostream}
\calls{setOutputTex}{concat}
\calls{setOutputTex}{describeSetOutputTex}
\calls{setOutputTex}{pairp}
\calls{setOutputTex}{qcdr}
\calls{setOutputTex}{qcar}
\calls{setOutputTex}{member}
\calls{setOutputTex}{upcase}
\calls{setOutputTex}{sayKeyedMsg}
\calls{setOutputTex}{shut}
\calls{setOutputTex}{pathnameType}
\calls{setOutputTex}{pathnameDirectory}
\calls{setOutputTex}{pathnameName}
\callsdollar{setOutputTex}{filep}
\calls{setOutputTex}{make-outstream}
\calls{setOutputTex}{object2String}
\usesdollar{setOutputTex}{texOutputStream}
\usesdollar{setOutputTex}{texOutputFile}
\usesdollar{setOutputTex}{texFormat}
\usesdollar{setOutputTex}{filep}
<<defun setOutputTex>>=
(defun |setOutputTex| (arg)
 (let (label tmp1 tmp2 ptype fn ft fm filename teststream)
  (declare (special |$texOutputStream| |$texOutputFile| |$texFormat| $filep))
  (cond 
   ((eq arg '|%initialize%|)
    (setq |$texOutputStream| 
     (defiostream '((mode . output) (device . console)) 255 0))
    (setq |$texOutputFile| "CONSOLE")
    (setq |$texFormat| nil))
   ((eq arg '|%display%|)
    (if |$texFormat| 
     (setq label "On:")
     (setq label "Off:"))
    (concat label |$texOutputFile|))
   ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
    (|describeSetOutputTex|))
   (t
    (cond
     ((and (pairp arg)
           (eq (qcdr arg) nil)
           (progn (setq fn (qcar arg)) t)
           (|member| fn '(y n ye yes no o on of off console 
                 |y| |n| |ye| |yes| |no| |o| |on| |of| |off| |console|)))
       '|ok|)
     (t (setq arg (list fn '|stex| nil))))
    (cond
     ((and (pairp arg)
           (eq (qcdr arg) nil)
           (progn (setq fn (qcar arg)) t))
      (cond 
       ((|member| (upcase fn) '(y n ye o of))
        (|sayKeyedMsg| 's2iv0002 '(|TeX| |tex|)))
       ((|member| (upcase fn) '(no off)) (setq |$texFormat| nil))
       ((|member| (upcase fn) '(yes on)) (setq |$texFormat| t))
       ((eq (upcase fn) 'console)
        (shut |$texOutputStream|)
        (setq |$texOutputStream|
          (defiostream '((mode . output) (device . console)) 255 0))
        (setq |$texOutputFile| "CONSOLE"))))
     ((or 
       (and (pairp arg)
            (progn (setq fn (qcar arg))
                   (setq tmp1 (qcdr arg))
                   (and (pairp tmp1)
                        (eq (qcdr tmp1) nil)
                        (progn (setq ft (qcar tmp1)) t))))
      (and (pairp arg)
           (progn (setq fn (qcar arg))
                  (setq tmp1 (qcdr arg))
                  (and (pairp tmp1)
                  (progn (setq ft (qcar tmp1))
                         (setq tmp2 (qcdr tmp1))
                         (and (pairp tmp2)
                              (eq (qcdr tmp2) nil)
                              (progn (setq fm (qcar tmp2)) t)))))))
      (when (setq ptype (|pathnameType| fn))
       (setq fn (concat (|pathnameDirectory| fn) (|pathnameName| fn)))
       (setq ft ptype))
      (unless fm (setq fm 'A))
      (setq filename ($filep fn ft fm))
      (cond
       ((null filename) (|sayKeyedMsg| 's2iv0003 (list fn ft fm )))
       ((setq teststream (make-outstream filename 255 0))
        (shut |$texOutputStream|)
        (setq |$texOutputStream| teststream)
        (setq |$texOutputFile| (|object2String| filename))
        (|sayKeyedMsg| 's2iv0004 (list "TeX" |$texOutputFile|)))
       (t (|sayKeyedMsg| 'S2IV0003 (list fn ft fm )))))
     (t
      (|sayKeyedMsg| 's2iv0005 nil)
      (|describeSetOutputTex|))))))) 

@

\defun{describeSetOutputTex}{describeSetOutputTex}
\calls{describeSetOutputTex}{sayBrightly}
\calls{describeSetOutputTex}{setOutputTex}
<<defun describeSetOutputTex>>=
(defun |describeSetOutputTex| ()
 (|sayBrightly| (list
 '|%b| ")set output tex"
 '|%d| "is used to tell AXIOM to turn TeX-style output"
 '|%l| "printing on and off, and where to place the output.  By default, the"
 '|%l| "destination for the output is the screen but printing is turned off."
 '|%l|
 '|%l| "Syntax:   )set output tex <arg>"
 '|%l| "    where arg can be one of"
 '|%l| "  on          turn TeX printing on"
 '|%l| "  off         turn TeX printing off (default state)"
 '|%l| "  console     send TeX output to screen (default state)"
 '|%l| "  fp<.fe>     send TeX output to file with file prefix fp and file"
 '|%l| "              extension .fe. If not given, .fe defaults to .stex."
 '|%l|
 '|%l| "If you wish to send the output to a file, you must issue this command"
 '|%l| "twice: once with"
 '|%b| "on"
 '|%d| "and once with the file name. For example, to send"
 '|%l| "TeX output to the file"
 '|%b| "polymer.stex,"
 '|%d| "issue the two commands"
 '|%l|
 '|%l| "  )set output tex on"
 '|%l| "  )set output tex polymer"
 '|%l|
 '|%l| "The output is placed in the directory from which you invoked AXIOM or"
 '|%l| "the one you set with the )cd system command."
 '|%l| "The current setting is: "
 '|%b| (|setOutputTex| '|%display%|)
 '|%d|)))

@
\section{quit}
\begin{verbatim}
----------------------- The quit Option -----------------------

 Description: protected or unprotected quit

 The quit option may be followed by any one of the following:

    protected
 -> unprotected 

 The current setting is indicated.

\end{verbatim}
\defdollar{quitCommandType}
<<initvars>>=
(defvar |$quitCommandType| '|protected| "protected or unprotected quit")

@
<<quit>>=
  (|quit|
   "protected or unprotected quit"
   |interpreter|
   LITERALS
   |$quitCommandType|
   (|protected| |unprotected|)
   |protected|)
@
\section{streams}
\begin{verbatim}
              Current Values of  streams  Variables                   

Variable     Description                           Current Value
-----------------------------------------------------------------
calculate    specify number of elements to calculate    10 
showall      display all stream elements computed       off 

\end{verbatim}
<<streams>>=
  (|streams|
   "set some options for working with streams"
   |interpreter|
   TREE
   |novar|
   (
<<streamscalculate>>
<<streamsshowall>>
  ))
@
\subsection{calculate}
\begin{verbatim}
-------------------- The calculate Option ---------------------

 Description: specify number of elements to calculate

   )set streams calculate is used to tell AXIOM how many elements
    of a stream to calculate when a computation uses the stream. 
    The value given after calculate must either be the word all 
    or a positive integer.

      The current setting is 10 .
\end{verbatim}
\defdollar{streamCount}
<<initvars>>=
(defvar |$streamCount| 10 
    "number of initial stream elements you want calculated")

@
<<streamscalculate>>=
     (|calculate|
      "specify number of elements to calculate"
      |interpreter|
      FUNCTION
      |setStreamsCalculate|
      (("number of initial stream elements you want calculated"
       INTEGER
       |$streamCount|
       (0 NIL)
       10))
      NIL)
@

\defun{setStreamsCalculate}{setStreamsCalculate}
\calls{setStreamsCalculate}{object2String}
\calls{setStreamsCalculate}{describeSetStreamsCalculate}
\calls{setStreamsCalculate}{nequal}
\calls{setStreamsCalculate}{sayMessage}
\calls{setStreamsCalculate}{bright}
\calls{setStreamsCalculate}{terminateSystemCommand}
\usesdollar{setStreamsCalculate}{streamCount}
<<defun setStreamsCalculate>>=
(defun |setStreamsCalculate| (arg) 
 (let (n) 
  (declare (special |$streamCount|))
  (cond 
   ((eq arg '|%initialize%|) (setq |$streamCount| 10))
   ((eq arg '|%display%|) (|object2String| |$streamCount|))
   ((or (null arg) (eq arg '|%describe%|) (eq (car arg) '?))
     (|describeSetStreamsCalculate|))
   (t
     (setq n (car arg))
     (cond 
      ((and (nequal n '|all|) (or (null (integerp n)) (minusp n)))
        (|sayMessage| 
         `("Your value of" ,@(|bright| n) "is invalid because ..."))
        (|describeSetStreamsCalculate|)
        (|terminateSystemCommand|))
      (t (setq |$streamCount| n)))))))

@

\defun{describeSetStreamsCalculate}{describeSetStreamsCalculate}
\calls{describeSetStreamsCalculate}{sayKeyedMsg}
\usesdollar{describeSetStreamsCalculate}{streamCount}
<<defun describeSetStreamsCalculate>>=
(defun |describeSetStreamsCalculate| ()
 (declare (special |$streamCount|))
 (|sayKeyedMsg| 's2iv0001 (list |$streamCount|))) 

@

\subsection{showall}
\begin{verbatim}
--------------------- The showall Option ----------------------

 Description: display all stream elements computed

 The showall option may be followed by any one of the following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{streamsShowAll}
<<initvars>>=
(defvar |$streamsShowAll| nil "display all stream elements computed")

@
<<streamsshowall>>=
    (|showall|
     "display all stream elements computed"
     |interpreter|
     LITERALS
     |$streamsShowAll|
     (|on| |off|)
     |off|)
@
\section{system}
\begin{verbatim}
              Current Values of  system  Variables                    

Variable     Description                           Current Value
-----------------------------------------------------------------
functioncode show gen. LISP for functions when compiled off 
optimization show optimized LISP code                   off 
prettyprint  prettyprint BOOT func's as they compile    off 

\end{verbatim}
<<system>>=
  (|system|
   "set some system development variables"
   |development|
   TREE
   |novar|
   (
<<systemfunctioncode>>
<<systemoptimization>>
<<systemprettyprint>>
   ))
@
\subsection{functioncode}
\begin{verbatim}
------------------- The functioncode Option -------------------

 Description: show gen. LISP for functions when compiled

 The functioncode option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{reportCompilation}
<<initvars>>=
(defvar |$reportCompilation| nil "show gen. LISP for functions when compiled")

@
<<systemfunctioncode>>=
     (|functioncode|
      "show gen. LISP for functions when compiled"
      |development|
      LITERALS
      |$reportCompilation|
      (|on| |off|)
      |off|)
@
\subsection{optimization}
\begin{verbatim}
------------------- The optimization Option -------------------

 Description: show optimized LISP code

 The optimization option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{reportOptimization}
<<initvars>>=
(defvar |$reportOptimization| nil "show optimized LISP code")

@
<<systemoptimization>>=
     (|optimization|
      "show optimized LISP code"
      |development|
      LITERALS
      |$reportOptimization|
      (|on| |off|)
      |off|)
@
\subsection{prettyprint}
\begin{verbatim}
------------------- The prettyprint Option --------------------

 Description: prettyprint BOOT func's as they compile

 The prettyprint option may be followed by any one of the 
 following:

    on
 -> off 

 The current setting is indicated.

\end{verbatim}
\defdollar{prettyprint}
<<initvars>>=
(defvar $prettyprint t "prettyprint BOOT func's as they compile")

@
<<systemprettyprint>>=
     (|prettyprint|
      "prettyprint BOOT func's as they compile"
      |development|
      LITERALS
      $prettyprint
      (|on| |off|)
      |on|)
@
\section{userlevel}
\begin{verbatim}
-------------------- The userlevel Option ---------------------

 Description: operation access level of system user

 The userlevel option may be followed by any one of the 
 following:

    interpreter
    compiler
 -> development 

 The current setting is indicated.

\end{verbatim}
\defdollar{UserLevel}
<<initvars>>=
(defvar |$UserLevel| '|development| "operation access level of system user")

@
<<userlevel>>=
  (|userlevel|
   "operation access level of system user"
   |interpreter|
   LITERALS
   |$UserLevel|
   (|interpreter| |compiler| |development|)
   |development|)

<<initvars>>=
(defvar |$setOptions| '(
<<breakmode>>
<<compiler>>
<<debug>>
<<expose>>
<<functions>>
<<fortran>>
<<kernel>>
<<hyperdoc>>
<<help>>
<<history>>
<<messages>>
<<naglink>>
<<output>>
<<quit>>
<<streams>>
<<system>>
<<userlevel>>
 ))

@

\defdollar{setOptionNames}
<<initvars>>=
(defvar |$setOptionNames| (mapcar #'car |$setOptions|))

@

<<postvars>>=
(eval-when (eval load)
 (|initializeSetVariables| |$setOptions|))

@

\section{Set code}

\defun{set}{set}
\calls{set}{set1}
\usesdollar{set}{setOptions}
<<defun set>>=
(defun |set| (l)
 (declare (special |$setOptions|))
 (|set1| l |$setOptions|)) 

@
\defun{set1}{set1}
This function will be called with the top level arguments to )set.
For instance, given the command
\begin{verbatim}
   )set break break
\end{verbatim}
this function gets 
\begin{verbatim}
   (set1 (|break| |break|) ....)
\end{verbatim}
and given the command
\begin{verbatim}
   )set mes auto off
\end{verbatim}
this function gets 
\begin{verbatim}
   (set1 (|mes| |auto| |off|) ....)
\end{verbatim}
which, because ``message'' is a TREE, generates the recursive call:
\begin{verbatim}
   (set1 (|auto| |off|) <the message subtree>)
\end{verbatim}
The ``autoload'' subtree is a FUNCTION (printLoadMessages), 
which gets called with \verb|%describe%|
\calls{set1}{displaySetVariableSettings}
\calls{set1}{seq}
\calls{set1}{exit}
\calls{set1}{selectOption}
\calls{set1}{downcase}
\calls{set1}{lassoc}
\calls{set1}{satisfiesUserLevel}
\calls{set1}{sayKeyedMsg}
\calls{set1}{poundsign}
\calls{set1}{displaySetOptionInformation}
\calls{set1}{kdr}
\calls{set1}{sayMSG}
\calls{set1}{sayMessage}
\calls{set1}{bright}
\calls{set1}{object2String}
\calls{set1}{translateYesNo2TrueFalse}
\calls{set1}{use-fast-links}
\calls{set1}{literals}
\calls{set1}{tree}
\calls{set1}{set1}
\usesdollar{set1}{setOptionNames}
\usesdollar{set1}{UserLevel}
\usesdollar{set1}{displaySetValue}
<<defun set1>>=
(defun |set1| (l settree)
 (let (|$setOptionNames| arg setdata st setfunarg num upperlimit arg2)
  (declare (special |$setOptionNames| |$UserLevel| |$displaySetValue|))
  (cond
   ((null l) (|displaySetVariableSettings| settree '||))
   (t
    (setq |$setOptionNames|
      (do ((t1 settree (cdr t1)) t0 (x nil))
          ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
       (seq
        (exit 
         (setq t0 (cons (elt x 0) t0))))))
    (setq arg 
     (|selectOption| (downcase (car l)) |$setOptionNames| '|optionError|))
    (setq setdata (cons arg (lassoc arg settree)))
    (cond
     ((null (|satisfiesUserLevel| (third setdata)))
      (|sayKeyedMsg| 's2iz0007 (list |$UserLevel| "set option" nil)))
     ((eql 1 (|#| l)) (|displaySetOptionInformation| arg setdata))
     (t
      (setq st (fourth setdata))
      (case (fourth setdata)
       (function
        (setq setfunarg
         (if (eq (elt l 1) 'default) 
          '|%initialize%|
          (kdr l)))
        (if (functionp (fifth setdata))
          (funcall (fifth setdata) setfunarg)
          (|sayMSG| (concatenate 'string "   Function not implemented. "
           (string (fifth setdata)))))
        (when |$displaySetValue|
         (|displaySetOptionInformation| arg setdata))
        NIL)
       (string
        (setq arg2 (elt l 1))
        (cond
         ((eq arg2 'default) (set (fifth setdata) (seventh setdata)))
         (arg2 (set (fifth setdata) arg2))
         (t nil))
        (when (or |$displaySetValue| (null arg2))
         (|displaySetOptionInformation| arg setdata))
        NIL)
       (integer
        (setq arg2
         (progn
          (setq num (elt l 1))
          (cond
           ((and (integerp num)
                 (>= num (elt (sixth setdata) 0))
                 (or (null (setq upperlimit (elt (sixth setdata) 1)))
                     (<= num upperlimit)))
            num)
           (t
            (|selectOption| 
             (elt l 1)
             (cons '|default| (sixth setdata)) nil)))))
        (cond
         ((eq arg2 'default) (set (fifth setdata) (seventh setdata)))
         (arg2 (set (fifth setdata) arg2))
         (t nil))
        (cond
         ((or |$displaySetValue| (null arg2))
          (|displaySetOptionInformation| arg setdata)))
        (cond
         ((null arg2)
          (|sayMessage| 
           `(" Your value" ,@(|bright| (|object2String| (elt l 1)))
             "is not among the valid choices.")))
         (t nil)))
       (literals
        (cond
         ((setq arg2
          (|selectOption| (elt l 1) 
           (cons '|default| (sixth setdata)) nil))
          (cond
           ((eq arg2 'default)
            (set (fifth setdata) 
              (|translateYesNo2TrueFalse| (seventh setdata))))
           (t
            (cond ((eq arg2 '|nobreak|) (use-fast-links t)))
            (cond 
             ((eq arg2 '|fastlinks|)
              (use-fast-links nil)
              (setq arg2 '|break|)))
            (set (fifth setdata) (|translateYesNo2TrueFalse| arg2))))))
        (when (or |$displaySetValue| (null arg2))
          (|displaySetOptionInformation| arg setdata))
        (cond
         ((null arg2)
          (|sayMessage|
           (cons " Your value"
            (append (|bright| (|object2String| (elt l 1)))
             (cons "is not among the valid choices." nil)))))
         (t nil)))
       (tree (|set1| (kdr l) (sixth setdata)) nil)
       (t 
        (|sayMessage|
         `("Cannot handle set tree node type" ,@(|bright| st) |yet|))
        nil))))))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{show help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<show.help>>=
====================================================================
A.22.  )show
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )show nameOrAbbrev
  - )show nameOrAbbrev )operations
  - )show nameOrAbbrev )attributes
 
Command Description: 
This command displays information about AXIOM domain, package and category
constructors. If no options are given, the )operations option is assumed. For
example,
 
)show POLY
)show POLY )operations
)show Polynomial
)show Polynomial )operations
 
each display basic information about the Polynomial domain constructor and
then provide a listing of operations. Since Polynomial requires a Ring (for
example, Integer) as argument, the above commands all refer to a unspecified
ring R. In the list of operations, $ means Polynomial(R).
 
The basic information displayed includes the signature of the constructor
(the name and arguments), the constructor abbreviation, the exposure status
of the constructor, and the name of the library source file for the
constructor.
 
If operation information about a specific domain is wanted, the full or
abbreviated domain name may be used. For example,
 
)show POLY INT
)show POLY INT )operations
)show Polynomial Integer
)show Polynomial Integer )operations
 
are among the combinations that will display the operations exported by the
domain Polynomial(Integer) (as opposed to the general domain constructor
Polynomial). Attributes may be listed by using the )attributes option.
 
Also See: 
o )display
o )set
o )what
 
@ 
\footnote{
\fnref{display}
\fnref{set}
\fnref{what}}

\defun{show}{The )show command}
\calls{show}{showSpad2Cmd}
<<defun show>>=
(defun |show| (arg) (|showSpad2Cmd| arg)) 

@

\defun{showSpad2Cmd}{The internal )show command}
\calls{showSpad2Cmd}{member}
\calls{showSpad2Cmd}{helpSpad2Cmd}
\calls{showSpad2Cmd}{sayKeyedMsg}
\calls{showSpad2Cmd}{qcar}
\calls{showSpad2Cmd}{reportOperations}
\usesdollar{showSpad2Cmd}{showOptions}
\usesdollar{showSpad2Cmd}{e}
\usesdollar{showSpad2Cmd}{env}
\usesdollar{showSpad2Cmd}{InteractiveFrame}
\usesdollar{showSpad2Cmd}{options}
<<defun showSpad2Cmd>>=
(defun |showSpad2Cmd| (arg)
 (let (|$showOptions| |$e| |$env| constr)
 (declare (special |$showOptions| |$e| |$env| |$InteractiveFrame| |$options|))
  (if (equal arg (list nil))
   (|helpSpad2Cmd| '(|show|))
   (progn
    (setq |$showOptions| '(|attributes| |operations|))
    (unless |$options| (setq |$options| '((|operations|))))
    (setq |$e| |$InteractiveFrame|)
    (setq |$env| |$InteractiveFrame|)
    (cond
     ((and (pairp arg) (eq (qcdr arg) nil) (progn (setq constr (qcar arg)) t))
      (cond
       ((|member| constr '(|Union| |Record| |Mapping|))
        (cond
         ((eq constr '|Record|)
           (|sayKeyedMsg| 'S2IZ0044R
            (list constr ")show Record(a: Integer, b: String)" )))
         ((eq constr '|Mapping|) (|sayKeyedMsg| 'S2IZ0044M nil))
         (t
          (|sayKeyedMsg| 'S2IZ0045T
            (list constr ")show Union(a: Integer, b: String)" )))
          (|sayKeyedMsg| 'S2IZ0045U
            (list constr ")show Union(Integer, String)" ))))
       ((and (pairp constr) (eq (qcar constr) '|Mapping|))
               (|sayKeyedMsg| 'S2IZ0044M nil))
       (t (|reportOperations| constr constr))))
     (t (|reportOperations| arg arg)))))))

@

\defun{reportOperations}{reportOperations}
\calls{reportOperations}{sayBrightly}
\calls{reportOperations}{bright}
\calls{reportOperations}{sayKeyedMsg}
\calls{reportOperations}{qcar}
\calls{reportOperations}{isNameOfType}
\calls{reportOperations}{isDomainValuedVariable}
\calls{reportOperations}{reportOpsFromUnitDirectly0}
\calls{reportOperations}{opOf}
\calls{reportOperations}{unabbrev}
\calls{reportOperations}{reportOpsFromLisplib0}
\calls{reportOperations}{evaluateType}
\calls{reportOperations}{mkAtree}
\calls{reportOperations}{removeZeroOneDestructively}
\calls{reportOperations}{isType}
\usesdollar{reportOperations}{env}
\usesdollar{reportOperations}{eval}
\usesdollar{reportOperations}{genValue}
\usesdollar{reportOperations}{quadSymbol}
\usesdollar{reportOperations}{doNotAddEmptyModeIfTrue}
<<defun reportOperations>>=
(defun |reportOperations| (oldArg u)
 (let (|$env| |$eval| |$genValue| |$doNotAddEmptyModeIfTrue|
                tmp1 v unitForm tree unitFormp)
 (declare (special |$env| |$eval| |$genValue| |$quadSymbol|
                      |$doNotAddEmptyModeIfTrue|))
  (setq |$env| (list (list nil)))
  (setq |$eval| t)
  (setq |$genValue| t)
  (when u
   (setq |$doNotAddEmptyModeIfTrue| t)
   (cond 
    ((equal u |$quadSymbol|)
     (|sayBrightly|
       (cons "   mode denotes" (append (|bright| "any") (list '|type|)))))
    ((eq u '%)
     (|sayKeyedMsg| 'S2IZ0063 nil)
     (|sayKeyedMsg| 'S2IZ0064 nil))
    ((and (null (and (pairp u) (eq (qcar u) '|Record|)))
          (null (and (pairp u) (eq (qcar u) '|Union|)))
          (null (|isNameOfType| u))
          (null (and (pairp u)
                     (eq (qcar u) '|typeOf|)
                     (progn
                      (setq tmp1 (qcdr u))
                      (and (pairp tmp1) (eq (qcdr tmp1) nil))))))
     (when (atom oldArg) (setq oldArg (list oldArg)))
     (|sayKeyedMsg| 'S2IZ0063 nil)
     (dolist (op oldArg)
       (|sayKeyedMsg| 'S2IZ0062 (list (|opOf| op)))))
    ((setq v (|isDomainValuedVariable| u)) (|reportOpsFromUnitDirectly0| v))
    (t
      (if (atom u)
       (setq unitForm (|opOf| (|unabbrev| u)))
       (setq unitForm (|unabbrev| u)))
      (if (atom unitForm)
       (|reportOpsFromLisplib0| unitForm u)
       (progn
        (setq unitFormp (|evaluateType| unitForm))
        (setq tree (|mkAtree| (|removeZeroOneDestructively| unitForm)))
        (if (setq unitFormp (|isType| tree))
          (|reportOpsFromUnitDirectly0| unitFormp)
          (|sayKeyedMsg| 'S2IZ0041 (list unitForm))))))))))

@

\defun{reportOpsFromLisplib0}{reportOpsFromLisplib0}
\calls{reportOpsFromLisplib0}{reportOpsFromLisplib1}
\calls{reportOpsFromLisplib0}{reportOpsFromLisplib}
\usesdollar{reportOpsFromLisplib0}{useEditorForShowOutput}
<<defun reportOpsFromLisplib0>>=
(defun |reportOpsFromLisplib0| (unitForm u)
 (declare (special |$useEditorForShowOutput|))
  (if |$useEditorForShowOutput|
   (|reportOpsFromLisplib1| unitForm u)
   (|reportOpsFromLisplib| unitForm u)))

@

\defun{reportOpsFromLisplib1}{reportOpsFromLisplib1}
\calls{reportOpsFromLisplib1}{pathname}
\calls{reportOpsFromLisplib1}{erase}
\calls{reportOpsFromLisplib1}{defiostream}
\calls{reportOpsFromLisplib1}{sayShowWarning}
\calls{reportOpsFromLisplib1}{reportOpsFromLisplib}
\calls{reportOpsFromLisplib1}{shut}
\calls{reportOpsFromLisplib1}{editFile}
\usesdollar{reportOpsFromLisplib1}{sayBrightlyStream}
\usesdollar{reportOpsFromLisplib1}{erase}
<<defun reportOpsFromLisplib1>>=
(defun |reportOpsFromLisplib1| (unitForm u)
 (let (|$sayBrightlyStream| showFile)
 (declare (special |$sayBrightlyStream| $erase))
  (setq showFile (|pathname| (list 'show 'listing 'a)))
  ($erase showFile)
  (setq |$sayBrightlyStream|
   (defiostream `((file ,showFile) (mode . output)) 255 0))
  (|sayShowWarning|)
  (|reportOpsFromLisplib| unitForm u)
  (shut |$sayBrightlyStream|)
  (|editFile| showFile)))

@

\defun{reportOpsFromLisplib}{reportOpsFromLisplib}
\calls{reportOpsFromLisplib}{constructor?}
\calls{reportOpsFromLisplib}{sayKeyedMsg}
\calls{reportOpsFromLisplib}{getConstructorSignature}
\calls{reportOpsFromLisplib}{kdr}
\calls{reportOpsFromLisplib}{getdatabase}
%\calls{reportOpsFromLisplib}{#}
\calls{reportOpsFromLisplib}{eqsubstlist}
\calls{reportOpsFromLisplib}{nreverse0}
\calls{reportOpsFromLisplib}{sayBrightly}
\calls{reportOpsFromLisplib}{concat}
\calls{reportOpsFromLisplib}{bright}
\calls{reportOpsFromLisplib}{form2StringWithWhere}
\calls{reportOpsFromLisplib}{isExposedConstructor}
\calls{reportOpsFromLisplib}{strconc}
\calls{reportOpsFromLisplib}{namestring}
\calls{reportOpsFromLisplib}{selectOptionLC}
\calls{reportOpsFromLisplib}{dc1}
\calls{reportOpsFromLisplib}{centerAndHighlight}
\calls{reportOpsFromLisplib}{specialChar}
\calls{reportOpsFromLisplib}{remdup}
\calls{reportOpsFromLisplib}{msort}
\calls{reportOpsFromLisplib}{form2String}
\calls{reportOpsFromLisplib}{say2PerLine}
\calls{reportOpsFromLisplib}{formatAttribute}
\calls{reportOpsFromLisplib}{displayOperationsFromLisplib}
\usesdollar{reportOpsFromLisplib}{linelength}
\usesdollar{reportOpsFromLisplib}{showOptions}
\usesdollar{reportOpsFromLisplib}{options}
\usesdollar{reportOpsFromLisplib}{FormalMapVariableList}
<<defun reportOpsFromLisplib>>=
(defun |reportOpsFromLisplib| (op u)
 (let (fn s typ nArgs argList functorForm argml tmp1 functorFormWithDecl 
       verb sourceFile opt attList)
 (declare (special $linelength |$showOptions| |$options|
                   |$FormalMapVariableList|))
  (if (null (setq fn (|constructor?| op)))
   (|sayKeyedMsg| 'S2IZ0054 (list u))
   (progn
    (setq argml (when (setq s (|getConstructorSignature| op)) (kdr s)))
    (setq typ (getdatabase op 'constructorkind))
    (setq nArgs (|#| argml))
    (setq argList (kdr (getdatabase op 'constructorform)))
    (setq functorForm (cons op argList))
    (setq argml (eqsubstlist argList |$FormalMapVariableList| argml))
    (mapcar #'(lambda (a m) (push (list '|:| a m) tmp1)) argList argml)
    (setq functorFormWithDecl (cons op (nreverse0 tmp1)))
    (|sayBrightly|
     (|concat| (|bright| (|form2StringWithWhere| functorFormWithDecl))
               " is a" (|bright| typ) "constructor"))
    (|sayBrightly|
     (cons " Abbreviation for"
      (append (|bright| op) (cons "is" (|bright| fn)))))
    (if (|isExposedConstructor| op)
     (setq verb "is")
     (setq verb "is not"))
    (|sayBrightly|
     (cons " This constructor"
      (append (|bright| verb) (list "exposed in this frame."))))
    (setq sourceFile (getdatabase op 'sourcefile))
    (|sayBrightly|
     (cons " Issue"
      (append (|bright| (strconc ")edit " (|namestring| sourceFile)))
              (cons "to see algebra source code for"
               (append (|bright| fn) (list '|%l|))))))
    (dolist (item |$options|)
     (setq opt (|selectOptionLC| (car item) |$showOptions| '|optionError|))
     (cond
      ((eq opt '|layout|) (|dc1| fn))
      ((eq opt '|views|)
       (|sayBrightly|
        (cons "To get" (append (|bright| "views")
          (list "you must give parameters of constructor")))))
      ((eq opt '|attributes|)
       (|centerAndHighlight| "Attributes" $linelength (|specialChar| '|hbar|))
       (|sayBrightly| "")
       (setq attList
        (remdup
         (msort
          (mapcar #'(lambda (x) (caar x))
           (reverse (getdatabase op 'attributes))))))
       (if (null attList)
        (|sayBrightly|
         (|concat| '|%b| (|form2String| functorForm)
                   '|%d| '|has no attributes.| '|%l|))
         (|say2PerLine| (mapcar #'|formatAttribute| attList))))
      ((eq opt '|operations|)
       (|displayOperationsFromLisplib| functorForm))))))))

@

\defun{displayOperationsFromLisplib}{displayOperationsFromLisplib}
\calls{displayOperationsFromLisplib}{getdatabase}
\calls{displayOperationsFromLisplib}{centerAndHighlight}
\calls{displayOperationsFromLisplib}{specialChar}
\calls{displayOperationsFromLisplib}{reportOpsFromUnitDirectly}
\calls{displayOperationsFromLisplib}{remdup}
\calls{displayOperationsFromLisplib}{msort}
\calls{displayOperationsFromLisplib}{eqsubstlist}
\calls{displayOperationsFromLisplib}{formatOperationAlistEntry}
\calls{displayOperationsFromLisplib}{say2PerLine}
\usesdollar{displayOperationsFromLisplib}{FormalMapVariableList}
\usesdollar{displayOperationsFromLisplib}{linelength}
<<defun displayOperationsFromLisplib>>=
(defun |displayOperationsFromLisplib| (form)
 (let (name argl kind opList opl ops)
 (declare (special |$FormalMapVariableList| $linelength))
  (setq name (car form))
  (setq argl (cdr form))
  (setq kind (getdatabase name 'constructorkind))
  (|centerAndHighlight| "Operations" $linelength (|specialChar| '|hbar|))
  (setq opList (getdatabase name 'operationalist))
  (if (null opList)
   (|reportOpsFromUnitDirectly| form)
   (progn
    (setq opl
     (remdup (msort (eqsubstlist argl |$FormalMapVariableList| opList))))
    (setq ops nil)
    (dolist (x opl)
     (setq ops (append ops (|formatOperationAlistEntry| x))))
    (|say2PerLine| ops)))))

@

\defun{reportOpsFromUnitDirectly0}{reportOpsFromUnitDirectly0}
\calls{reportOpsFromUnitDirectly0}{reportOpsFromUnitDirectly1}
\calls{reportOpsFromUnitDirectly0}{reportOpsFromUnitDirectly}
\usesdollar{reportOpsFromUnitDirectly0}{useEditorForShowOutput}
<<defun reportOpsFromUnitDirectly0>>=
(defun |reportOpsFromUnitDirectly0| (D)
 (declare (special |$useEditorForShowOutput|))
  (if |$useEditorForShowOutput|
   (|reportOpsFromUnitDirectly1| D)
   (|reportOpsFromUnitDirectly| D)))

@

\defun{reportOpsFromUnitDirectly}{reportOpsFromUnitDirectly}
\calls{reportOpsFromUnitDirectly}{member}
\calls{reportOpsFromUnitDirectly}{qcar}
\calls{reportOpsFromUnitDirectly}{evalDomain}
\calls{reportOpsFromUnitDirectly}{getdatabase}
\calls{reportOpsFromUnitDirectly}{sayBrightly}
\calls{reportOpsFromUnitDirectly}{concat}
\calls{reportOpsFromUnitDirectly}{formatOpType}
\calls{reportOpsFromUnitDirectly}{isExposedConstructor}
\calls{reportOpsFromUnitDirectly}{bright}
\calls{reportOpsFromUnitDirectly}{sayBrightly}
\calls{reportOpsFromUnitDirectly}{strconc}
\calls{reportOpsFromUnitDirectly}{namestring}
\calls{reportOpsFromUnitDirectly}{selectOptionLC}
\calls{reportOpsFromUnitDirectly}{centerAndHighlight}
\calls{reportOpsFromUnitDirectly}{specialChar}
\calls{reportOpsFromUnitDirectly}{remdup}
\calls{reportOpsFromUnitDirectly}{msort}
\calls{reportOpsFromUnitDirectly}{formatAttribute}
\calls{reportOpsFromUnitDirectly}{centerAndHighlight}
\calls{reportOpsFromUnitDirectly}{getl}
\calls{reportOpsFromUnitDirectly}{systemErrorHere}
\calls{reportOpsFromUnitDirectly}{nreverse0}
\calls{reportOpsFromUnitDirectly}{getOplistForConstructorForm}
\calls{reportOpsFromUnitDirectly}{say2PerLine}
\calls{reportOpsFromUnitDirectly}{formatOperation}
\usesdollar{reportOpsFromUnitDirectly}{commentedOps}
\usesdollar{reportOpsFromUnitDirectly}{CategoryFrame}
\usesdollar{reportOpsFromUnitDirectly}{linelength}
\usesdollar{reportOpsFromUnitDirectly}{options}
\usesdollar{reportOpsFromUnitDirectly}{showOptions}
<<defun reportOpsFromUnitDirectly>>=
(defun |reportOpsFromUnitDirectly| (unitForm)
 (let (|$commentedOps| isRecordOrUnion unit top kind abb sourceFile verb opt 
       attList constructorFunction tmp1 funlist a sigList tmp2)
 (declare (special |$commentedOps| |$CategoryFrame| $linelength |$options|
                      |$showOptions|))
  (setq isRecordOrUnion
   (and (pairp unitForm)
        (progn (setq a (qcar unitForm)) t)
        (|member| a '(|Record| |Union|))))
  (setq unit (|evalDomain| unitForm))
  (setq top (car unitForm))
  (setq kind (getdatabase top 'constructorkind))
  (|sayBrightly|
   (|concat| '|%b| (|formatOpType| unitForm) '|%d|
             "is a" '|%b| kind '|%d| "constructor."))
  (unless isRecordOrUnion
     (setq abb (getdatabase top 'abbreviation))
     (setq sourceFile (getdatabase top 'sourcefile))
     (|sayBrightly|
      (cons " Abbreviation for"
       (append (|bright| top) (cons "is" (|bright| abb)))))
     (if (|isExposedConstructor| top)
      (setq verb "is")
      (setq verb "is not"))
     (|sayBrightly|
      (cons " This constructor"
       (append (|bright| verb) (list "exposed in this frame." ))))
     (|sayBrightly|
      (cons " Issue"
       (append (|bright| (strconc ")edit " (|namestring| sourceFile)))
               (cons "to see algebra source code for"
                (append (|bright| abb) (list '|%l|)))))))
  (dolist (item |$options|)
   (setq opt (|selectOptionLC| (car item) |$showOptions| '|optionError|))
   (cond
    ((eq opt '|attributes|)
     (|centerAndHighlight| "Attributes" $linelength (|specialChar| '|hbar|))
     (if isRecordOrUnion
       (|sayBrightly| "   Records and Unions have no attributes.")
       (progn
        (|sayBrightly| "")
        (setq attList
         (remdup
          (msort
           (mapcar #'(lambda (unit2) (car unit2)) (reverse (elt unit 2))))))
        (|say2PerLine|
         (mapcar #'|formatAttribute| attList))
        nil)))
    ((eq opt '|operations|)
     (setq |$commentedOps| 0)
;      --new form is (<op> <signature> <slotNumber> <condition> <kind>)
     (|centerAndHighlight| "Operations" $linelength (|specialChar| '|hbar|))
     (|sayBrightly| "")
     (cond
      (isRecordOrUnion
       (setq constructorFunction (getl top '|makeFunctionList|))
       (unless constructorFunction
        (|systemErrorHere| "reportOpsFromUnitDirectly"))
       (setq tmp1
        (funcall constructorFunction '$ unitForm |$CategoryFrame|))
       (setq funlist (car tmp1))
       (setq sigList
        (remdup
         (msort
          (dolist (fun funlist (nreverse0 tmp2))
           (push `(((,(caar fun) ,(cadar fun)) t (,(caddar fun) 0 1)))
             tmp2))))))
       (t
        (setq sigList 
         (remdup (msort (|getOplistForConstructorForm| unitForm))))))
      (|say2PerLine|
       (mapcar #'(lambda (x) (|formatOperation| x unit)) sigList))
      (unless (= |$commentedOps| 0)
       (|sayBrightly|
        (list "Functions that are not yet implemented are preceded by"
              (|bright| "--"))))
      (|sayBrightly| ""))))
  nil))

@

\defun{reportOpsFromUnitDirectly1}{reportOpsFromUnitDirectly1}
\calls{reportOpsFromUnitDirectly1}{pathname}
\calls{reportOpsFromUnitDirectly1}{erase}
\calls{reportOpsFromUnitDirectly1}{defiostream}
\calls{reportOpsFromUnitDirectly1}{sayShowWarning}
\calls{reportOpsFromUnitDirectly1}{reportOpsFromUnitDirectly}
\calls{reportOpsFromUnitDirectly1}{shut}
\calls{reportOpsFromUnitDirectly1}{editFile}
\usesdollar{reportOpsFromUnitDirectly1}{sayBrightlyStream}
\usesdollar{reportOpsFromUnitDirectly1}{erase}
<<defun reportOpsFromUnitDirectly1>>=
(defun |reportOpsFromUnitDirectly1| (D)
 (let (|$sayBrightlyStream| showFile)
 (declare (special |$sayBrightlyStream| $erase))
  (setq showFile (|pathname| (list 'show 'listing 'a)))
  ($erase showFile)
  (setq |$sayBrightlyStream|
   (defiostream `((file ,showFile) (mode . output)) 255 0))
  (|sayShowWarning|)
  (|reportOpsFromUnitDirectly| D)
  (shut |$sayBrightlyStream|)
  (|editFile| showFile)))

@

\defun{sayShowWarning}{sayShowWarning}
\calls{sayShowWarning}{sayBrightly}
<<defun sayShowWarning>>=
(defun |sayShowWarning| ()
 (|sayBrightly|
   "Warning: this is a temporary file and will be deleted the next")
 (|sayBrightly|
   "         time you use )show. Rename it and FILE if you wish to")
 (|sayBrightly| "         save the contents.")
 (|sayBrightly| ""))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{spool help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<spool.help>>=
====================================================================
A.23.  )spool
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )spool [fileName]
  - )spool
 
Command Description: 
 
This command is used to save (spool) all AXIOM input and output into a file,
called a spool file. You can only have one spool file active at a time. To
start spool, issue this command with a filename. For example,
 
)spool integrate.out
 
To stop spooling, issue )spool with no filename.
 
If the filename is qualified with a directory, then the output will be placed
in that directory. If no directory information is given, the spool file will
be placed in the current directory. The current directory is the directory
from which you started AXIOM or is the directory you specified using the )cd
command.
 
Also See: 
o )cd
 
@ 
\footnote{\fnref{cd}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{summary help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<summary.help>>=
 )credits      : list the people who have contributed to Axiom

 )help <command> gives more information
 )quit         : exit AXIOM 

 )abbreviation : query, set and remove abbreviations for constructors
 )cd           : set working directory
 )clear        : remove declarations, definitions or values
 )close        : throw away an interpreter client and workspace
 )compile      : invoke constructor compiler
 )display      : display Library operations and objects in your workspace
 )edit         : edit a file
 )frame        : manage interpreter workspaces
 )history      : manage aspects of interactive session
 )library      : introduce new constructors 
 )lisp         : evaluate a LISP expression
 )read         : execute AXIOM commands from a file
 )savesystem   : save LISP image to a file
 )set          : view and set system variables
 )show         : show constructor information
 )spool        : log input and output to a file
 )synonym      : define an abbreviation for system commands
 )system       : issue shell commands
 )trace        : trace execution of functions
 )undo         : restore workspace to earlier state
 )what         : search for various things by name

@
\defun{summary}{summary}
\calls{summary}{obey}
\calls{summary}{concat}
\calls{summary}{getenviron}
<<defun summary>>=
(defun |summary| (l)
 (declare (ignore l))
 (obey (concat "cat " (getenviron "AXIOM") "/doc/spadhelp/summary.help")))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{synonym help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<synonym.help>>=
====================================================================
A.24.  )synonym
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )synonym
  - )synonym synonym fullCommand
  - )what synonyms
 
Command Description: 
 
This command is used to create short synonyms for system command expressions.
For example, the following synonyms might simplify commands you often use.
 
)synonym save         history )save
)synonym restore      history )restore
)synonym mail         system mail
)synonym ls           system ls
)synonym fortran      set output fortran
 
Once defined, synonyms can be used in place of the longer command
expressions. Thus
 
)fortran on
 
is the same as the longer
 
)set fortran output on
 
To list all defined synonyms, issue either of
 
)synonyms
)what synonyms
 
To list, say, all synonyms that contain the substring ``ap'', issue
 
)what synonyms ap
 
Also See: 
o )set
o )what
 
@ 
\footnote{
\fnref{set}
\fnref{what}}

\defun{synonym}{The )synonym command}
\calls{synonym}{synonymSpad2Cmd}
<<defun synonym>>=
(defun |synonym| (&rest ignore)
 (declare (ignore ignore))
 (|synonymSpad2Cmd|))

@

\defun{synonymSpad2Cmd}{The )synonym command implementation}
\calls{synonymSpad2Cmd}{getSystemCommandLine}
\calls{synonymSpad2Cmd}{printSynonyms}
\calls{synonymSpad2Cmd}{processSynonymLine}
\calls{synonymSpad2Cmd}{putalist}
\calls{synonymSpad2Cmd}{terminateSystemCommand}
\usesdollar{synonymSpad2Cmd}{CommandSynonymAlist}
<<defun synonymSpad2Cmd>>=
(defun |synonymSpad2Cmd| ()
 (let (line pair)
 (declare (special |$CommandSynonymAlist|))
  (setq line (|getSystemCommandLine|))
  (if (string= line "")
   (|printSynonyms| nil)
   (progn
    (setq pair (|processSynonymLine| line))
    (if |$CommandSynonymAlist|
     (putalist |$CommandSynonymAlist| (car pair) (cdr pair))
     (setq |$CommandSynonymAlist| (cons pair nil)))))
  (|terminateSystemCommand|)))

@

\defun{synonymsForUserLevel}{Return a sublist of applicable synonyms}
The argument is a list of synonyms, and this returns a sublist of applicable
synonyms at the current user level.
\calls{synonymsForUserLevel}{string2id-n}
\calls{synonymsForUserLevel}{selectOptionLC}
\calls{synonymsForUserLevel}{commandsForUserLevel}
\usesdollar{synonymsForUserLevel}{systemCommands}
\usesdollar{synonymsForUserLevel}{UserLevel}
<<defun synonymsForUserLevel>>=
(defun |synonymsForUserLevel| (arg)
 (let (cmd nl)
 (declare (special |$systemCommands| |$UserLevel|))
  (if (eq |$UserLevel| '|development|)
   arg
   (dolist (syn (reverse arg))
    (setq cmd (string2id-n (cdr syn) 1))
    (when (|selectOptionLC| cmd (|commandsForUserLevel| |$systemCommands|) nil)
     (push syn nl))))
   nl))

@

\defun{getSystemCommandLine}{Get the system command from the input line}
\calls{getSystemCommandLine}{strpos}
\calls{getSystemCommandLine}{substring}
\usesdollar{getSystemCommandLine}{currentLine}
<<defun getSystemCommandLine>>=
(defun |getSystemCommandLine| ()
 (let (p line)
 (declare (special |$currentLine|))
  (setq p (strpos ")" |$currentLine| 0 nil))
  (if p
   (setq line (substring |$currentLine| p nil))
   (setq line |$currentLine|))
 (string-left-trim '(#\space) line)))

@

\defun{processSynonymLine,removeKeyFromLine}{Remove system keyword}
\calls{processSynonymLine,removeKeyFromLine}{dropLeadingBlanks}
\calls{processSynonymLine,removeKeyFromLine}{maxindex}
<<defun processSynonymLine,removeKeyFromLine>>=
(defun |processSynonymLine,removeKeyFromLine| (line)
 (prog (mx)
  (return
   (seq
    (setq line (|dropLeadingBlanks| line))
    (setq mx (maxindex line))
    (exit 
     (do ((i 0 (1+ i)))
         ((> i mx) nil)
       (seq
        (exit
         (if (char= (elt line i) #\space)
          (exit
           (return
            (do ((j (1+ i) (1+ j)))
                ((> j mx) nil)
              (seq
               (exit
                (if (char\= (elt line j) #\space)
                 (exit
                  (return
                   (substring line j nil))))))))))))))))))

@

\defun{processSynonymLine}{processSynonymLine}
\calls{processSynonymLine}{processSynonymLine,removeKeyFromLine}
<<defun processSynonymLine>>=
(defun |processSynonymLine| (line)
 (cons
  (string2id-n line 1)
  (|processSynonymLine,removeKeyFromLine| line)))

@

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{system help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<system.help>>=
====================================================================
A.25.  )system
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )system cmdExpression
 
Command Description: 
 
This command may be used to issue commands to the operating system while
remaining in AXIOM. The cmdExpression is passed to the operating system for
execution.
 
To get an operating system shell, issue, for example, )system sh. When you
enter the key combination, Ctrl-D (pressing and holding the Ctrl key and then
pressing the D key) the shell will terminate and you will return to AXIOM. We
do not recommend this way of creating a shell because Lisp may field some
interrupts instead of the shell. If possible, use a shell running in another
window.
 
If you execute programs that misbehave you may not be able to return to
AXIOM. If this happens, you may have no other choice than to restart AXIOM
and restore the environment via )history )restore, if possible.
 
Also See: 
o )boot
o )fin
o )lisp
o )pquit
o )quit
 
@ 
\footnote{
\fnref{boot}
\fnref{fin}
\fnref{lisp}
\fnref{pquit}
\fnref{quit}}

This command is in the list of \verb|$noParseCommands|
\ref{noParseCommands} which means that its arguments are passed
verbatim. This will eventually result in a call to the function
\verb|handleNoParseCommands| \ref{handleNoParseCommands}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{trace help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<trace.help>>=
====================================================================
A.26.  )trace
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )trace
  - )trace )off
 
  - )trace function [options]
  - )trace constructor [options]
  - )trace domainOrPackage [options]
 
where options can be one or more of
 
  - )after S-expression
  - )before S-expression
  - )break after
  - )break before
  - )cond S-expression
  - )count
  - )count n
  - )depth n
  - )local op1 [... opN]
  - )nonquietly
  - )nt
  - )off
  - )only listOfDataToDisplay
  - )ops
  - )ops op1 [... opN ]
  - )restore
  - )stats
  - )stats reset
  - )timer
  - )varbreak
  - )varbreak var1 [... varN ]
  - )vars
  - )vars var1 [... varN ]
  - )within executingFunction
 
Command Description: 
 
This command is used to trace the execution of functions that make up the
AXIOM system, functions defined by users, and functions from the system
library. Almost all options are available for each type of function but
exceptions will be noted below.
 
To list all functions, constructors, domains and packages that are traced,
simply issue
 
)trace
 
To untrace everything that is traced, issue
 
)trace )off
 
When a function is traced, the default system action is to display the
arguments to the function and the return value when the function is exited.
Note that if a function is left via an action such as a THROW, no return
value will be displayed. Also, optimization of tail recursion may decrease
the number of times a function is actually invoked and so may cause less
trace information to be displayed. Other information can be displayed or
collected when a function is traced and this is controlled by the various
options. Most options will be of interest only to AXIOM system developers. If
a domain or package is traced, the default action is to trace all functions
exported.
 
Individual interpreter, lisp or boot functions can be traced by listing their
names after )trace. Any options that are present must follow the functions to
be traced.
 
)trace f
 
traces the function f. To untrace f, issue
 
)trace f )off
 
Note that if a function name contains a special character, it will be
necessary to escape the character with an underscore
 
)trace _/D_,1
 
To trace all domains or packages that are or will be created from a
particular constructor, give the constructor name or abbreviation after
)trace.
 
)trace MATRIX
)trace List Integer
 
The first command traces all domains currently instantiated with Matrix. If
additional domains are instantiated with this constructor (for example, if
you have used Matrix(Integer) and Matrix(Float)), they will be automatically
traced. The second command traces List(Integer). It is possible to trace
individual functions in a domain or package. See the )ops option below.
 
The following are the general options for the )trace command.
 
  )break after
    causes a Lisp break loop to be entered after exiting the traced function.
 
  )break before
    causes a Lisp break loop to be entered before entering the traced
    function.
 
  )break
    is the same as )break before.
 
  )count
    causes the system to keep a count of the number of times the traced
    function is entered. The total can be displayed with )trace )stats and
    cleared with )trace )stats reset.
 
  )count n
    causes information about the traced function to be displayed for the
    first n executions. After the nth execution, the function is untraced.
 
  )depth n
    causes trace information to be shown for only n levels of recursion of
    the traced function. The command
 
    )trace fib )depth 10
 
    will cause the display of only 10 levels of trace information for the
    recursive execution of a user function fib.
 
  )math
    causes the function arguments and return value to be displayed in the
    AXIOM monospace two-dimensional math format.
 
  )nonquietly
    causes the display of additional messages when a function is traced.
 
  )nt
    This suppresses all normal trace information. This option is useful if
    the )count or )timer options are used and you are interested in the
    statistics but not the function calling information.
 
  )off
    causes untracing of all or specific functions. Without an argument, all
    functions, constructors, domains and packages are untraced. Otherwise,
    the given functions and other objects are untraced. To immediately
    retrace the untraced functions, issue )trace )restore.
 
  )only listOfDataToDisplay
    causes only specific trace information to be shown. The items are listed
    by using the following abbreviations:
 
    a        display all arguments
    v        display return value
    1        display first argument
    2        display second argument
    15       display the 15th argument, and so on
 
  )restore
    causes the last untraced functions to be retraced. If additional options
    are present, they are added to those previously in effect.
 
  )stats
    causes the display of statistics collected by the use of the )count and
    )timer options.
 
  )stats reset
    resets to 0 the statistics collected by the use of the )count and )timer
    options.
 
  )timer
    causes the system to keep a count of execution times for the traced
    function. The total can be displayed with )trace )stats and cleared with
    )trace )stats reset.
 
  )varbreak var1 [... varN]
    causes a Lisp break loop to be entered after the assignment to any of the
    listed variables in the traced function.
 
  )vars
    causes the display of the value of any variable after it is assigned in
    the traced function. Note that library code must have been compiled (see
    description of command )compile ) using the )vartrace option in order to
    support this option.
 
  )vars var1 [... varN]
    causes the display of the value of any of the specified variables after
    they are assigned in the traced function. Note that library code must
    have been compiled (see description of command )compile ) using the
    )vartrace option in order to support this option.
 
  )within executingFunction
    causes the display of trace information only if the traced function is
    called when the given executingFunction is running.
 
The following are the options for tracing constructors, domains and packages.
 
  )local [op1 [... opN] ]
    causes local functions of the constructor to be traced. Note that to
    untrace an individual local function, you must use the fully qualified
    internal name, using the escape character _ before the semicolon.
 
    )trace FRAC )local
    )trace FRAC_;cancelGcd )off
 
  )ops op1 [... opN]
    By default, all operations from a domain or package are traced when the
    domain or package is traced. This option allows you to specify that only
    particular operations should be traced. The command
 
    )trace Integer )ops min max _+ _-
 
    traces four operations from the domain Integer. Since + and - are special
    characters, it is necessary to escape them with an underscore.
 
Also See: 
o )boot
o )lisp
o )ltrace
 
@ 
\footnote{
\fnref{boot}
\fnref{lisp}
\fnref{ltrace}}

\subsection{The trace global variables}
This decides when to give trace and untrace messages.
\defdollar{traceNoisely}
<<initvars>>=
(defvar |$traceNoisely| nil) 

@

\defdollar{reportSpadTrace}
This reports the traced functions
<<initvars>>=
(defvar |$reportSpadTrace| nil) 

@

\defdollar{optionAlist}
<<initvars>>=
(defvar |$optionAlist| nil) 

@

\defdollar{tracedMapSignatures}
<<initvars>>=
(defvar |$tracedMapSignatures| nil) 

@

\defdollar{traceOptionList}
<<initvars>>=
(defvar |$traceOptionList|
 '(|after| |before| |break| |cond| |count| |depth| |local| |mathprint| 
   |nonquietly| |nt| |of| |only| |ops| |restore| |timer| |varbreak| 
   |vars| |within|))

@ 

\defun{trace}{trace}
\calls{trace}{traceSpad2Cmd}
<<defun trace>>=
(defun |trace| (l)
 (|traceSpad2Cmd| l)) 

@

\defun{traceSpad2Cmd}{traceSpad2Cmd}
\calls{traceSpad2Cmd}{pairp}
\calls{traceSpad2Cmd}{qcar}
\calls{traceSpad2Cmd}{qcdr}
\calls{traceSpad2Cmd}{getMapSubNames}
\calls{traceSpad2Cmd}{trace1}
\calls{traceSpad2Cmd}{augmentTraceNames}
\calls{traceSpad2Cmd}{traceReply}
\usesdollar{traceSpad2Cmd}{mapSubNameAlist}
<<defun traceSpad2Cmd>>=
(defun |traceSpad2Cmd| (l)
 (let (tmp1 l1)
 (declare (special |$mapSubNameAlist|))
  (cond
   ((and (pairp l)
         (eq (qcar l) '|Tuple|)
         (progn
          (setq tmp1 (qcdr l))
          (and (pairp tmp1)
               (eq (qcdr tmp1) nil)
               (progn 
                (setq l1 (qcar tmp1))
                t))))
      (setq l l1)))
    (setq |$mapSubNameAlist| (|getMapSubNames| l))
    (|trace1| (|augmentTraceNames| l))
    (|traceReply|)))

@

\defun{trace1}{trace1}
\calls{trace1}{hasOption}
\calls{trace1}{throwKeyedMsg}
\calls{trace1}{unabbrev}
\calls{trace1}{isFunctor}
\calls{trace1}{getTraceOption}
\calls{trace1}{untraceDomainLocalOps}
\calls{trace1}{qslessp}
\calls{trace1}{poundsign}
\calls{trace1}{untrace}
\calls{trace1}{centerAndHighlight}
\calls{trace1}{ptimers}
\calls{trace1}{say}
\calls{trace1}{pcounters}
\calls{trace1}{selectOptionLC}
\calls{trace1}{resetSpacers}
\calls{trace1}{resetTimers}
\calls{trace1}{resetCounters}
\calls{trace1}{pairp}
\calls{trace1}{qcar}
\calls{trace1}{qcdr}
\calls{trace1}{vecp}
\calls{trace1}{sayKeyedMsg}
\calls{trace1}{devaluate}
\calls{trace1}{lassoc}
\calls{trace1}{trace1}
\calls{trace1}{delete}
\calls{trace1}{?t}
\calls{trace1}{seq}
\calls{trace1}{exit}
\calls{trace1}{transTraceItem}
\calls{trace1}{addassoc}
\calls{trace1}{getTraceOptions}
\calls{trace1}{/trace,0}
\calls{trace1}{saveMapSig}
\usesdollar{trace1}{traceNoisely}
\usesdollar{trace1}{options}
\usesdollar{trace1}{lastUntraced}
\usesdollar{trace1}{optionAlist}
<<defun trace1>>=
(defun |trace1| (arg)
 (prog (|$traceNoisely| constructor ops lops temp1 opt a 
        oldl newoptions domain tracelist optionlist domainlist 
        oplist y varlist argument)
  (declare (special |$traceNoisely| |$options| |$lastUntraced| 
     |$optionAlist|))
  (return
   (seq
    (progn 
     (setq |$traceNoisely| nil)
     (cond
      ((|hasOption| |$options| '|nonquietly|)
        (setq |$traceNoisely| t)))
     (cond
      ((|hasOption| |$options| '|off|)
       (cond
        ((or (setq ops (|hasOption| |$options| 'ops))
             (setq lops (|hasOption| |$options| '|local|)))
          (cond
           ((null arg) (|throwKeyedMsg| 's2it0019 nil))
           (t
             (setq constructor
              (|unabbrev|
               (cond
                ((atom arg) arg)
                ((null (cdr arg))
                  (cond
                   ((atom (car arg)) (car arg))
                   (t (car (car arg)))))
                (t nil))))
             (cond
              ((null (|isFunctor| constructor))
                (|throwKeyedMsg| 's2it0020 nil))
              (t
                (cond (ops (setq ops (|getTraceOption| ops)) nil))
                (cond 
                 (lops
                  (setq lops (cdr (|getTraceOption| lops)))
                  (|untraceDomainLocalOps|))
                 (t nil)))))))
        ((and (qslessp 1 (|#| |$options|))
              (null (|hasOption| |$options| '|nonquietly|)))
          (|throwKeyedMsg| 's2it0021 nil))
        (t (|untrace| arg))))
      ((|hasOption| |$options| '|stats|)
        (cond
         ((qslessp 1 (|#| |$options|))
          (|throwKeyedMsg| 's2it0001 (cons ")trace ... )stats" nil)))
         (t
           (setq temp1 (car |$options|))
           (setq opt (cdr temp1))
           (cond
            ((null opt)
              (|centerAndHighlight| "Traced function execution times" 78 '-)
              (|ptimers|)
              (say " ")
              (|centerAndHighlight| "Traced function execution counts" 78 '-)
              (|pcounters|))
            (t
              (|selectOptionLC| (car opt) '(|reset|) '|optionError|)
              (|resetSpacers|)
              (|resetTimers|)
              (|resetCounters|)
              (|throwKeyedMsg| 's2it0002 nil))))))
      ((setq a (|hasOption| |$options| '|restore|))
        (unless (setq oldl |$lastUntraced|)
         (setq newoptions (|delete| a |$options|))
         (if (null arg)
          (|trace1| oldl)
          (progn
           (dolist (x arg)
            (if (and (pairp x)
                     (progn
                      (setq domain (qcar x))
                      (setq oplist (qcdr x))
                      t)
                     (vecp domain))
             (|sayKeyedMsg| 's2it0003 (cons (|devaluate| domain) nil))
             (progn
               (setq |$options| (append newoptions (lassoc x |$optionAlist|)))
               (|trace1| (list x)))))))))
      ((null arg) nil)
      ((and (pairp arg) (eq (qcdr arg) nil) (eq (qcar arg) '?)) (|?t|))
      (t
       (setq tracelist
        (or
         (prog (t1)
          (setq t1 nil)
          (return
           (do ((t2 arg (cdr t2)) (x nil))
               ((or (atom t2) 
                    (progn (setq x (car t2)) nil))
                (nreverse0 t1))
            (seq
             (exit
              (setq t1 (cons (|transTraceItem| x) t1)))))))
         (return nil)))
       (do ((t3 tracelist (cdr t3)) (x nil))
           ((or (atom t3) (progn (setq x (car t3)) nil)) nil)
         (seq
          (exit 
           (setq |$optionAlist| (addassoc x |$options| |$optionAlist|)))))
       (setq optionlist (|getTraceOptions| |$options|))
       (setq argument
        (cond
         ((setq domainlist (lassoc '|of| optionlist))
           (cond
            ((lassoc 'ops optionlist)
              (|throwKeyedMsg| 's2it0004 nil))
            (t
              (setq oplist
               (cond
                (tracelist (list (cons 'ops tracelist)))
                (t nil)))
              (setq varlist
               (cond
                ((setq y (lassoc '|vars| optionlist))
                  (list (cons '|vars| y)))
                (t nil)))
              (append domainlist (append oplist varlist)))))
         (optionlist (append tracelist optionlist))
         (t tracelist)))
       (|/TRACE,0|
        (prog (t4)
         (setq t4 nil)
         (return
          (do ((t5 argument (cdr t5)) (|funName| nil))
              ((or (atom t5) 
                   (progn (setq |funName| (car t5)) nil))
                (nreverse0 t4))
           (seq
            (exit
             (setq t4 (cons |funName| t4))))))))
       (|saveMapSig|
        (prog (t6)
         (setq t6 nil)
         (return
          (do ((t7 argument (cdr t7)) (|funName| nil))
              ((or (atom t7)
                   (progn (setq |funName| (car t7)) nil))
                (nreverse0 t6))
           (seq
            (exit
             (setq t6 (cons |funName| t6))))))))))))))) 

@

\defun{getTraceOptions}{getTraceOptions}
\calls{getTraceOptions}{throwKeyedMsg}
\calls{getTraceOptions}{throwListOfKeyedMsgs}
\calls{getTraceOptions}{poundsign}
\calls{getTraceOptions}{seq}
\calls{getTraceOptions}{exit}
\calls{getTraceOptions}{getTraceOption}
\usesdollar{getTraceOptions}{traceErrorStack}
<<defun getTraceOptions>>=
(defun |getTraceOptions| (|options|)
 (prog (|$traceErrorStack| optionlist temp1 key |parms|)
  (declare (special |$traceErrorStack|))
  (return
   (seq
    (progn
     (setq |$traceErrorStack| nil)
     (setq optionlist
      (prog (t0) 
       (setq t0 nil)
       (return
        (do ((t1 |options| (cdr t1)) (x nil))
            ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
         (seq
          (exit
           (setq t0 (cons (|getTraceOption| x) t0))))))))
     (cond
      (|$traceErrorStack|
       (cond
        ((null (cdr |$traceErrorStack|))
          (setq temp1 (car |$traceErrorStack|))
          (setq key (car temp1))
          (setq |parms| (cadr temp1))
          (|throwKeyedMsg| key (cons "" |parms|)))
        (t
          (|throwListOfKeyedMsgs| 's2it0017
           (cons (|#| |$traceErrorStack|) nil)
           (nreverse |$traceErrorStack|)))))
      (t optionlist))))))) 

@

\defun{saveMapSig}{saveMapSig}
\calls{saveMapSig}{rassoc}
\calls{saveMapSig}{addassoc}
\calls{saveMapSig}{getMapSig}
\usesdollar{saveMapSig}{tracedMapSignatures}
\usesdollar{saveMapSig}{mapSubNameAlist}
<<defun saveMapSig>>=
(defun |saveMapSig| (funnames)
 (let (map)
 (declare (special |$tracedMapSignatures| |$mapSubNameAlist|))
  (dolist (name funnames)
   (when (setq map (|rassoc| name |$mapSubNameAlist|))
     (setq |$tracedMapSignatures|
       (addassoc name (|getMapSig| map name) |$tracedMapSignatures|))))))

@

\defun{getMapSig}{getMapSig}
\calls{getMapSig}{get}
\calls{getMapSig}{boot-equal}
\usesdollar{getMapSig}{InteractiveFrame}
<<defun getMapSig>>=
(defun |getMapSig| (mapname subname)
 (let (lmms sig)
 (declare (special |$InteractiveFrame|))
  (when (setq lmms (|get| mapname '|localModemap| |$InteractiveFrame|))
    (do ((t0 lmms (cdr t0)) (|mm| nil) (t1 nil sig))
        ((or (atom t0) (progn (setq |mm| (car t0)) nil) t1) nil)
      (when (boot-equal (cadr |mm|) subname) (setq sig (cdar |mm|))))
    sig)))

@

\defun{getTraceOption}{getTraceOption}
\calls{getTraceOption,hn}{seq}
\calls{getTraceOption,hn}{exit}
\calls{getTraceOption,hn}{isDomainOrPackage}
\calls{getTraceOption,hn}{stackTraceOptionError}
\calls{getTraceOption,hn}{domainToGenvar}
<<defun getTraceOption,hn>>=
(defun |getTraceOption,hn| (x)
 (prog (g)
  (return
   (seq
    (if (and (atom x) (null (upper-case-p (elt (princ-to-string x) 0))))
     (exit
      (seq
       (if (|isDomainOrPackage| (eval x)) (exit x))
       (exit 
        (|stackTraceOptionError|
         (cons 's2it0013 (cons (cons x nil) nil)))))))
    (if (setq g (|domainToGenvar| x)) (exit g))
    (exit
     (|stackTraceOptionError| (cons 's2it0013 (cons (cons x nil) nil)))))))) 

@

\calls{getTraceOption}{memq}
\calls{getTraceOption}{seq}
\calls{getTraceOption}{exit}
\calls{getTraceOption}{selectOptionLC}
\calls{getTraceOption}{identp}
\calls{getTraceOption}{stackTraceOptionError}
\calls{getTraceOption}{concat}
\calls{getTraceOption}{object2String}
\calls{getTraceOption}{transOnlyOption}
\calls{getTraceOption}{pairp}
\calls{getTraceOption}{qcdr}
\calls{getTraceOption}{qcar}
\calls{getTraceOption}{getTraceOption,hn}
\calls{getTraceOption}{isListOfIdentifiersOrStrings}
\calls{getTraceOption}{isListOfIdentifiers}
\calls{getTraceOption}{throwKeyedMsg}
\usesdollar{getTraceOption}{traceOptionList}
<<defun getTraceOption>>=
(defun |getTraceOption| (arg)
 (prog (l |opts| key a |n|)
 (declare (special |$traceOptionList|))
  (return
   (seq
    (progn
     (setq key (car arg))
     (setq l (cdr arg))
     (setq key
       (|selectOptionLC| key |$traceOptionList| '|traceOptionError|))
     (setq arg (cons key l))
     (cond
      ((memq key '(|nonquietly| |timer| |nt|)) arg)
      ((eq key '|break|)
       (cond
        ((null l) (cons '|break| (cons '|before| nil)))
        (t
          (setq |opts|
           (prog (t0)
            (setq t0 nil)
            (return
             (do ((t1 l (cdr t1)) (y nil))
                 ((or (atom t1)
                      (progn (setq y (car t1)) nil))
                    (nreverse0 t0))
              (seq 
               (exit 
                (setq t0 
                 (cons 
                  (|selectOptionLC| y '(|before| |after|) nil) t0))))))))
          (cond
           ((prog (t2)
             (setq t2 t)
             (return 
              (do ((t3 nil (null t2)) (t4 |opts| (cdr t4)) (y nil))
                  ((or t3 (atom t4) (progn (setq y (car t4)) nil)) t2)
                 (seq
                  (exit
                   (setq t2 (and t2 (identp y))))))))
              (cons '|break| |opts|))
           (t
            (|stackTraceOptionError| (cons 's2it0008 (cons nil nil))))))))
      ((eq key '|restore|)
       (cond
        ((null l) arg)
        (t 
         (|stackTraceOptionError| 
          (cons 's2it0009 
           (cons (cons (concat ")" (|object2String| key)) nil) nil))))))
      ((eq key '|only|) (cons '|only| (|transOnlyOption| l)))
      ((eq key '|within|)
        (cond
         ((and (pairp l) 
               (eq (qcdr l) nil)
               (progn (setq a (qcar l)) t)
               (identp a))
           arg)
         (t 
           (|stackTraceOptionError| 
            (cons 's2it0010 (cons (cons ")within" nil) nil))))))
      ((memq key '(|cond| |before| |after|))
        (setq key 
         (cond 
          ((eq key '|cond|) '|when|)
          (t key)))
        (cond
         ((and (pairp l) 
               (eq (qcdr l) nil)
               (progn (setq a (qcar l)) t))
            (cons key l))
         (t 
          (|stackTraceOptionError|
           (cons 's2it0011
            (cons
             (cons (concat ")"
              (|object2String| key)) nil) nil))))))
      ((eq key '|depth|)
        (cond 
         ((and (pairp l) 
               (eq (qcdr l) nil)
               (progn (setq |n| (qcar l)) t)
               (integerp |n|))
           arg)
         (t 
          (|stackTraceOptionError| 
           (cons 's2it0012 (cons (cons ")depth" nil) nil))))))
      ((eq key '|count|)
        (cond 
         ((or (null l) 
              (and (pairp l) 
                   (eq (qcdr l) nil)
                   (progn (setq |n| (qcar l)) t)
                   (integerp |n|)))
            arg)
         (t 
          (|stackTraceOptionError|
            (cons 's2it0012 (cons (cons ")count" nil) nil))))))
      ((eq key '|of|)
        (cons '|of|
         (prog (t5)
          (setq t5 nil)
          (return
           (do ((t6 l (cdr t6)) (y nil))
               ((or (atom t6) (progn (setq y (car t6)) nil)) (nreverse0 t5))
            (seq
             (exit
              (setq t5 (cons (|getTraceOption,hn| y) t5)))))))))
      ((memq key '(|local| ops |vars|))
        (cond
         ((or (null l)
              (and (pairp l) (eq (qcdr l) nil) (eq (qcar l) '|all|)))
           (cons key '|all|))
         ((|isListOfIdentifiersOrStrings| l) arg)
         (t
           (|stackTraceOptionError|
            (cons 's2it0015
             (cons
              (cons (concat ")" (|object2String| key)) nil) nil))))))
      ((eq key '|varbreak|)
        (cond
         ((or (null l) 
              (and (pairp l) (eq (qcdr l) nil) (eq (qcar l) '|all|)))
           (cons '|varbreak| '|all|))
         ((|isListOfIdentifiers| l) arg)
         (t
           (|stackTraceOptionError|
            (cons 's2it0016
             (cons
              (cons (concat ")" (|object2String| key)) nil) nil))))))
      ((eq key '|mathprint|)
        (cond
         ((null l) arg)
         (t
           (|stackTraceOptionError|
            (cons 's2it0009
             (cons
              (cons (concat ")" (|object2String| key)) nil) nil))))))
      (key (|throwKeyedMsg| 's2it0005 (cons key nil))))))))) 

@

\defun{traceOptionError}{traceOptionError}
\calls{traceOptionError}{stackTraceOptionError}
\calls{traceOptionError}{commandAmbiguityError}
<<defun traceOptionError>>=
(defun |traceOptionError| (opt keys)
 (if (null keys)
  (|stackTraceOptionError| (cons 's2it0007 (cons (cons opt nil) nil)))
  (|commandAmbiguityError| '|trace option| opt keys)))

@

\defun{resetTimers}{resetTimers}
\calls{resetTimers}{concat}
\uses{resetTimers}{/timerlist}
<<defun resetTimers>>=
(defun |resetTimers| ()
 (declare (special /timerlist))
 (dolist (timer /timerlist)
  (set (intern (concat timer ",TIMER")) 0)))

@

\defun{resetSpacers}{resetSpacers}
\calls{resetSpacers}{concat}
\uses{resetSpacers}{/spacelist}
<<defun resetSpacers>>=
(defun |resetSpacers| ()
 (declare (special /spacelist))
 (dolist (spacer /spacelist)
   (set (intern (concat spacer ",SPACE")) 0)))

@
\defun{resetCounters}{resetCounters}
\calls{resetCounters}{concat}
\uses{resetCounters}{/countlist}
<<defun resetCounters>>=
(defun |resetCounters| ()
 (declare (special /countlist))
 (dolist (k /countlist)
  (set (intern (concat k ",COUNT")) 0)))

@

\defun{ptimers}{ptimers}
\calls{ptimers}{sayBrightly}
\calls{ptimers}{bright}
\calls{ptimers}{quotient}
\calls{ptimers}{concat}
\calls{ptimers}{float}
\uses{ptimers}{/timerlist}
<<defun ptimers>>=
(defun |ptimers| ()
  (declare (special /timerlist |$timerTicksPerSecond|))
  (if (null /timerlist) 
   (|sayBrightly| "   no functions are timed")
   (dolist (timer /timerlist)
     (|sayBrightly|
      `("  " ,@(|bright| timer) |:| " "
         ,(quotient (eval (intern (concat timer ",TIMER")))
            (|float| |$timerTicksPerSecond|)) " sec.")))))

@

\defun{pspacers}{pspacers}
\calls{pspacers}{sayBrightly}
\calls{pspacers}{bright}
\calls{pspacers}{concat}
\uses{pspacers}{/spacelist}
<<defun pspacers>>=
(defun |pspacers| ()
 (declare (special /spacelist))
 (if (null /spacelist)
   (|sayBrightly| "   no functions have space monitored")
   (dolist (spacer /spacelist)
     (|sayBrightly|
      `("  " ,@(|bright| spacer) |: | 
        ,(eval (intern (concat spacer ",SPACE"))) " bytes")))))

@

\defun{pcounters}{pcounters}
\calls{pcounters}{sayBrightly}
\calls{pcounters}{bright}
\calls{pcounters}{concat}
\uses{pcounters}{/countlist}
<<defun pcounters>>=
(defun |pcounters| ()
 (declare (special /countlist))
 (if (null /countlist) 
   (|sayBrightly| "   no functions are being counted")
   (dolist (k /countlist)
     (|sayBrightly|
      `("  " ,@(|bright| k) |:| " " ,(eval (intern (concat k ",COUNT")))
        " times")))))

@

\defun{transOnlyOption}{transOnlyOption}
\calls{transOnlyOption}{transOnlyOption}
\calls{transOnlyOption}{memq}
\calls{transOnlyOption}{upcase}
\calls{transOnlyOption}{stackTraceOptionError}
\calls{transOnlyOption}{pairp}
\calls{transOnlyOption}{qcar}
\calls{transOnlyOption}{qcdr}
<<defun transOnlyOption>>=
(defun |transOnlyOption| (arg)
 (let (y n)
  (when (and (pairp arg) (progn (setq n (qcar arg)) (setq y (qcdr arg)) t))
    (cond
     ((integerp n) (cons n (|transOnlyOption| y)))
     ((memq (setq n (upcase n)) '(v a c)) (cons n (|transOnlyOption| y)))
     (t 
        (|stackTraceOptionError| (cons 's2it0006 (list (list n))))
        (|transOnlyOption| y))))))

@

\defun{stackTraceOptionError}{stackTraceOptionError}
\usesdollar{stackTraceOptionError}{traceErrorStack}
<<defun stackTraceOptionError>>=
(defun |stackTraceOptionError| (x)
 (declare (special |$traceErrorStack|))
 (push x |$traceErrorStack|)
 nil)

@

\defun{removeOption}{removeOption}
\calls{removeOption}{nequal}
<<defun removeOption>>=
(defun |removeOption| (op options)
 (let (opt t0)
  (do ((t1 options (cdr t1)) (optentry nil))
      ((or (atom t1)
           (progn (setq optentry (car t1)) nil)
           (progn (progn (setq opt (car optentry)) optentry) nil))
    (nreverse0 t0))
  (when (nequal opt op) (setq t0 (cons optentry t0))))))

@

\defun{domainToGenvar}{domainToGenvar}
\calls{domainToGenvar}{unabbrevAndLoad}
\calls{domainToGenvar}{getdatabase}
\calls{domainToGenvar}{opOf}
\calls{domainToGenvar}{genDomainTraceName}
\calls{domainToGenvar}{evalDomain}
\usesdollar{domainToGenvar}{doNotAddEmptyModeIfTrue}
<<defun domainToGenvar>>=
(defun |domainToGenvar| (arg)
 (let (|$doNotAddEmptyModeIfTrue| y g)
 (declare (special |$doNotAddEmptyModeIfTrue|))
  (setq |$doNotAddEmptyModeIfTrue| t)
  (when
   (and (setq y (|unabbrevAndLoad| arg))
        (eq (getdatabase (|opOf| y) 'constructorkind) '|domain|))
     (setq g (|genDomainTraceName| y))
     (set g (|evalDomain| y))
     g)))

@

\defun{genDomainTraceName}{genDomainTraceName}
\calls{genDomainTraceName}{lassoc}
\calls{genDomainTraceName}{genvar}
\usesdollar{genDomainTraceName}{domainTraceNameAssoc}
<<defun genDomainTraceName>>=
(defun |genDomainTraceName| (y)
 (let (u g)
 (declare (special |$domainTraceNameAssoc|))
   (if (setq u (lassoc y |$domainTraceNameAssoc|)) 
    u
    (progn
     (setq g (genvar))
     (setq |$domainTraceNameAssoc| (cons (cons y g) |$domainTraceNameAssoc|))
     g))))

@

\defun{untrace}{untrace}
\calls{untrace}{copy}
\calls{untrace}{transTraceItem}
\calls{untrace}{/untrace,0}
\calls{untrace}{lassocSub}
\calls{untrace}{removeTracedMapSigs}
\usesdollar{untrace}{lastUntraced}
\usesdollar{untrace}{mapSubNameAlist}
\uses{untrace}{/tracenames}
<<defun untrace>>=
(defun |untrace| (arg)
 (let (untracelist)
 (declare (special |$lastUntraced| /tracenames |$mapSubNameAlist|))
  (if arg
   (setq |$lastUntraced| arg)
   (setq |$lastUntraced| (copy /tracenames)))
  (setq untracelist
   (do ((t1 arg (cdr t1)) (x nil) (t0 nil))
       ((or (atom t1) (progn (setq x (car t1)) nil))
      (nreverse0 t0))
     (push (|transTraceItem| x) t0)))
  (|/UNTRACE,0|
   (do ((t3 untracelist (cdr t3)) (|funName| nil) (t2 nil))
       ((or (atom t3) (progn (setq |funName| (car t3)) nil))
     (nreverse0 t2))
    (push (|lassocSub| |funName| |$mapSubNameAlist|) t2)))
  (|removeTracedMapSigs| untracelist))) 

@

\defun{transTraceItem}{transTraceItem}
\calls{transTraceItem}{get}
\calls{transTraceItem}{member}
\calls{transTraceItem}{objMode}
\calls{transTraceItem}{objVal}
\calls{transTraceItem}{domainToGenvar}
\calls{transTraceItem}{unabbrev}
\calls{transTraceItem}{constructor?}
\calls{transTraceItem}{pairp}
\calls{transTraceItem}{vecp}
\calls{transTraceItem}{transTraceItem}
\calls{transTraceItem}{devaluate}
\calls{transTraceItem}{throwKeyedMsg}
\usesdollar{transTraceItem}{doNotAddEmptyModeIfTrue}
<<defun transTraceItem>>=
(defun |transTraceItem| (x)
 (prog (|$doNotAddEmptyModeIfTrue| |value| y)
  (declare (special |$doNotAddEmptyModeIfTrue|))
  (return
   (progn
    (setq |$doNotAddEmptyModeIfTrue| t)
    (cond
     ((atom x)
       (cond
        ((and (setq |value| (|get| x '|value| |$InteractiveFrame|))
              (|member| (|objMode| |value|)
                '((|Mode|) (|Domain|) (|SubDomain| (|Domain|)))))
          (setq x (|objVal| |value|))
          (cond 
           ((setq y (|domainToGenvar| x)) y)
           (t x)))
        ((upper-case-p (elt (princ-to-string x) 0))
          (setq y (|unabbrev| x))
          (cond
           ((|constructor?| y) y)
           ((and (pairp y) (|constructor?| (car y))) (car y))
           ((setq y (|domainToGenvar| x)) y)
           (t x)))
        (t x)))
     ((vecp (car x)) (|transTraceItem| (|devaluate| (car x))))
     ((setq y (|domainToGenvar| x)) y)
     (t (|throwKeyedMsg| 's2it0018 (cons x nil)))))))) 

@

\defun{removeTracedMapSigs}{removeTracedMapSigs}
\usesdollar{removeTracedMapSigs}{tracedMapSignatures}
<<defun removeTracedMapSigs>>=
(defun |removeTracedMapSigs| (untraceList)
 (declare (special |$tracedMapSignatures|))
 (dolist (name untraceList)
   (remprop name |$tracedMapSignatures|)))

@

\defun{coerceTraceArgs2E}{coerceTraceArgs2E}
\calls{coerceTraceArgs2E}{memq}
\calls{coerceTraceArgs2E}{spadsysnamep}
\calls{coerceTraceArgs2E}{pname}
\calls{coerceTraceArgs2E}{coerceSpadArgs2E}
\calls{coerceTraceArgs2E}{objValUnwrap}
\calls{coerceTraceArgs2E}{coerceInteractive}
\calls{coerceTraceArgs2E}{objNewWrap}
\usesdollar{coerceTraceArgs2E}{OutputForm}
\usesdollar{coerceTraceArgs2E}{mathTraceList}
\usesdollar{coerceTraceArgs2E}{tracedMapSignatures}
<<defun coerceTraceArgs2E>>=
(defun |coerceTraceArgs2E| (tracename subname args)
 (declare (ignore tracename))
 (let (name)
  (declare (special |$OutputForm| |$mathTraceList| |$tracedMapSignatures|))
  (cond
   ((memq (setq name subname) |$mathTraceList|)
     (if (spadsysnamep (pname name))
      (|coerceSpadArgs2E| (reverse (cdr (reverse args))))
      (do ((t1 '(|arg1| |arg2| |arg3| |arg4| |arg5| |arg6| |arg7| |arg8| 
                 |arg9| |arg10| |arg11| |arg12| |arg13| |arg14| |arg15| 
                 |arg16| |arg17| |arg18| |arg19|) (cdr t1))
           (name nil)
           (t2 args (cdr t2))
           (arg nil)
           (t3 (cdr (lassoc subname |$tracedMapSignatures|)) (cdr t3))
           (type nil)
           (t0 nil))
          ((or (atom t1)
               (progn (setq name (car t1)) nil)
               (atom t2)
               (progn (setq arg (car t2)) nil)
               (atom t3)
               (progn (setq type (car t3)) nil)) 
             (nreverse0 t0))
          (setq t0
           (cons 
            (list '= name 
             (|objValUnwrap| 
              (|coerceInteractive|
               (|objNewWrap| arg type) |$OutputForm|))) t0)))))
   ((spadsysnamep (pname name)) (reverse (cdr (reverse args))))
   (t args))))

@

\defun{coerceSpadArgs2E}{coerceSpadArgs2E}
\calls{coerceSpadArgs2E}{seq}
\calls{coerceSpadArgs2E}{exit}
\calls{coerceSpadArgs2E}{objValUnwrap}
\calls{coerceSpadArgs2E}{coerceInteractive}
\calls{coerceSpadArgs2E}{objNewWrap}
\usesdollar{coerceSpadArgs2E}{streamCount}
\usesdollar{coerceSpadArgs2E}{OutputForm}
\usesdollar{coerceSpadArgs2E}{tracedSpadModemap}
<<defun coerceSpadArgs2E>>=
(defun |coerceSpadArgs2E| (args)
 (let ((|$streamCount| 0))
  (declare (special |$streamCount| |$OutputForm| |$tracedSpadModemap|))
  (do ((t1 '(|arg1| |arg2| |arg3| |arg4| |arg5| |arg6| |arg7| |arg8| 
             |arg9| |arg10| |arg11| |arg12| |arg13| |arg14| |arg15| 
             |arg16| |arg17| |arg18| |arg19|) (cdr t1))
       (name nil)
       (t2 args (cdr t2))
       (arg nil)
       (t3 (cdr |$tracedSpadModemap|) (cdr t3))
       (type nil)
       (t0 nil))
      ((or (atom t1)
           (progn (setq name (car t1)) nil)
           (atom t2)
           (progn (setq arg (car t2)) nil)
           (atom t3)
           (progn (setq type (car t3)) nil))
        (nreverse0 t0))
    (seq
     (exit
      (setq t0
       (cons
        (cons '=
         (cons name
          (cons (|objValUnwrap|
            (|coerceInteractive| 
             (|objNewWrap| arg type)
             |$OutputForm|)) nil)))
         t0)))))))

@

\defun{subTypes}{subTypes}
\calls{subTypes}{lassoc}
\calls{subTypes}{seq}
\calls{subTypes}{exit}
\calls{subTypes}{subTypes}
<<defun subTypes>>=
(defun |subTypes| (|mm| |sublist|)
 (prog (s)
  (return
   (seq
    (cond
     ((atom |mm|) 
       (cond ((setq s (lassoc |mm| |sublist|)) s) (t |mm|)))
     (t
      (prog (t0)
       (setq t0 nil)
       (return
        (do ((t1 |mm| (cdr t1)) (|m| nil))
            ((or (atom t1) (progn (setq |m| (car t1)) nil)) (nreverse0 t0))
         (seq
          (exit
           (setq t0 (cons (|subTypes| |m| |sublist|) t0))))))))))))) 

@

\defun{coerceTraceFunValue2E}{coerceTraceFunValue2E}
\calls{coerceTraceFunValue2E}{spadsysnamep}
\calls{coerceTraceFunValue2E}{pname}
\calls{coerceTraceFunValue2E}{coerceSpadFunValue2E}
\calls{coerceTraceFunValue2E}{lassoc}
\calls{coerceTraceFunValue2E}{objValUnwrap}
\calls{coerceTraceFunValue2E}{coerceInteractive}
\calls{coerceTraceFunValue2E}{objNewWrap}
\calls{coerceTraceFunValue2E}{memq}
\usesdollar{coerceTraceFunValue2E}{tracedMapSignatures}
\usesdollar{coerceTraceFunValue2E}{OutputForm}
\usesdollar{coerceTraceFunValue2E}{mathTraceList}
<<defun coerceTraceFunValue2E>>=
(defun |coerceTraceFunValue2E| (tracename subname |value|)
 (let (name u)
 (declare (special |$tracedMapSignatures| |$OutputForm| |$mathTraceList|))
   (if (memq (setq name subname) |$mathTraceList|)
    (cond
     ((spadsysnamep (pname tracename)) (|coerceSpadFunValue2E| |value|))
     ((setq u (lassoc subname |$tracedMapSignatures|))
       (|objValUnwrap|
        (|coerceInteractive| (|objNewWrap| |value| (car u)) |$OutputForm|)))
     (t |value|))
    |value|)))

@

\defun{coerceSpadFunValue2E}{coerceSpadFunValue2E}
\calls{coerceSpadFunValue2E}{objValUnwrap}
\calls{coerceSpadFunValue2E}{coerceInteractive}
\calls{coerceSpadFunValue2E}{objNewWrap}
\usesdollar{coerceSpadFunValue2E}{streamCount}
\usesdollar{coerceSpadFunValue2E}{tracedSpadModemap}
\usesdollar{coerceSpadFunValue2E}{OutputForm}
<<defun coerceSpadFunValue2E>>=
(defun |coerceSpadFunValue2E| (|value|)
 (let (|$streamCount|)
  (declare (special |$streamCount| |$tracedSpadModemap| |$OutputForm|))
  (setq |$streamCount| 0)
  (|objValUnwrap|
   (|coerceInteractive|
    (|objNewWrap| |value| (car |$tracedSpadModemap|))
    |$OutputForm|))))

@

\defun{isListOfIdentifiers}{isListOfIdentifiers}
\calls{isListOfIdentifiers}{seq}
\calls{isListOfIdentifiers}{exit}
\calls{isListOfIdentifiers}{identp}
<<defun isListOfIdentifiers>>=
(defun |isListOfIdentifiers| (arg)
 (prog () 
  (return
   (seq
    (prog (t0)
     (setq t0 t)
     (return
      (do ((t1 nil (null t0)) (t2 arg (cdr t2)) (x nil))
          ((or t1 (atom t2) (progn (setq x (car t2)) nil)) t0)
       (seq
        (exit
         (setq t0 (and t0 (identp x)))))))))))) 

@

\defun{isListOfIdentifiersOrStrings}{isListOfIdentifiersOrStrings}
\calls{isListOfIdentifiersOrStrings}{seq}
\calls{isListOfIdentifiersOrStrings}{exit}
\calls{isListOfIdentifiersOrStrings}{identp}
<<defun isListOfIdentifiersOrStrings>>=
(defun |isListOfIdentifiersOrStrings| (arg)
 (prog () 
  (return
   (seq
    (prog (t0)
     (setq t0 t)
     (return
      (do ((t1 nil (null t0)) (t2 arg (cdr t2)) (x nil))
          ((or t1 (atom t2) (progn (setq x (car t2)) nil)) t0)
       (seq
        (exit
         (setq t0 (and t0 (or (identp x) (stringp x))))))))))))) 

@

\defun{getMapSubNames}{getMapSubNames}
\calls{getMapSubNames}{get}
\calls{getMapSubNames}{union}
\calls{getMapSubNames}{getPreviousMapSubNames}
\calls{getMapSubNames}{unionq}
\usesdollar{getMapSubNames}{lastUntraced}
\usesdollar{getMapSubNames}{InteractiveFrame}
\uses{getMapSubNames}{/tracenames}
<<defun getMapSubNames>>=
(defun |getMapSubNames| (arg)
 (let (lmm subs)
 (declare (special /tracenames |$lastUntraced| |$InteractiveFrame|))
  (setq subs nil)
  (dolist (mapname arg)
   (when (setq lmm (|get| mapname '|localModemap| |$InteractiveFrame|))
     (setq subs
      (append
        (do ((t2 lmm (cdr t2)) (t1 nil) (|mm| nil))
            ((or (atom t2)
                 (progn (setq |mm| (CAR t2)) nil)) (nreverse0 t1))
           (setq t1 (cons (cons mapname (cadr |mm|)) t1)))
       subs))))
  (|union| subs
    (|getPreviousMapSubNames| (unionq /tracenames |$lastUntraced|)))))

@

\defun{getPreviousMapSubNames}{getPreviousMapSubNames}
\calls{getPreviousMapSubNames}{get}
\calls{getPreviousMapSubNames}{memq}
\calls{getPreviousMapSubNames}{exit}
\calls{getPreviousMapSubNames}{seq}
<<defun getPreviousMapSubNames>>=
(defun |getPreviousMapSubNames| (|traceNames|)
 (prog (lmm subs)
  (return
   (seq
    (progn
     (setq subs nil)
     (seq
      (do ((t0 (assocleft (caar |$InteractiveFrame|)) (cdr t0))
           (mapname nil))
          ((or (atom t0) (progn (setq mapname (car t0)) nil)) nil)
       (seq
        (exit
         (cond
          ((setq lmm
             (|get| mapname '|localModemap| |$InteractiveFrame|))
            (exit
             (cond
              ((memq (cadar lmm) |traceNames|)
               (exit
                (do ((t1 lmm (cdr t1)) (|mm| nil))
                    ((or (atom t1) (progn (setq |mm| (car t1)) nil)) nil)
                 (seq
                  (exit
                   (setq subs
                    (cons (cons mapname (cadr |mm|)) subs))))))))))))))
      (exit subs))))))) 

@

\defun{lassocSub}{lassocSub}
\calls{lassocSub}{lassq}
<<defun lassocSub>>=
(defun |lassocSub| (x subs)
 (let (y) 
  (if (setq y (lassq x subs)) 
    y
    x)))

@

\defun{rassocSub}{rassocSub}
\calls{rassocSub}{rassoc}
<<defun rassocSub>>=
(defun |rassocSub| (x subs)
 (let (y)
   (if (setq y (|rassoc| x subs)) 
    y
    x)))

@

\defun{isUncompiledMap}{isUncompiledMap}
\calls{isUncompiledMap}{get}
\usesdollar{isUncompiledMap}{InteractiveFrame}
<<defun isUncompiledMap>>=
(defun |isUncompiledMap| (x)
 (let (y)
 (declare (special |$InteractiveFrame|))
  (when (setq y (|get| x '|value| |$InteractiveFrame|))
    (and
      (eq (caar y) 'map)
      (null (|get| x '|localModemap| |$InteractiveFrame|))))))

@

\defun{isInterpOnlyMap}{isInterpOnlyMap}
\calls{isInterpOnlyMap}{get}
\usesdollar{isInterpOnlyMap}{InteractiveFrame}
<<defun isInterpOnlyMap>>=
(defun |isInterpOnlyMap| (map)
 (let (x)
 (declare (special |$InteractiveFrame|))
  (when (setq x (|get| map '|localModemap| |$InteractiveFrame|))
    (eq (caaar x) '|interpOnly|))))

@

\defun{augmentTraceNames}{augmentTraceNames}
\calls{augmentTraceNames}{get}
\usesdollar{augmentTraceNames}{InteractiveFrame}
<<defun augmentTraceNames>>=
(defun |augmentTraceNames| (arg)
 (let (mml res)
 (declare (special |$InteractiveFrame|))
 (dolist (tracename arg)
  (if (setq mml (|get| tracename '|localModemap| |$InteractiveFrame|))
   (setq res
    (append
     (prog (t1)
      (setq t1 nil)
      (return
       (do ((t2 mml (cdr t2)) (|mm| nil))
           ((or (atom t2) 
                (progn (setq |mm| (CAR t2)) nil))
             (nreverse0 t1))
          (setq t1 (cons (cadr |mm|) t1)))))
    res))
   (setq res (cons tracename res))))
 res))

@

\defun{isSubForRedundantMapName}{isSubForRedundantMapName}
\calls{isSubForRedundantMapName}{rassocSub}
\calls{isSubForRedundantMapName}{member}
\calls{isSubForRedundantMapName}{memq}
\calls{isSubForRedundantMapName}{assocleft}
\usesdollar{isSubForRedundantMapName}{mapSubNameAlist}
<<defun isSubForRedundantMapName>>=
(defun |isSubForRedundantMapName| (subname)
 (let (mapname tail)
 (declare (special |$mapSubNameAlist|))
  (when (setq mapname (|rassocSub| subname |$mapSubNameAlist|))
    (when (setq tail (|member| (cons mapname subname) |$mapSubNameAlist|))
      (memq mapname (cdr (assocleft tail)))))))

@

\defun{untraceMapSubNames}{untraceMapSubNames}
\calls{untraceMapSubNames}{assocright}
\calls{untraceMapSubNames}{memq}
\calls{untraceMapSubNames}{/untrace,2}
\calls{untraceMapSubNames}{setdifference}
\calls{untraceMapSubNames}{getPreviousMapSubNames}
\usesdollar{untraceMapSubNames}{mapSubNameAlist}
\usesdollar{untraceMapSubNames}{lastUntraced}
<<defun untraceMapSubNames>>=
(defun |untraceMapSubNames| (|traceNames|)
 (let (|$mapSubNameAlist| subs)
 (declare (special |$mapSubNameAlist| |$lastUntraced|))
  (if
   (null (setq |$mapSubNameAlist| (|getPreviousMapSubNames| |traceNames|)))
   nil
   (dolist (name (setq subs (assocright |$mapSubNameAlist|)))
     (when (memq name /tracenames)
       (|/UNTRACE,2| name nil)
       (setq |$lastUntraced| (setdifference |$lastUntraced| subs)))))))

@

\defun{funfind,LAM}{funfind,LAM}
\calls{funfind,LAM}{pairp}
\calls{funfind,LAM}{qcar}
\calls{funfind,LAM}{SEQ}
\calls{funfind,LAM}{isFunctor}
\calls{funfind,LAM}{exit}
<<defun funfind,LAM>>=
(defun |funfind,LAM| (functor opname)
 (prog (ops tmp1)
  (return
   (seq
    (progn
     (setq ops (|isFunctor| functor))
     (prog (t0)
      (setq t0 nil)
      (return
       (do ((t1 ops (cdr t1)) (u nil))
           ((or (atom t1) (progn (setq u (car t1)) nil)) (nreverse0 t0))
        (seq
         (exit
          (cond
           ((and (pairp u)
                 (progn
                  (setq tmp1 (qcar u))
                  (and (pairp tmp1) (equal (qcar tmp1) opname))))
             (setq t0 (cons u t0)))))))))))))) 

@

\defmacro{funfind}
<<defmacro funfind>>=
(defmacro |funfind| (&whole t0 &rest notused &aux t1)
 (declare (ignore notused))
 (dsetq t1 t0)
 (cons '|funfind,LAM| (wrap (cdr t1) '(quote quote)))) 

@

\defun{isDomainOrPackage}{isDomainOrPackage}
\calls{isDomainOrPackage}{refvecp}
\calls{isDomainOrPackage}{poundsign}
\calls{isDomainOrPackage}{isFunctor}
\calls{isDomainOrPackage}{opOf}
<<defun isDomainOrPackage>>=
(defun |isDomainOrPackage| (dom)
 (and
  (refvecp dom)
  (> (|#| dom) 0)
  (|isFunctor| (|opOf| (elt dom 0))))) 

@

\defun{isTraceGensym}{isTraceGensym}
\calls{isTraceGensym}{gensymp}
<<defun isTraceGensym>>=
(defun |isTraceGensym| (x)
 (gensymp x)) 

@

\defun{spadTrace,g}{spadTrace,g}
<<defun spadTrace,g>>=
(defun |spadTrace,g| (x)
  (if (stringp x) (intern x) x))

@

\defun{spadTrace,isTraceable}{spadTrace,isTraceable}
\calls{spadTrace,isTraceable}{seq}
\calls{spadTrace,isTraceable}{exit}
\calls{spadTrace,isTraceable}{gensymp}
\calls{spadTrace,isTraceable}{reportSpadTrace}
\calls{spadTrace,isTraceable}{bpiname}
<<defun spadTrace,isTraceable>>=
(defun |spadTrace,isTraceable| (x |domain|)
 (prog (n |functionSlot|)
  (return
   (seq
    (progn
     (setq n (caddr x))
     x
     (seq
      (if (atom (elt |domain| n)) (exit nil))
      (setq |functionSlot| (car (elt |domain| n)))
      (if (gensymp |functionSlot|) 
       (exit (seq (|reportSpadTrace| '|Already Traced| x) (exit nil))))
      (if (null (bpiname |functionSlot|))
       (exit
        (seq
         (|reportSpadTrace| '|No function for| x)
         (exit nil))))
      (exit t))))))) 

@

\defun{spadTrace}{spadTrace}
\calls{spadTrace}{pairp}
\calls{spadTrace}{refvecp}
\calls{spadTrace}{aldorTrace}
\calls{spadTrace}{isDomainOrPackage}
\calls{spadTrace}{userError}
\calls{spadTrace}{seq}
\calls{spadTrace}{exit}
\calls{spadTrace}{spadTrace,g}
\calls{spadTrace}{getOption}
\calls{spadTrace}{removeOption}
\calls{spadTrace}{opOf}
\calls{spadTrace}{assoc}
\calls{spadTrace}{kdr}
\calls{spadTrace}{flattenOperationAlist}
\calls{spadTrace}{getOperationAlistFromLisplib}
\calls{spadTrace}{memq}
\calls{spadTrace}{spadTrace,isTraceable}
\calls{spadTrace}{as-insert}
\calls{spadTrace}{bpiname}
\calls{spadTrace}{spadTraceAlias}
\calls{spadTrace}{subTypes}
\calls{spadTrace}{constructSubst}
\calls{spadTrace}{bpitrace}
\calls{spadTrace}{rplac}
\calls{spadTrace}{printDashedLine}
\calls{spadTrace}{reportSpadTrace}
\calls{spadTrace}{setletprintflag}
\calls{spadTrace}{spadReply}
\usesdollar{spadTrace}{tracedModemap}
\usesdollar{spadTrace}{fromSpadTrace}
\usesdollar{spadTrace}{letAssoc}
\usesdollar{spadTrace}{reportSpadTrace}
\usesdollar{spadTrace}{traceNoisely}
\uses{spadTrace}{/tracenames}
<<defun spadTrace>>=
(defun |spadTrace| (domain options)
 (let (|$tracedModemap| listofoperations listofvariables 
        listofbreakvars anyiftrue domainid currententry 
        currentalist opstructurelist sig kind triple fn op 
        mm n alias tracename sigslotnumberalist)
 (declare (special |$tracedModemap| /tracenames |$fromSpadTrace| |$letAssoc|
    |$reportSpadTrace| |$traceNoisely|))
 (setq |$fromSpadTrace| t)
 (setq |$tracedModemap| nil)
 (cond
  ((and (pairp domain)
        (refvecp (car domain))
        (eql (elt (car domain) 0) 0))
    (|aldorTrace| domain options))
  ((null (|isDomainOrPackage| domain))
    (|userError| "bad argument to trace"))
  (t
   (setq listofoperations
    (prog (t0)
     (setq t0 nil)
     (return
      (do ((t1 (|getOption| 'ops options) (cdr t1)) (x nil))
          ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
       (seq
        (exit
         (setq t0 (cons (|spadTrace,g| x) t0))))))))
   (cond
    ((setq listofvariables (|getOption| 'vars options))
      (setq options (|removeOption| 'vars options))))
   (cond
    ((setq listofbreakvars (|getOption| 'varbreak options))
      (setq options (|removeOption| 'varbreak options))))
   (setq anyiftrue (null listofoperations))
   (setq domainid (|opOf| (elt domain 0)))
   (setq currententry (|assoc| domain /tracenames))
   (setq currentalist (kdr currententry))
   (setq opstructurelist 
    (|flattenOperationAlist| (|getOperationAlistFromLisplib| domainid)))
   (setq sigslotnumberalist
    (prog (t2)
     (setq t2 nil)
     (return
      (do ((t3 opstructurelist (cdr t3)) (t4 nil))
          ((or (atom t3)
               (progn (setq t4 (CAR t3)) nil)
               (progn
                (progn
                 (setq op (car t4))
                 (setq sig (cadr t4))
                 (setq n (caddr t4))
                 (setq kind (car (cddddr t4))) t4)
                nil))
             (nreverse0 t2))
       (seq
        (exit
         (cond
          ((and (eq kind 'elt)
                (or anyiftrue (memq op listofoperations))
                (integerp n)
                (|spadTrace,isTraceable|
                 (setq triple
                  (cons op (cons sig (cons n nil)))) domain))
             (setq t2 (cons triple t2))))))))))
   (cond 
    (listofvariables
     (do ((t5 sigslotnumberalist (cdr t5)) (t6 nil))
         ((or (atom t5)
              (progn (setq t6 (car t5)) nil)
              (progn (progn (setq n (caddr t6)) t6) nil))
           nil)
      (seq
       (exit
        (progn
         (setq fn (car (elt domain n)))
         (setq |$letAssoc|
          (as-insert (bpiname fn) listofvariables |$letAssoc|))))))))
   (cond
    (listofbreakvars
     (do ((t7 sigslotnumberalist (cdr t7)) (t8 nil))
         ((or (atom t7)
              (progn (setq t8 (car t7)) nil)
              (progn (progn (setq n (caddr t8)) t8) nil))
             nil)
      (seq
       (exit
        (progn
         (setq fn (car (elt domain n)))
         (setq |$letAssoc|
          (as-insert (bpiname fn)
           (cons (cons 'break listofbreakvars) nil) |$letAssoc|))))))))
   (do ((t9 sigslotnumberalist (cdr t9)) (|pair| nil))
       ((or (atom t9)
            (progn (setq |pair| (car t9)) nil)
            (progn
             (progn
              (setq op (car |pair|))
              (setq mm (cadr |pair|))
              (setq n (caddr |pair|))
              |pair|)
              nil))
            nil)
    (seq
     (exit
      (progn 
       (setq alias (|spadTraceAlias| domainid op n))
       (setq |$tracedModemap|
         (|subTypes| mm (|constructSubst| (elt domain 0))))
       (setq tracename
         (bpitrace (car (elt domain n)) alias options))
       (nconc |pair|
         (cons listofvariables
          (cons (car (elt domain n))
           (cons tracename (cons alias nil)))))
       (rplac (car (elt domain n)) tracename)))))
   (setq sigslotnumberalist
    (prog (t10)
     (setq t10 nil)
     (return
      (do ((t11 sigslotnumberalist (cdr t11)) (x nil))
          ((or (atom t11) (progn (setq x (car t11)) nil)) (nreverse0 t10))
       (seq
        (exit
         (cond ((cdddr x) (setq t10 (cons x t10))))))))))
   (cond
    (|$reportSpadTrace|
     (cond (|$traceNoisely| (|printDashedLine|)))
     (do ((t12 (|orderBySlotNumber| sigslotnumberalist) (cdr t12))
          (x nil))
         ((or (atom t12)
              (progn (setq x (car t12)) nil))
             nil)
          (seq (exit (|reportSpadTrace| 'tracing x))))))
   (cond (|$letAssoc| (setletprintflag t)))
   (cond 
    (currententry
     (rplac (cdr currententry)
       (append sigslotnumberalist currentalist)))
    (t 
     (setq /tracenames
      (cons (cons domain sigslotnumberalist) /tracenames))
       (|spadReply|)))))))

@

\defun{traceDomainLocalOps}{traceDomainLocalOps}
\calls{traceDomainLocalOps}{sayMSG}
<<defun traceDomainLocalOps>>=
(defun |traceDomainLocalOps| ()
  (|sayMSG| '("  The )local option has been withdrawn"))
  (|sayMSG| '("  Use )ltr to trace local functions.")))

@

\defun{untraceDomainLocalOps}{untraceDomainLocalOps}
\calls{untraceDomainLocalOps}{sayMSG}
<<defun untraceDomainLocalOps>>=
(defun |untraceDomainLocalOps| ()
  (|sayMSG| '("  The )local option has been withdrawn"))
  (|sayMSG| '("  Use )ltr to trace local functions.")))

@

\defun{traceDomainConstructor}{traceDomainConstructor}
\calls{traceDomainConstructor}{getOption}
\calls{traceDomainConstructor}{seq}
\calls{traceDomainConstructor}{exit}
\calls{traceDomainConstructor}{spadTrace}
\calls{traceDomainConstructor}{concat}
\calls{traceDomainConstructor}{embed}
\calls{traceDomainConstructor}{mkq}
\calls{traceDomainConstructor}{loadFunctor}
\calls{traceDomainConstructor}{traceDomainLocalOps}
\usesdollar{traceDomainConstructor}{ConstructorCache}
<<defun traceDomainConstructor>>=
(defun |traceDomainConstructor| (domainConstructor options)
 (prog (listOfLocalOps argl domain innerDomainConstructor)
 (declare (special |$ConstructorCache|))
  (return
   (seq
    (progn
     (|loadFunctor| domainConstructor)
     (setq listOfLocalOps (|getOption| 'local options))
     (when listOfLocalOps (|traceDomainLocalOps|))
     (cond 
      ((and listOfLocalOps (null (|getOption| 'ops options))) nil)
      (t
       (do ((t2 (hget |$ConstructorCache| domainConstructor) (cdr t2))
            (t3 nil))
           ((or (atom t2) 
                (progn (setq t3 (car t2)) nil)
                (progn 
                 (progn 
                  (setq argl (car t3))
                  (setq domain (cddr t3)) t3)
                 nil))
                nil)
         (seq
          (exit
           (|spadTrace| domain options))))
       (setq /tracenames (cons domainConstructor /tracenames))
       (setq innerDomainConstructor
         (intern (concat domainConstructor ";")))
       (cond
        ((fboundp innerDomainConstructor)
          (setq domainConstructor innerDomainConstructor)))
       (embed domainConstructor
        (cons 'lambda
         (cons 
          (cons '&rest
           (cons 'args nil))
          (cons
           (cons 'prog
            (cons
             (cons 'domain nil)
             (cons
              (cons 'setq
               (cons 'domain
                (cons
                 (cons 'apply (cons domainConstructor
                  (cons 'args nil))) nil)))
              (cons
               (cons '|spadTrace|
                (cons 'domain
                 (cons (mkq options) nil)))
               (cons (cons 'return (cons 'domain nil)) nil)))))
           nil))))))))))) 

@

\defun{untraceDomainConstructor,keepTraced?}{%
untraceDomainConstructor,keepTraced?}
\calls{untraceDomainConstructor,keepTraced?}{seq}
\calls{untraceDomainConstructor,keepTraced?}{pairp}
\calls{untraceDomainConstructor,keepTraced?}{qcar}
\calls{untraceDomainConstructor,keepTraced?}{isDomainOrPackage}
\calls{untraceDomainConstructor,keepTraced?}{boot-equal}
\calls{untraceDomainConstructor,keepTraced?}{kar}
\calls{untraceDomainConstructor,keepTraced?}{devaluate}
\calls{untraceDomainConstructor,keepTraced?}{exit}
\calls{untraceDomainConstructor,keepTraced?}{/untrace,0}
<<defun untraceDomainConstructor,keepTraced?>>=
(defun |untraceDomainConstructor,keepTraced?| (df domainConstructor)
 (prog (dc)
  (return
   (seq
    (if (and 
         (and
          (and (pairp df) (progn (setq dc (qcar df)) t))
           (|isDomainOrPackage| dc))
         (boot-equal (kar (|devaluate| dc)) domainConstructor))
     (exit (seq (|/UNTRACE,0| (cons dc nil)) (exit nil))))
    (exit t))))) 

@

\defun{untraceDomainConstructor}{untraceDomainConstructor}
\calls{untraceDomainConstructor}{untraceDomainConstructor,keepTraced?}
\calls{untraceDomainConstructor}{unembed}
\calls{untraceDomainConstructor}{seq}
\calls{untraceDomainConstructor}{exit}
\calls{untraceDomainConstructor}{concat}
\calls{untraceDomainConstructor}{delete}
\uses{untraceDomainConstructor}{/tracenames}
<<defun untraceDomainConstructor>>=
(defun |untraceDomainConstructor| (domainConstructor)
 (prog (innerDomainConstructor)
 (declare (special /tracenames))
  (return
   (seq
    (progn
     (setq /tracenames
      (prog (t0)
       (setq t0 nil)
       (return
        (do ((t1 /tracenames (cdr t1)) (df nil))
            ((or (atom t1) (progn (setq df (car t1)) nil)) (nreverse0 t0))
         (seq
          (exit
           (cond ((|untraceDomainConstructor,keepTraced?|
                    df domainConstructor)
             (setq t0 (cons df t0))))))))))
     (setq innerDomainConstructor
      (intern (concat domainConstructor ";")))
     (cond
      ((fboundp innerDomainConstructor) (unembed innerDomainConstructor))
      (t (unembed domainConstructor)))
     (setq /tracenames (|delete| domainConstructor /tracenames))))))) 

@

\defun{flattenOperationAlist}{flattenOperationAlist}
\calls{flattenOperationAlist}{seq}
\calls{flattenOperationAlist}{exit}
<<defun flattenOperationAlist>>=
(defun |flattenOperationAlist| (|opAlist|)
 (prog (op |mmList| |res|)
  (return
   (seq
    (progn
     (setq |res| nil)
     (do ((t0 |opAlist| (cdr t0)) (t1 nil))
         ((or (atom t0) 
              (progn (setq t1 (car t0)) nil)
              (progn
               (progn (setq op (car t1)) (setq |mmList| (cdr t1)) t1)
               nil)) 
             nil)
      (seq
       (exit
        (setq |res|
         (append |res|
          (prog (t2)
           (setq t2 nil)
           (return
            (do ((t3 |mmList| (cdr t3)) (mm nil))
                ((or (atom t3)
                     (progn (setq mm (car t3)) nil)) (nreverse0 t2))
             (seq
              (exit
               (setq t2 (cons (cons op mm) t2))))))))))))
     |res|))))) 

@

\defun{mapLetPrint}{mapLetPrint}
\calls{mapLetPrint}{getAliasIfTracedMapParameter}
\calls{mapLetPrint}{getBpiNameIfTracedMap}
\calls{mapLetPrint}{letPrint}
<<defun mapLetPrint>>=
(defun |mapLetPrint| (x val currentFunction)
  (setq x (|getAliasIfTracedMapParameter| x currentFunction))
  (setq currentFunction (|getBpiNameIfTracedMap| currentFunction))
  (|letPrint| x val currentFunction))

@

\defun{letPrint}{letPrint}
\calls{letPrint}{lassoc}
\calls{letPrint}{memq}
\calls{letPrint}{isgenvar}
\calls{letPrint}{isSharpVarWithNum}
\calls{letPrint}{gensymp}
\calls{letPrint}{sayBrightlyNT}
\calls{letPrint}{bright}
\calls{letPrint}{shortenForPrinting}
\calls{letPrint}{hasPair}
\calls{letPrint}{pname}
\calls{letPrint}{break}
\usesdollar{letPrint}{letAssoc}
<<defun letPrint>>=
(defun |letPrint| (x |val| |currentFunction|)
 (prog (y)
 (declare (special |$letAssoc|))
  (return
   (progn
    (cond ((and |$letAssoc| 
                (or
                 (setq y (lassoc |currentFunction| |$letAssoc|))
                 (setq y (lassoc '|all| |$letAssoc|))))
     (cond
      ((and (or (eq y '|all|)
                 (memq x y))
            (null 
             (or (isgenvar x) (|isSharpVarWithNum| x) (gensymp x))))
        (|sayBrightlyNT| (append (|bright| x) (cons '|: | nil)))
        (prin1 (|shortenForPrinting| |val|))
        (terpri)))
     (cond
      ((and (setq y (|hasPair| 'break y))
            (or (eq y '|all|)
                (and (memq x y)
                     (null (memq (elt (pname x) 0) '($ |#|)))
                     (null (gensymp x)))))
       (|break|
        (append 
         (|bright| |currentFunction|)
         (cons "breaks after"
          (append
           (|bright| x)
           (cons ":= " (cons (|shortenForPrinting| |val|) nil)))))))
      (t nil))))
    |val|)))) 

@
\defun{isSharpVarWithNum}{Identifier beginning with a sharpsign-number?}
This tests if x is an identifier beginning with \verb|#| followed by a number.
\calls{isSharpVarWithNum}{isSharpVar}
\calls{isSharpVarWithNum}{pname}
\calls{isSharpVarWithNum}{qcsize}
\calls{isSharpVarWithNum}{digitp}
\calls{isSharpVarWithNum}{dig2fix}
<<defun isSharpVarWithNum>>=
(defun |isSharpVarWithNum| (x)
 (let (p n d ok c)
  (cond
   ((null (|isSharpVar| x)) nil)
   ((> 2 (setq n (qcsize (setq p (pname x))))) nil)
   (t
    (setq ok t)
    (setq c 0)
    (do ((t1 (1- n)) (i 1 (1+ i)))
         ((or (> i t1) (null ok)) nil)
      (setq d (elt p i))
      (when (setq ok (digitp d))
        (setq c (+ (* 10 c) (dig2fix d)))))
    (when ok c)))))

@

\defun{isSharpVar}{Identifier beginning with a sharpsign?}
This tests if x is an identifier beginning with \verb|#|
\calls{isSharpVar}{identp}
<<defun isSharpVar>>=
(defun |isSharpVar| (x)
 (and (identp x) (char= (schar (symbol-name x) 0) #\#)))

@

\defun{isgenvar}{isgenvar}
\calls{isgenvar}{size}
\calls{isgenvar}{digitp}
\calls{isgenvar}{identp}
<<defun isgenvar>>=
(defun isgenvar (x)
 (and (identp x)
  (let ((y (symbol-name x)))
   (and (char= #\$ (elt y 0)) (> (size y) 1) (digitp (elt y 1))))))

@


\defun{letPrint2}{letPrint2}
\catches{letPrint2}{letPrint2}
\calls{letPrint2}{lassoc}
\calls{letPrint2}{memq}
\calls{letPrint2}{isgenvar}
\calls{letPrint2}{isSharpVarWithNum}
\calls{letPrint2}{gensymp}
\calls{letPrint2}{mathprint}
\calls{letPrint2}{print}
\calls{letPrint2}{hasPair}
\calls{letPrint2}{pname}
\calls{letPrint2}{break}
\calls{letPrint2}{bright}
\usesdollar{letPrint2}{BreakMode}
\usesdollar{letPrint2}{letAssoc}
<<defun letPrint2>>=
(defun |letPrint2| (x |printform| |currentFunction|)
 (prog (|$BreakMode| |flag| y)
  (declare (special |$BreakMode| |$letAssoc|))
  (return
   (progn
    (setq |$BreakMode| nil)
    (cond
     ((and |$letAssoc| 
           (or (setq y (lassoc |currentFunction| |$letAssoc|))
               (setq y (lassoc '|all| |$letAssoc|))))
      (cond
       ((and
          (or (eq y '|all|) (memq x y))
          (null (or (isgenvar x) (|isSharpVarWithNum| x) (gensymp x))))
         (setq |$BreakMode| '|letPrint2|)
         (setq |flag| nil)
         (catch '|letPrint2| 
          (|mathprint| (cons '= (cons x (cons |printform| nil)))) |flag|)
         (cond 
          ((eq |flag| '|letPrint2|) (|print| |printform|))
          (t nil))))
      (cond 
       ((and 
         (setq y (|hasPair| 'break y))
         (or (eq y '|all|)
             (and 
              (memq x y)
              (null (memq (elt (pname x) 0) '($ |#|)))
              (null (gensymp x)))))
        (|break|
         (append
          (|bright| |currentFunction|)
          (cons "breaks after" 
           (append (|bright| x) (cons '|:= | (cons |printform| nil)))))))
       (t nil))))
    x)))) 

@

\defun{letPrint3}{letPrint3}
This is the version for use when we have our hands on a function
to convert the data into type "Expression"
\catches{letPrint3}{letPrint2}
\calls{letPrint3}{lassoc}
\calls{letPrint3}{memq}
\calls{letPrint3}{isgenvar}
\calls{letPrint3}{isSharpVarWithNum}
\calls{letPrint3}{gensymp}
\calls{letPrint3}{mathprint}
\calls{letPrint3}{spadcall}
\calls{letPrint3}{print}
\calls{letPrint3}{hasPair}
\calls{letPrint3}{pname}
\calls{letPrint3}{break}
\calls{letPrint3}{bright}
\usesdollar{letPrint3}{BreakMode}
\usesdollar{letPrint3}{letAssoc}
<<defun letPrint3>>=
(defun |letPrint3| (x |xval| |printfn| |currentFunction|)
 (prog (|$BreakMode| |flag| y)
  (declare (special |$BreakMode| |$letAssoc|))
  (return
   (progn
    (setq |$BreakMode| nil)
    (cond
     ((and |$letAssoc| 
       (or (setq y (lassoc |currentFunction| |$letAssoc|))
           (setq y (lassoc '|all| |$letAssoc|))))
       (cond
        ((and
           (or (eq y '|all|) (memq x y))
           (null (or (isgenvar x) (|isSharpVarWithNum| x) (gensymp x))))
          (setq |$BreakMode| '|letPrint2|)
          (setq |flag| nil)
          (catch '|letPrint2|
           (|mathprint|
            (cons '= (cons x (cons (spadcall |xval| |printfn|) nil))))
           |flag|)
          (cond
           ((eq |flag| '|letPrint2|) (|print| |xval|))
           (t nil))))
       (cond
        ((and
          (setq y (|hasPair| 'break y))
          (or
           (eq y '|all|)
           (and
            (memq x y)
            (null (memq (elt (pname x) 0) '($ |#|)))
            (null (gensymp x)))))
          (|break|
           (append
            (|bright| |currentFunction|)
            (cons "breaks after"
             (append (|bright| x) (cons ":= " (cons |xval| nil)))))))
        (t nil))))
    x)))) 

@
\defun{getAliasIfTracedMapParameter}{getAliasIfTracedMapParameter}
\calls{getAliasIfTracedMapParameter}{isSharpVarWithNum}
\calls{getAliasIfTracedMapParameter}{get}
\calls{getAliasIfTracedMapParameter}{exit}
\calls{getAliasIfTracedMapParameter}{spaddifference}
\calls{getAliasIfTracedMapParameter}{string2pint-n}
\calls{getAliasIfTracedMapParameter}{substring}
\calls{getAliasIfTracedMapParameter}{pname}
\calls{getAliasIfTracedMapParameter}{seq}
\usesdollar{getAliasIfTracedMapParameter}{InteractiveFrame}
<<defun getAliasIfTracedMapParameter>>=
(defun |getAliasIfTracedMapParameter| (x |currentFunction|)
 (prog (|aliasList|)
 (declare (special |$InteractiveFrame|))
  (return
   (seq
    (cond
     ((|isSharpVarWithNum| x)
       (cond
        ((setq |aliasList|
           (|get| |currentFunction| 'alias |$InteractiveFrame|))
         (exit
          (elt |aliasList|
           (spaddifference
            (string2pint-n (substring (pname x) 1 nil) 1) 1))))))
     (t x)))))) 

@

\defun{getBpiNameIfTracedMap}{getBpiNameIfTracedMap}
\calls{getBpiNameIfTracedMap}{get}
\calls{getBpiNameIfTracedMap}{memq}
\calls{getBpiNameIfTracedMap}{exit}
\calls{getBpiNameIfTracedMap}{seq}
\usesdollar{getBpiNameIfTracedMap}{InteractiveFrame}
\uses{getBpiNameIfTracedMap}{/tracenames}
<<defun getBpiNameIfTracedMap>>=
(defun |getBpiNameIfTracedMap| (name)
 (prog (lmm bpiName)
 (declare (special |$InteractiveFrame| /tracenames))
  (return
   (seq
    (cond 
     ((setq lmm (|get| name '|localModemap| |$InteractiveFrame|))
       (cond
        ((memq (setq bpiName (cadar lmm)) /tracenames)
           (exit bpiName))))
     (t name)))))) 

@

\defun{hasPair}{hasPair}
\calls{hasPair}{pairp}
\calls{hasPair}{qcar}
\calls{hasPair}{qcdr}
\calls{hasPair}{hasPair}
<<defun hasPair>>=
(defun |hasPair| (key arg)
 (prog (tmp1 a)
  (return 
   (cond
    ((atom arg) nil)
    ((and (pairp arg)
          (progn
           (setq tmp1 (qcar arg))
           (and (pairp tmp1)
                (equal (qcar tmp1) key)
                (progn (setq a (qcdr tmp1)) t))))
       a)
    (t (|hasPair| key (cdr arg))))))) 

@

\defun{shortenForPrinting}{shortenForPrinting}
\calls{shortenForPrinting}{isDomainOrPackage}
\calls{shortenForPrinting}{devaluate}
<<defun shortenForPrinting>>=
(defun |shortenForPrinting| (|val|)
 (if (|isDomainOrPackage| |val|)
  (|devaluate| |val|)
  |val|))

@

\defun{spadTraceAlias}{spadTraceAlias}
\calls{spadTraceAlias}{internl}
<<defun spadTraceAlias>>=
(defun |spadTraceAlias| (domainid op n)
 (internl domainid (intern "." "boot") op '|,| (princ-to-string n))) 

@

\defun{getOption}{getOption}
\calls{getOption}{assoc}
<<defun getOption>>=
(defun |getOption| (opt l)
 (let (y)
  (when (setq y (|assoc| opt l))  (cdr y))))

@

\defun{reportSpadTrace}{reportSpadTrace}
\calls{reportSpadTrace}{pairp}
\calls{reportSpadTrace}{qcar}
\calls{reportSpadTrace}{sayBrightly}
\usesdollar{reportSpadTrace}{traceNoisely}
<<defun reportSpadTrace>>=
(defun |reportSpadTrace| (|header| t0)
 (prog (op sig n |t| |msg| |namePart| y |tracePart|)
 (declare (special |$traceNoisely|))
  (return 
   (progn
    (setq op (car t0))
    (setq sig (cadr t0))
    (setq n (caddr t0))
    (setq |t| (cdddr t0))
    (cond
     ((null |$traceNoisely|) nil)
     (t
      (setq |msg|
       (cons |header|
        (cons '|%b|
         (cons op
          (cons '|:|
           (cons '|%d|
            (cons (CDR sig)
             (cons '| -> |
              (cons (car sig)
               (cons '| in slot |
                (cons n nil)))))))))))
      (setq |namePart| nil)
      (setq |tracePart|
       (cond
        ((and (pairp |t|) (progn (setq y (qcar |t|)) t) (null (null y)))
          (cond
           ((eq y '|all|)
             (cons '|%b| (cons '|all| (cons '|%d| (cons '|vars| nil)))))
           (t (cons '| vars: | (cons y nil)))))
        (t nil)))
      (|sayBrightly| (append |msg| (append |namePart| |tracePart|))))))))) 

@

\defun{orderBySlotNumber}{orderBySlotNumber}
\calls{orderBySlotNumber}{seq}
\calls{orderBySlotNumber}{assocright}
\calls{orderBySlotNumber}{orderList}
\calls{orderBySlotNumber}{exit}
<<defun orderBySlotNumber>>=
(defun |orderBySlotNumber| (arg)
 (prog (n)
  (return 
   (seq
    (assocright
     (|orderList|
      (prog (t0)
       (setq t0 nil)
       (return
        (do ((t1 arg (cdr t1)) (x nil))
            ((or (atom t1)
                 (progn (setq x (car t1)) nil)
                 (progn (progn (setq n (caddr x)) x) nil))
               (nreverse0 t0))
         (seq
          (exit
           (setq t0 (cons (cons n x) t0))))))))))))) 

@

\defun{/tracereply}{/tracereply}
\calls{/tracereply}{pairp}
\calls{/tracereply}{qcar}
\calls{/tracereply}{isDomainOrPackage}
\calls{/tracereply}{devaluate}
\calls{/tracereply}{seq}
\calls{/tracereply}{exit}
\uses{/tracereply}{/tracenames}
<<defun /tracereply>>=
(defun /tracereply () 
 (prog (|d| domainlist |functionList|)
 (declare (special /tracenames))
  (return
   (seq
    (cond
     ((null /tracenames) "   Nothing is traced.")
     (t
       (do ((t0 /tracenames (cdr t0)) (x nil))
           ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
        (seq
         (exit
          (cond
           ((and (pairp x) 
                 (progn (setq |d| (qcar x)) t)
                 (|isDomainOrPackage| |d|))
              (setq domainlist (cons (|devaluate| |d|) domainlist)))
           (t 
            (setq |functionList| (cons x |functionList|)))))))
       (append |functionList|
        (append domainlist (cons '|traced| nil))))))))) 

@

\defun{spadReply,printName}{spadReply,printName}
\calls{spadReply,printName}{seq}
\calls{spadReply,printName}{pairp}
\calls{spadReply,printName}{qcar}
\calls{spadReply,printName}{isDomainOrPackage}
\calls{spadReply,printName}{exit}
\calls{spadReply,printName}{devaluate}
<<defun spadReply,printName>>=
(defun |spadReply,printName| (x)
 (prog (|d|)
  (return
   (seq
    (if (and (and (pairp x) (progn (setq |d| (qcar x)) t))
             (|isDomainOrPackage| |d|))
       (exit (|devaluate| |d|)))
     (exit x))))) 

@

\defun{spadReply}{spadReply}
\calls{spadReply}{seq}
\calls{spadReply}{exit}
\calls{spadReply}{spadReply,printName}
\uses{spadReply}{/tracenames}
<<defun spadReply>>=
(defun |spadReply| ()
 (prog () 
 (declare (special /tracenames))
  (return
   (seq
    (prog (t0)
     (setq t0 nil)
     (return
       (do ((t1 /tracenames (cdr t1)) (x nil))
           ((or (atom t1) (progn (setq x (car t1)) nil)) (nreverse0 t0))
        (seq
         (exit
          (setq t0 (cons (|spadReply,printName| x) t0))))))))))) 

@

\defun{spadUntrace}{spadUntrace}
\calls{spadUntrace}{isDomainOrPackage}
\calls{spadUntrace}{userError}
\calls{spadUntrace}{getOption}
\calls{spadUntrace}{devaluate}
\calls{spadUntrace}{assoc}
\calls{spadUntrace}{sayMSG}
\calls{spadUntrace}{bright}
\calls{spadUntrace}{prefix2String}
\calls{spadUntrace}{memq}
\calls{spadUntrace}{bpiname}
\calls{spadUntrace}{remover}
\calls{spadUntrace}{setletprintflag}
\calls{spadUntrace}{bpiuntrace}
\calls{spadUntrace}{rplac}
\calls{spadUntrace}{seq}
\calls{spadUntrace}{exit}
\calls{spadUntrace}{delasc}
\calls{spadUntrace}{spadReply}
\usesdollar{spadUntrace}{letAssoc}
\uses{spadUntrace}{/tracenames}
<<defun spadUntrace>>=
(defun |spadUntrace| (domain options)
 (prog (anyiftrue listofoperations domainid |pair| sigslotnumberalist 
        op sig n |lv| |bpiPointer| tracename alias |assocPair| 
        |newSigSlotNumberAlist|)
 (declare (special |$letAssoc| /tracenames))
  (return
   (seq
    (cond
     ((null (|isDomainOrPackage| domain))
       (|userError| "bad argument to untrace"))
     (t
      (setq anyiftrue (null options))
      (setq listofoperations (|getOption| '|ops:| options))
      (setq domainid (|devaluate| domain))
      (cond
       ((null (setq |pair| (|assoc| domain /tracenames)))
         (|sayMSG| 
          (cons "   No functions in" 
           (append
            (|bright| (|prefix2String| domainid))
            (cons "are now traced." nil)))))
       (t 
        (setq sigslotnumberalist (cdr |pair|))
        (do ((t0 sigslotnumberalist (cdr t0)) (|pair| nil))
            ((or (atom t0) 
                 (progn (setq |pair| (car t0)) nil)
                 (progn
                  (progn
                   (setq op (car |pair|))
                   (setq sig (cadr |pair|))
                   (setq n (caddr |pair|))
                   (setq |lv| (cadddr |pair|))
                   (setq |bpiPointer| (car (cddddr |pair|)))
                   (setq tracename (cadr (cddddr |pair|)))
                   (setq alias (caddr (cddddr |pair|)))
                   |pair|)
                  nil))
                 nil)
         (seq
          (exit
           (cond
            ((or anyiftrue (memq op listofoperations))
              (progn
                (bpiuntrace tracename alias)
                (rplac (car (elt domain n)) |bpiPointer|)
                (rplac (cdddr |pair|) nil)
                (cond
                 ((setq |assocPair|
                     (|assoc| (bpiname |bpiPointer|) |$letAssoc|))
                   (setq |$letAssoc| (remover |$letAssoc| |assocPair|))
                   (cond 
                    ((null |$letAssoc|) (setletprintflag nil))
                    (t nil)))
                 (t nil))))))))
        (setq |newSigSlotNumberAlist|
         (prog (t1) 
          (setq t1 nil)
          (return
           (do ((t2 sigslotnumberalist (cdr t2)) (x nil))
               ((or (atom t2) (progn (setq x (car t2)) nil)) (nreverse0 t1))
             (seq
              (exit
               (cond ((cdddr x) (setq t1 (cons x t1))))))))))
        (cond 
         (|newSigSlotNumberAlist| 
          (rplac (cdr |pair|) |newSigSlotNumberAlist|))
         (t 
          (setq /tracenames (delasc domain /tracenames))
          (|spadReply|))))))))))) 

@
\defun{prTraceNames,fn}{prTraceNames,fn}
\calls{prTraceNames,fn}{seq}
\calls{prTraceNames,fn}{pairp}
\calls{prTraceNames,fn}{qcar}
\calls{prTraceNames,fn}{qcdr}
\calls{prTraceNames,fn}{isDomainOrPackage}
\calls{prTraceNames,fn}{exit}
\calls{prTraceNames,fn}{devaluate}
<<defun prTraceNames,fn>>=
(defun |prTraceNames,fn| (x)
 (prog (|d| |t|)
  (return
   (seq
    (if (and (and (pairp x) 
                  (progn (setq |d| (qcar x)) (setq |t| (qcdr x)) t))
              (|isDomainOrPackage| |d|))
      (exit (cons (|devaluate| |d|) |t|)))
    (exit x))))) 

@

\defun{prTraceNames}{prTraceNames}
\calls{prTraceNames}{seq}
\calls{prTraceNames}{exit}
\calls{prTraceNames}{prTraceNames,fn}
\uses{prTraceNames}{/tracenames}
<<defun prTraceNames>>=
(defun |prTraceNames| ()
 (declare (special /tracenames))
 (seq
  (progn
   (do ((t0 /tracenames (cdr t0)) (x nil))
       ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
    (seq
     (exit
      (print (|prTraceNames,fn| x))))) nil))) 

@

\defdollar{constructors}
<<initvars>>=
(defvar |$constructors| nil)

@

\defun{traceReply}{traceReply}
\calls{traceReply}{sayMessage}
\calls{traceReply}{sayBrightly}
\calls{traceReply}{pairp}
\calls{traceReply}{qcar}
\calls{traceReply}{isDomainOrPackage}
\calls{traceReply}{addTraceItem}
\calls{traceReply}{isFunctor}
\calls{traceReply}{isgenvar}
\calls{traceReply}{userError}
\calls{traceReply}{seq}
\calls{traceReply}{exit}
\calls{traceReply}{isSubForRedundantMapName}
\calls{traceReply}{rassocSub}
\calls{traceReply}{poundsign}
\calls{traceReply}{sayMSG}
\calls{traceReply}{sayBrightlyLength}
\calls{traceReply}{flowSegmentedMsg}
\calls{traceReply}{concat}
\calls{traceReply}{prefix2String}
\calls{traceReply}{abbreviate}
\usesdollar{traceReply}{domains}
\usesdollar{traceReply}{packages}
\usesdollar{traceReply}{constructors}
\usesdollar{traceReply}{linelength}
\uses{traceReply}{/tracenames}
<<defun traceReply>>=
(defun |traceReply| ()
 (prog (|$domains| |$packages| |$constructors| |d| |functionList| 
        |displayList|)
  (declare (special |$domains| |$packages| |$constructors| /tracenames
     $linelength))
  (return
   (seq
    (progn
     (setq |$domains| nil)
     (setq |$packages| nil)
     (setq |$constructors| nil)
     (cond
      ((null /tracenames) (|sayMessage| "   Nothing is traced now."))
      (t
        (|sayBrightly| " ")
        (do ((t0 /tracenames (cdr t0)) (x nil))
             ((or (atom t0) (progn (setq x (car t0)) nil)) nil)
         (seq
          (exit
           (cond
            ((and (pairp x) 
                  (progn (setq |d| (qcar x)) t) (|isDomainOrPackage| |d|))
               (|addTraceItem| |d|))
            ((atom x)
               (cond
                ((|isFunctor| x) (|addTraceItem| x))
                ((isgenvar x) (|addTraceItem| (EVAL x)))
                (t (setq |functionList| (cons x |functionList|)))))
            (t (|userError| "bad argument to trace"))))))
        (setq |functionList|
          (prog (t1)
           (setq t1 nil)
           (return
            (do ((t2 |functionList| (cdr t2)) (x nil))
                ((or (atom t2) (progn (setq x (car t2)) nil)) t1)
              (seq
               (exit
                (cond 
                 ((null (|isSubForRedundantMapName| x))
                   (setq t1 
                    (append t1 
                     (cons (|rassocSub| x |$mapSubNameAlist|)
                           (cons " " nil))))))))))))
       (cond 
        (|functionList| 
         (cond 
          ((eql 2 (|#| |functionList|))
             (|sayMSG| (cons '|   Function traced: | |functionList|)))
          ((<= (+ 22 (|sayBrightlyLength| |functionList|)) $linelength)
             (|sayMSG| (cons '|   Functions traced: | |functionList|)))
          (t 
             (|sayBrightly| "   Functions traced:")
             (|sayBrightly|
              (|flowSegmentedMsg| |functionList| $linelength 6))))))
       (cond 
        (|$domains|
         (setq |displayList|
          (|concat|
           (|prefix2String| (CAR |$domains|))
           (prog (t3)
            (setq t3 nil)
            (return
             (do ((t4 (cdr |$domains|) (cdr t4)) (x nil))
                 ((or (atom t4) (progn (setq x (car t4)) nil)) t3)
              (seq
               (exit
                (setq t3
                 (append t3 (|concat| "," " " (|prefix2String| x)))))))))))
         (cond 
          ((atom |displayList|)
           (setq |displayList| (cons |displayList| nil))))
         (|sayBrightly| "   Domains traced: ")
         (|sayBrightly| (|flowSegmentedMsg| |displayList| $linelength 6))))
       (cond 
        (|$packages|
          (setq |displayList|
           (|concat|
            (|prefix2String| (CAR |$packages|))
            (prog (t5)
             (setq t5 nil)
             (return
              (do ((t6 (cdr |$packages|) (cdr t6)) (x nil))
                  ((or (atom t6) (progn (setq x (car t6)) nil)) t5)
               (seq
                (exit
                 (setq t5
                  (append t5 (|concat| '|, | (|prefix2String| x)))))))))))
          (cond ((atom |displayList|)
              (setq |displayList| (cons |displayList| nil))))
          (|sayBrightly| "   Packages traced: ")
          (|sayBrightly| (|flowSegmentedMsg| |displayList| $linelength 6))))
       (cond 
        (|$constructors|
         (setq |displayList|
          (|concat|
           (|abbreviate| (CAR |$constructors|))
           (prog (t7)
            (setq t7 nil)
             (return 
              (do ((t8 (cdr |$constructors|) (cdr t8)) (x nil))
                  ((or (atom t8) (progn (setq x (car t8)) nil)) t7)
               (seq
                (exit
                 (setq t7
                 (append t7 (|concat| '|, | (|abbreviate| x)))))))))))
         (cond ((atom |displayList|)
            (setq |displayList| (cons |displayList| nil))))
         (|sayBrightly| "   Parameterized constructors traced:")
         (|sayBrightly| (|flowSegmentedMsg| |displayList| $linelength 6)))
        (t nil))))))))) 

@

\defun{addTraceItem}{addTraceItem}
\calls{addTraceItem}{constructor?}
\calls{addTraceItem}{isDomain}
\calls{addTraceItem}{devaluate}
\calls{addTraceItem}{isDomainOrPackage}
\usesdollar{addTraceItem}{constructors}
\usesdollar{addTraceItem}{domains}
\usesdollar{addTraceItem}{packages}
<<defun addTraceItem>>=
(defun |addTraceItem| (|d|)
 (declare (special |$constructors| |$domains| |$packages|))
 (cond
  ((|constructor?| |d|)
    (setq |$constructors| (cons |d| |$constructors|)))
  ((|isDomain| |d|)
    (setq |$domains| (cons (|devaluate| |d|) |$domains|)))
  ((|isDomainOrPackage| |d|)
    (setq |$packages| (cons (|devaluate| |d|) |$packages|))))) 

@

\defun{?t}{?t}
\calls{?t}{isgenvar}
\calls{?t}{get}
\calls{?t}{sayMSG}
\calls{?t}{bright}
\calls{?t}{rassocSub}
\calls{?t}{pairp}
\calls{?t}{qcar}
\calls{?t}{qcdr}
\calls{?t}{isDomainOrPackage}
\calls{?t}{isDomain}
\calls{?t}{reportSpadTrace}
\calls{?t}{take}
\calls{?t}{sayBrightly}
\calls{?t}{devaluate}
\usesdollar{?t}{mapSubNameAlist}
\usesdollar{?t}{InteractiveFrame}
\uses{?t}{/tracenames}
<<defun ?t>>=
(defun |?t| ()
 (let (llm d suffix l)
  (declare (special /tracenames |$InteractiveFrame| |$mapSubNameAlist|))
  (if (null /tracenames) 
   (|sayMSG| (|bright| "nothing is traced"))
   (progn
    (dolist (x /tracenames)
     (cond
      ((and (atom x) (null (isgenvar x)))
       (progn
        (cond
         ((setq llm (|get| x '|localModemap| |$InteractiveFrame|))
           (setq x (list (cadar llm)))))
        (|sayMSG|
         `("Function" ,@(|bright| (|rassocSub| x |$mapSubNameAlist|))
           "traced"))))))
    (dolist (x /tracenames)
     (cond
      ((and (pairp x) 
            (progn (setq d (qcar x)) (setq l (qcdr x)) t)
            (|isDomainOrPackage| d))
       (progn
        (setq suffix (cond ((|isDomain| d) "domain") (t "package")))
        (|sayBrightly|
         `("   Functions traced in " ,suffix |%b| ,(|devaluate| d) |%d| ":"))
        (dolist (x (|orderBySlotNumber| l))
          (|reportSpadTrace| '|   | (TAKE 4 x)))
        (terpri)))))))))

@
\defun{tracelet}{tracelet}
\calls{tracelet}{gensymp}
\calls{tracelet}{stupidIsSpadFunction}
\calls{tracelet}{bpiname}
\calls{tracelet}{lassoc}
\calls{tracelet}{union}
\calls{tracelet}{setletprintflag}
\calls{tracelet}{memq}
\calls{tracelet}{isgenvar}
\calls{tracelet}{compileBoot}
\calls{tracelet}{delete}
\usesdollar{tracelet}{traceletflag}
\usesdollar{tracelet}{QuickLet}
\usesdollar{tracelet}{letAssoc}
\usesdollar{tracelet}{traceletFunctions}
<<defun tracelet>>=
(defun |tracelet| (fn |vars|)
 (prog ($traceletflag |$QuickLet| l)
  (declare (special $traceletflag |$QuickLet| |$letAssoc| 
                    |$traceletFunctions|))
  (return
   (progn
    (cond
     ((and (gensymp fn) (|stupidIsSpadFunction| (eval fn)))
       (setq fn (eval fn))
       (cond
        ((compiled-function-p fn) (setq fn (bpiname fn)))
        (t nil))))
    (cond
     ((eq fn '|Undef|) nil)
     (t
       (setq |vars|
         (cond
          ((eq |vars| '|all|) '|all|)
          ((setq l (lassoc fn |$letAssoc|)) (|union| |vars| l))
          (t |vars|)))
       (setq |$letAssoc| (cons (cons fn |vars|) |$letAssoc|))
       (cond (|$letAssoc| (setletprintflag t)))
       (setq $traceletflag t)
       (setq |$QuickLet| nil)
       (cond
        ((and (null (memq fn |$traceletFunctions|))
              (null (isgenvar fn))
              (compiled-function-p (symbol-function fn))
              (null (|stupidIsSpadFunction| fn))
              (null (gensymp fn)))
          (progn
           (setq |$traceletFunctions| (cons fn |$traceletFunctions|))
           (|compileBoot| fn)
           (setq |$traceletFunctions|
             (|delete| fn |$traceletFunctions|))))))))))) 

@
\defun{breaklet}{breaklet}
\calls{breaklet}{gensymp}
\calls{breaklet}{stupidIsSpadFunction}
\calls{breaklet}{bpiname}
\calls{breaklet}{lassoc}
\calls{breaklet}{assoc}
\calls{breaklet}{union}
\calls{breaklet}{setletprintflag}
\calls{breaklet}{memq}
\calls{breaklet}{compileBoot}
\calls{breaklet}{delete}
\usesdollar{breaklet}{QuickLet}
\usesdollar{breaklet}{letAssoc}
\usesdollar{breaklet}{traceletFunctions}
<<defun breaklet>>=
(defun |breaklet| (fn |vars|)
 (prog (|$QuickLet| |fnEntry| |pair|)
  (declare (special |$QuickLet| |$letAssoc| |$traceletFunctions|))
  (return
   (progn
    (cond
     ((and (gensymp fn) (|stupidIsSpadFunction| (eval fn)))
       (setq fn (eval fn))
       (cond
        ((compiled-function-p fn) (setq fn (bpiname fn)))
        (t nil))))
    (cond
     ((eq fn '|Undef|) nil)
     (t
      (setq |fnEntry| (lassoc fn |$letAssoc|))
      (setq |vars|
       (cond
        ((setq |pair| (|assoc| 'break |fnEntry|))
          (|union| |vars| (cdr |pair|)))
        (t |vars|)))
      (setq |$letAssoc|
       (cond
        ((null |fnEntry|)
          (cons (cons fn (list (cons 'break |vars|))) |$letAssoc|))
        (|pair| (rplacd |pair| |vars|) |$letAssoc|)))
      (cond (|$letAssoc| (setletprintflag t)))
      (setq |$QuickLet| nil)
      (cond
       ((and (null (memq fn |$traceletFunctions|))
             (null (|stupidIsSpadFunction| fn))
             (null (gensymp fn)))
        (progn
         (setq |$traceletFunctions| (cons fn |$traceletFunctions|))
         (|compileBoot| fn)
         (setq |$traceletFunctions|
          (|delete| fn |$traceletFunctions|))))))))))) 

@
\defun{stupidIsSpadFunction}{stupidIsSpadFunction}
\calls{stupidIsSpadFunction}{strpos}
\calls{stupidIsSpadFunction}{pname}
<<defun stupidIsSpadFunction>>=
(defun |stupidIsSpadFunction| (fn)
 (strpos ";" (pname fn) 0 nil)) 

@

\defun{break}{break}
\calls{break}{MONITOR,EVALTRAN}
\calls{break}{enable-backtrace}
\calls{break}{sayBrightly}
\calls{break}{interrupt}
\uses{break}{/breakcondition}
<<defun break>>=
(defun |break| (msg)
 (prog (condition)
  (declare (special /breakcondition))
  (return
   (progn
    (setq condition (|MONITOR,EVALTRAN| /breakcondition nil))
    (enable-backtrace nil)
    (when (eval condition) 
      (|sayBrightly| msg)
      (interrupt))))))

@
\defun{compileBoot}{compileBoot}
\calls{compileBoot}{/D,1}
<<defun compileBoot>>=
(defun |compileBoot| (fn)
 (|/D,1| (list fn) '(/comp) nil nil)) 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{undo help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<undo.help>>=
====================================================================
A.27.  )undo
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )undo
  - )undo integer
  - )undo integer [option]
  - )undo )redo
 
where option is one of
 
  - )after
  - )before
 
Command Description: 
 
This command is used to restore the state of the user environment to an
earlier point in the interactive session. The argument of an )undo is an
integer which must designate some step number in the interactive session.
 
)undo n
)undo n )after
 
These commands return the state of the interactive environment to that
immediately after step n. If n is a positive number, then n refers to step
nummber n. If n is a negative number, it refers to the nth previous command
(that is, undoes the effects of the last -n commands).
 
A )clear all resets the )undo facility. Otherwise, an )undo undoes the effect
of )clear with options properties, value, and mode, and that of a previous
undo. If any such system commands are given between steps n and n + 1 (n >
0), their effect is undone for )undo m for any 0 < m <= n .
 
The command )undo is equivalent to )undo -1 (it undoes the effect of the
previous user expression). The command )undo 0 undoes any of the above system
commands issued since the last user expression.
 
)undo n )before
 
This command returns the state of the interactive environment to that
immediately before step n. Any )undo or )clear system commands given before
step n will not be undone.
 
)undo )redo
 
This command reads the file redo.input. created by the last )undo command.
This file consists of all user input lines, excluding those backtracked over
due to a previous )undo.
 
The command )history )write will eliminate the ``undone'' command lines of
your program.

Also See: 
o )history
 
@ 
\footnote{\fnref{history}}

\section{Data Structures}
\verb|$frameRecord = [delta1, delta2,... ]| where
delta(i) contains changes in the ``backwards'' direction.
Each delta(i) has the form \verb|((var . proplist)...)| where
proplist denotes an ordinary proplist. For example, an entry
of the form \verb|((x (value) (mode (Integer)))...)| indicates that
to undo 1 step, x's value is cleared and its mode should be set
to (Integer).

A delta(i) of the form (systemCommand . delta) is a special
delta indicating changes due to system commands executed between
the last command and the current command. By recording these deltas
separately, it is possible to undo to either BEFORE or AFTER
the command. These special delta(i)s are given ONLY when a
a system command is given which alters the environment.

Note: recordFrame('system) is called before a command is executed, and
recordFrame('normal) is called after (see processInteractive1).
If no changes are found for former, no special entry is given.

The \verb|$previousBindings| is a copy of the 
\verb|CAAR $InteractiveFrame|. This is used to
compute the delta(i)s stored in \verb|$frameRecord|.
\section{Functions}
\subsection{Initial Undo Variables}
\begin{verbatim}
$undoFlag := true     --Default setting for undo is "on"
$frameRecord  := nil  --Initial setting for frame record
$previousBindings := nil
\end{verbatim}

\defdollar{undoFlag}
<<initvars>>=
(defvar |$undoFlag| t "t means we record undo information")

@

\defdollar{frameRecord}
<<initvars>>=
(defvar |$frameRecord| nil "a list of value changes") 

@

\defdollar{previousBindings}
<<initvars>>=
(defvar |$previousBindings| nil "a copy of Interactive Frame info for undo") 

@

\defdollar{reportUndo}
<<initvars>>=
(defvar |$reportUndo| nil "t means we report the steps undo takes")

@
\defun{undo}{undo}
\calls{undo}{stringPrefix?}
\calls{undo}{pname}
\calls{undo}{read}
\calls{undo}{userError}
\calls{undo}{pairp}
\calls{undo}{qcdr}
\calls{undo}{qcar}
\calls{undo}{spaddifference}
\calls{undo}{identp}
\calls{undo}{undoSteps}
\calls{undo}{undoCount}
\usesdollar{undo}{options}
\usesdollar{undo}{InteractiveFrame}
<<defun undo>>=
(defun |undo| (l)
 (let (tmp1 key s undoWhen n)
 (declare (special |$options| |$InteractiveFrame|))
  (setq undoWhen '|after|)
  (when
    (and (pairp |$options|)
         (eq (qcdr |$options|) nil)
         (progn
          (setq tmp1 (qcar |$options|))
          (and (pairp tmp1)
               (eq (qcdr tmp1) nil)
               (progn (setq key (qcar tmp1)) t)))
     (cond
      ((|stringPrefix?| (setq s (pname key)) "redo")
        (setq |$options| nil) 
        (|read| '(|redo.input|)))
      ((null (|stringPrefix?| s "before"))
        (|userError| "only option to undo is \")redo\""))
      (t 
        (setq undoWhen '|before|)))))
  (if (null l)
    (setq n (spaddifference 1))
    (setq n (car l)))
  (when (identp n)
    (setq n (parse-integer (pname n)))
    (unless (integerp n)
      (|userError| "undo argument must be an integer")))
  (setq |$InteractiveFrame| (|undoSteps| (|undoCount| n) undoWhen))
  nil))

@
\defun{recordFrame}{recordFrame}
\calls{recordFrame}{kar}
\calls{recordFrame}{diffAlist}
\calls{recordFrame}{seq}
\calls{recordFrame}{exit}
\usesdollar{recordFrame}{undoFlag}
\usesdollar{recordFrame}{frameRecord}
\usesdollar{recordFrame}{InteractiveFrame}
\usesdollar{recordFrame}{previousBindings}
<<defun recordFrame>>=
(defun |recordFrame| (systemNormal)
 (prog (currentAlist delta)
 (declare (special |$undoFlag| |$frameRecord| |$InteractiveFrame| 
    |$previousBindings|))
  (return
   (seq
    (cond 
     ((null |$undoFlag|) nil)
     (t 
       (setq currentAlist (kar |$frameRecord|))
       (setq delta 
         (|diffAlist| (caar |$InteractiveFrame|) |$previousBindings|))
       (cond
        ((eq systemNormal '|system|)
          (cond 
           ((null delta)
             (return nil))
           (t
             (setq delta (cons '|systemCommand| delta))))))
       (setq |$frameRecord| (cons delta |$frameRecord|))
       (setq |$previousBindings|
        (prog (tmp0)
         (setq tmp0 nil)
         (return
          (do ((tmp1 (caar |$InteractiveFrame|) (cdr tmp1)) (x nil))
              ((or (atom tmp1) 
                   (progn (setq x (car tmp1)) nil))
                (nreverse0 tmp0))
           (seq
            (exit
             (setq tmp0
              (cons 
               (cons 
                (car x)
                (prog (tmp2)
                 (setq tmp2 nil)
                 (return
                  (do ((tmp3 (cdr x) (cdr tmp3)) (y nil))
                      ((or (atom tmp3) 
                           (progn (setq y (car tmp3)) nil))
                        (nreverse0 tmp2))
                   (seq
                    (exit
                     (setq tmp2 (cons (cons (car y) (cdr y)) tmp2))))))))
                tmp0))))))))
       (car |$frameRecord|))))))) 

@
\defun{diffAlist}{diffAlist}
\begin{verbatim}
diffAlist(new,old) ==
--record only those properties which are different
  for (pair := [name,:proplist]) in new repeat
    -- name has an entry both in new and old world
    -- (1) if the old world had no proplist for that variable, then
    --     record NIL as the value of each new property
    -- (2) if the old world does have a proplist for that variable, then
    --     a) for each property with a value: give the old value
    --     b) for each property missing:      give NIL as the old value
    oldPair := ASSQ(name,old) =>
      null (oldProplist := CDR oldPair) =>
      --record old values of new properties as NIL
        acc := [ [name,:[ [prop] for [prop,:.] in proplist] ],:acc]
      deltas := nil
      for (propval := [prop,:val]) in proplist repeat
        null (oldPropval := ASSOC(prop,oldProplist)) => --missing property
          deltas := [ [prop],:deltas]
        EQ(CDR oldPropval,val) => 'skip
        deltas := [oldPropval,:deltas]
      deltas => acc := [ [name,:NREVERSE deltas],:acc]
    acc := [ [name,:[ [prop] for [prop,:.] in proplist] ],:acc]
--record properties absent on new list (say, from a )cl all)
  for (oldPair := [name,:r]) in old repeat
    r and null LASSQ(name,new) =>
      acc := [oldPair,:acc]
    -- name has an entry both in new and old world
    -- (1) if the new world has no proplist for that variable
    --     (a) if the old world does, record the old proplist
    --     (b) if the old world does not, record nothing
    -- (2) if the new world has a proplist for that variable, it has
    --     been handled by the first loop.
  res := NREVERSE acc
  if BOUNDP '$reportUndo and $reportUndo then reportUndo res
  res
\end{verbatim}
\calls{diffAlist}{assq}
\calls{diffAlist}{tmp1}
\calls{diffAlist}{seq}
\calls{diffAlist}{exit}
\calls{diffAlist}{assoc}
\calls{diffAlist}{lassq}
\calls{diffAlist}{reportUndo}
<<defun diffAlist>>=
(defun |diffAlist| (new old)
 (prog (proplist oldPair oldProplist val oldPropval deltas prop name r acc res)
  (return
   (seq
    (progn
     (do ((tmp0 new (cdr tmp0)) (pair nil))
         ((or (atom tmp0) 
              (progn (setq pair (car tmp0)) nil)
              (progn 
               (progn 
                (setq name (car pair))
                (setq proplist (cdr pair))
                pair) 
               nil))
             nil)
      (seq
       (exit
        (cond
         ((setq oldPair (assq name old))
          (cond
           ((null (setq oldProplist (cdr oldPair)))
             (setq acc
              (cons
               (cons
                 name 
                 (prog (tmp1)
                  (setq tmp1 nil)
                  (return
                   (do ((tmp2 proplist (cdr tmp2)) (tmp3 nil))
                       ((or (atom tmp2) 
                            (progn (setq tmp3 (car tmp2)) nil)
                            (progn 
                             (progn (setq prop (car tmp3)) tmp3)
                             nil))
                         (nreverse0 tmp1))
                    (seq
                     (exit
                      (setq tmp1 (cons (cons prop nil) tmp1))))))))
               acc)))
           (t 
             (setq deltas nil)
             (do ((tmp4 proplist (cdr tmp4)) (|propval| nil))
                 ((or (atom tmp4) 
                      (progn (setq |propval| (car tmp4)) nil)
                      (progn
                       (progn
                        (setq prop (car |propval|))
                        (setq val (cdr |propval|))
                        |propval|)
                       nil))
                   nil)
              (seq
               (exit
                (cond
                 ((null (setq oldPropval (|assoc| prop oldProplist)))
                   (setq deltas (cons (cons prop nil) deltas)))
                 ((eq (cdr oldPropval) val) '|skip|)
                 (t (setq deltas (cons oldPropval deltas)))))))
             (when deltas
               (setq acc 
                (cons (cons name (nreverse deltas)) acc))))))
         (t
           (setq acc
            (cons
             (cons
              name
              (prog (tmp5)
               (setq tmp5 nil)
               (return
                (do ((tmp6 proplist (cdr tmp6)) (tmp7 nil))
                    ((or (atom tmp6) 
                         (progn (setq tmp7 (CAR tmp6)) nil)
                         (progn
                          (progn (setq prop (CAR tmp7)) tmp7)
                          nil))
                       (nreverse0 tmp5))
                 (seq
                  (exit
                   (setq tmp5 (cons (cons prop nil) tmp5))))))))
             acc)))))))
     (seq
      (do ((tmp8 old (cdr tmp8)) (oldPair nil))
          ((or (atom tmp8) 
               (progn (setq oldPair (car tmp8)) nil)
               (progn
                (progn
                 (setq name (car oldPair))
                 (setq r (cdr oldPair))
                 oldPair)
                nil))
              nil)
       (seq
        (exit
         (cond
          ((and r (null (lassq name new)))
            (exit 
             (setq acc (cons oldPair acc))))))))
      (setq res (nreverse acc))
      (cond 
       ((and (boundp '|$reportUndo|) |$reportUndo|)
         (|reportUndo| res)))
      (exit res))))))) 

@
\defun{reportUndo}{reportUndo}
This function is enabled by setting \verb|$reportUndo| to a non-nil value.
An example of the output generated is:
\begin{verbatim}
r := binary(22/7)
 

           ___
   (1)  11.001
                                                        Type: BinaryExpansion
Properties of % ::
  value was: NIL
  value is:  ((|BinaryExpansion|) WRAPPED . #(1 (1 1) NIL (0 0 1)))
Properties of r ::
  value was: NIL
  value is:  ((|BinaryExpansion|) WRAPPED . #(1 (1 1) NIL (0 0 1)))

\end{verbatim}

\calls{reportUndo}{seq}
\calls{reportUndo}{exit}
\calls{reportUndo}{sayBrightly}
\calls{reportUndo}{concat}
\calls{reportUndo}{pname}
\calls{reportUndo}{lassoc}
\calls{reportUndo}{sayBrightlyNT}
\calls{reportUndo}{pp}
\usesdollar{reportUndo}{InteractiveFrame}
<<defun reportUndo>>=
(defun |reportUndo| (acc)
 (prog (name proplist curproplist prop value)
 (declare (special |$InteractiveFrame|))
  (return
   (seq
    (do ((tmp0 acc (cdr tmp0)) (tmp1 nil))
        ((or (atom tmp0) 
             (progn (setq tmp1 (car tmp0)) nil)
             (progn
              (progn
               (setq name (car tmp1))
               (setq proplist (cdr tmp1))
               tmp1)
              nil))
            nil)
     (seq
      (exit
       (progn
        (|sayBrightly|
          (concat '|Properties of | (pname name) " ::"))
        (setq curproplist (lassoc name (caar |$InteractiveFrame|)))
        (do ((tmp2 proplist (cdr tmp2)) (tmp3 nil))
            ((or (atom tmp2) 
                 (progn (setq tmp3 (car tmp2)) nil)
                 (progn 
                  (progn 
                   (setq prop (car tmp3))
                   (setq value (cdr tmp3))
                   tmp3)
                  nil))
                nil)
         (seq
          (exit
           (progn
            (|sayBrightlyNT|
             (cons "  " (cons prop (cons " was: " nil))))
            (|pp| value)
            (|sayBrightlyNT| 
             (cons "  " (cons prop (cons " is:  " nil))))
            (|pp| (lassoc prop curproplist)))))))))))))) 

@
\defun{clearFrame}{clearFrame}
\calls{clearFrame}{clearCmdAll}
\usesdollar{clearFrame}{frameRecord}
\usesdollar{clearFrame}{previousBindings}
<<defun clearFrame>>=
(defun |clearFrame| ()
 (declare (special |$frameRecord| |$previousBindings|))
  (|clearCmdAll|)
  (setq |$frameRecord| nil) 
  (setq |$previousBindings| nil))

@
\defunsec{undoCount}{Undo previous n commands}
\calls{undoCount}{spaddifference}
\calls{undoCount}{userError}
\calls{undoCount}{concat}
\usesdollar{undoCount}{IOindex}
<<defun undoCount>>=
(defun |undoCount| (n)
 "Undo previous n commands"
 (prog (m)
 (declare (special |$IOindex|))
  (return
   (progn
    (setq m 
     (cond 
       ((>= n 0) (spaddifference (spaddifference |$IOindex| n) 1))
       (t (spaddifference n))))
    (cond
     ((>= m |$IOindex|)
       (|userError| 
        (concat "Magnitude of undo argument must be less than step number ("
           (princ-to-string |$IOindex|) ").")))
     (t m)))))) 

@
\defun{undoSteps}{undoSteps}
\begin{verbatim}
-- undoes m previous commands; if )before option, then undo one extra at end
--Example: if $IOindex now is 6 and m = 2 then general layout of $frameRecord,
--  after the call to recordFrame below will be:
--  (<change for systemcommands>
--  (<change for #5> <change for system commands>
--  (<change for #4> <change for system commands>
--  (<change for #3> <change for system commands>
--   <change for #2> <change for system commands>
--   <change for #1> <change for system commands>) where system
--  command entries are optional and identified by (systemCommand . change).
--  For a ")undo 3 )after", m = 2 and undoStep swill restore the environment
--  up to, but not including <change for #3>.
--  An "undo 3 )before" will additionally restore <change for #3>.
--  Thus, the later requires one extra undo at the end.
\end{verbatim}
\calls{undoSteps}{writeInputLines}
\calls{undoSteps}{spaddifference}
\calls{undoSteps}{recordFrame}
\calls{undoSteps}{copy}
\calls{undoSteps}{undoSingleStep}
\calls{undoSteps}{pairp}
\calls{undoSteps}{qcdr}
\calls{undoSteps}{qcar}
\usesdollar{undoSteps}{IOindex}
\usesdollar{undoSteps}{InteractiveFrame}
\usesdollar{undoSteps}{frameRecord}
<<defun undoSteps>>=
(defun |undoSteps| (m beforeOrAfter)
 (let (tmp1 tmp2 systemDelta lastTailSeen env)
 (declare (special |$IOindex| |$InteractiveFrame| |$frameRecord|))
  (|writeInputLines| '|redo| (spaddifference |$IOindex| m))
  (|recordFrame| '|normal|)
  (setq env (copy (caar |$InteractiveFrame|)))
  (do ((i 0 (1+ i)) (framelist |$frameRecord| (cdr framelist)))
      ((or (> i m) (atom framelist)) nil)
    (setq env (|undoSingleStep| (CAR framelist) env))
    (if (and (pairp framelist) 
            (progn
             (setq tmp1 (qcdr framelist))
             (and (pairp tmp1) 
                  (progn
                   (setq tmp2 (qcar tmp1))
                   (and (pairp tmp2)
                        (eq (qcar tmp2) '|systemCommand|)
                        (progn 
                         (setq systemDelta (qcdr tmp2))
                         t))))))
      (progn
        (setq framelist (cdr framelist))
        (setq env (|undoSingleStep| systemDelta env)))
      (setq lastTailSeen framelist)))
  (cond
   ((eq beforeOrAfter '|before|)
     (setq env (|undoSingleStep| (car (cdr lastTailSeen)) env))))
  (setq |$frameRecord| (cdr |$frameRecord|))
  (setq |$InteractiveFrame| (list (list env)))))

@
\defun{undoSingleStep}{undoSingleStep}
\begin{verbatim}
undoSingleStep(changes,env) ==
--Each change is a name-proplist pair. For each change:
--  (1) if there exists a proplist in env, then for each prop-value change:
--      (a) if the prop exists in env, RPLAC in the change value
--      (b) otherwise, CONS it onto the front of prop-values for that name
--  (2) add change to the front of env
--  pp '"----Undoing 1 step--------"
--  pp changes
\end{verbatim}
\calls{undoSingleStep}{assq}
\calls{undoSingleStep}{seq}
\calls{undoSingleStep}{exit}
\calls{undoSingleStep}{lassoc}
\calls{undoSingleStep}{undoLocalModemapHack}
<<defun undoSingleStep>>=
(defun |undoSingleStep| (changes env)
 (prog (name changeList pairlist proplist prop value node)
  (return
   (seq
    (progn
     (do ((tmp0 changes (cdr tmp0)) (|change| nil))
         ((or (atom tmp0) 
              (progn (setq |change| (car tmp0)) nil)
              (progn 
               (progn 
                (setq name (car |change|))
                (setq changeList (cdr |change|))
                |change|)
               nil))
             nil)
      (seq
       (exit
        (progn
         (when (lassoc '|localModemap| changeList)
           (setq changeList (|undoLocalModemapHack| changeList)))
         (cond
          ((setq pairlist (assq name env))
            (cond
             ((setq proplist (cdr pairlist))
               (do ((tmp1 changeList (cdr tmp1)) (pair nil))
                   ((or (atom tmp1) 
                        (progn (setq pair (car tmp1)) nil)
                        (progn
                         (progn
                          (setq prop (car pair))
                          (setq value (cdr pair))
                          pair)
                          nil))
                        nil)
                (seq
                 (exit
                  (cond
                   ((setq node (assq prop proplist))
                     (rplacd node value))
                   (t
                     (rplacd proplist
                       (cons (car proplist) (cdr proplist)))
                     (rplaca proplist pair)))))))
             (t (rplacd pairlist changeList))))
          (t 
            (setq env (cons |change| env))))))))
     env))))) 

@
\defun{undoLocalModemapHack}{undoLocalModemapHack}
\calls{undoLocalModemapHack}{seq}
\calls{undoLocalModemapHack}{exit}
<<defun undoLocalModemapHack>>=
(defun |undoLocalModemapHack| (changeList)
 (prog (name value)
  (return
   (seq
    (prog (tmp0)
     (setq tmp0 nil)
     (return
      (do ((tmp1 changeList (cdr tmp1)) (pair nil))
          ((or (atom tmp1) 
               (progn (setq pair (car tmp1)) nil)
               (progn
                (progn
                 (setq name (car pair))
                 (setq value (cdr pair))
                 pair)
                nil))
              (nreverse0 tmp0))
       (seq
        (exit
         (cond
          ((cond
             ((eq name '|localModemap|) (cons name nil))
             (t pair))
           (setq tmp0 
            (cons 
             (cond 
              ((eq name '|localModemap|) (cons name nil))
              (t pair)) tmp0))))))))))))) 

@
\defunsec{removeUndoLines}{Remove undo lines from history write}
Removing undo lines from \verb|)hist )write linelist|
\calls{removeUndoLines}{stringPrefix?}
\calls{removeUndoLines}{seq}
\calls{removeUndoLines}{exit}
\calls{removeUndoLines}{trimString}
\calls{removeUndoLines}{substring}
\calls{removeUndoLines}{nequal}
\calls{removeUndoLines}{charPosition}
\calls{removeUndoLines}{maxindex}
\calls{removeUndoLines}{undoCount}
\calls{removeUndoLines}{spaddifference}
\calls{removeUndoLines}{concat}
\usesdollar{removeUndoLines}{currentLine}
\usesdollar{removeUndoLines}{IOindex}
<<defun removeUndoLines>>=
(defun |removeUndoLines| (u)
 "Remove undo lines from history write"
 (prog (xtra savedIOindex s s1 m s2 x code c n acc)
 (declare (special |$currentLine| |$IOindex|))
  (return
   (seq
    (progn
     (setq xtra 
      (cond
       ((stringp |$currentLine|) (cons |$currentLine| nil))
       (t (reverse |$currentLine|))))
     (setq xtra
      (prog (tmp0)
       (setq tmp0 nil)
       (return
        (do ((tmp1 xtra (cdr tmp1)) (x nil))
            ((or (atom tmp1)
                 (progn (setq x (car tmp1)) nil))
               (nreverse0 tmp0))
         (seq
          (exit
           (cond
            ((null (|stringPrefix?| ")history" x))
              (setq tmp0 (cons x tmp0))))))))))
     (setq u (append u xtra))
     (cond
      ((null
        (prog (tmp2)
         (setq tmp2 nil)
         (return
          (do ((tmp3 nil tmp2) (tmp4 u (cdr tmp4)) (x nil))
              ((or tmp3 (atom tmp4) (progn (setq x (car tmp4)) nil)) tmp2)
           (seq
            (exit
             (setq tmp2 
               (or tmp2 (|stringPrefix?| ")undo" x))))))))) u)
      (t
        (setq savedIOindex |$IOindex|)
        (setq |$IOindex| 1)
        (do ((y u (cdr y)))
            ((atom y) nil)
         (seq
          (exit
           (cond
            ((eql (elt (setq x (car y)) 0) #\) )
              (cond
               ((|stringPrefix?| ")undo"
                                 (setq s (|trimString| x)))
                (setq s1 (|trimString| (substring s 5 nil)))
                (cond
                  ((nequal s1 ")redo")
                    (setq m (|charPosition| #\) s1 0))
                    (setq code
                     (cond
                       ((> (maxindex s1) m) (elt s1 (1+ m)))
                       (t #\a)))
                    (setq s2 (|trimString| (substring s1 0 m)))))
                (setq n
                 (cond
                  ((string= s1 ")redo")
                     0)
                  ((nequal s2 "")
                    (|undoCount| (parse-integer s2)))
                  (t (spaddifference 1))))
                (rplaca y
                  (concat ">" code (princ-to-string n))))
               (t nil)))
            (t (setq |$IOindex| (1+ |$IOindex|)))))))
        (setq acc nil)
        (do ((y (nreverse u) (cdr y)))
            ((atom y) nil)
         (seq
          (exit
           (cond
            ((eql (elt (setq x (car y)) 0) #\>)
              (setq code (elt x 1))
              (setq n (parse-integer (substring x 2 nil)))
              (setq y (cdr y))
              (do () 
                  ((null y) nil)
               (seq
                (exit
                 (progn
                  (setq c (car y))
                  (cond 
                   ((or (eql (elt c 0) #\))
                        (eql (elt c 0) #\>))
                     (setq y (cdr y)))
                   ((eql n 0)
                     (return nil))
                   (t
                     (setq n (spaddifference n 1))
                     (setq y (cdr y))))))))
              (cond
               ((and y (nequal code #\b))
                 (setq acc (cons c acc)))))
            (t (setq acc (cons x acc)))))))
        (setq |$IOindex| savedIOindex)
        acc)))))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{what help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<what.help>>=
====================================================================
A.28.  )what
====================================================================
 
User Level Required:  interpreter
 
Command Syntax: 
 
  - )what categories pattern1 [pattern2 ...]
  - )what commands   pattern1 [pattern2 ...]
  - )what domains    pattern1 [pattern2 ...]
  - )what operations pattern1 [pattern2 ...]
  - )what packages   pattern1 [pattern2 ...]
  - )what synonym    pattern1 [pattern2 ...]
  - )what things     pattern1 [pattern2 ...]
  - )apropos         pattern1 [pattern2 ...]
 
Command Description: 
 
This command is used to display lists of things in the system. The patterns
are all strings and, if present, restrict the contents of the lists. Only
those items that contain one or more of the strings as substrings are
displayed. For example,
 
)what synonym
 
displays all command synonyms,
 
)what synonym ver
 
displays all command synonyms containing the substring ``ver'',
 
)what synonym ver pr
 
displays all command synonyms containing the substring ``ver'' or the
substring ``pr''. Output similar to the following will be displayed
 
---------------- System Command Synonyms -----------------
 

user-defined synonyms satisfying patterns:
      ver pr
 

  )apr ........................... )what things
  )apropos ....................... )what things
  )prompt ........................ )set message prompt
  )version ....................... )lisp *yearweek*
 
Several other things can be listed with the )what command:
 
  categories displays a list of category constructors.
  commands  displays a list of  system commands available  at your
    user-level. Your user-level is set via the )set userlevel command. To get
    a description of a particular command, such as ``)what'', issue )help
    what.
  domains   displays a list of domain constructors.
  operations displays a list of operations in  the system library.
    It is recommended that you qualify this command with one or more
    patterns, as there are thousands of operations available. For example,
    say you are looking for functions that involve computation of
    eigenvalues. To find their names, try )what operations eig. A rather
    large list of operations is loaded into the workspace when this command
    is first issued. This list will be deleted when you clear the workspace
    via )clear all or )clear completely. It will be re-created if it is
    needed again.
  packages  displays a list of package constructors.
  synonym  lists system command synonyms.
  things    displays all  of the  above types for  items containing
    the pattern strings as substrings. The command synonym )apropos is
    equivalent to )what things.
 
Also See: 
o )display
o )set
o )show
 
@
\footnote{
\fnref{display}
\fnref{set}
\fnref{show}}

\defdollar{whatOptions}
<<initvars>>=
(defvar |$whatOptions| '(|operations| |categories| |domains| |packages| 
                         |commands| |synonyms| |things|))

@

\defun{what}{what}
\calls{what}{whatSpad2Cmd}
<<defun what>>=
(defun |what| (l)
 (|whatSpad2Cmd| l)) 

@

\defun{whatSpad2Cmd,fixpat}{whatSpad2Cmd,fixpat}
\calls{whatSpad2Cmd,fixpat}{pairp}
\calls{whatSpad2Cmd,fixpat}{qcar}
\calls{whatSpad2Cmd,fixpat}{downcase}
<<defun whatSpad2Cmd,fixpat>>=
(defun |whatSpad2Cmd,fixpat| (x)
 (let (xp)
  (if (and (pairp x) (progn (setq xp (qcar x)) t))
   (downcase xp)
   (downcase x))))

@

\defun{whatSpad2Cmd}{whatSpad2Cmd}
\calls{whatSpad2Cmd}{reportWhatOptions}
\calls{whatSpad2Cmd}{selectOptionLC}
\calls{whatSpad2Cmd}{sayKeyedMsg}
\calls{whatSpad2Cmd}{seq}
\calls{whatSpad2Cmd}{exit}
\calls{whatSpad2Cmd}{whatSpad2Cmd,fixpat}
\calls{whatSpad2Cmd}{memq}
\calls{whatSpad2Cmd}{whatSpad2Cmd}
\calls{whatSpad2Cmd}{filterAndFormatConstructors}
\calls{whatSpad2Cmd}{whatCommands}
\calls{whatSpad2Cmd}{apropos}
\calls{whatSpad2Cmd}{printSynonyms}
\usesdollar{whatSpad2Cmd}{e}
\usesdollar{whatSpad2Cmd}{whatOptions}
<<defun whatSpad2Cmd>>=
(defun |whatSpad2Cmd| (arg)
 (prog (|$e| |key0| key args)
  (declare (special |$e| |$whatOptions|))
  (return
   (seq
    (progn
     (setq |$e| |$EmptyEnvironment|)
     (cond
      ((null arg) (|reportWhatOptions|))
      (t
        (setq |key0| (car arg))
        (setq args (cdr arg))
        (setq key (|selectOptionLC| |key0| |$whatOptions| nil))
        (cond
         ((null key) (|sayKeyedMsg| 's2iz0043 nil))
         (t
          (setq args
           (prog (t0)
            (setq t0 nil)
            (return
              (do ((t1 args (cdr t1)) (p nil))
                  ((or (atom t1)
                       (progn (setq p (car t1)) nil))
                 (nreverse0 t0))
               (seq
                (exit
                 (setq t0 (cons (|whatSpad2Cmd,fixpat| p) t0))))))))
          (seq
           (cond
            ((eq key '|things|)
              (do ((t2 |$whatOptions| (cdr t2)) (opt nil))
                  ((or (atom t2) (progn (setq opt (CAR t2)) nil)) nil)
               (seq
                (exit
                 (cond
                  ((null (memq opt '(|things|)))
                    (exit (|whatSpad2Cmd| (cons opt args)))))))))
            ((eq key '|categories|)
              (|filterAndFormatConstructors| '|category| "Categories" args))
            ((eq key '|commands|) (|whatCommands| args))
            ((eq key '|domains|)
              (|filterAndFormatConstructors| '|domain| "Domains" args))
            ((eq key '|operations|)
               (|apropos| args))
            ((eq key '|packages|)
              (|filterAndFormatConstructors| '|package| "Packages" args))
            (t
             (cond ((eq key '|synonyms|)
                      (|printSynonyms| args))))))))))))))) 

@

\defun{reportWhatOptions}{Show keywords for )what command}
\calls{reportWhatOptions}{sayBrightly}
\usesdollar{reportWhatOptions}{whatOptions}
<<defun reportWhatOptions>>=
(defun |reportWhatOptions| ()
 (let (optlist)
 (declare (special |$whatOptions|))
  (setq optlist
   (reduce #'append
    (mapcar #'(lambda (x) `(|%l| "        " ,x)) |$whatOptions|)))
  (|sayBrightly|
   `(|%b| "  )what" |%d| "argument keywords are" |%b| ,@optlist |%d|
     |%l| "   or abbreviations thereof." |%l| |%l| "   Issue" |%b| ")what ?"
     |%d| "for more information."))))

@

\defun{whatCommands}{The )what commands implementation}
\calls{whatCommands}{stringimage}
\calls{whatCommands}{centerAndHighlight}
\calls{whatCommands}{strconc}
\calls{whatCommands}{specialChar}
\calls{whatCommands}{filterListOfStrings}
\calls{whatCommands}{commandsForUserLevel}
\calls{whatCommands}{sayMessage}
\calls{whatCommands}{blankList}
\calls{whatCommands}{sayAsManyPerLineAsPossible}
\calls{whatCommands}{say}
\calls{whatCommands}{sayKeyedMsg}
\usesdollar{whatCommands}{systemCommands}
\usesdollar{whatCommands}{linelength}
\usesdollar{whatCommands}{UserLevel}
<<defun whatCommands>>=
(defun |whatCommands| (patterns)
 (let (label ell)
 (declare (special |$systemCommands| $linelength |$UserLevel|))
  (setq label 
   (strconc '|System Commands for User Level: | (stringimage |$UserLevel|)))
  (|centerAndHighlight| label $linelength (|specialChar| '|hbar|))
  (setq ell
   (|filterListOfStrings| patterns
    (mapcar #'stringimage (|commandsForUserLevel| |$systemCommands|))))
  (when patterns
   (if ell
     (|sayMessage|
      `("System commands at this level matching patterns:" |%l| "   " |%b|
         ,@(append (|blankList| patterns) (list '|%d|))))
     (|sayMessage|
      `("No system commands at this level matching patterns:" |%l| "   " |%b|
        ,@(append (|blankList| patterns) (list '|%d|))))))
  (when ell
   (|sayAsManyPerLineAsPossible| ell)
   (say " "))
  (unless patterns (|sayKeyedMsg| 's2iz0046 nil))))

@

\defun{filterListOfStrings}{Find all names contained in a pattern}
Names and patterns are lists of strings. This returns a list of strings 
in names that contains any of the strings in the patterns
\calls{filterListOfStrings}{satisfiesRegularExpressions}
<<defun filterListOfStrings>>=
(defun |filterListOfStrings| (patterns names)
 (let (result)
 (if (or (null patterns) (null names))
  names
  (dolist (name (reverse names) result)
   (when (|satisfiesRegularExpressions| name patterns)
    (push name result))))))

@

\defun{filterListOfStringsWithFn}{Find function of names contained in pattern}
The argument names and patterns are lists of strings.
The argument fn is something like CAR or CADR
This returns a list of strings in names that contains any of the strings
in patterns
\calls{filterListOfStringsWithFn}{satisfiesRegularExpressions}
<<defun filterListOfStringsWithFn>>=
(defun |filterListOfStringsWithFn| (patterns names fn)
 (let (result)
 (if (or (null patterns) (null names))
  names
  (dolist (name (reverse names) result)
   (when (|satisfiesRegularExpressions| (funcall fn name) patterns)
    (push name result))))))

@

\defun{satisfiesRegularExpressions}{satisfiesRegularExpressions}
\calls{satisfiesRegularExpressions}{strpos}
<<defun satisfiesRegularExpressions>>=
(defun |satisfiesRegularExpressions| (name patterns)
 (let ((dname (downcase (copy name))))
  (dolist (pattern patterns)
   (when (strpos pattern dname 0 "@")
    (return-from nil t)))))

@

\defun{filterAndFormatConstructors}{filterAndFormatConstructors}
\calls{filterAndFormatConstructors}{sayMessage}
\calls{filterAndFormatConstructors}{blankList}
\calls{filterAndFormatConstructors}{pp2Cols}
\calls{filterAndFormatConstructors}{centerAndHighlight}
\calls{filterAndFormatConstructors}{specialChar}
\calls{filterAndFormatConstructors}{filterListOfStringsWithFn}
\calls{filterAndFormatConstructors}{whatConstructors}
\calls{filterAndFormatConstructors}{function}
\usesdollar{filterAndFormatConstructors}{linelength}
<<defun filterAndFormatConstructors>>=
(defun |filterAndFormatConstructors| (|constrType| label patterns)
 (prog (l)
 (declare (special $linelength))
  (return
   (progn (|centerAndHighlight| label $linelength (|specialChar| '|hbar|))
    (setq l
     (|filterListOfStringsWithFn| patterns
       (|whatConstructors| |constrType|)
       (|function| cdr)))
    (cond (patterns
     (cond
      ((null l)
       (|sayMessage|
        (cons "   No "
         (cons label
          (cons " with names matching patterns:"
           (cons '|%l|
            (cons "   "
             (cons '|%b|
              (append (|blankList| patterns)
               (cons '|%d| nil))))))))))
      (t
        (|sayMessage|
         (cons label
          (cons " with names matching patterns:"
           (cons '|%l|
            (cons "   "
             (cons '|%b|
              (append (|blankList| patterns)
               (cons '|%d| nil))))))))))))
    (cond (l (|pp2Cols| l)))))))

@ 

\defun{whatConstructors}{whatConstructors}
\calls{whatConstructors}{boot-equal}
\calls{whatConstructors}{getdatabase}
\calls{whatConstructors}{seq}
\calls{whatConstructors}{msort}
\calls{whatConstructors}{exit}
<<defun whatConstructors>>=
(defun |whatConstructors| (|constrType|)
 (prog nil
  (return 
   (seq
    (msort
     (prog (t0)
      (setq t0 nil)
      (return
       (do ((t1 (|allConstructors|) (cdr t1)) (|con| nil))
           ((or (atom t1) (progn (setq |con| (car t1)) nil)) (nreverse0 t0))
        (seq
         (exit
          (cond
           ((boot-equal (getdatabase |con| 'constructorkind)
                        |constrType|)
             (setq t0
              (cons
               (cons
                (getdatabase |con| 'abbreviation)
                (string |con|))
               t0)))))))))))))) 

@

\defunsec{apropos}{Display all operation names containing the fragment}
Argument l is a list of operation name fragments.
This displays all operation names containing these fragments
\calls{apropos}{allOperations}
\calls{apropos}{filterListOfStrings}
\calls{apropos}{seq}
\calls{apropos}{exit}
\calls{apropos}{downcase}
\calls{apropos}{sayMessage}
\calls{apropos}{sayAsManyPerLineAsPossible}
\calls{apropos}{msort}
\calls{apropos}{sayKeyedMsg}
<<defun apropos>>=
(defun |apropos| (arg)
 "Display all operation names containing the fragment"
 (prog (ops)
  (return
   (seq
    (progn
     (setq ops
      (cond 
       ((null arg) (|allOperations|))
       (t
         (|filterListOfStrings|
          (prog (t0)
           (setq t0 nil)
           (return
            (do ((t1 arg (cdr t1)) (p nil))
                ((or (atom t1) (progn (setq p (car t1)) nil))
                  (nreverse0 t0))
            (seq (exit (setq t0 (cons (downcase (princ-to-string p)) t0)))))))
          (|allOperations|)))))
     (cond
      (ops
       (|sayMessage| "Operations whose names satisfy the above pattern(s):")
       (|sayAsManyPerLineAsPossible| (msort ops))
       (|sayKeyedMsg| 's2if0011 (cons (car ops) nil)))
      (t
       (|sayMessage| "   There are no operations containing those patterns")
       nil))))))) 

@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{with help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<with.help>>=

This command is obsolete.
This has been renamed )library.

See also:
o )library

@
\footnote{\fnref{library}}

\defun{with}{with}
\calls{with}{library}
<<defun with>>=
(defun |with| (args)
 (|library| args))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{workfiles help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defun{workfiles}{workfiles}
\calls{workfiles}{workfilesSpad2Cmd}
<<defun workfiles>>=
(defun |workfiles| (l)
 (|workfilesSpad2Cmd| l)) 

@

\defun{workfilesSpad2Cmd}{workfilesSpad2Cmd}
\calls{workfilesSpad2Cmd}{throwKeyedMsg}
\calls{workfilesSpad2Cmd}{selectOptionLC}
\calls{workfilesSpad2Cmd}{pathname}
\calls{workfilesSpad2Cmd}{delete}
\calls{workfilesSpad2Cmd}{makeInputFilename}
\calls{workfilesSpad2Cmd}{sayKeyedMsg}
\calls{workfilesSpad2Cmd}{namestring}
\calls{workfilesSpad2Cmd}{updateSourceFiles}
\calls{workfilesSpad2Cmd}{say}
\calls{workfilesSpad2Cmd}{centerAndHighlight}
\calls{workfilesSpad2Cmd}{specialChar}
\calls{workfilesSpad2Cmd}{sortby}
\calls{workfilesSpad2Cmd}{sayBrightly}
\usesdollar{workfilesSpad2Cmd}{options}
\usesdollar{workfilesSpad2Cmd}{sourceFiles}
\usesdollar{workfilesSpad2Cmd}{linelength}
<<defun workfilesSpad2Cmd>>=
(defun |workfilesSpad2Cmd| (args)
 (let (deleteflag type flist type1 fl)
  (declare (special |$options| |$sourceFiles| $linelength))
  (cond 
   (args (|throwKeyedMsg| 's2iz0047 nil))
   (t
     (setq deleteflag nil)
     (do ((t0 |$options| (cdr t0)) (t1 nil))
         ((or (atom t0)
              (progn (setq t1 (car t0)) nil)
              (progn (progn (setq type (car t1)) t1) nil))
           nil)
       (setq type1
          (|selectOptionLC| type '(|boot| |lisp| |meta| |delete|) nil))
       (cond
        ((null type1) (|throwKeyedMsg| 's2iz0048 (cons type nil)))
        ((eq type1 '|delete|) (setq deleteflag t))))
     (do ((t2 |$options| (cdr t2)) (t3 nil))
         ((or (atom t2)
          (progn (setq t3 (CAR t2)) nil)
          (progn
           (progn 
            (setq type (car t3))
            (setq flist (cdr t3)) t3)
           nil))
          nil)
      (setq type1 (|selectOptionLC| type '(|boot| |lisp| |meta| |delete|) nil))
      (unless (eq type1 '|delete|)
        (dolist (file flist)
         (setq fl (|pathname| (list file type1 "*")))
         (cond 
          (deleteflag
           (setq |$sourceFiles| (|delete| fl |$sourceFiles|)))
          ((null (makeInputFilename fl))
           (|sayKeyedMsg| 's2iz0035 (list (|namestring| fl))))
          (t (|updateSourceFiles| fl))))))
     (say " ")
     (|centerAndHighlight|
       '| User-specified work files |
       $linelength
       (|specialChar| '|hbar|))
     (say " ")
     (if (null |$sourceFiles|)
      (say "   no files specified")
      (progn
        (setq |$sourceFiles| (sortby '|pathnameType| |$sourceFiles|))
        (do ((t5 |$sourceFiles| (cdr t5)) (fl nil))
            ((or (atom t5) (progn (setq fl (car t5)) nil)) nil)
           (|sayBrightly| (list "   " (|namestring| fl))))))))))

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cmdhead{zsystemdevelopment help page}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\defun{zsystemdevelopment}{zsystemdevelopment}
\calls{zsystemdevelopment}{zsystemDevelopmentSpad2Cmd}
<<defun zsystemdevelopment>>=
(defun |zsystemdevelopment| (arg)
 (|zsystemDevelopmentSpad2Cmd| arg)) 

@

\defun{zsystemDevelopmentSpad2Cmd}{zsystemDevelopmentSpad2Cmd}
\calls{zsystemDevelopmentSpad2Cmd}{zsystemdevelopment1}
\usesdollar{zsystemDevelopmentSpad2Cmd}{InteractiveMode}
<<defun zsystemDevelopmentSpad2Cmd>>=
(defun |zsystemDevelopmentSpad2Cmd| (arg)
 (declare (special |$InteractiveMode|))
 (|zsystemdevelopment1| arg |$InteractiveMode|)) 

@

\defun{zsystemdevelopment1}{zsystemdevelopment1}
\catches{zsystemdevelopment1}{filenam}
\calls{zsystemdevelopment1}{selectOptionLC}
\calls{zsystemdevelopment1}{/D,1}
\calls{zsystemdevelopment1}{/comp}
\calls{zsystemdevelopment1}{version}
\calls{zsystemdevelopment1}{defiostream}
\calls{zsystemdevelopment1}{next}
\calls{zsystemdevelopment1}{shut}
\calls{zsystemdevelopment1}{kar}
\calls{zsystemdevelopment1}{kadr}
\calls{zsystemdevelopment1}{kaddr}
\calls{zsystemdevelopment1}{sayMessage}
\calls{zsystemdevelopment1}{sayBrightly}
\calls{zsystemdevelopment1}{bright}
\usesdollar{zsystemdevelopment1}{InteractiveMode}
\usesdollar{zsystemdevelopment1}{options}
\uses{zsystemdevelopment1}{/wsname}
\uses{zsystemdevelopment1}{/version}
<<defun zsystemdevelopment1>>=
(defun |zsystemdevelopment1| (arg im)
 (let (|$InteractiveMode| fromopt opt optargs newopt opt1 constream upf fun)
 (declare (special |$InteractiveMode| /wsname /version |$options|))
 (setq |$InteractiveMode| im)
 (setq fromopt nil)
 (do ((t0 |$options| (cdr t0)) (t1 nil))
     ((or (atom t0)
          (progn (setq t1 (car t0)) nil)
          (progn
           (progn
            (setq opt (CAR t1))
            (setq optargs (CDR t1))
            t1)
           nil))
       nil)
   (setq opt1 (|selectOptionLC| opt '(|from|) nil))
   (when (eq opt1 '|from|) (setq fromopt (cons (cons 'from optargs) nil))))
 (do ((t2 |$options| (cdr t2)) (t3 nil))
     ((or (atom t2)
          (progn (setq t3 (car t2)) nil)
          (progn
           (progn
            (setq opt (car t3))
            (setq optargs (cdr t3))
            t3)
           nil))
      nil)
  (unless optargs (setq optargs arg))
  (setq newopt (append optargs fromopt))
  (setq opt1 (|selectOptionLC| opt '(|from|) nil))
  (cond
   ((eq opt1 '|from|)   nil)
   ((eq opt '|c|)       (|/D,1| newopt (/COMP) nil nil))
   ((eq opt '|d|)       (|/D,1| newopt 'define nil nil))
   ((eq opt '|dt|)      (|/D,1| newopt 'define nil t))
   ((eq opt '|ct|)      (|/D,1| newopt (/COMP) nil t))
   ((eq opt '|ctl|)     (|/D,1| newopt (/COMP) nil 'tracelet))
   ((eq opt '|ec|)      (|/D,1| newopt (/COMP) t nil))
   ((eq opt '|ect|)     (|/D,1| newopt (/COMP) t t))
   ((eq opt '|e|)       (|/D,1| newopt nil t nil))
   ((eq opt '|version|) (|version|))
   ((eq opt '|pause|)
     (setq constream
       (defiostream '((device . console) (qual . v)) 120 0))
     (next constream)
     (shut constream))
   ((or 
       (eq opt '|update|)
       (eq opt '|patch|))
     (setq |$InteractiveMode| nil)
     (setq upf
      (cons
       (or (kar optargs) /version)
       (cons
        (or (kadr optargs) /wsname)
        (cons (or (kaddr optargs) '*) nil))))
     (setq fun
      (cond
       ((eq opt '|patch|) '/update-lib-1)
       (t '/update-1)))
     (catch 'filenam (funcall fun upf))
     (|sayMessage| "   Update/patch is completed."))
   ((null optargs)
    (|sayBrightly| `("   An argument is required for" ,@(|bright| opt))))
   (t
    (|sayMessage|
     `("   Unknown option:" ,@(|bright| opt) 
       |%l| "   Available options are"
       ,@(|bright|
          "c ct e ec ect cls pause update patch compare record"))))))))

@

\chapter{Handling input files}
\defun{readSpadProfileIfThere}{Handle .axiom.input file}
\uses{readSpadProfileIfThere}{/editfile}
<<defun readSpadProfileIfThere>>=
(defun |readSpadProfileIfThere| ()
 (let ((file (list '|.axiom| '|input|)))
 (declare (special /editfile))
  (when (makeInputFilename file) (setq /editfile file) (/rq))))

@

\defun{/rq}{/rq}
\calls{/rq}{/rf-1}
\uses{/rq}{Echo-Meta}
<<defun /rq>>=
(defun /RQ (&rest foo &aux (Echo-Meta nil))
  (declare (special Echo-Meta) (ignore foo))
  (/rf-1 nil))

@

\defun{/rf-1}{/rf-1}
\calls{/rf-1}{ncINTERPFILE}
\usesdollar{/rf-1}{useNewParser}
\uses{/rf-1}{/editfile}
\uses{/rf-1}{Echo-Meta}
<<defun /rf-1>>=
(defun /rf-1 (ignore)
 (declare (ignore ignore))
 (let* ((input-file (makeInputFilename /editfile))
        (type (pathname-type input-file)))
 (declare (special |$useNewParser| Echo-Meta /editfile))
 (cond
  ((string= type "lisp") (load input-file))
  ((and (string= type "input") |$useNewParser|)
    (|ncINTERPFILE| input-file Echo-Meta))
  (t (spad input-file)))))

@

\defvar{boot-line-stack}
<<initvars>>=
(defvar boot-line-stack nil "List of lines returned from preparse")

@

\defvar{in-stream}
<<initvars>>=
(defvar in-stream t "Current input stream.")

@
\defvar{out-stream}
<<initvars>>=
(defvar out-stream t "Current output stream.")

@
\defvar{file-closed}
<<initvars>>=
(defvar file-closed nil  "Way to stop EOF tests for console input.")

@
\defvar{echo-meta}
<<initvars>>=
(defvar echo-meta nil "T if you want a listing of what has been read.")

@

\defdollar{noSubsumption}
<<initvars>>=
(defvar |$noSubsumption| t)

@

\defun{spad}{spad}
\catches{spad}{spad-reader}
\calls{spad}{addBinding}
\calls{spad}{makeInitialModemapFrame}
\calls{spad}{init-boot/spad-reader}
\calls{spad}{initialize-preparse}
\calls{spad}{preparse}
\calls{spad}{PARSE-NewExpr}
\calls{spad}{pop-stack-1}
\calls{spad}{s-process}
\calls{spad}{ioclear}
\calls{spad}{shut}
\usesdollar{spad}{noSubsumption}
\usesdollar{spad}{InteractiveFrame}
\usesdollar{spad}{InitialDomainsInScope}
\usesdollar{spad}{InteractiveMode}
\uses{spad}{line}
\uses{spad}{echo-meta}
\uses{spad}{/editfile}
\uses{spad}{*comp370-apply*}
\uses{spad}{*eof*}
\uses{spad}{file-closed}
\uses{spad}{xcape}
<<defun spad>>=
(defun spad (&optional (*spad-input-file* nil) (*spad-output-file* nil)
             &aux (*comp370-apply* #'print-defun)
                  (*fileactq-apply* #'print-defun)
                 ($spad t) ($boot nil) (xcape #\_) (optionlist nil) (*eof* nil)
                 (file-closed nil) (/editfile *spad-input-file*)
                (|$noSubsumption| |$noSubsumption|) in-stream out-stream)
  (declare (special echo-meta /editfile *comp370-apply* *eof*
		    file-closed xcape |$noSubsumption| |$InteractiveFrame|
                    |$InteractiveMode| |$InitialDomainsInScope|))
  ;; only rebind |$InteractiveFrame| if compiling
  (progv (if (not |$InteractiveMode|) '(|$InteractiveFrame|))
	 (if (not |$InteractiveMode|)
	     (list (|addBinding| '|$DomainsInScope|
		    `((fluid . |true|)
		      (|special| . ,(copy-tree |$InitialDomainsInScope|)))
		    (|addBinding| '|$Information| nil
                      (|makeInitialModemapFrame|)))))
  (init-boot/spad-reader)
  (unwind-protect
    (progn
      (setq in-stream (if *spad-input-file*
			 (open *spad-input-file* :direction :input)
			 *standard-input*))
      (initialize-preparse in-stream)
      (setq out-stream (if *spad-output-file*
			   (open *spad-output-file* :direction :output)
			 *standard-output*))
      (when *spad-output-file*
	 (format out-stream "~&;;; -*- Mode:Lisp; Package:Boot  -*-~%~%")
	 (print-package "BOOT"))
      (setq curoutstream out-stream)
      (loop
       (if (or *eof* file-closed) (return nil))
       (catch 'spad_reader
	 (if (setq boot-line-stack (preparse in-stream))
	     (let ((line (cdar boot-line-stack)))
	       (declare (special line))
	       (|PARSE-NewExpr|)
	       (let ((parseout (pop-stack-1)) )
		 (when parseout
		       (let ((*standard-output* out-stream))
			 (s-process parseout))
		       (format out-stream "~&")))
	       )))
      (ioclear in-stream out-stream)))
    (if *spad-input-file* (shut in-stream))
    (if *spad-output-file* (shut out-stream)))
  t))

@

\defdollar{envHashTable}
The \verb|$envHashTable| variable is a hashtable that optimizes lookups
in the environment, which normally involve search. This gets populated
in the addBinding function.
<<initvars>>=
(defvar |$envHashTable| nil) 

@

\defun{addBinding}{Dynamically add bindings to the environment}
\calls{addBinding}{getProplist}
\calls{addBinding}{addBindingInteractive}
\calls{addBinding}{hput}
\usesdollar{addBinding}{InteractiveMode}
\usesdollar{addBinding}{envHashTable}
<<defun addBinding>>=
(defun |addBinding| (var proplist e)
 (let (tailContour tailEnv tmp1 curContour lx)
 (declare (special |$InteractiveMode| |$envHashTable|))
  (setq curContour (caar e))
  (setq tailContour (cdar e))
  (setq tailEnv (cdr e))
  (cond
   ((eq proplist (|getProplist| var e)) e)
   (t
    (when |$envHashTable|
      (do ((prop proplist (cdr prop)) (u nil))
          ((or (atom prop)
               (progn (setq u (car prop)) nil))
            nil)
        (hput |$envHashTable| (list var (car u)) t)))
    (cond
     (|$InteractiveMode| (|addBindingInteractive| var proplist e))
     (t
      (when (and (pairp curContour)
                 (progn
                  (setq tmp1 (qcar curContour))
                  (and (pairp tmp1) (equal (qcar tmp1) var))))
        (setq curContour (cdr curContour)))
      (setq lx (cons var proplist))
      (cons (cons (cons lx curContour) tailContour) tailEnv)))))))

@

\defun{getProplist}{Fetch a property list for a symbol from CategoryFrame}
\calls{getProplist}{getProplist}
\calls{getProplist}{search}
\usesdollar{getProplist}{CategoryFrame}
<<defun getProplist>>=
(defun |getProplist| (x e)
 (let (u pl)
 (declare (special |$CategoryFrame|))
  (cond
   ((null (atom x)) (|getProplist| (car x) e))
   ((setq u (|search| x e)) u)
   ((setq pl (|search| x |$CategoryFrame|)) pl))))

@

\defun{search}{Search for a binding in the environment list}
\calls{search}{searchCurrentEnv}
\calls{search}{searchTailEnv}
<<defun search>>=
(defun |search| (x e)
 (let ((curEnv (car e)) (tailEnv (cdr e)))
  (or (|searchCurrentEnv| x curEnv) (|searchTailEnv| x tailEnv))))

@

\defun{searchCurrentEnv}{Search for a binding in the current environment}
\begin{verbatim}
searchCurrentEnv(x,currentEnv) ==
  for contour in currentEnv repeat
    if u:= ASSQ(x,contour) then return (signal:= u)
  KDR signal
\end{verbatim}
\calls{searchCurrentEnv}{assq}
\calls{searchCurrentEnv}{kdr}
<<defun searchCurrentEnv>>=
(defun |searchCurrentEnv| (x currentEnv)
 (prog (u signal)
  (return
   (seq
    (progn
     (do ((thisenv currentEnv (cdr thisenv)) (contour nil))
         ((or (atom thisenv) (progn (setq contour (car thisenv)) nil)) nil)
      (seq
       (exit
        (cond
         ((setq u (assq x contour)) (return (setq signal u)))
         (t nil)))))
     (kdr signal))))))

@

\defun{searchTailEnv}{searchTailEnv}
\begin{verbatim}
;searchTailEnv(x,e) ==
;  for env in e repeat
;    signal:=
;      for contour in env repeat
;        if (u:= ASSQ(x,contour)) and ASSQ("FLUID",u) then return (signal:= u)
;      if signal then return signal
;  KDR signal
\end{verbatim}
\calls{searchTailEnv}{assq}
\calls{searchTailEnv}{kdr}
<<defun searchTailEnv>>=
(defun |searchTailEnv| (x e)
 (prog (u signal)
  (return
   (seq
    (progn
     (do ((thise e (cdr thise)) (env nil))
         ((or (atom thise) (progn (setq env (car thise)) nil)) nil)
       (seq
        (exit
         (setq signal
          (progn
           (do ((cone env (cdr cone)) (contour nil))
               ((or (atom cone) (progn (setq contour (car cone)) nil)) nil)
             (seq
              (exit
               (cond
                ((and (setq u (assq x contour)) (assq 'fluid u))
                 (return (setq signal u)))
                (t nil)))))
           (cond
            (signal (return signal))
            (t nil)))))))
     (kdr signal))))))

@

\defun{addBindingInteractive}{Bind a variable in the interactive environment}
\calls{addBindingInteractive}{assq}
<<defun addBindingInteractive>>=
(defun |addBindingInteractive| (var proplist e)
 (let ((curContour (caar e)) u)
  (cond
   ((setq u (assq var curContour)) (rplacd u proplist) e)
   (t (rplac (caar e) (cons (cons var proplist) curContour)) e))))

@

\defvar{line-handler}
<<initvars>>=
(defparameter line-handler 'next-META-line "Who grabs lines for us.")

@

\defdollar{spad-errors}
<<initvars>>=
(defvar $spad_errors (vector 0 0 0))

@

\defvar{xtokenreader}
<<initvars>>=
(defvar xtokenreader 'spadtok)

@

\defun{init-boot/spad-reader}{Initialize the spad reader}
\calls{init-boot/spad-reader}{next-lines-clear}
\calls{init-boot/spad-reader}{ioclear}
\usesdollar{init-boot/spad-reader}{spad-errors}
\uses{init-boot/spad-reader}{spaderrorstream}
\uses{init-boot/spad-reader}{*standard-output* }
\uses{init-boot/spad-reader}{xtokenreader}
\uses{init-boot/spad-reader}{line-handler}
\uses{init-boot/spad-reader}{meta-error-handler}
\uses{init-boot/spad-reader}{file-closed}
\uses{init-boot/spad-reader}{boot-line-stack}
<<defun init-boot/spad-reader>>=
(defun init-boot/spad-reader ()
 (declare (special $spad_errors spaderrorstream *standard-output* 
           xtokenreader line-handler meta_error_handler file-closed
           boot-line-stack))
  (setq $spad_errors (vector 0 0 0))
  (setq spaderrorstream *standard-output*)
  (setq xtokenreader 'get-BOOT-token)
  (setq line-Handler 'next-BOOT-line)
  (setq meta_error_handler 'spad_syntax_error)
  (setq file-closed nil)
  (next-lines-clear)
  (ioclear))

@

\defun{next-lines-clear}{Set boot-line-stack to nil}
\uses{next-lines-clear}{boot-line-stack}
<<defun next-lines-clear>>=
(defun next-lines-clear ()
 (setq boot-line-stack nil))

@


\chapter{Handling output}
\section{Special Character Tables}

\defdollar{defaultSpecialCharacters}
<<initvars>>=
(defvar |$defaultSpecialCharacters| (list
 (int-char 28)    ; upper left corner
 (int-char 27)    ; upper right corner
 (int-char 30)    ; lower left corner
 (int-char 31)    ; lower right corner
 (int-char 79)    ; vertical bar
 (int-char 45)    ; horizontal bar
 (int-char 144)   ; APL quad
 (int-char 173)   ; left bracket
 (int-char 189)   ; right bracket
 (int-char 192)   ; left brace
 (int-char 208)   ; right brace
 (int-char 59)    ; top    box tee
 (int-char 62)    ; bottom box tee
 (int-char 63)    ; right  box tee
 (int-char 61)    ; left   box tee
 (int-char 44)    ; center box tee
 (int-char 224))) ; back slash

@

\defdollar{plainSpecialCharacters0}
<<initvars>>=
(defvar |$plainSpecialCharacters0| (list
 (int-char 78)     ; upper left corner   (+)
 (int-char 78)     ; upper right corner  (+)
 (int-char 78)     ; lower left corner   (+)
 (int-char 78)     ; lower right corner  (+)
 (int-char 79)     ; vertical bar
 (int-char 96)     ; horizontal bar      (-)
 (int-char 111)    ; APL quad            (?)
 (int-char 173)    ; left bracket
 (int-char 189)    ; right bracket
 (int-char 192)    ; left brace
 (int-char 208)    ; right brace
 (int-char 78)     ; top    box tee      (+)
 (int-char 78)     ; bottom box tee      (+)
 (int-char 78)     ; right  box tee      (+)
 (int-char 78)     ; left   box tee      (+)
 (int-char 78)     ; center box tee      (+)
 (int-char 224)))  ; back slash

@

\defdollar{plainSpecialCharacters1}
<<initvars>>=
(defvar |$plainSpecialCharacters1| (list
 (int-char 107)    ; upper left corner   (,)
 (int-char 107)    ; upper right corner  (,)
 (int-char 125)    ; lower left corner   (')
 (int-char 125)    ; lower right corner  (')
 (int-char 79)     ; vertical bar
 (int-char 96)     ; horizontal bar      (-)
 (int-char 111)    ; APL quad            (?)
 (int-char 173)    ; left bracket
 (int-char 189)    ; right bracket
 (int-char 192)    ; left brace
 (int-char 208)    ; right brace
 (int-char 78)     ; top    box tee      (+)
 (int-char 78)     ; bottom box tee      (+)
 (int-char 78)     ; right  box tee      (+)
 (int-char 78)     ; left   box tee      (+)
 (int-char 78)     ; center box tee      (+)
 (int-char 224)))  ; back slash

@

\defdollar{plainSpecialCharacters2}
<<initvars>>=
(defvar |$plainSpecialCharacters2| (list
 (int-char 79)     ; upper left corner   (|)
 (int-char 79)     ; upper right corner  (|)
 (int-char 79)     ; lower left corner   (|)
 (int-char 79)     ; lower right corner  (|)
 (int-char 79)     ; vertical bar
 (int-char 96)     ; horizontal bar      (-)
 (int-char 111)    ; APL quad            (?)
 (int-char 173)    ; left bracket
 (int-char 189)    ; right bracket
 (int-char 192)    ; left brace
 (int-char 208)    ; right brace
 (int-char 78)     ; top    box tee      (+)
 (int-char 78)     ; bottom box tee      (+)
 (int-char 78)     ; right  box tee      (+)
 (int-char 78)     ; left   box tee      (+)
 (int-char 78)     ; center box tee      (+)
 (int-char 224)))  ; back slash

@

\defdollar{plainSpecialCharacters3}
<<initvars>>=
(defvar |$plainSpecialCharacters3| (list
 (int-char 96)     ; upper left corner   (-)
 (int-char 96)     ; upper right corner  (-)
 (int-char 96)     ; lower left corner   (-)
 (int-char 96)     ; lower right corner  (-)
 (int-char 79)     ; vertical bar
 (int-char 96)     ; horizontal bar      (-)
 (int-char 111)    ; APL quad            (?)
 (int-char 173)    ; left bracket
 (int-char 189)    ; right bracket
 (int-char 192)    ; left brace
 (int-char 208)    ; right brace
 (int-char 78)     ; top    box tee      (+)
 (int-char 78)     ; bottom box tee      (+)
 (int-char 78)     ; right  box tee      (+)
 (int-char 78)     ; left   box tee      (+)
 (int-char 78)     ; center box tee      (+)
 (int-char 224)))  ; back slash

@

\defdollar{plainRTspecialCharacters}
<<initvars>>=
(defvar |$plainRTspecialCharacters| (list
 (QUOTE +)       ; upper left corner   (+)
 (QUOTE +)       ; upper right corner  (+)
 (QUOTE +)       ; lower left corner   (+)
 (QUOTE +)       ; lower right corner  (+)
 (QUOTE |\||)    ; vertical bar
 (QUOTE -)       ; horizontal bar      (-)
 (QUOTE ?)       ; APL quad            (?)
 (QUOTE [)       ; left bracket
 (QUOTE ])       ; right bracket
 (QUOTE {)       ; left brace
 (QUOTE })       ; right brace
 (QUOTE +)       ; top    box tee      (+)
 (QUOTE +)       ; bottom box tee      (+)
 (QUOTE +)       ; right  box tee      (+)
 (QUOTE +)       ; left   box tee      (+)
 (QUOTE +)       ; center box tee      (+)
 (QUOTE |\\|)))  ; back slash

@

\defdollar{RTspecialCharacters}
<<initvars>>=
(defvar |$RTspecialCharacters| (list
 (intern (string (code-char 218))) ;-- upper left corner   (+)
 (intern (string (code-char 191))) ;-- upper right corner  (+)
 (intern (string (code-char 192))) ;-- lower left corner   (+)
 (intern (string (code-char 217))) ;-- lower right corner  (+)
 (intern (string (code-char 179))) ;-- vertical bar
 (intern (string (code-char 196))) ;-- horizontal bar      (-)
 (list (code-char #x1d) (code-char #xe2))
                                   ;-- APL quad            (?)
 (QUOTE [)                         ;-- left bracket
 (QUOTE ])                         ;-- right bracket
 (QUOTE {)                         ;-- left brace
 (QUOTE })                         ;-- right brace
 (intern (string (code-char 194))) ;-- top    box tee      (+)
 (intern (string (code-char 193))) ;-- bottom box tee      (+)
 (intern (string (code-char 180))) ;-- right  box tee      (+)
 (intern (string (code-char 195))) ;-- left   box tee      (+)
 (intern (string (code-char 197))) ;-- center box tee      (+)
 (QUOTE |\\|)))                    ;-- back slash

@

\defdollar{specialCharacters}
<<initvars>>=
(defvar |$specialCharacters| |$RTspecialCharacters|)

@

\defdollar{specialCharacterAlist}
<<initvars>>=
(defvar |$specialCharacterAlist| 
 '((|ulc| . 0) 
   (|urc| . 1)
   (|llc| . 2)
   (|lrc| . 3)
   (|vbar| . 4)
   (|hbar| . 5)
   (|quad| . 6)
   (|lbrk| . 7)
   (|rbrk| . 8)
   (|lbrc| . 9)
   (|rbrc| . 10)
   (|ttee| . 11)
   (|btee| . 12)
   (|rtee| . 13)
   (|ltee| . 14)
   (|ctee| . 15)
   (|bslash| . 16)))

@

\defun{specialChar}{Look up a special character code for a symbol}
This function looks up a symbol in \verb|$specialCharacterAlist|, 
gets the index into the EBCDIC table, and returns the appropriate character. 
\tpdhere{Make this more international, not EBCDIC}
\calls{specialChar}{ifcdr}
\calls{specialChar}{assq}
\usesdollar{specialChar}{specialCharacters}
\usesdollar{specialChar}{specialCharacterAlist}
<<defun specialChar>>=
(defun |specialChar| (symbol)
 (let (code)
 (declare (special |$specialCharacters| |$specialCharacterAlist|))
  (if (setq code (ifcdr (assq symbol |$specialCharacterAlist|)))
   (elt |$specialCharacters| code)
   "?")))

@

\chapter{Stream and File Handling}
\defun{make-instream}{make-instream}
\calls{make-instream}{makeInputFilename}
<<defun make-instream>>=
(defun make-instream (filespec &optional (recnum 0))
 (declare (ignore recnum))
   (cond ((numberp filespec) (make-synonym-stream '*terminal-io*))
         ((null filespec) (error "not handled yet"))
         (t (open (makeInputFilename filespec)
                  :direction :input :if-does-not-exist nil))))

@

\defun{make-outstream}{make-outstream}
\calls{make-outstream}{make-filename}
<<defun make-outstream>>=
(defun make-outstream (filespec &optional (width nil) (recnum 0))
 (declare (ignore width) (ignore recnum))
   (cond ((numberp filespec) (make-synonym-stream '*terminal-io*))
         ((null filespec) (error "not handled yet"))
         (t (open (make-filename filespec) :direction :output))))

@

\defun{make-appendstream}{make-appendstream}
\calls{make-appendstream}{make-filename}
<<defun make-appendstream>>=
(defun make-appendstream (filespec &optional (width nil) (recnum 0))
 "fortran support"
 (declare (ignore width) (ignore recnum))
 (cond 
  ((numberp filespec) (make-synonym-stream '*terminal-io*))
  ((null filespec) (error "make-appendstream: not handled yet"))
  ('else (open (make-filename filespec) :direction :output
          :if-exists :append :if-does-not-exist :create))))

@

\defun{defiostream}{defiostream}
<<defun defiostream>>=
(defun defiostream (stream-alist buffer-size char-position)
 (declare (ignore buffer-size))
   (let ((mode (or (cdr (assoc 'mode stream-alist)) 'input))
         (filename (cdr (assoc 'file stream-alist)))
         (dev (cdr (assoc 'device stream-alist))))
      (if (eq dev 'console) (make-synonym-stream '*terminal-io*)
       (let ((strm (case mode
                          ((output o) (open (make-filename filename)
                                           :direction :output))
                          ((input i) (open (makeInputFilename filename)
                                           :direction :input)))))
         (if (and (numberp char-position) (> char-position 0))
           (file-position strm char-position))
	   strm))))

@

\defun{shut}{shut}
\calls{shut}{is-console}
<<defun shut>>=
(defun shut (st)
  (if (is-console st) 
   st
   (if (streamp st) (close st) -1)))

@

\defun{eofp}{eofp}
<<defun eofp>>=
(defun eofp (stream) (null (peek-char nil stream nil nil)))

@

\defun{makeStream}{makeStream}
\calls{makeStream}{make-appendstream}
\calls{makeStream}{make-outstream}
<<defun makeStream>>=
(defun |makeStream| (append filename i j)
 (if append 
  (make-appendstream filename i j)
  (make-outstream filename i j)))

@

\defun{makeInputFilename}{Construct a new input file name}
<<defun makeInputFilename>>=
(defun makeInputFilename (filearg &optional (filetype nil))
 (let*
  ((filename  (make-filename filearg filetype))
   (dirname (pathname-directory filename))
   (ft (pathname-type filename))
   (dirs (getDirectoryList ft))
   (newfn nil))   
  (if (or (null dirname) (eqcar dirname :relative))
   (dolist (dir dirs (probeName filename))
    (when (probe-file (setq newfn (concatenate 'string dir filename)))
     (return newfn)))
   (probeName filename))))

@

\defun{getDirectoryList}{getDirectoryList}
\usesdollar{getDirectoryList}{current-directory}
\usesdollar{getDirectoryList}{UserLevel}
\usesdollar{getDirectoryList}{library-directory-list}
\usesdollar{getDirectoryList}{directory-list}
<<defun getDirectoryList>>=
(defun getDirectoryList (ft &aux (cd (namestring $current-directory)))
 (declare (special $current-directory |$UserLevel| $library-directory-list
                   $directory-list))
 (if (member ft '("nrlib" "daase" "exposed") :test #'string=)
   (if (eq |$UserLevel| '|development|)
    (cons cd $library-directory-list)
    $library-directory-list)
   (adjoin cd 
    (adjoin (namestring (user-homedir-pathname)) $directory-list 
      :test #'string=) 
    :test #'string=)))


@

\defun{probeName}{probeName}
Sometimes we are given a file and sometimes we are given the name of
an Axiom KAF (Keyed-Access File). KAF files are actually directories
with a single file called ``index.kaf''. We check for the latter case
and return the directory name as the filename, per Axiom convention.
<<defun probeName>>=
(defun probeName (file)
 (when (or (probe-file file) 
           (probe-file (concatenate 'string (namestring file) "/index.kaf")))
 (namestring file)))

@

\defun{makeFullNamestring}{makeFullNamestring}
<<defun makeFullNamestring>>=
(defun makeFullNamestring (filearg &optional (filetype nil))
  (namestring (merge-pathnames (make-filename filearg filetype))))

@

\defun{replaceFile}{Replace a file by erase and rename}
\calls{makeStream}{makeFullNamestring}
<<defun replaceFile>>=
(defun replaceFile (filespec1 filespec2)
 ($erase (setq filespec1 (makeFullNamestring filespec1)))
 (rename-file (makeFullNamestring filespec2) filespec1))

@

\chapter{The Spad Server Mechanism}
\defun{openserver}{openserver}
This is a cover function for the C code used for communication interface.
<<defun openserver>>=
(defun openserver (name)
  (open_server name))

@

\chapter{Axiom Build-time Functions}
\defun{spad-save}{spad-save}
The {\bf spad-save} function is just a cover function for more
lisp system specific save functions. There is no standard name
for saving a lisp image so we make one and conditionalize it
at compile time.

This function is passed the name of an image that will be saved.
The saved image contains all of the loaded functions.

This is used in the src/interp/Makefile.pamphlet in three places:
\begin{itemize}
\item creating depsys, an image for compiling axiom.

Some of the Common Lisp code we compile uses macros which
are assumed to be available at compile time. The {\bf DEPSYS}
image is created to contain the compile time environment
and saved. We pipe compile commands into this environment
to compile from Common Lisp to machine dependent code.
\begin{verbatim}
DEPSYS=${OBJ}/${SYS}/bin/depsys
\end{verbatim}

\item creating savesys, an image for running axiom.

Once we've compile all of the Common Lisp files we fire up
a clean lisp image called {\bf LOADSYS}, load all of the
final executable code and save it out as {\bf SAVESYS}.
The {\bf SAVESYS} image is copied to the \verb|${MNT}/${SYS}/bin|
subdirectory and becomes the axiom executable image.
\begin{verbatim}
LOADSYS= ${OBJ}/${SYS}/bin/lisp
SAVESYS= ${OBJ}/${SYS}/bin/interpsys
AXIOMSYS= ${MNT}/${SYS}/bin/AXIOMsys
\end{verbatim}


\item creating debugsys, an image with all interpreted functions loaded.

Occasionally we need to really get into the system internals.
The best way to do this is to run almost all of the lisp code
interpreted rather than compiled (note that cfuns.lisp and sockio.lisp
still need to be loaded in compiled form as they depend on the 
loader to link with lisp internals). This image is nothing more
than a load of the file src/interp/debugsys.lisp.pamphlet. If
you need to make test modifications you can add code to that
file and it will show up here.
\begin{verbatim}
DEBUGSYS=${OBJ}/${SYS}/bin/debugsys
\end{verbatim}
\end{itemize}
\calls{spad-save}{save-system}
\usesdollar{spad-save}{SpadServer}
\usesdollar{spad-save}{openServerIfTrue}
<<defun spad-save>>=
(defun user::spad-save (save-file)
  (declare (special |$SpadServer| $openServerIfTrue))
  (setq |$SpadServer| nil)
  (setq $openServerIfTrue t)
#+:AKCL
  (system::save-system save-file)
#+:allegro
  (if (fboundp 'boot::restart)
   (excl::dumplisp :name save-file :restart-function #'boot::restart)
   (excl::dumplisp :name save-file))
#+Lucid
  (if (fboundp 'boot::restart)
   (sys::disksave save-file :restart-function #'boot::restart)
   (sys::disksave save-file))
#+:CCL
  (preserve)
)

@

\chapter{Exposure Groups}
Exposure groups are a way of controlling the namespace available
to the user. Certain algebra files are only useful for internal
purposes but they contain functions have common names (like 
``map''. In order to separate the user visible  functions
from the internal functions the algebra files are collected into
``exposure groups''. These large groups are grouped into sets in
the variable \verb|$globalExposureGroupAlist|.

Exposure group information is kept in the local frame. For more
information ``The Frame Mechanism'' \ref{TheFrameMechanism} on
page~\pageref{TheFrameMechanism}.

\chapter{Databases}
\section{Database structure}
In order to understand this program you need to understand some details
of the structure of the databases it reads. Axiom has 5 databases,
the interp.daase, operation.daase, category.daase, compress.daase, and
browse.daase. The compress.daase is special and does not follow the
normal database format.

\subsection{kaf File Format}
This documentation refers to kaf files which are random access files.
nrlib files are kaf files (look for nrlib/index.kaf)
The format of a random access file is
\begin{verbatim}
byte-offset-of-key-table
first-entry
second-entry
...
last-entry
((key1 . first-entry-byte-address)
 (key2 . second-entry-byte-address)
 ...
 (keyN . last-entry-byte-address))
\end{verbatim}
The key table is a standard lisp alist.

To open a database you fetch the first number, seek to that location,
and (read) which returns the key-data alist. To look up data you
index into the key-data alist, find the ith-entry-byte-address,
seek to that address, and (read).

For instance, see src/share/algebra/users.daase/index.kaf

One existing optimization is that if the data is a simple thing like a
symbol then the nth-entry-byte-address is replaced by immediate data.

Another existing one is a compression algorithm applied to the
data so that the very long names don't take up so much space.
We could probably remove the compression algorithm as 64k is no
longer considered 'huge'. The database-abbreviation routine
handles this on read and write-compress handles this on write.
The squeeze routine is used to compress the keys, the unsqueeze
routine uncompresses them. Making these two routines disappear
should remove all of the compression.

Indeed, a faster optimization is to simply read the whole database
into the image before it is saved. The system would be easier to
understand and the interpreter would be faster.

The fastest optimization is to fix the time stamp mechanism
which is currently broken. Making this work requires a small
bit of coordination at 'make' time which I forgot to implement.

\subsection{Database Files}

Database files are very similar to kaf files except that there
is an optimization (currently broken) which makes the first
item a pair of two numbers. The first number in the pair is
the offset of the key-value table, the second is a time stamp.
If the time stamp in the database matches the time stamp in
the image the database is not needed (since the internal hash
tables already contain all of the information). When the database
is built the time stamp is saved in both the gcl image and the
database.

Regarding the 'ancestors field for a category: At database build
time there exists a *ancestors-hash* hash table that gets filled
with CATEGORY (not domain) ancestor information. This later provides
the information that goes into interp.daase This *ancestors-hash*
does not exist at normal runtime (it can be made by a call to
genCategoryTable). Note that the ancestor information in
*ancestors-hash* (and hence interp.daase) involves \verb|#1|, \verb|#2|, etc
instead of R, Coef, etc. The latter thingies appear in all
.nrlib/index.kaf files. So we need to be careful when we )lib
categories and update the ancestor info.

This file contains the code to build, open and access the .daase
files. This file contains the code to )library nrlibs and asy files

There is a major issue about the data that resides in these
databases.  the fundamental problem is that the system requires more
information to build the databases than it needs to run the
interpreter.  in particular, modemap.daase is constructed using
properties like "modemaps" but the interpreter will never ask for
this information.

So, the design is as follows:
\begin{itemize}
\item the modemap.daase needs to be built. this is done by doing
a )library on ALL of the nrlib files that are going into the system.
this will bring in "modemap" information and add it to the
*modemaps-hash* hashtable.
\item database build proceeds, accessing the "modemap" property
from the hashtables. once this completes this information is never
used again.
\item the interp.daase database is built. this contains only the
information necessary to run the interpreter. note that during the
running of the interpreter users can extend the system by do a
)library on a new nrlib file. this will cause fields such as "modemap"
to be read and hashed.
\end{itemize}

In the old system each constructor (e.g. LIST) had one library directory
(e.g. LIST.nrlib). this directory contained a random access file called
the index.kaf file. the interpreter needed this kaf file at runtime for
two entries, the operationAlist and the ConstructorModemap.
During the redesign for the new compiler we decided to merge all of
these .nrlib/index.kaf files into one database, INTERP.daase.
requests to get information from this database are intended to be
cached so that multiple references do not cause additional disk i/o.

This database is left open at all times as it is used frequently by
the interpreter. one minor complication is that newly compiled files
need to override information that exists in this database.

The design calls for constructing a random read (kaf format) file
that is accessed by functions that cache their results. when the
database is opened the list of constructor-index pairs is hashed
by constructor name. a request for information about a constructor
causes the information to replace the index in the hash table. since
the index is a number and the data is a non-numeric sexpr there is
no source of confusion about when the data needs to be read.

The format of this new database is as follows:
\begin{verbatim}
 first entry:
   an integer giving the byte offset to the constructor alist
   at the bottom of the file
 second and subsequent entries (one per constructor)
   (operationAlist)
   (constructorModemap)
   ....
 last entry: (pointed at by the first entry)
   an alist of (constructor . index) e.g.
      ( (PI offset-of-operationAlist offset-of-constructorModemap)
      (NNI offset-of-operationAlist offset-of-constructorModemap)
       ....)
  This list is read at open time and hashed by the car of each item.
\end{verbatim}

The system has been changed to use the property list of the
symbols rather than hash tables. since we already hashed once
to get the symbol we need only an offset to get the property
list. this also has the advantage that eq hash tables no longer
need to be moved during garbage collection.

There are 3 potential speedups that could be done. 
\begin{itemize}
\item the best would be to use the value cell of the symbol rather than the
property list but i'm unable to determine all uses of the
value cell at the present time.
\item a second speedup is to guarantee that the property list is
a single item, namely the database structure. this removes
an assoc but leaves one open to breaking the system if someone
adds something to the property list. this was not done because
of the danger mentioned.
\item a third speedup is to make the getdatabase call go away, either
by making it a macro or eliding it entirely. this was not done
because we want to keep the flexibility of changing the database forms.
\end{itemize}

The new design does not use hash tables. the database structure
contains an entry for each item that used to be in a hash table.
initially the structure contains file-position pointers and
these are replaced by real data when they are first looked up.
the database structure is kept on the property list of the
constructor, thus, (get '|DenavitHartenbergMatrix| 'database)
will return the database structure object.

Each operation has a property on its symbol name called 'operation
which is a list of all of the signatures of operations with that name.

\defstruct{database}
<<initvars>>=
(defstruct database
 abbreviation               ; interp.
 ancestors                  ; interp.
 constructor                ; interp.
 constructorcategory        ; interp.
 constructorkind            ; interp.
 constructormodemap         ; interp.
 cosig                      ; interp.
 defaultdomain              ; interp.
 modemaps                   ; interp.
 niladic                    ; interp.
 object                     ; interp.
 operationalist             ; interp.
 documentation              ; browse.
 constructorform            ; browse.
 attributes                 ; browse.
 predicates                 ; browse.
 sourcefile                 ; browse.
 parents                    ; browse.
 users                      ; browse.
 dependents                 ; browse.
 spare                      ; superstition
 ) ; database structure

@

\defvar{*defaultdomain-list*}
There are only a small number of domains that have default domains.
rather than keep this slot in every domain we maintain a list here.
<<initvars>>=
(defvar *defaultdomain-list* '(
  (|MultisetAggregate| |Multiset|)
  (|FunctionSpace| |Expression|)
  (|AlgebraicallyClosedFunctionSpace| |Expression|)
  (|ThreeSpaceCategory| |ThreeSpace|)
  (|DequeueAggregate| |Dequeue|)
  (|ComplexCategory| |Complex|)
  (|LazyStreamAggregate| |Stream|)
  (|AssociationListAggregate| |AssociationList|)
  (|QuaternionCategory| |Quaternion|)
  (|PriorityQueueAggregate| |Heap|)
  (|PointCategory| |Point|)
  (|PlottableSpaceCurveCategory| |Plot3D|)
  (|PermutationCategory| |Permutation|)
  (|StringCategory| |String|)
  (|FileNameCategory| |FileName|)
  (|OctonionCategory| |Octonion|)))

@

\defvar{*operation-hash*}
<<initvars>>=
(defvar *operation-hash* nil "given an operation name, what are its modemaps?")

@

\defvar{*hasCategory-hash*}
This hash table is used to answer the question``does domain x
have category y?''. this is answered by constructing a pair of
(x . y) and doing an equal hash into this table.
<<initvars>>=
(defvar *hasCategory-hash* nil "answers x has y category questions")

@

\defvar{*miss*}
This variable is used for debugging. If a hash table lookup fails
and this variable is non-nil then a message is printed.
<<initvars>>=
(defvar *miss* nil "print out cache misses on getdatabase calls")

@

Note that constructorcategory information need only be kept for
items of type category. this will be fixed in the next iteration
when the need for the various caches are reviewed

Note that the *modemaps-hash* information does not need to be kept
for system files. these are precomputed and kept in modemap.daase
however, for user-defined files these are needed.
Currently these are added to the database for 2 reasons;
there is a still-unresolved issue of user database extensions and
this information is used during database build time

\subsection{Database streams}
This are the streams for the databases. They are always open.
There is an optimization for speeding up system startup. If the
database is opened and the ..-stream-stamp* variable matches the
position information in the database then the database is NOT
read in and is assumed to match the in-core version

\defvar{*compressvector*}
<<initvars>>=
(defvar *compressvector* nil "a vector of things to compress in the databases")

@

\defvar{*compressVectorLength*}
<<initvars>>=
(defvar *compressVectorLength* 0 "length of the compress vector")

@

\defvar{*compress-stream*}
<<initvars>>=
(defvar *compress-stream* nil "an stream containing the compress vector")

@

\defvar{*compress-stream-stamp*}
<<initvars>>=
(defvar *compress-stream-stamp* 0 "*compress-stream* (position . time)")

@

\defvar{*interp-stream*}
<<initvars>>=
(defvar *interp-stream* nil "an open stream to the interpreter database")

@

\defvar{*interp-stream-stamp*}
<<initvars>>=
(defvar *interp-stream-stamp* 0 "*interp-stream* (position . time)")

@

\defvar{*operation-stream*}
This is indexed by operation, not constructor
<<initvars>>=
(defvar *operation-stream* nil "the stream to operation.daase")

@

\defvar{*operation-stream-stamp*}
<<initvars>>=
(defvar *operation-stream-stamp* 0 "*operation-stream* (position . time)")

@

\defvar{*browse-stream*}
<<initvars>>=
(defvar *browse-stream* nil "an open stream to the browser database")

@

\defvar{*browse-stream-stamp*}
<<initvars>>=
(defvar *browse-stream-stamp* 0 "*browse-stream* (position . time)")

@

\defvar{*category-stream*}
This is indexed by (domain . category)
<<initvars>>=
(defvar *category-stream* nil "an open stream to the category table")

@

\defvar{*category-stream-stamp*}
<<initvars>>=
(defvar *category-stream-stamp* 0 "*category-stream* (position . time)")

@

\defvar{*allconstructors*}
<<initvars>>=
(defvar *allconstructors* nil "a list of all the constructors in the system")

@

\defvar{*allOperations*}
<<initvars>>=
(defvar *allOperations* nil "a list of all the operations in the system")

@

\defun{resethashtables}{Reset all hash tables before saving system}
\calls{resethashtables}{compressopen}
\calls{resethashtables}{interpopen}
\calls{resethashtables}{operationopen}
\calls{resethashtables}{browseopen}
\calls{resethashtables}{categoryopen}
\calls{resethashtables}{initial-getdatabase}
\uses{resethashtables}{*sourcefiles*}
\uses{resethashtables}{*interp-stream*}
\uses{resethashtables}{*operation-stream*}
\uses{resethashtables}{*category-stream*}
\uses{resethashtables}{*browse-stream*}
\uses{resethashtables}{*category-stream-stamp*}
\uses{resethashtables}{*operation-stream-stamp*}
\uses{resethashtables}{*interp-stream-stamp*}
\uses{resethashtables}{*compress-stream-stamp*}
\uses{resethashtables}{*compressvector*}
\uses{resethashtables}{*allconstructors*}
\uses{resethashtables}{*operation-hash*}
\uses{resethashtables}{*hascategory-hash*}
<<defun resethashtables>>=
(defun resethashtables ()
 "set all -hash* to clean values. used to clean up core before saving system"
 (declare (special *sourcefiles* *interp-stream* *operation-stream*
                    *category-stream* *browse-stream* *category-stream-stamp*
                    *operation-stream-stamp* *interp-stream-stamp*
                    *compress-stream-stamp* *compressvector*
                    *allconstructors* *operation-hash* *hascategory-hash*))
 (setq *hascategory-hash* (make-hash-table :test #'equal))
 (setq *operation-hash* (make-hash-table))
 (setq *allconstructors* nil)
 (setq *compressvector* nil)
 (setq *sourcefiles* nil)
 (setq *compress-stream-stamp* '(0 . 0))
 (compressopen)
 (setq *interp-stream-stamp* '(0 . 0))
 (interpopen)
 (setq *operation-stream-stamp* '(0 . 0))
 (operationopen)
 (setq *browse-stream-stamp* '(0 . 0))
 (browseopen)
 (setq *category-stream-stamp* '(0 . 0))
 (categoryopen) ;note: this depends on constructorform in browse.daase
 (initial-getdatabase)
 (close *interp-stream*)
 (close *operation-stream*)
 (close *category-stream*)
 (close *browse-stream*)
 (gbc t))

@

\defun{initial-getdatabase}{Preload algebra into saved system}
\calls{initial-getdatabase}{getdatabase}
\calls{initial-getdatabase}{getEnv}
<<defun initial-getdatabase>>=
(defun initial-getdatabase ()
 "fetch data we want in the saved system"
 (let (hascategory constructormodemapAndoperationalist operation constr)
 (format t "Initial getdatabase~%")
 (setq hascategory '(
  (|Equation| . |Ring|)
  (|Expression| . |CoercibleTo|) (|Expression| . |CommutativeRing|)
  (|Expression| . |IntegralDomain|) (|Expression| . |Ring|)
  (|Float| . |RetractableTo|)
  (|Fraction| . |Algebra|) (|Fraction| . |CoercibleTo|)
  (|Fraction| . |OrderedSet|) (|Fraction| . |RetractableTo|)
  (|Integer| . |Algebra|) (|Integer| . |CoercibleTo|)
  (|Integer| . |ConvertibleTo|) (|Integer| . |LinearlyExplicitRingOver|)
  (|Integer| . |RetractableTo|)
  (|List| . |CoercibleTo|) (|List| . |FiniteLinearAggregate|)
  (|List| . |OrderedSet|)
  (|Polynomial| . |CoercibleTo|) (|Polynomial| . |CommutativeRing|)
  (|Polynomial| . |ConvertibleTo|) (|Polynomial| . |OrderedSet|)
  (|Polynomial| . |RetractableTo|)
  (|Symbol| . |CoercibleTo|) (|Symbol| . |ConvertibleTo|)
  (|Variable| . |CoercibleTo|)))
 (dolist (pair hascategory) (getdatabase pair 'hascategory))
 (setq constructormodemapAndoperationalist '(
  |BasicOperator|  |Boolean|
  |CardinalNumber| |Color|  |Complex|
  |Database|
  |Equation| |EquationFunctions2| |Expression|
  |Float| |Fraction| |FractionFunctions2|
  |Integer| |IntegralDomain|
  |Kernel|
  |List|
  |Matrix| |MappingPackage1|
  |Operator| |OutputForm|
  |NonNegativeInteger|
  |ParametricPlaneCurve| |ParametricSpaceCurve| |Point| |Polynomial|
  |PolynomialFunctions2| |PositiveInteger|
  |Ring|
  |SetCategory| |SegmentBinding| |SegmentBindingFunctions2| |DoubleFloat|
  |SparseMultivariatePolynomial| |SparseUnivariatePolynomial| |Segment|
  |String| |Symbol|
  |UniversalSegment|
  |Variable|  |Vector|))
 (dolist (con constructormodemapAndoperationalist)
  (getdatabase con 'constructormodemap)
  (getdatabase con 'operationalist))
 (setq operation '(
  |+| |-| |*| |/| |**| |coerce| |convert| |elt| |equation|
  |float| |sin| |cos| |map| |SEGMENT|))
 (dolist (op operation) (getdatabase op 'operation))
 (setq constr '( ;these are sorted least-to-most freq. delete early ones first
  |Factored| |SparseUnivariatePolynomialFunctions2| |TableAggregate&|
  |RetractableTo&| |RecursiveAggregate&| |UserDefinedPartialOrdering|
  |None| |UnivariatePolynomialCategoryFunctions2| |IntegerPrimesPackage|
  |SetCategory&| |IndexedExponents| |QuotientFieldCategory&| |Polynomial|
  |EltableAggregate&| |PartialDifferentialRing&| |Set|
  |UnivariatePolynomialCategory&| |FlexibleArray|
  |SparseMultivariatePolynomial| |PolynomialCategory&|
  |DifferentialExtension&| |IndexedFlexibleArray| |AbelianMonoidRing&|
  |FiniteAbelianMonoidRing&| |DivisionRing&| |FullyLinearlyExplicitRingOver&|
  |IndexedVector| |IndexedOneDimensionalArray| |LocalAlgebra| |Localize|
  |Boolean| |Field&| |Vector| |IndexedDirectProductObject| |Aggregate&|
  |PolynomialRing| |FreeModule| |IndexedDirectProductAbelianGroup|
  |IndexedDirectProductAbelianMonoid| |SingletonAsOrderedSet|
  |SparseUnivariatePolynomial| |Fraction| |Collection&| |HomogeneousAggregate&|
  |RepeatedSquaring| |IntegerNumberSystem&| |AbelianSemiGroup&|
  |AssociationList| |OrderedRing&| |SemiGroup&| |Symbol|
  |UniqueFactorizationDomain&| |EuclideanDomain&| |IndexedAggregate&|
  |GcdDomain&| |IntegralDomain&| |DifferentialRing&| |Monoid&| |Reference|
  |UnaryRecursiveAggregate&| |OrderedSet&| |AbelianGroup&| |Algebra&|
  |Module&| |Ring&| |StringAggregate&| |AbelianMonoid&|
  |ExtensibleLinearAggregate&| |PositiveInteger| |StreamAggregate&|
  |IndexedString| |IndexedList| |ListAggregate&| |LinearAggregate&|
  |Character| |String| |NonNegativeInteger| |SingleInteger|
  |OneDimensionalArrayAggregate&| |FiniteLinearAggregate&| |PrimitiveArray|
  |Integer| |List| |OutputForm|))
 (dolist (con constr)
  (let ((c (concatenate 'string
             (|getEnv| "AXIOM") "/algebra/"
             (string (getdatabase con 'abbreviation)) ".o")))
    (format t "   preloading ~a.." c)
    (if (probe-file c)
     (progn
      (put con 'loaded c)
      (load c)
      (format t "loaded.~%"))
     (format t "skipped.~%"))))
 (format t "~%")))

@

\defun{interpOpen}{Open the interp database}
Format of an entry in interp.daase:
\begin{verbatim}
  (constructor-name
    operationalist
    constructormodemap
    modemaps		 -- this should not be needed. eliminate it.
    object		 -- the name of the object file to load for this con.
    constructorcategory -- note that this info is the cadar of the
	  constructormodemap for domains and packages so it is stored
	  as NIL for them. it is valid for categories.
    niladic		 -- t or nil directly
    unused
    cosig		 -- kept directly
    constructorkind	 -- kept directly
    defaultdomain	 -- a short list, for %i
    ancestors		 -- used to compute new category updates
  )
\end{verbatim}
\calls{interpOpen}{unsqueeze}
\calls{interpOpen}{make-database}
\calls{interpOpen}{DaaseName}
\usesdollar{interpOpen}{spadroot}
\uses{interpOpen}{*allconstructors*}
\uses{interpOpen}{*interp-stream*}
\uses{interpOpen}{*interp-stream-stamp*}
<<defun interpOpen>>=
(defun interpOpen ()
 "open the interpreter database and hash the keys"
 (declare (special $spadroot *allconstructors* *interp-stream*
                   *interp-stream-stamp*))
 (let (constructors pos stamp dbstruct)
  (setq *interp-stream* (open (DaaseName "interp.daase" nil)))
  (setq stamp (read *interp-stream*))
  (unless (equal stamp *interp-stream-stamp*)
   (format t "   Re-reading interp.daase")
   (setq *interp-stream-stamp* stamp)
   (setq pos (car stamp))
   (file-position *interp-stream* pos)
   (setq constructors (read *interp-stream*))
   (dolist (item constructors)
    (setq item (unsqueeze item))
    (setq *allconstructors* (adjoin (first item) *allconstructors*))
    (setq dbstruct (make-database))
    (setf (get (car item) 'database) dbstruct)
    (setf (database-operationalist dbstruct) (second item))
    (setf (database-constructormodemap dbstruct) (third item))
    (setf (database-modemaps dbstruct) (fourth item))
    (setf (database-object dbstruct) (fifth item))
    (setf (database-constructorcategory dbstruct) (sixth item))
    (setf (database-niladic dbstruct) (seventh item))
    (setf (database-abbreviation dbstruct) (eighth item))
    (setf (get (eighth item) 'abbreviationfor) (first item)) ;invert
    (setf (database-cosig dbstruct) (ninth item))
    (setf (database-constructorkind dbstruct) (tenth item))
    (setf (database-ancestors dbstruct) (nth 11 item))))
  (format t "~&")))

@

This is an initialization function for the constructor database
it sets up 2 hash tables, opens the database and hashes the index values.

There is a slight asymmetry in this code. The sourcefile information for
system files is only the filename and extension. For user files it
contains the full pathname. when the database is first opened the
sourcefile slot contains system names. The lookup function
has to prefix the ``\$spadroot'' information if the directory-namestring is
null (we don't know the real root at database build time).

An object-hash table is set up to look up nrlib and ao information.
this slot is empty until a user does a )library call. We remember
the location of the nrlib or ao file for the users local library
at that time. A {\tt NIL} result from this probe means that the
library is in the system-specified place. When we get into multiple
library locations this will also contain system files.

\defun{browseOpen}{Open the browse database}
Format of an entry in browse.daase:
\begin{verbatim}
 ( constructorname
     sourcefile
     constructorform
     documentation
     attributes
     predicates
 )
\end{verbatim}
\calls{browseOpen}{unsqueeze}
\usesdollar{browseOpen}{spadroot}
\uses{browseOpen}{*allconstructors*}
\uses{browseOpen}{*browse-stream*}
\uses{browseOpen}{*browse-stream-stamp*}
<<defun browseOpen>>=
(defun browseOpen ()
 "open the constructor database and hash the keys"
 (declare (special $spadroot *allconstructors* *browse-stream*
                   *browse-stream-stamp*))
 (let (constructors pos stamp dbstruct)
  (setq *browse-stream* (open (DaaseName "browse.daase" nil)))
  (setq stamp (read *browse-stream*))
  (unless (equal stamp *browse-stream-stamp*)
   (format t "   Re-reading browse.daase")
   (setq *browse-stream-stamp* stamp)
   (setq pos (car stamp))
   (file-position *browse-stream* pos)
   (setq constructors (read *browse-stream*))
   (dolist (item constructors)
    (setq item (unsqueeze item))
    (unless (setq dbstruct (get (car item) 'database))
     (format t "browseOpen:~%")
     (format t "the browse database contains a contructor ~a~%" item)
     (format t "that is not in the interp.daase file. we cannot~%")
     (format t "get the database structure for this constructor and~%")
     (warn "will create a new one~%")
     (setf (get (car item) 'database) (setq dbstruct (make-database)))
     (setq *allconstructors* (adjoin item *allconstructors*)))
    (setf (database-sourcefile dbstruct) (second item))
    (setf (database-constructorform dbstruct) (third item))
    (setf (database-documentation dbstruct) (fourth item))
    (setf (database-attributes dbstruct) (fifth item))
    (setf (database-predicates dbstruct) (sixth item))
    (setf (database-parents dbstruct) (seventh item))))
  (format t "~&")))

@

\defun{categoryOpen}{Open the category database}
\calls{categoryOpen}{unsqueeze}
\usesdollar{categoryOpen}{spadroot}
\uses{categoryOpen}{*hasCategory-hash*}
\uses{categoryOpen}{*category-stream*}
\uses{categoryOpen}{*category-stream-stamp*}
<<defun categoryOpen>>=
(defun categoryOpen ()
 "open category.daase and hash the keys"
 (declare (special $spadroot *hasCategory-hash* *category-stream*
                   *category-stream-stamp*))
 (let (pos keys stamp)
  (setq *category-stream* (open (DaaseName "category.daase" nil)))
  (setq stamp (read *category-stream*))
  (unless (equal stamp *category-stream-stamp*)
   (format t "   Re-reading category.daase")
   (setq *category-stream-stamp* stamp)
   (setq pos (car stamp))
   (file-position *category-stream* pos)
   (setq keys (read *category-stream*))
   (setq *hasCategory-hash* (make-hash-table :test #'equal))
   (dolist (item keys)
    (setq item (unsqueeze item))
    (setf (gethash (first item) *hasCategory-hash*) (second item))))
  (format t "~&")))

@

\defun{operationOpen}{Open the operations database}
\calls{operationOpen}{unsqueeze}
\usesdollar{operationOpen}{spadroot}
\uses{operationOpen}{*operation-hash*}
\uses{operationOpen}{*operation-stream*}
\uses{operationOpen}{*operation-stream-stamp*}
<<defun operationOpen>>=
(defun operationOpen ()
 "read operation database and hash the keys"
 (declare (special $spadroot *operation-hash* *operation-stream*
                   *operation-stream-stamp*))
 (let (operations pos stamp)
  (setq *operation-stream* (open (DaaseName "operation.daase" nil)))
  (setq stamp (read *operation-stream*))
  (unless (equal stamp *operation-stream-stamp*)
   (format t "   Re-reading operation.daase")
   (setq *operation-stream-stamp* stamp)
   (setq pos (car stamp))
   (file-position *operation-stream* pos)
   (setq operations (read *operation-stream*))
   (dolist (item operations)
    (setq item (unsqueeze item))
    (setf (gethash (car item) *operation-hash*) (cdr item))))
  (format t "~&")))

@

\defun{addoperations}{Add operations from newly compiled code}
\calls{addoperations}{getdatabase}
\uses{addoperations}{*operation-hash*}
<<defun addoperations>>=
(defun addoperations (constructor oldmaps)
 "add ops from a )library domain to *operation-hash*"
 (declare (special *operation-hash*))
 (dolist (map oldmaps) ; out with the old
  (let (oldop op)
   (setq op (car map))
   (setq oldop (getdatabase op 'operation))
   (setq oldop (lisp::delete (cdr map) oldop :test #'equal))
   (setf (gethash op *operation-hash*) oldop)))
 (dolist (map (getdatabase constructor 'modemaps)) ; in with the new
  (let (op newmap)
   (setq op (car map))
   (setq newmap (getdatabase op 'operation))
   (setf (gethash op *operation-hash*) (cons (cdr map) newmap)))))

@

\defun{showdatabase}{Show all database attributes of a constructor}
\calls{showdatabase}{getdatabase}
<<defun showdatabase>>=
(defun showdatabase (constructor)
 (format t "~&~a: ~a~%" 'constructorkind
  (getdatabase constructor 'constructorkind))
 (format t "~&~a: ~a~%" 'cosig
  (getdatabase constructor 'cosig))
 (format t "~&~a: ~a~%" 'operation
  (getdatabase constructor 'operation))
 (format t "~&~a: ~%" 'constructormodemap)
  (pprint (getdatabase constructor 'constructormodemap))
 (format t "~&~a: ~%" 'constructorcategory)
  (pprint (getdatabase constructor 'constructorcategory))
 (format t "~&~a: ~%" 'operationalist)
  (pprint (getdatabase constructor 'operationalist))
 (format t "~&~a: ~%" 'modemaps)
  (pprint (getdatabase constructor 'modemaps))
 (format t "~&~a: ~a~%" 'hascategory
  (getdatabase constructor 'hascategory))
 (format t "~&~a: ~a~%" 'object
  (getdatabase constructor 'object))
 (format t "~&~a: ~a~%" 'niladic
  (getdatabase constructor 'niladic))
 (format t "~&~a: ~a~%" 'abbreviation
  (getdatabase constructor 'abbreviation))
 (format t "~&~a: ~a~%" 'constructor?
  (getdatabase constructor 'constructor?))
 (format t "~&~a: ~a~%" 'constructor
  (getdatabase constructor 'constructor))
 (format t "~&~a: ~a~%" 'defaultdomain
  (getdatabase constructor 'defaultdomain))
 (format t "~&~a: ~a~%" 'ancestors
  (getdatabase constructor 'ancestors))
 (format t "~&~a: ~a~%" 'sourcefile
  (getdatabase constructor 'sourcefile))
 (format t "~&~a: ~a~%" 'constructorform
  (getdatabase constructor 'constructorform))
 (format t "~&~a: ~a~%" 'constructorargs
  (getdatabase constructor 'constructorargs))
 (format t "~&~a: ~a~%" 'attributes
  (getdatabase constructor 'attributes))
 (format t "~&~a: ~%" 'predicates)
  (pprint (getdatabase constructor 'predicates))
 (format t "~&~a: ~a~%" 'documentation
  (getdatabase constructor 'documentation))
 (format t "~&~a: ~a~%" 'parents
  (getdatabase constructor 'parents)))

@

\defun{setdatabase}{Set a value for a constructor key in the database}
\calls{setdatabase}{make-database}
<<defun setdatabase>>=
(defun setdatabase (constructor key value)
 (let (struct)
  (when (symbolp constructor)
   (unless (setq struct (get constructor 'database))
    (setq struct (make-database))
    (setf (get constructor 'database) struct))
   (case key
    (abbreviation
     (setf (database-abbreviation struct) value)
     (when (symbolp value)
      (setf (get value 'abbreviationfor) constructor)))
    (constructorkind
     (setf (database-constructorkind struct) value))))))

@

\defun{deldatabase}{Delete a value for a constructor key in the database}
<<defun deldatabase>>=
(defun deldatabase (constructor key)
  (when (symbolp constructor)
   (case key
    (abbreviation
     (setf (get constructor 'abbreviationfor) nil)))))

@

\defun{getdatabase}{Get constructor information for a database key}
\calls{getdatabase}{warn}
\calls{getdatabase}{unsqueeze}
\usesdollar{getdatabase}{spadroot}
\uses{getdatabase}{*miss*}
\uses{getdatabase}{*hascategory-hash*}
\uses{getdatabase}{*operation-hash*}
\uses{getdatabase}{*browse-stream*}
\uses{getdatabase}{*defaultdomain-list*}
\uses{getdatabase}{*interp-stream*}
\uses{getdatabase}{*category-stream*}
\uses{getdatabase}{*hasCategory-hash*}
\uses{getdatabase}{*operation-stream*}
<<defun getdatabase>>=
(defun getdatabase (constructor key)
 (declare (special $spadroot) (special *miss*))
 (when (eq *miss* t) (format t "getdatabase call: ~20a ~a~%" constructor key))
 (let (data table stream ignore struct)
  (declare (ignore ignore) 
           (special *hascategory-hash* *operation-hash* 
                    *browse-stream* *defaultdomain-list* *interp-stream*
                    *category-stream* *hasCategory-hash* *operation-stream*))
  (when (or (symbolp constructor)
          (and (eq key 'hascategory) (pairp constructor)))
  (case key
; note that abbreviation, constructorkind and cosig are heavy hitters
; thus they occur first in the list of things to check
   (abbreviation
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
      (setq data (database-abbreviation struct))))
   (constructorkind
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-constructorkind struct))))
   (cosig
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-cosig struct))))
   (operation
    (setq stream *operation-stream*)
    (setq data (gethash constructor *operation-hash*)))
   (constructormodemap
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-constructormodemap struct))))
   (constructorcategory
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-constructorcategory struct))
     (when (null data) ;domain or package then subfield of constructormodemap
      (setq data (cadar (getdatabase constructor 'constructormodemap))))))
   (operationalist
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-operationalist struct))))
   (modemaps
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-modemaps struct))))
   (hascategory
    (setq table  *hasCategory-hash*)
    (setq stream *category-stream*)
    (setq data (gethash constructor table)))
   (object
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-object struct))))
   (asharp?
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-object struct))))
   (niladic
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-niladic struct))))
   (constructor?
    (when (setq struct (get constructor 'database))
      (setq data (when (database-operationalist struct) t))))
   (superdomain ; only 2 superdomains in the world
    (case constructor
     (|NonNegativeInteger|
      (setq data '((|Integer|) (IF (< |#1| 0) |false| |true|))))
     (|PositiveInteger|
      (setq data '((|NonNegativeInteger|) (< 0 |#1|))))))
   (constructor
    (when (setq data (get constructor 'abbreviationfor))))
   (defaultdomain
    (setq data (cadr (assoc constructor *defaultdomain-list*))))
   (ancestors
    (setq stream *interp-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-ancestors struct))))
   (sourcefile
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-sourcefile struct))))
   (constructorform
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-constructorform struct))))
   (constructorargs
    (setq data (cdr (getdatabase constructor 'constructorform))))
   (attributes
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-attributes struct))))
   (predicates
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-predicates struct))))
   (documentation
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-documentation struct))))
   (parents
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-parents struct))))
   (users
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-users struct))))
   (dependents
    (setq stream *browse-stream*)
    (when (setq struct (get constructor 'database))
     (setq data (database-dependents struct))))
   (otherwise  (warn "~%(GETDATABASE ~a ~a) failed~%" constructor key)))
  (when (numberp data)		       ;fetch the real data
   (when *miss* (format t "getdatabase miss: ~20a ~a~%" constructor key))
   (file-position stream data)
   (setq data (unsqueeze (read stream)))
   (case key ; cache the result of the database read
    (operation           (setf (gethash constructor *operation-hash*) data))
    (hascategory         (setf (gethash constructor *hascategory-hash*) data))
    (constructorkind     (setf (database-constructorkind struct) data))
    (cosig               (setf (database-cosig struct) data))
    (constructormodemap  (setf (database-constructormodemap struct) data))
    (constructorcategory (setf (database-constructorcategory struct) data))
    (operationalist      (setf (database-operationalist struct) data))
    (modemaps            (setf (database-modemaps struct) data))
    (object              (setf (database-object struct) data))
    (niladic             (setf (database-niladic struct) data))
    (abbreviation        (setf (database-abbreviation struct) data))
    (constructor         (setf (database-constructor struct) data))
    (ancestors           (setf (database-ancestors struct) data))
    (constructorform     (setf (database-constructorform struct) data))
    (attributes          (setf (database-attributes struct) data))
    (predicates          (setf (database-predicates struct) data))
    (documentation       (setf (database-documentation struct) data))
    (parents             (setf (database-parents struct) data))
    (users               (setf (database-users struct) data))
    (dependents          (setf (database-dependents struct) data))
    (sourcefile          (setf (database-sourcefile struct) data))))
   (case key ; fixup the special cases
    (sourcefile
     (when (and data (string= (directory-namestring data) "")
	     (string= (pathname-type data) "spad"))
      (setq data
       (concatenate 'string $spadroot "/../../src/algebra/" data))))
    (asharp?                               ; is this asharp code?
     (if (consp data)
      (setq data (cdr data))
      (setq data nil)))
    (object				   ; fix up system object pathname
     (if (consp data)
       (setq data
	     (if (string= (directory-namestring (car data)) "")
		 (concatenate 'string $spadroot "/algebra/" (car data) ".o")
	       (car data)))
      (when (and data (string= (directory-namestring data) ""))
       (setq data (concatenate 'string $spadroot "/algebra/" data ".o")))))))
  data))

@

\defun{library}{The {\tt )library} top level command}
\calls{library}{localdatabase}
\calls{library}{extendLocalLibdb}
\calls{library}{tersyscommand}
\usesdollar{library}{newConlist}
\usesdollar{library}{options}
<<defun library>>=
(defun |library| (args)
 (let (original-directory)
 (declare (special |$options| |$newConlist|))
  (setq original-directory (get-current-directory))
  (setq |$newConlist| nil)
  (localdatabase args |$options|)
  (|extendLocalLibdb| |$newConlist|)
  (system::chdir original-directory)
  (tersyscommand)))

@

\defun{localdatabase}{Read a local filename and update the hash tables}
The localdatabase function tries to find files in the order of:
\begin{itemize}
\item nrlib/index.kaf
\item .asy
\item .ao, 
\item asharp to .asy
\end{itemize}
\calls{localdatabase}{sayKeyedMsg}
\calls{localdatabase}{localnrlib}
\calls{localdatabase}{localasy}
\calls{localdatabase}{asharp}
\calls{localdatabase}{astran}
\calls{localdatabase}{localasy}
\calls{localdatabase}{hclear}
\usesdollar{localdatabase}{forceDatabaseUpdate}
\usesdollar{localdatabase}{ConstructorCache}
\uses{localdatabase}{*index-filename*}
<<defun localdatabase>>=
(defun localdatabase (filelist options &optional (make-database? nil))
 "read a local filename and update the hash tables"
 (labels (
  (processOptions (options)
   (let (only dir noexpose)
    (when (setq only (assoc '|only| options))
     (setq options (lisp::delete only options :test #'equal))
     (setq only (cdr only)))
    (when (setq dir (assoc '|dir| options))
     (setq options (lisp::delete dir options :test #'equal))
     (setq dir (second dir))
     (when (null dir)
      (|sayKeyedMsg| 'S2IU0002 nil) ))
    (when (setq noexpose (assoc '|noexpose| options))
     (setq options (lisp::delete noexpose options :test #'equal))
     (setq noexpose 't) )
    (when options
     (format t "   Ignoring unknown )library option: ~a~%" options))
    (values only dir noexpose)))
  (processDir (dirarg thisdir)
   (let (allfiles)
    (declare (special vmlisp::*index-filename*))
    (system:chdir (string dirarg))
    (setq allfiles (directory "*"))
    (system:chdir thisdir)
     (mapcan #'(lambda (f)
      (when (string-equal (pathname-type f) "nrlib")
       (list (concatenate 'string (namestring f) "/"
			  vmlisp::*index-filename*)))) allfiles))))
 (let (thisdir nrlibs object only dir key  (|$forceDatabaseUpdate| t) noexpose)
  (declare (special |$forceDatabaseUpdate| vmlisp::*index-filename*
                    |$ConstructorCache|))
  (setq thisdir (namestring (truename ".")))
  (setq noexpose nil)
  (multiple-value-setq (only dir noexpose) (processOptions options))
     ;don't force exposure during database build
  (if make-database? (setq noexpose t))
  (when dir (setq nrlibs (processDir dir thisdir)))
  (dolist (file filelist)
   (let ((filename (pathname-name file))
	 (namedir (directory-namestring file)))
    (unless namedir (setq thisdir (concatenate 'string thisdir "/")))
    (cond
     ((setq file (probe-file
       (concatenate 'string namedir filename ".nrlib/"
                    vmlisp::*index-filename*)))
      (push (namestring file) nrlibs))
     ('else (format t "   )library cannot find the file ~a.~%" filename)))))
  (dolist (file (nreverse nrlibs))
   (setq key (pathname-name (first (last (pathname-directory file)))))
   (setq object (concatenate 'string (directory-namestring file) "code"))
   (localnrlib key file object make-database? noexpose))
  (hclear |$ConstructorCache|))))

@

\defun{localnrlib}{Update the database from an nrlib index.kaf file}
\calls{localnrlib}{getdatabase}
\calls{localnrlib}{make-database}
\calls{localnrlib}{addoperations}
\calls{localnrlib}{sublislis}
\calls{localnrlib}{updateDatabase}
\calls{localnrlib}{installConstructor}
\calls{localnrlib}{updateCategoryTable}
\calls{localnrlib}{categoryForm?}
\calls{localnrlib}{setExposeAddConstr}
\calls{localnrlib}{startTimingProcess}
\calls{localnrlib}{loadLibNoUpdate}
\calls{localnrlib}{sayKeyedMsg}
\usesdollar{localnrlib}{FormalMapVariableList}
\uses{localnrlib}{*allOperations*}
\uses{localnrlib}{*allconstructors*}
<<defun localnrlib>>=
(defun localnrlib (key nrlib object make-database? noexpose)
 "given a string pathname of an index.kaf and the object update the database"
 (labels (
  (fetchdata (alist in index)
   (let (pos)
    (setq pos (third (assoc index alist :test #'string=)))
    (when pos
     (file-position in pos)
     (read in)))))
 (let (alist kind (systemdir? nil) pos constructorform oldmaps abbrev dbstruct)
  (declare (special *allOperations* *allconstructors*
                    |$FormalMapVariableList|))
  (with-open-file (in nrlib)
   (file-position in (read in))
   (setq alist (read in))
   (setq pos (third (assoc "constructorForm" alist :test #'string=)))
   (file-position in pos)
   (setq constructorform (read in))
   (setq key (car constructorform))
   (setq oldmaps (getdatabase key 'modemaps))
   (setq dbstruct (make-database))
   (setq *allconstructors* (adjoin key *allconstructors*))
   (setf (get key 'database) dbstruct) ; store the struct, side-effect it...
   (setf (database-constructorform dbstruct) constructorform)
   (setq *allOperations* nil)	; force this to recompute
   (setf (database-object dbstruct) object)
   (setq abbrev
     (intern (pathname-name (first (last (pathname-directory object))))))
   (setf (database-abbreviation dbstruct) abbrev)
   (setf (get abbrev 'abbreviationfor) key)
   (setf (database-operationalist dbstruct) nil)
   (setf (database-operationalist dbstruct)
    (fetchdata alist in "operationAlist"))
   (setf (database-constructormodemap dbstruct)
    (fetchdata alist in "constructorModemap"))
   (setf (database-modemaps dbstruct) (fetchdata alist in "modemaps"))
   (setf (database-sourcefile dbstruct) (fetchdata alist in "sourceFile"))
   (when make-database?
    (setf (database-sourcefile dbstruct)
     (file-namestring  (database-sourcefile dbstruct))))
   (setf (database-constructorkind dbstruct)
    (setq kind (fetchdata alist in "constructorKind")))
   (setf (database-constructorcategory dbstruct)
    (fetchdata alist in "constructorCategory"))
   (setf (database-documentation dbstruct)
    (fetchdata alist in "documentation"))
   (setf (database-attributes dbstruct)
    (fetchdata alist in "attributes"))
   (setf (database-predicates dbstruct)
    (fetchdata alist in "predicates"))
   (setf (database-niladic dbstruct)
    (when (fetchdata alist in "NILADIC") t))
  (addoperations key oldmaps)
  (unless make-database?
   (if (eq kind '|category|)
    (setf (database-ancestors dbstruct)
     (sublislis |$FormalMapVariableList|
      (cdr constructorform) (fetchdata alist in "ancestors"))))
   (|updateDatabase| key key systemdir?) ;makes many hashtables???
   (|installConstructor| key kind) ;used to be key cname ...
   (|updateCategoryTable| key kind)
   (if |$InteractiveMode| (setq |$CategoryFrame| |$EmptyEnvironment|)))
  (setf (database-cosig dbstruct)
    (cons nil (mapcar #'|categoryForm?|
     (cddar (database-constructormodemap dbstruct)))))
  (remprop key 'loaded)
  (if (null noexpose) (|setExposeAddConstr| (cons key nil)))
  (setf (symbol-function key) ; sets the autoload property for cname
    #'(lambda (&rest args)
     (unless (get key 'loaded)
      (|startTimingProcess| '|load|)
      (|loadLibNoUpdate| key key object)) ; used to be cname key
     (apply key args)))
  (|sayKeyedMsg| 'S2IU0001 (list key object))))))

@

\defun{make-databases}{Make new databases}
Making new databases consists of:
\begin{enumerate}
\item reset all of the system hash tables
\item set up Union, Record and Mapping
\item map )library across all of the system files (fills the databases)
\item loading some normally autoloaded files
\item making some database entries that are computed (like ancestors)
\item writing out the databases
\item write out 'warm' data to be loaded into the image at build time
\end{enumerate}

Note that this process should be done in a clean image
followed by a rebuild of the system image to include
the new index pointers (e.g. *interp-stream-stamp*)

The system will work without a rebuild but it needs to
re-read the databases on startup. Rebuilding the system
will cache the information into the image and the databases
are opened but not read, saving considerable startup time.
Also note that the order the databases are written out is
critical. The interp.daase depends on prior computations and has
to be written out last.

The build-name-to-pamphlet-hash builds a hash table whose key->value is:
\begin{itemize}
\item abbreviation -> pamphlet file name
\item abbreviation-line -> pamphlet file position
\item constructor -> pamphlet file name
\item constructor-line -> pamphlet file position
\end{itemize}
is the symbol of the constructor name and whose value is the name of
the source file without any path information. We  hash the 
constructor abbreviation to pamphlet file name.
\calls{make-databases}{localdatabase}
\calls{make-databases}{getEnv}
\calls{make-databases}{oldCompilerAutoloadOnceTrigger}
\calls{make-databases}{browserAutoloadOnceTrigger}
\calls{make-databases}{mkTopicHashTable}
\calls{make-databases}{buildLibdb}
\calls{make-databases}{dbSplitLibdb}
\calls{make-databases}{mkUsersHashTable}
\calls{make-databases}{saveUsersHashTable}
\calls{make-databases}{mkDependentsHashTable}
\calls{make-databases}{saveDependentsHashTable}
\calls{make-databases}{write-compress}
\calls{make-databases}{write-browsedb}
\calls{make-databases}{write-operationdb}
\calls{make-databases}{write-categorydb}
\calls{make-databases}{allConstructors}
\calls{make-databases}{categoryForm?}
\calls{make-databases}{domainsOf}
\calls{make-databases}{getConstructorForm}
\calls{make-databases}{write-interpdb}
\calls{make-databases}{write-warmdata}
\usesdollar{make-databases}{constructorList}
\uses{make-databases}{*sourcefiles*}
\uses{make-databases}{*compressvector*}
\uses{make-databases}{*allconstructors*}
\uses{make-databases}{*operation-hash*}
<<defun make-databases>>=
(defun make-databases (ext dirlist)
 (labels (
  (build-name-to-pamphlet-hash (dir)
   (let ((ht (make-hash-table)) (eof '(done)) point mark abbrev name file ns)
    (dolist (fn (directory dir))
     (with-open-file (f fn)
      (do ((ln (read-line f nil eof) (read-line f nil eof))
           (line 0 (incf line)))
          ((eq ln eof))
     (when (and (setq mark (search ")abb" ln)) (= mark 0))
       (setq mark (position #\space ln :from-end t))
       (setq name (intern (string-trim '(#\space) (subseq ln mark))))
       (cond
         ((setq mark (search "domain" ln)) (setq mark (+ mark 7)))
         ((setq mark (search "package" ln)) (setq mark (+ mark 8)))
         ((setq mark (search "category" ln)) (setq mark (+ mark 9))))
       (setq point (position #\space ln :start (+ mark 1)))
       (setq abbrev 
        (intern (string-trim '(#\space) (subseq ln mark point))))
       (setq ns (namestring fn))
       (setq mark (position #\/ ns :from-end t))
       (setq file (subseq ns (+ mark 1)))
       (setf (gethash abbrev ht) file)
       (setf (gethash (format nil "~a-line" abbrev) ht) line)
       (setf (gethash name ht) file)
       (setf (gethash (format nil "~a-line" name) ht) line)))))
    ht))
    ;; these are types which have no library object associated with them.
    ;; we store some constructed data to make them perform like library
    ;; objects, the *operationalist-hash* key entry is used by allConstructors
  (withSpecialConstructors ()
   (declare (special *allconstructors*))
   ; note: if item is not in *operationalist-hash* it will not be written
   ; Category
   (setf (get '|Category| 'database)
     (make-database :operationalist nil :niladic t))
   (push '|Category| *allconstructors*)
   ; UNION
   (setf (get '|Union| 'database)
     (make-database :operationalist nil :constructorkind '|domain|))
   (push '|Union| *allconstructors*)
   ; RECORD
   (setf (get '|Record| 'database)
    (make-database :operationalist nil :constructorkind '|domain|))
   (push '|Record| *allconstructors*)
   ; MAPPING
   (setf (get '|Mapping| 'database)
    (make-database :operationalist nil :constructorkind '|domain|))
   (push '|Mapping| *allconstructors*)
   ; ENUMERATION
   (setf (get '|Enumeration| 'database)
    (make-database :operationalist nil :constructorkind '|domain|))
   (push '|Enumeration| *allconstructors*)
   )
  (final-name (root) 
    (format nil "~a.daase~a" root ext))
  )
 (let (d)
  (declare (special |$constructorList| *sourcefiles* *compressvector*
                    *allconstructors* *operation-hash*))
  (do-symbols (symbol)
   (when (get symbol 'database)
    (setf (get symbol 'database) nil)))
  (setq *hascategory-hash* (make-hash-table :test #'equal))
  (setq *operation-hash* (make-hash-table))
  (setq *allconstructors* nil)
  (setq *compressvector* nil)
  (withSpecialConstructors)
  (localdatabase nil
     (list (list '|dir| (namestring (truename "./")) ))
     'make-database)
  (dolist (dir dirlist)
   (localdatabase nil 
    (list (list '|dir| (namestring (truename (format nil "./~a" dir)))))
    'make-database))
;browse.daase
  (load (concatenate 'string (|getEnv| "AXIOM") "/autoload/topics"))  ;; hack
  (|oldCompilerAutoloadOnceTrigger|)
  (|browserAutoloadOnceTrigger|)
  (|mkTopicHashTable|)
  (setq |$constructorList| nil) ;; affects buildLibdb
  (setq *sourcefiles* (build-name-to-pamphlet-hash 
    (concatenate 'string (|getEnv| "AXIOM") 
      "/../../src/algebra/*.pamphlet")))
  (|buildLibdb|)
  (|dbSplitLibdb|)
; (|dbAugmentConstructorDataTable|)
  (|mkUsersHashTable|)
  (|saveUsersHashTable|)
  (|mkDependentsHashTable|)
  (|saveDependentsHashTable|)
; (|buildGloss|)
  (write-compress)
  (write-browsedb)
  (write-operationdb)
 ; note: genCategoryTable creates a new *hascategory-hash* table
 ; this smashes the existing table and regenerates it.
 ; write-categorydb does getdatabase calls to write the new information
  (write-categorydb)
  (dolist (con (|allConstructors|))
   (let (dbstruct)
     (when (setq dbstruct (get con 'database))
	   (setf (database-cosig dbstruct)
		 (cons nil (mapcar #'|categoryForm?|
			   (cddar (database-constructormodemap dbstruct)))))
	   (when (and (|categoryForm?| con)
		      (= (length (setq d (|domainsOf| (list con) NIL NIL))) 1))
		 (setq d (caar d))
		 (when (= (length d) (length (|getConstructorForm| con)))
	       (format t "   ~a has a default domain of ~a~%" con (car d))
		       (setf (database-defaultdomain dbstruct) (car d)))))))
	; note: genCategoryTable creates *ancestors-hash*. write-interpdb
	; does gethash calls into it rather than doing a getdatabase call.
  (write-interpdb)
  (write-warmdata)
  (when (probe-file (final-name "compress"))
	(delete-file (final-name "compress")))
  (rename-file "compress.build" (final-name "compress"))
  (when (probe-file (final-name "interp"))
	(delete-file (final-name "interp")))
  (rename-file "interp.build" (final-name "interp"))
  (when (probe-file (final-name "operation"))
	(delete-file (final-name "operation")))
  (rename-file "operation.build" (final-name "operation"))
  (when (probe-file (final-name "browse")) 
	(delete-file (final-name "browse")))
  (rename-file "browse.build" 
	       (final-name "browse"))
  (when (probe-file (final-name "category"))
	(delete-file (final-name "category")))
  (rename-file "category.build" 
	       (final-name "category")))))

@

\defun{DaaseName}{Construct the proper database full pathname}
\calls{DaaseName}{getEnv}
\usesdollar{DaaseName}{spadroot}
<<defun DaaseName>>=
(defun DaaseName (name erase?)
 (let (daase filename)
  (declare (special $spadroot))
  (if (setq daase (|getEnv| "DAASE"))
   (progn
    (setq filename  (concatenate 'string daase "/algebra/" name))
    (format t "   Using local database ~a.." filename))
   (setq filename (concatenate 'string $spadroot "/algebra/" name)))
  (when erase? (system::system (concatenate 'string "rm -f " filename)))
  filename))

@

\subsection{compress.daase}
The compress database is special. It contains a list of symbols.
The character string name of a symbol in the other databases is
represented by a negative number. To get the real symbol back you
take the absolute value of the number and use it as a byte index
into the compress database. In this way long symbol names become
short negative numbers.

\defun{compressOpen}{Set up compression vectors for the databases}
\calls{compressOpen}{DaaseName}
\usesdollar{compressOpen}{spadroot}
\uses{compressOpen}{*compressvector*}
\uses{compressOpen}{*compressVectorLength*}
\uses{compressOpen}{*compress-stream*}
\uses{compressOpen}{*compress-stream-stamp*}
<<defun compressOpen>>=
(defun compressOpen ()
 (let (lst stamp pos)
  (declare (special $spadroot *compressvector* *compressVectorLength*
                    *compress-stream* *compress-stream-stamp*))
  (setq *compress-stream*
    (open (DaaseName "compress.daase"  nil) :direction :input))
  (setq stamp (read *compress-stream*))
  (unless (equal stamp *compress-stream-stamp*)
   (format t "   Re-reading compress.daase")
   (setq *compress-stream-stamp* stamp)
   (setq pos (car stamp))
   (file-position *compress-stream* pos)
   (setq lst (read *compress-stream*))
   (setq *compressVectorLength* (car lst))
   (setq *compressvector*
     (make-array (car lst) :initial-contents (cdr lst))))))

@

\defvar{*attributes*}
<<initvars>>=
(defvar *attributes* 
      '(|nil| |infinite| |arbitraryExponent| |approximate| |complex|
	|shallowMutable| |canonical| |noetherian| |central|
	|partiallyOrderedSet| |arbitraryPrecision| |canonicalsClosed|
	|noZeroDivisors| |rightUnitary| |leftUnitary|
	|additiveValuation| |unitsKnown| |canonicalUnitNormal|
	|multiplicativeValuation| |finiteAggregate| |shallowlyMutable|
	|commutative|) "The list of known algebra attributes")

@

\defun{write-compress}{Write out the compress database}
\calls{write-compress}{allConstructors}
\calls{write-compress}{allOperations}
\uses{write-compress}{*compress-stream*}
\uses{write-compress}{*attributes*}
\uses{write-compress}{*compressVectorLength*}
<<defun write-compress>>=
(defun write-compress ()
 (let (compresslist masterpos out)
  (declare (special *compress-stream* *attributes* *compressVectorLength*))
  (close *compress-stream*)
  (setq out (open "compress.build" :direction :output))
  (princ "                              " out)
  (finish-output out)
  (setq masterpos (file-position out))
  (setq compresslist
	(append (|allConstructors|) (|allOperations|) *attributes*))
  (push "algebra" compresslist)
  (push "failed" compresslist)
  (push 'signature compresslist)
  (push '|ofType| compresslist)
  (push '|Join| compresslist)
  (push 'and compresslist)
  (push '|nobranch| compresslist)
  (push 'category compresslist)
  (push '|category| compresslist)
  (push '|domain| compresslist)
  (push '|package| compresslist)
  (push 'attribute compresslist)
  (push '|isDomain| compresslist)
  (push '|ofCategory| compresslist)
  (push '|Union| compresslist)
  (push '|Record| compresslist)
  (push '|Mapping| compresslist)
  (push '|Enumeration| compresslist)
  (setq *compressVectorLength* (length compresslist))
  (setq *compressvector*
    (make-array *compressVectorLength* :initial-contents compresslist))
  (print (cons (length compresslist) compresslist) out)
  (finish-output out)
  (file-position out 0)
  (print (cons masterpos (get-universal-time)) out)
  (finish-output out)
  (close out)))

@

\defun{squeeze}{Compress an expression using the compress vector}
This function is used to minimize the size of the databases by 
replacing symbols with indexes into the compression vector.
\uses{squeeze}{*compressvector*}
<<defun squeeze>>=
(defun squeeze (expr)
 (declare (special *compressvector*))
 (let (leaves pos (bound (length *compressvector*)))
  (labels (
   (flat (expr)
    (when (and (numberp expr) (< expr 0) (>= expr bound))
     (print expr)
     (break "squeeze found a negative number"))
    (if (atom expr)
     (unless (or (null expr)
                 (and (symbolp expr) (char= (schar (symbol-name expr) 0) #\*)))
      (setq leaves (adjoin expr leaves)))
     (progn
      (flat (car expr))
      (flat (cdr expr))))))
  (setq leaves nil)
  (flat expr)
  (dolist (leaf leaves)
   (when (setq pos (position leaf *compressvector*))
     (nsubst (- pos) leaf expr)))
  expr)))

@

\defun{unsqueeze}{Uncompress an expression using the compress vector}
This function is used to recover symbols from the databases by
using integers as indexes into the compression vector.
\uses{unsqueeze}{*compressvector*}
<<defun unsqueeze>>=
(defun unsqueeze (expr)
 (declare (special *compressvector*))
  (cond ((atom expr)
	 (cond ((and (numberp expr) (<= expr 0))
		(svref *compressVector* (- expr)))
	       (t expr)))
	(t (rplaca expr (unsqueeze (car expr)))
	   (rplacd expr (unsqueeze (cdr expr)))
	   expr)))

@

\subsection{Building the interp.daase from hash tables} 
\begin{verbatim}
 format of an entry in interp.daase:
  (constructor-name
    operationalist
    constructormodemap
    modemaps		 -- this should not be needed. eliminate it.
    object		 -- the name of the object file to load for this con.
    constructorcategory -- note that this info is the cadar of the
	  constructormodemap for domains and packages so it is stored
	  as NIL for them. it is valid for categories.
    niladic		 -- t or nil directly
    unused
    cosig		 -- kept directly
    constructorkind	 -- kept directly
    defaultdomain	 -- a short list, for %i
    ancestors		 -- used to compute new category updates
  )
\end{verbatim}

Here I'll try to outline the interp database write procedure

\begin{verbatim}
(defun write-interpdb ()
 "build interp.daase from hash tables"
 (declare (special $spadroot *ancestors-hash*))
 (let (opalistpos modemapspos cmodemappos master masterpos obj *print-pretty*
	concategory categorypos kind niladic cosig abbrev defaultdomain
	ancestors ancestorspos out)
  (declare (special *print-pretty*))
  (print "building interp.daase")

; 1. We open the file we're going to create

  (setq out (open "interp.build" :direction :output))

; 2. We reserve some space at the top of the file for the key-time pair
;    We will overwrite these spaces just before we close the file.

  (princ "                              " out)

; 3. Make sure we write it out
  (finish-output out)

; 4. For every constructor in the system we write the parts:

  (dolist (constructor (|allConstructors|))
   (let (struct)

; 4a. Each constructor has a property list. A property list is a list
;     of (key . value) pairs. The property we want is called 'database
;     so there is a ('database . something) in the property list

    (setq struct (get constructor 'database))

; 5 We write the "operationsalist"
; 5a. We remember the current file position before we write
;     We need this information so we can seek to this position on read

    (setq opalistpos (file-position out))

; 5b. We get the "operationalist", compress it, and write it out

    (print (squeeze (database-operationalist struct)) out)

; 5c. We make sure it was written

    (finish-output out)

; 6 We write the "constructormodemap"
; 6a. We remember the current file position before we write

    (setq cmodemappos (file-position out))

; 6b. We get the "constructormodemap", compress it, and write it out

    (print (squeeze (database-constructormodemap struct)) out)

; 6c. We make sure it was written

    (finish-output out)

; 7. We write the "modemaps"
; 7a. We remember the current file position before we write

    (setq modemapspos (file-position out))

; 7b. We get the "modemaps", compress it, and write it out

    (print (squeeze (database-modemaps struct)) out)

; 7c. We make sure it was written

    (finish-output out)

; 8. We remember source file pathnames in the obj variable

    (if (consp (database-object struct)) ; if asharp code ...
     (setq obj
      (cons (pathname-name (car (database-object struct)))
            (cdr (database-object struct))))
     (setq obj
      (pathname-name
        (first (last (pathname-directory (database-object struct)))))))

; 9. We write the "constructorcategory", if it is a category, else nil
; 9a. Get the constructorcategory and compress it

    (setq concategory (squeeze (database-constructorcategory struct)))

; 9b. If we have any data we write it out, else we don't write it
;     Note that if there is no data then the byte index for the
;     constructorcatagory will not be a number but will be nil.

    (if concategory  ; if category then write data else write nil
     (progn
      (setq categorypos (file-position out))
      (print concategory out)
      (finish-output out))
     (setq categorypos nil))

; 10. We get a set of properties which are kept as "immediate" data
;     This means that the key table will hold this data directly
;     rather than as a byte index into the file.
; 10a. niladic data

    (setq niladic (database-niladic struct))

; 10b. abbreviation data (e.g. POLY for polynomial)

    (setq abbrev (database-abbreviation struct))

; 10c. cosig data

    (setq cosig (database-cosig struct))

; 10d. kind data

    (setq kind (database-constructorkind struct))

; 10e. defaultdomain data

    (setq defaultdomain (database-defaultdomain struct))

; 11. The ancestor data might exist. If it does we fetch it, 
;     compress it, and write it out. If it does not we place
;     and immediate value of nil in the key-value table

    (setq ancestors (squeeze (gethash constructor *ancestors-hash*))) ;cattable.boot
    (if ancestors
     (progn
      (setq ancestorspos (file-position out))
      (print ancestors out)
      (finish-output out))
     (setq ancestorspos nil))

; 12. "master" is an alist. Each element of the alist has the name of
;     the constructor and all of the above attributes. When the loop
;     finishes we will have constructed all of the data for the key-value
;     table

    (push (list constructor opalistpos cmodemappos modemapspos
      obj categorypos niladic abbrev cosig kind defaultdomain
      ancestorspos) master)))

; 13. The loop is done, we make sure all of the data is written

  (finish-output out)

; 14. We remember where the key-value table will be written in the file

  (setq masterpos (file-position out))

; 15. We compress and print the key-value table

  (print (mapcar #'squeeze master) out)

; 16. We make sure we write the table

  (finish-output out)

; 17. We go to the top of the file

  (file-position out 0)

; 18. We write out the (master-byte-position . universal-time) pair
;     Note that if the universal-time value matches the value of
;     *interp-stream-stamp* then there is no reason to read the
;     interp database because all of the data is already cached in
;     the image. This happens if you build a database and immediatly
;     save the image. The saved image already has the data since we
;     just wrote it out. If the *interp-stream-stamp* and the database
;     time stamp differ we "reread" the database on startup. Actually
;     we just open the database and fetch as needed. You can see fetches
;     by setting the *miss* variable non-nil.

  (print (cons masterpos (get-universal-time)) out)

; 19. We make sure we write it.

  (finish-output out)

; 20 And we are done

  (close out)))
\end{verbatim}

\defun{write-interpdb}{Write the interp database}
\calls{write-interpdb}{squeeze}
\usesdollar{write-interpdb}{spadroot}
\uses{write-interpdb}{*ancestors-hash*}
\uses{write-interpdb}{*print-pretty*}
<<defun write-interpdb>>=
(defun write-interpdb ()
 "build interp.daase from hash tables"
 (declare (special $spadroot *ancestors-hash*))
 (let (opalistpos modemapspos cmodemappos master masterpos obj *print-pretty*
	concategory categorypos kind niladic cosig abbrev defaultdomain
	ancestors ancestorspos out)
  (declare (special *print-pretty*))
  (print "building interp.daase")
  (setq out (open "interp.build" :direction :output))
  (princ "                              " out)
  (finish-output out)
  (dolist (constructor (|allConstructors|))
   (let (struct)
    (setq struct (get constructor 'database))
    (setq opalistpos (file-position out))
    (print (squeeze (database-operationalist struct)) out)
    (finish-output out)
    (setq cmodemappos (file-position out))
    (print (squeeze (database-constructormodemap struct)) out)
    (finish-output out)
    (setq modemapspos (file-position out))
    (print (squeeze (database-modemaps struct)) out)
    (finish-output out)
    (if (consp (database-object struct)) ; if asharp code ...
     (setq obj
      (cons (pathname-name (car (database-object struct)))
            (cdr (database-object struct))))
     (setq obj
      (pathname-name
        (first (last (pathname-directory (database-object struct)))))))
    (setq concategory (squeeze (database-constructorcategory struct)))
    (if concategory  ; if category then write data else write nil
     (progn
      (setq categorypos (file-position out))
      (print concategory out)
      (finish-output out))
     (setq categorypos nil))
    (setq niladic (database-niladic struct))
    (setq abbrev (database-abbreviation struct))
    (setq cosig (database-cosig struct))
    (setq kind (database-constructorkind struct))
    (setq defaultdomain (database-defaultdomain struct))
    (setq ancestors
     (squeeze (gethash constructor *ancestors-hash*))) ;cattable.boot
    (if ancestors
     (progn
      (setq ancestorspos (file-position out))
      (print ancestors out)
      (finish-output out))
     (setq ancestorspos nil))
    (push (list constructor opalistpos cmodemappos modemapspos
      obj categorypos niladic abbrev cosig kind defaultdomain
      ancestorspos) master)))
  (finish-output out)
  (setq masterpos (file-position out))
  (print (mapcar #'squeeze master) out)
  (finish-output out)
  (file-position out 0)
  (print (cons masterpos (get-universal-time)) out)
  (finish-output out)
  (close out)))

@

\subsection{Building the browse.daase from hash tables} 
\begin{verbatim}
 format of an entry in browse.daase:
 ( constructorname
     sourcefile
     constructorform
     documentation
     attributes
     predicates
 )
\end{verbatim}
This is essentially the same overall process as write-interpdb.

We reserve some space for the (key-table-byte-position . timestamp)

We loop across the list of constructors dumping the data and
remembering the byte positions in a key-value pair table.

We dump the final key-value pair table, write the byte position and
time stamp at the top of the file and close the file.

\defun{write-browsedb}{Write the browse database}
\calls{write-browsedb}{allConstructors}
\calls{write-browsedb}{squeeze}
\usesdollar{write-browsedb}{spadroot}
\uses{write-browsedb}{*sourcefiles*}
\uses{write-browsedb}{*print-pretty*}
<<defun write-browsedb>>=
(defun write-browsedb ()
 "make browse.daase from hash tables"
 (declare (special $spadroot *sourcefiles*))
 (let (master masterpos src formpos docpos attpos predpos *print-pretty* out)
  (declare (special *print-pretty*))
  (print "building browse.daase")
  (setq out (open "browse.build" :direction :output))
  (princ "                              " out)
  (finish-output out)
  (dolist (constructor (|allConstructors|))
   (let (struct)
    (setq struct (get constructor 'database))
     ; sourcefile is small. store the string directly
    (setq src (gethash constructor *sourcefiles*))
    (setq formpos (file-position out))
    (print (squeeze (database-constructorform struct)) out)
    (finish-output out)
    (setq docpos (file-position out))
    (print (database-documentation struct) out)
    (finish-output out)
    (setq attpos (file-position out))
    (print (squeeze (database-attributes struct)) out)
    (finish-output out)
    (setq predpos (file-position out))
    (print (squeeze (database-predicates struct)) out)
    (finish-output out)
    (push (list constructor src formpos docpos attpos predpos) master)))
  (finish-output out)
  (setq masterpos (file-position out))
  (print (mapcar #'squeeze master) out)
  (finish-output out)
  (file-position out 0)
  (print (cons masterpos (get-universal-time)) out)
  (finish-output out)
  (close out)))

@

\subsection{Building the category.daase from hash tables} 
This is a single table of category hash table information, dumped in the 
database format.

\defun{write-categorydb}{Write the category database}
\calls{write-categorydb}{genCategoryTable}
\calls{write-categorydb}{squeeze}
\uses{write-categorydb}{*print-pretty*}
\uses{write-categorydb}{*hasCategory-hash*}
<<defun write-categorydb>>=
(defun write-categorydb ()
 "make category.daase from scratch. contains the *hasCategory-hash* table"
 (let (out master pos *print-pretty*)
  (declare (special *print-pretty* *hasCategory-hash*))
  (print "building category.daase")
  (|genCategoryTable|)
  (setq out (open "category.build" :direction :output))
  (princ "                              " out)
  (finish-output out)
  (maphash #'(lambda (key value)
    (if (or (null value) (eq value t))
     (setq pos value)
     (progn
      (setq pos (file-position out))
      (print (squeeze value) out)
      (finish-output out)))
     (push (list key pos) master))
     *hasCategory-hash*)
  (setq pos (file-position out))
  (print (mapcar #'squeeze master) out)
  (finish-output out)
  (file-position out 0)
  (print (cons pos (get-universal-time)) out)
  (finish-output out)
  (close out)))

@

\subsection{Building the operation.daase from hash tables} 
This is a single table of operations hash table information, dumped in the 
database format.
\defun{write-operationdb}{Write the operations database}
\calls{write-operationdb}{squeeze}
\uses{write-operationdb}{*operation-hash*}
<<defun write-operationdb>>=
(defun write-operationdb ()
 (let (pos master out)
  (declare (special leaves *operation-hash*))
  (setq out (open "operation.build" :direction :output))
  (princ "                              " out)
  (finish-output out)
  (maphash #'(lambda (key value)
   (setq pos (file-position out))
   (print (squeeze value) out)
   (finish-output out)
   (push (cons key pos) master))
   *operation-hash*)
  (finish-output out)
  (setq pos (file-position out))
  (print (mapcar #'squeeze master) out)
  (file-position out 0)
  (print (cons pos (get-universal-time)) out)
  (finish-output out)
  (close out)))

@

\subsection{Database support operations} 

\defun{write-warmdata}{Data preloaded into the image at build time}
\usesdollar{write-warmdata}{topicHash}
<<defun write-warmdata>>=
(defun write-warmdata ()
 "write out information to be loaded into the image at build time"
 (declare (special |$topicHash|))
 (with-open-file (out "warm.data" :direction :output)
  (format out "(in-package \"BOOT\")~%")
  (format out "(setq |$topicHash| (make-hash-table))~%")
  (maphash #'(lambda (k v)
   (format out "(setf (gethash '|~a| |$topicHash|) ~a)~%" k v)) |$topicHash|)))

@

\defun{allConstructors}{Return all constructors}
\uses{allConstructors}{*allconstructors*}
<<defun allConstructors>>=
(defun |allConstructors| ()
 (declare (special *allconstructors*))
 *allconstructors*)

@

\defun{allOperations}{Return all operations}
\uses{allOperations}{*allOperations*}
\uses{allOperations}{*operation-hash*}
<<defun allOperations>>=
(defun |allOperations| ()
 (declare (special *allOperations* *operation-hash*))
 (unless *allOperations*
  (maphash #'(lambda (k v) (declare (ignore v)) (push k *allOperations*))
    *operation-hash*))
 *allOperations*)

@

\chapter{System Statistics}
\calls{statisticsInitialization}{gbc-time}
<<defun statisticsInitialization>>=
(defun |statisticsInitialization| () 
 "initialize the garbage collection timer"
 #+:akcl (system:gbc-time 0)
 nil)

@
\chapter{Special Lisp Functions}
\section{Axiom control structure macros}
Axiom used various control structures in the boot code which are not
available in Common Lisp. We write some macros here to make the boot
to lisp translations easier to read.

\defmacro{while}
While the condition is true, repeat the body. 
When the condition is false, return t.
<<defmacro while>>=
(defmacro while (condition &rest body)
 `(loop (if (not ,condition) (return t)) ,@body))

@

\defmacro{whileWithResult}
While the condition is true, repeat the body. 
When the condition is false, return the result form's value.
<<defmacro whileWithResult>>=
(defmacro whileWithResult (condition result &rest body)
 `(loop (if (not ,condition) ,@result) ,@body))

@

\section{Filename Handling}
This code implements the Common Lisp pathname functions for
Lisp/VM.  On VM, a filename is 3-list consisting of the filename,
filetype and filemode. We also UPCASE everything.

\defun{namestring}{namestring}
\calls{namestring}{pathname}
<<defun namestring>>=
(defun |namestring| (arg)
 (namestring (|pathname| arg)))

@

\defun{pathnameName}{pathnameName}
\calls{pathnameName}{pathname}
<<defun pathnameName>>=
(defun |pathnameName| (arg)
 (pathname-name (|pathname| arg)))

@

\defun{pathnameType}{pathnameType}
\calls{pathnameType}{pathname}
<<defun pathnameType>>=
(defun |pathnameType| (arg)
 (pathname-type (|pathname| arg))) 

@

\defun{pathnameTypeId}{pathnameTypeId}
\calls{pathnameTypeId}{upcase}
\calls{pathnameTypeId}{object2Identifier}
\calls{pathnameTypeId}{pathnameType}
<<defun pathnameTypeId>>=
(defun |pathnameTypeId| (arg)
 (upcase (|object2Identifier| (|pathnameType| arg))))

@

\defun{mergePathnames}{mergePathnames}
\calls{mergePathnames}{pathnameName}
\calls{mergePathnames}{nequal}
\calls{mergePathnames}{pathnameType}
\calls{mergePathnames}{pathnameDirectory}
<<defun mergePathnames>>=
(defun |mergePathnames| (a b)
 (let (fn ft fm)
  (cond
   ((string= (setq fn (|pathnameName| a)) "*") b)
   ((nequal fn (|pathnameName| b)) a)
   ((string= (setq ft (|pathnameType| a)) "*") b)
   ((nequal ft (|pathnameType| b)) a)
   ((equal (setq fm (|pathnameDirectory| a)) (list "*" )) b)
   (t a))))

@

\defun{pathnameDirectory}{pathnameDirectory}
\calls{pathnameDirectory}{pathname}
<<defun pathnameDirectory>>=
(defun |pathnameDirectory| (arg)
 (namestring (make-pathname :directory (pathname-directory (|pathname| arg)))))

@

\defun{pathname}{Axiom pathnames}
\calls{pathname}{pairp}
\calls{pathname}{pathname}
\calls{pathname}{make-filename}
<<defun pathname>>=
(defun |pathname| (p)
 (cond
  ((null p) p)
  ((pathnamep p) p)
  ((null (pairp p)) (pathname p))
  (t
   (when (> (|#| p) 2) (setq p (cons (elt p 0) (cons (elt p 1) nil))))
   (pathname (apply #'make-filename p)))))

@

\defun{makePathname}{makePathname}
\calls{makePathname}{pathname}
\calls{makePathname}{object2String}
<<defun makePathname>>=
(defun |makePathname| (name type dir)
 (declare (ignore dir))
 (|pathname| (list (|object2String| name) (|object2String| type))))

@

\defun{deleteFile}{Delete a file}
\calls{deleteFile}{erase}
\calls{deleteFile}{pathname}
\usesdollar{deleteFile}{erase}
<<defun deleteFile>>=
(defun |deleteFile| (arg) 
 (declare (special $erase))
 ($erase (|pathname| arg)))

@

\defun{wrap}{wrap}
\calls{wrap}{pairp}
\calls{wrap}{lotsof}
\calls{wrap}{wrap}
<<defun wrap>>=
(defun wrap (list-of-items wrapper)
 (prog nil
  (cond
   ((or (not (pairp list-of-items)) (not wrapper))
    (return list-of-items))
   ((not (consp wrapper))
    (setq wrapper (lotsof wrapper))))
  (return
    (cons
     (if (first wrapper)
      `(,(first wrapper) ,(first list-of-items))
       (first list-of-items))
     (wrap (cdr list-of-items) (cdr wrapper))))))

@

\defun{lotsof}{lotsof}
<<defun lotsof>>=
(defun lotsof (&rest items)
  (setq items (copy-list items))
  (nconc items items))

@

\defmacro{startsId?}
<<defmacro startsId?>>=
(defmacro |startsId?| (x)
 `(or (alpha-char-p ,x) (member ,x '(#\? #\% #\!) :test #'char=)))

@

\defun{hput}{hput}
<<defun hput>>=
(defun hput (table key value)
 (setf (gethash key table) value))

@

\defmacro{hget}
<<defmacro hget>>=
(defmacro HGET (table key &rest default)
   `(gethash ,key ,table ,@default))

@

\defun{hkeys}{hkeys}
<<defun hkeys>>=
(defun hkeys (table)
 (let (keys)
  (maphash
   #'(lambda (key val) (declare (ignore val)) (push key keys)) table)
   keys))

@

\defun{digitp}{digitp}
\calls{digitp}{digitp}
<<defun digitp>>=
(defun digitp (x)
  (or (and (symbolp x) (digitp (symbol-name x)))
      (and (characterp x) (digit-char-p x))
      (and (stringp x) (= (length x) 1) (digit-char-p (char x 0)))))

@

\defun{size}{size}
<<defun size>>=
(defun size (l) 
 (cond
  ((vectorp l) (length l))
  ((consp l)   (list-length l))
  (t 0)))

@

\defun{strpos}{strpos}
<<defun strpos>>=
(defun strpos (what in start dontcare)
 (setq what (string what) in (string in))
 (if dontcare 
  (progn 
   (setq dontcare (character dontcare))
   (search what in :start2 start
                   :test #'(lambda (x y) (or (eql x dontcare) (eql x y)))))
  (if (= start 0)
   (search what in)
   (search what in :start2 start))))

@

\defun{strposl}{strposl}
Note that this assumes ``table'' is a string.
<<defun strposl>>=
(defun strposl (table cvec sint item)
 (setq cvec (string cvec))
 (if (not item)
  (position table cvec :test #'(lambda (x y) (position y x)) :start sint)
  (position table cvec :test-not #'(lambda (x y) (position y x)) :start sint)))

@

\defun{qenum}{qenum}
<<defun qenum>>=
(defun qenum (cvec ind)
 (char-code (char cvec ind)))

@

\defmacro{identp}
<<defmacro identp>>=
(defmacro identp (x) 
 (if (atom x)
  `(and ,x (symbolp ,x))
   (let ((xx (gensym)))
    `(let ((,xx ,x))
      (and ,xx (symbolp ,xx))))))

@

\defun{concat}{concat}
\calls{concat}{string-concatenate}
<<defun concat>>=
(defun concat (a b &rest l)
 (if (bit-vector-p a)
   (if l 
     (apply #'concatenate 'bit-vector a b l)
     (concatenate 'bit-vector a b))
   (if l 
     (apply #'system:string-concatenate a b l)
     (system:string-concatenate a b))))

@

\defun{functionp}{functionp}
\calls{functionp}{identp}
<<defun functionp>>=
(defun |functionp| (fn)
 (if (identp fn)
  (and (fboundp fn) (not (macro-function fn)))
  (functionp fn)))

@

;; --------------------> NEW DEFINITION (override in msgdb.boot.pamphlet)
\defun{brightprint}{brightprint}
\calls{brightprint}{messageprint}
<<defun brightprint>>=
(defun brightprint (x)
 (messageprint x))

@
 
;; --------------------> NEW DEFINITION (override in msgdb.boot.pamphlet)
\defun{brightprint-0}{brightprint-0}
\calls{brightprint-0}{messageprint-1}
<<defun brightprint-0>>=
(defun brightprint-0 (x)
 (messageprint-1 x))
 
@

\defun{member}{member}
<<defun member>>=
(defun |member| (item sequence)
 (cond
   ((symbolp item) (member item sequence :test #'eq))
   ((stringp item) (member item sequence :test #'equal))
   ((and (atom item) (not (arrayp item))) (member item sequence))
   (t (member item sequence :test #'equalp))))

@

\defun{messageprint}{messageprint}
<<defun messageprint>>=
(defun messageprint (x)
 (mapc #'messageprint-1 x))
 
@

\defun{messageprint-1}{messageprint-1}
\calls{messageprint-1}{identp}
\calls{messageprint-1}{messageprint-1}
\calls{messageprint-1}{messageprint-2}
<<defun messageprint-1>>=
(defun messageprint-1 (x)
 (cond
  ((or (eq x '|%l|) (equal x "%l")) (terpri))
  ((stringp x) (princ x))
  ((identp x) (princ x))
  ((atom x) (princ x))
  ((princ "(") 
   (messageprint-1 (car x))
   (messageprint-2 (cdr x))
   (princ ")"))))

@

\defun{messageprint-2}{messageprint-2}
\calls{messageprint-2}{messageprint-1}
\calls{messageprint-2}{messageprint-2}
<<defun messageprint-2>>=
(defun messageprint-2 (x)
  (if (atom x)
   (unless x (progn (princ " . ") (messageprint-1 x)))
   (progn (princ " ") (messageprint-1 (car x)) (messageprint-2 (cdr x)))))

@
 
\defun{sayBrightly1}{sayBrightly1}
\calls{saybrightly1}{brightprint-0}
\calls{saybrightly1}{brightprint}
<<defun sayBrightly1>>=
(defun sayBrightly1 (x *standard-output*)
  (if (atom x)
   (progn (brightprint-0 x) (terpri) (force-output))
   (progn (brightprint   x) (terpri) (force-output))))

@
 
\defmacro{assq}
\tpdhere{This could probably be replaced by the default assoc using eql}
<<defmacro assq>>=
(defmacro assq (a b)
 `(assoc ,a ,b :test #'eq))

@

\chapter{Common Lisp Algebra Support}
These functions are called directly from the algebra source code.
They fall into two basic categories, one are the functions that are
raw Comon Lisp calls and the other are Axiom specific functions or macros.

Raw function calls are used where there is an alignment of the Axiom
type and the underlying representation in Common Lisp. These form the
support pillars upon which Axiom rests. For instance, the 'EQ' function is
called to support the Axiom equivalent 'eq?' function.

Macros are used to add type information in order to make low level
operations faster. An example is the use of macros in DoubleFloat to
add Common Lisp type information. Since DoubleFloat is machine arithmetic
we give the compiler explicit type information so it can generate fast code.

Functions are used to do manipulations which are Common Lisp operations
but the Axiom semantics are not the same. Because Axiom was originally
written in Maclisp, then VMLisp, and then Common Lisp some of these old
semantics survive. 

\section{IndexedBits}
\defmacro{truth-to-bit}{IndexedBits new function support}
<<defmacro truth-to-bit>>=
(defmacro truth-to-bit (x) `(cond (,x 1) ('else 0)))

@

\defun{bvec-make-full}{IndexedBits new function support}
<<defun bvec-make-full>>=
(defun bvec-make-full (n x) 
 (make-array (list n) :element-type 'bit :initial-element x))

@

\defmacro{bit-to-truth}{IndexedBits elt function support}
<<defmacro bit-to-truth>>=
(defmacro bit-to-truth (b) `(eq ,b 1))

@

\defmacro{bvec-elt}{IndexedBits elt function support}
<<defmacro bvec-elt>>=
(defmacro bvec-elt (bv i) `(sbit ,bv ,i))

@

\defmacro{bvec-setelt}{IndexedBits setelt function support}
<<defmacro bvec-setelt>>=
(defmacro bvec-setelt (bv i x) `(setf (sbit ,bv ,i) ,x))

@

\defmacro{bvec-size}{IndexedBits length function support}
<<defmacro bvec-size>>=
(defmacro bvec-size (bv) `(size ,bv))

@

\defun{bvec-concat}{IndexedBits concat function support}
<<defun bvec-concat>>=
(defun bvec-concat (bv1 bv2) (concatenate '(vector bit) bv1 bv2))

@

\defun{bvec-copy}{IndexedBits copy function support}
<<defun bvec-copy>>=
(defun bvec-copy (bv) (copy-seq bv))

@

\defun{bvec-equal}{IndexedBits = function support}
<<defun bvec-equal>>=
(defun bvec-equal (bv1 bv2) (equal bv1 bv2))

@

\defun{bvec-greater}{IndexedBits $<$ function support}
<<defun bvec-greater>>=
(defun bvec-greater (bv1 bv2)
  (let ((pos (mismatch bv1 bv2)))
    (cond ((or (null pos) (>= pos (length bv1))) nil)
	  ((< pos (length bv2)) (> (bit bv1 pos) (bit bv2 pos)))
	  ((find 1 bv1 :start pos) t)
	  (t nil))))

@

\defun{bvec-and}{IndexedBits And function support}
<<defun bvec-and>>=
(defun bvec-and (bv1 bv2) (bit-and  bv1 bv2))

@

\defun{bvec-or}{IndexedBits Or function support}
<<defun bvec-or>>=
(defun bvec-or (bv1 bv2) (bit-ior  bv1 bv2))

@

\defun{bvec-xor}{IndexedBits xor function support}
<<defun bvec-xor>>=
(defun bvec-xor (bv1 bv2) (bit-xor  bv1 bv2))

@

\defun{bvec-nand}{IndexedBits nand function support}
<<defun bvec-nand>>=
(defun bvec-nand (bv1 bv2) (bit-nand bv1 bv2))

@

\defun{bvec-nor}{IndexedBits nor function support}
<<defun bvec-nor>>=
(defun bvec-nor (bv1 bv2) (bit-nor  bv1 bv2))

@

\defun{bvec-not}{IndexedBits not function support}
<<defun bvec-not>>=
(defun bvec-not (bv) (bit-not  bv))

@

\section{KeyedAccessFile}
\defun{rdefinstream}{KeyedAccessFile defstream function support}
This is a simpler interpface to RDEFIOSTREAM
\calls{rdefinstream}{rdefiostream}
<<defun rdefinstream>>=
(defun rdefinstream (&rest fn)
  ;; following line prevents rdefiostream from adding a default filetype
  (unless (rest fn) (setq fn (list (pathname (car fn)))))
  (rdefiostream (list (cons 'file fn) '(mode . input))))

@

\defun{rdefoutstream}{KeyedAccessFile defstream function support}
\calls{rdefoutstream}{rdefiostream}
<<defun rdefoutstream>>=
(defun rdefoutstream (&rest fn)
  ;; following line prevents rdefiostream from adding a default filetype
  (unless (rest fn) (setq fn (list (pathname (car fn)))))
  (rdefiostream (list (cons 'FILE fn) '(mode . OUTPUT))))

@

\section{Table}
\defun{hashable}{Table InnerTable support}
We look inside the Key domain given to Table and find if there is an
equality predicate associated with the domain. If found then
Table will use a HashTable representation, otherwise it will use
an AssociationList representation
\calls{hashable}{knownEqualPred}
<<defun hashable>>=
(defun |hashable| (dom)
 (labels (
  (|knownEqualPred| (dom)
    (let ((fun (|compiledLookup| '= '((|Boolean|) $ $) dom)))
     (if fun 
      (get (bpiname (car fun)) '|SPADreplace|)
      nil))))
  (memq (|knownEqualPred| dom) '(eq eql equal))))

@

\section{Integer}
\defun{divide2}{Integer divide function support}
Note that this is defined as a SPADReplace function in Integer
so that algebra code that uses the Integer divide function actually inlines
a call to this code. The Integer domain contains the line:
\begin{verbatim}
(PUT (QUOTE |INT;divide;2$R;44|) (QUOTE |SPADreplace|) (QUOTE DIVIDE2)) 
\end{verbatim}
<<defun divide2>>=
(defun divide2 (x y)
 (multiple-value-call #'cons (truncate x y)))

@

\defun{remainder2}{Integer quo function support}
Note that this is defined as a SPADReplace function in Integer
so that algebra code that uses the Integer quo function actually inlines
a call to this code. The Integer domain contains the line:
\begin{verbatim}
(PUT (QUOTE |INT;rem;3$;46|) (QUOTE |SPADreplace|) (QUOTE REMAINDER2)) 
\end{verbatim}
Because these are identical except for name we make the symbol-functions
equivalent. This was done in the original code for efficiency.
<<defun remainder2>>=
(setf (symbol-function 'remainder2) #'rem)

@

\defun{quotient2}{Integer quo function support}
Note that this is defined as a SPADReplace function in Integer
so that algebra code that uses the Integer quo function actually inlines
a call to this code. The Integer domain contains the line:
\begin{verbatim}
(PUT (QUOTE |INT;quo;3$;45|) (QUOTE |SPADreplace|) (QUOTE QUOTIENT2)) 
\end{verbatim}
<<defun quotient2>>=
(defun quotient2 (x y)
 (values (truncate x y)))

@

\section{IndexCard}
\defun{alqlGetOrigin}{IndexCard origin function support}
\calls{alqlGetOrigin}{dbPart}
\calls{alqlGetOrigin}{charPosition}
\calls{alqlGetOrigin}{substring}
<<defun alqlGetOrigin>>=
(defun |alqlGetOrigin| (x)
 (let (field k)
  (setq field (|dbPart| x 5 1))
  (setq k (|charPosition| #\( field 2))
  (substring field 1 (1- k))))

@

\defun{alqlGetParams}{IndexCard origin function support}
\calls{alqlGetParams}{dbPart}
\calls{alqlGetParams}{charPosition}
\calls{alqlGetParams}{substring}
<<defun alqlGetParams>>=
(defun |alqlGetParams| (x)
 (let (field k)
  (setq field (|dbPart| x 5 1))
  (setq k (|charPosition| #\( field 2))
  (substring field k nil)))

@

\defun{alqlGetKindString}{IndexCard elt function support}
\calls{alqlGetKindString}{dbPart}
\calls{alqlGetKindString}{substring}
<<defun alqlGetKindString>>=
(defun |alqlGetKindString| (x)
 (if (or (char= (elt x 0) #\a) (char= (elt x 0) #\o))
  (substring (|dbPart| x 5 1) 0 1)
  (substring x 0 1)))) 

@

\section{OperationsQuery}

\defun{getBrowseDatabase}{OperationQuery getDatabase function support}
This function, called as \verb|getBrowseDatabase(arg)| returns a list of
appropriate entries in the browser database. The legal values for arg are
\begin{itemize}
\item ``o'' (operations)
\item ``k'' (constructors)
\item ``d'' (domains)
\item ``c'' (categories)
\item ``p'' (packages)
\end{itemize}
\calls{getBrowseDatabase}{member}
\calls{getBrowseDatabase}{grepConstruct}
\usesdollar{getBrowseDatabase}{includeUnexposed?}
<<defun getBrowseDatabase>>=
(defun |getBrowseDatabase| (kind)
 (let (|$includeUnexposed?|)
 (declare (special |$includeUnexposed?|))
  (setq |$includeUnexposed?| t)
  (when (|member| kind '("o" "k" "c" "d" "p"))
   (|grepConstruct| "*" (intern kind)))))

@

\section{Database}
\defun{stringMatches?}{Database elt function support}
\calls{stringMatches?}{basicMatch?}
<<defun stringMatches?>>=
(defun |stringMatches?| (pattern subject)
 (when (integerp (|basicMatch?| pattern subject)) t))

@

\section{FileName}
\defun{fnameMake}{FileName filename function implementation}
\calls{fnameMake}{StringToDir}
<<defun fnameMake>>=
(defun |fnameMake| (d n e)
  (if (string= e "") (setq e nil))
  (make-pathname :directory (|StringToDir| d) :name  n :type e))

@

\defun{StringToDir}{FileName filename support function}
\calls{StringToDir}{lastc}
<<defun StringToDir>>=
(defun |StringToDir| (s)
  (cond
    ((string= s "/") '(:root))
    ((string= s "")  nil)
    (t
      (let ((lastc (aref s (- (length s) 1))))
        (if (char= lastc #\/)
          (pathname-directory (concat s "name.type"))
          (pathname-directory (concat s "/name.type")) ))) ))
@

\defun{fnameDirectory}{FileName directory function implementation}
\calls{fnameDirectory}{DirToString}
<<defun fnameDirectory>>=
(defun |fnameDirectory| (f)
  (|DirToString| (pathname-directory f)))

@

\defun{DirToString}{FileName directory function support}
For example,  ``/''  ``/u/smwatt''  ``../src''
<<defun DirToString>>=
(defun |DirToString| (d)
  (cond
    ((equal d '(:root)) "/")
    ((null d) "")
    ('t (string-right-trim "/" (namestring (make-pathname :directory d)))) ))

@

\defun{fnameName}{FileName name function implementation}
<<defun fnameName>>=
(defun |fnameName| (f)
  (let ((s (pathname-name f)))
    (if s s "") ))

@

\defun{fnameType}{FileName extension function implementation}
<<defun fnameType>>=
(defun |fnameType| (f)
  (let ((s (pathname-type f)))
    (if s s "") ))

@

\defun{fnameExists?}{FileName exists? function implementation}
<<defun fnameExists?>>=
(defun |fnameExists?| (f)
  (if (probe-file (namestring f)) 't nil))

@

\defun{fnameReadable?}{FileName readable? function implementation}
<<defun fnameReadable?>>=
(defun |fnameReadable?| (f)
 (let ((s (open f :direction :input :if-does-not-exist nil)))
  (cond (s (close s) t) (t nil)) ))

@

\defun{fnameWritable?}{FileName writeable? function implementation}
\calls{fnameWritable?}{myWriteable?}
<<defun fnameWritable?>>=
(defun |fnameWritable?| (f)
  (|myWritable?| (namestring f)) )

@

\defun{myWritable?}{FileName writeable? function support}
\calls{myWritable?}{error}
\calls{myWritable?}{fnameExists?}
\calls{myWritable?}{fnameDirectory}
\calls{myWritable?}{writeablep}
<<defun myWritable?>>=
(defun |myWritable?| (s)
  (if (not (stringp s)) (|error| "``myWritable?'' requires a string arg."))
  (if (string= s "") (setq s "."))
  (if (not (|fnameExists?| s)) (setq s (|fnameDirectory| s)))
  (if (string= s "") (setq s "."))
  (if (> (|writeablep| s) 0) 't nil) )

@

\defun{fnameNew}{FileName new function implementation}
\calls{fnameNew}{fnameMake}
<<defun fnameNew>>=
(defun |fnameNew| (d n e)
  (if (not (|myWritable?| d))
    nil
    (do ((fn))
        (nil)
        (setq fn (|fnameMake| d (string (gensym n)) e))
        (if (not (probe-file (namestring fn)))
           (return-from |fnameNew| fn)) )))

@

\section{DoubleFloat}
These macros wrap their arguments with strong type information in
order to optimize doublefloat computatations. They are used directly
in the DoubleFloat domain (see Volume 10.3).

\defmacro{DFLessThan}
Compute a strongly typed doublefloat comparison
See Steele Common Lisp 1990 p293
<<defmacro DFLessThan>>=
(defmacro DFLessThan (x y) 
 `(< (the double-float ,x) (the double-float ,y)))

@

\defmacro{DFUnaryMinus}
Compute a strongly typed unary doublefloat minus
See Steele Common Lisp 1990 p295
<<defmacro DFUnaryMinus>>=
(defmacro DFUnaryMinus (x)
 `(the double-float (- (the double-float ,x))))

@

\defmacro{DFMinusp}
Compute a strongly typed unary doublefloat test for negative
See Steele Common Lisp 1990 p292
<<defmacro DFMinusp>>=
(defmacro DFMinusp (x)
 `(minusp (the double-float ,x)))

@

\defmacro{DFZerop}
Compute a strongly typed unary doublefloat test for zero
See Steele Common Lisp 1990 p292
<<defmacro DFZerop>>=
(defmacro DFZerop (x)
 `(zerop (the double-float ,x)))

@

\defmacro{DFAdd}
Compute a strongly typed doublefloat addition
See Steele Common Lisp 1990 p295
<<defmacro DFAdd>>=
(defmacro DFAdd (x y) 
 `(the double-float (+ (the double-float ,x) (the double-float ,y))))

@

\defmacro{DFSubtract}
Compute a strongly typed doublefloat subtraction
See Steele Common Lisp 1990 p295
<<defmacro DFSubtract>>=
(defmacro DFSubtract (x y) 
 `(the double-float (- (the double-float ,x) (the double-float ,y))))

@

\defmacro{DFMultiply}
Compute a strongly typed doublefloat multiplication
See Steele Common Lisp 1990 p296
<<defmacro DFMultiply>>=
(defmacro DFMultiply (x y) 
 `(the double-float (* (the double-float ,x) (the double-float ,y))))

@

\defmacro{DFIntegerMultiply}
Compute a strongly typed doublefloat multiplication by an integer.
See Steele Common Lisp 1990 p296
<<defmacro DFIntegerMultiply>>=
(defmacro DFIntegerMultiply (i y) 
 `(the double-float (* (the integer ,i) (the double-float ,y))))

@

\defmacro{DFMax}
Choose the maximum of two doublefloats.
See Steele Common Lisp 1990 p294
<<defmacro DFMax>>=
(defmacro DFMax (x y) 
 `(the double-float (max (the double-float ,x) (the double-float ,y))))

@

\defmacro{DFMin}
Choose the minimum of two doublefloats.
See Steele Common Lisp 1990 p294
<<defmacro DFMin>>=
(defmacro DFMin (x y) 
 `(the double-float (min (the double-float ,x) (the double-float ,y))))

@

\defmacro{DFEql}
Compare two doublefloats for equality, where equality is eq, or numbers of
the same type with the same value.
See Steele Common Lisp 1990 p105
<<defmacro DFEql>>=
(defmacro DFEql (x y) 
 `(eql (the double-float ,x) (the double-float ,y)))

@

\defmacro{DFDivide}
Divide a doublefloat by a a doublefloat
See Steele Common Lisp 1990 p296
<<defmacro DFDivide>>=
(defmacro DFDivide (x y) 
 `(the double-float (/ (the double-float ,x) (the double-float ,y))))

@

\defmacro{DFIntegerDivide}
Divide a doublefloat by an integer
See Steele Common Lisp 1990 p296
<<defmacro DFIntegerDivide>>=
(defmacro DFIntegerDivide (x i) 
 `(the double-float (/ (the double-float ,x) (the integer ,i))))

@

\defmacro{DFSqrt}
Compute the doublefloat square root of $x$. The result will be complex
if the argument is negative.
See Steele Common Lisp 1990 p302
<<defmacro DFSqrt>>=
(defmacro DFSqrt (x)
 `(sqrt (the double-float ,x)))

@

\defmacro{DFLogE}
Compute the doublefloat log of $x$ with the base $e$.
The result will be complex if the argument is negative.
See Steele Common Lisp 1990 p301
<<defmacro DFLogE>>=
(defmacro DFLogE (x)
 `(log (the double-float ,x)))

@

\defmacro{DFLog}
Compute the doublefloat log of $x$ with a given base $b$.
The result will be complex if $x$ is negative.
See Steele Common Lisp 1990 p301
<<defmacro DFLog>>=
(defmacro DFLog (x b)
 `(log (the double-float ,x) (the fixnum ,b)))

@

\defmacro{DFIntegerExpt}
Compute the doublefloat expt of $x$ with a given integer power $i$
See Steele Common Lisp 1990 p300
<<defmacro DFIntegerExpt>>=
(defmacro DFIntegerExpt (x i)
 `(the double-float (expt (the double-float ,x) (the integer ,i))))

@

\defmacro{DFExpt}
Compute the doublefloat expt of $x$ with a given power $p$. 
The result could be complex if the base is negative and the power is 
not an integer.
See Steele Common Lisp 1990 p300
<<defmacro DFExpt>>=
(defmacro DFExpt (x p)
 `(expt (the double-float ,x) (the double-float ,p)))

@

\defmacro{DFExp}
Compute the doublefloat exp with power $e$
See Steele Common Lisp 1990 p300
<<defmacro DFExp>>=
(defmacro DFExp (x)
 `(the double-float (exp (the double-float ,x))))

@

\defmacro{DFSin}
Compute a strongly typed doublefloat sin
See Steele Common Lisp 1990 p304
<<defmacro DFSin>>=
(defmacro DFSin (x)
 `(the double-float (sin (the double-float ,x))))

@

\defmacro{DFCos}
Compute a strongly typed doublefloat cos
See Steele Common Lisp 1990 p304
<<defmacro DFCos>>=
(defmacro DFCos (x)
 `(the double-float (cos (the double-float ,x))))

@

\defmacro{DFTan}
Compute a strongly typed doublefloat tan
See Steele Common Lisp 1990 p304
<<defmacro DFTan>>=
(defmacro DFTan (x)
 `(the double-float (tan (the double-float ,x))))

@

\defmacro{DFAsin}
Compute a strongly typed doublefloat asin. The result is complex if the 
absolute value of the argument is greater than 1.
See Steele Common Lisp 1990 p305
<<defmacro DFAsin>>=
(defmacro DFAsin (x)
 `(asin (the double-float ,x)))

@

\defmacro{DFAcos}
Compute a strongly typed doublefloat acos. The result is complex if the 
absolute value of the argument is greater than 1.
See Steele Common Lisp 1990 p305
<<defmacro DFAcos>>=
(defmacro DFAcos (x)
 `(acos (the double-float ,x)))

@

\defmacro{DFAtan}
Compute a strongly typed doublefloat atan
See Steele Common Lisp 1990 p305
<<defmacro DFAtan>>=
(defmacro DFAtan (x)
 `(the double-float (atan (the double-float ,x))))

@

\defmacro{DFAtan2}
Compute a strongly typed doublefloat atan with 2 arguments

\begin{tabular}{lllc}
$y = 0$ & $x > 0$ & Positive x-axis & 0\\
$y > 0$ & $x > 0$ & Quadrant I      & $0 <$ result $< \pi/2$\\
$y > 0$ & $x = 0$ & Positive y-axis & $\pi/2$\\
$y > 0$ & $x < 0$ & Quadrant II     & $\pi/2 <$ result $<\pi$\\
$y = 0$ & $x < 0$ & Negative x-axis & $\pi$\\
$y < 0$ & $x < 0$ & Quadrant III    & $-\pi <$ result $< -\pi/2$\\
$y < 0$ & $x = 0$ & Negative y-axis & $-\pi/2$\\
$y < 0$ & $x > 0$ & Quadrant IV     & $-\pi/2 <$ result $< 0$\\
$y = 0$ & $x = 0$ & Origin          & error
\end{tabular}

See Steele Common Lisp 1990 p306
<<defmacro DFAtan2>>=
(defmacro DFAtan2 (y x)
 `(the double-float (atan (the double-float ,x) (the double-float ,y))))

@

\defmacro{DFSinh}
Compute a strongly typed doublefloat sinh
\[(e^z-e^{-z})/2\]
See Steele Common Lisp 1990 p308
<<defmacro DFSinh>>=
(defmacro DFSinh (x)
 `(the double-float (sinh (the double-float ,x))))

@

\defmacro{DFCosh}
Compute a strongly typed doublefloat cosh
\[(e^z+e^{-z})/2\]
See Steele Common Lisp 1990 p308
<<defmacro DFCosh>>=
(defmacro DFCosh (x)
 `(the double-float (cosh (the double-float ,x))))

@

\defmacro{DFTanh}
Compute a strongly typed doublefloat tanh
\[(e^z-e^{-z})/(e^z+e^{-z})\]
See Steele Common Lisp 1990 p308
<<defmacro DFTanh>>=
(defmacro DFTanh (x)
 `(the double-float (tanh (the double-float ,x))))

@

\defmacro{DFAsinh}
Compute the inverse hyperbolic sin.
\[log\left(z+\sqrt{1+z^2}\right)\]
See Steele Common Lisp 1990 p308
<<defmacro DFAsinh>>=
(defmacro DFAsinh (x)
 `(the double-float (asinh (the double-float ,x))))

@

\defmacro{DFAcosh}
Compute the inverse hyperbolic cos. Note that the acosh function will return
a complex result if the argument is less than 1.
\[log\left(z+(z+1)\sqrt{(z-1)/(z+1)}\right)\]
See Steele Common Lisp 1990 p308
<<defmacro DFAcosh>>=
(defmacro DFAcosh (x)
 `(acosh (the double-float ,x)))

@

\defmacro{DFAtanh}
Compute the inverse hyperbolic tan. Note that the acosh function will return
a complex result if the argument is greater than 1.
\[log\left((1+z)\sqrt{1/(1-z^2)}\right)\]
See Steele Common Lisp 1990 p308
<<defmacro DFAtanh>>=
(defmacro DFAtanh (x)
 `(atanh (the double-float ,x)))

@

\defun{integer-decode-float-numerator}{Machine specific float numerator}
This is used in the DoubleFloat integerDecode function
<<defun integer-decode-float-numerator>>=
(defun integer-decode-float-numerator (x)
 (integer-decode-float x))

@

\defun{integer-decode-float-denominator}{Machine specific float denominator}
This is used in the DoubleFloat integerDecode function
<<defun integer-decode-float-denominator>>=
(defun integer-decode-float-denominator (x)
 (multiple-value-bind (mantissa exponent sign) (integer-decode-float x)
  (declare (ignore mantissa sign)) (expt 2 (abs exponent))))

@

\defun{integer-decode-float-sign}{Machine specific float sign}
This is used in the DoubleFloat integerDecode function
<<defun integer-decode-float-sign>>=
(defun integer-decode-float-sign (x)
 (multiple-value-bind (mantissa exponent sign) (integer-decode-float x)
  (declare (ignore mantissa exponent)) sign))

@

\defun{integer-decode-float-exponent}{Machine specific float bit length}
This is used in the DoubleFloat integerDecode function
<<defun integer-decode-float-exponent>>=
(defun integer-decode-float-exponent (x)
 (multiple-value-bind (mantissa exponent sign) (integer-decode-float x)
  (declare (ignore mantissa sign)) exponent))

@

\defun{manexp}{Decode floating-point values}
This function is used by DoubleFloat to implement the ``mantissa'' and
``exponent'' functions.
<<defun manexp>>=
(defun manexp (u)
  (multiple-value-bind (f e s) 
    (decode-float u)
    (cons (* s f) e)))

@

\defun{cot}{The cotangent routine}
The cotangent function is defined as
\[cot(z) = \frac{1}{tan(z)}\]
<<defun cot>>=
(defun cot (a)
  (if (or (> a 1000.0) (< a -1000.0))
    (/ (cos a) (sin a))
    (/ 1.0 (tan a))))

@

\defun{acot}{The inverse cotangent function}
The inverse cotangent (arc-cotangent) function is defined as
\[acot(z) = cot^{-1}(z) = tan^{-1}(\frac{1}{z})\]
See Steele Common Lisp 1990 pp305-307
<<defun acot>>=
(defun acot (a)
  (if (> a 0.0)
    (if (> a 1.0)
       (atan (/ 1.0 a))
       (- (/ pi 2.0) (atan a)))
    (if (< a -1.0)
       (- pi (atan (/ -1.0 a)))
       (+ (/ pi 2.0) (atan (- a))))))

@

\defun{sec}{The secant function}
\[sec(x) = \frac{1}{cos(x)}\]
<<defun sec>>=
(defun sec (x) (/ 1 (cos x)))

@

\defun{asec}{The inverse secant function}
\[asec(x) = acos\left(\frac{1}{x}\right)\]
<<defun asec>>=
(defun asec (x) (acos (/ 1 x)))

@

\defun{csc}{The cosecant function}
\[csc(x) = \frac{1}{sin(x)}\]
<<defun csc>>=
(defun csc (x) (/ 1 (sin x)))

@

\defun{acsc}{The inverse cosecant function}
\[acsc(x) = \frac{1}{asin(x)}\]
<<defun acsc>>=
(defun acsc (x) (asin (/ 1 x)))

@

\defun{csch}{The hyperbolic cosecant function}
\[csch(x) = \frac{1}{sinh(x)} \]
<<defun csch>>=
(defun csch (x) (/ 1 (sinh x)))

@

\defun{coth}{The hyperbolic cotangent function}
\[coth(x) = cosh(x) csch(x)\]
<<defun coth>>=
(defun coth (x) (* (cosh x) (csch x)))

@

\defun{sech}{The hyperbolic secant function}
\[sech(x) = \frac{1}{cosh(x)}\]
<<defun sech>>=
(defun sech (x) (/ 1 (cosh x)))

@

\defun{acsch}{The inverse hyperbolic cosecant function}
\[acsch(x) = asinh\left(\frac{1}{x}\right)\]
<<defun acsch>>=
(defun acsch (x) (asinh (/ 1 x)))

@

\defun{acoth}{The inverse hyperbolic cotangent function}
\[acoth(x) = atanh\left(\frac{1}{x}\right)\]
<<defun acoth>>=
(defun acoth (x) (atanh (/ 1 x)))

@

\defun{asech}{The inverse hyperbolic secant function}
\[asech(x) = acosh\left(\frac{1}{x}\right)\]
<<defun asech>>=
(defun asech (x) (acosh (/ 1 x)))

@

\chapter{Monitoring execution}
\begin{verbatim}
MONITOR                                                                
                                                                       
This file contains a set of function for monitoring the execution      
of the functions in a file. It constructs a hash table that contains   
the function name as the key and monitor-data structures as the value  
                                                                       
The technique is to use a :cond parameter on trace to call the         
monitor-incr function to incr the count every time a function is called
                                                                       
*monitor-table*                                HASH TABLE              
   is the monitor table containing the hash entries                    
*monitor-nrlibs*                               LIST of STRING
   list of nrlib filenames that are monitored
*monitor-domains*                              LIST of STRING
   list of domains to monitor-report (default is all exposed domains)
monitor-data                                   STRUCTURE               
   is the defstruct name of records in the table                       
   name is the first field and is the name of the monitored function   
   count contains a count of times the function was called             
   monitorp is a flag that skips counting if nil, counts otherwise     
   sourcefile is the name of the file that contains the source code    
                                                                       
 ***** SETUP, SHUTDOWN ****                                            
                                                                       
monitor-inittable ()                           FUNCTION                
   creates the hashtable and sets *monitor-table*                      
   note that it is called every time this file is loaded               
monitor-end ()                                 FUNCTION                
   unhooks all of the trace hooks                                      
                                                                       
 ***** TRACE, UNTRACE *****                                            
                                                                       
monitor-add (name &optional sourcefile)        FUNCTION                
   sets up the trace and adds the function to the table                
monitor-delete (fn)                            FUNCTION                
   untraces a function and removes it from the table                   
monitor-enable (&optional fn)                  FUNCTION                
   starts tracing for all (or optionally one) functions that           
   are in the table                                                    
monitor-disable (&optional fn)                 FUNCTION                
   stops tracing for all (or optionally one) functions that            
   are in the table                                                    
                                                                       
***** COUNTING, RECORDING  *****                                       
                                                                       
monitor-reset (&optional fn)                   FUNCTION                
   reset the table count for the table (or optionally, for a function) 
monitor-incr (fn)                              FUNCTION                
   increments the count information for a function                     
   it is called by trace to increment the count                        
monitor-decr (fn)                              FUNCTION                
   decrements the count information for a function                     
monitor-info (fn)                              FUNCTION                
   returns the monitor-data structure for a function                   
                                                                       
***** FILE IO *****                                                    
                                                                       
monitor-write (items file)                     FUNCTION                
   writes a list of symbols or structures to a file                    
monitor-file (file)                            FUNCTION                
   will read a file, scan for defuns, monitor each defun               
   NOTE: monitor-file assumes that the file has been loaded            
                                                                       
***** RESULTS *****                                                    
                                                                       
monitor-results ()                             FUNCTION                
   returns a list of the monitor-data structures                       
monitor-untested ()                            FUNCTION                
   returns a list of files that have zero counts                       
monitor-tested (&optional delete)              FUNCTION                
   returns a list of files that have nonzero counts                    
   optionally calling monitor-delete on those functions

***** CHECKPOINT/RESTORE *****
monitor-checkpoint (file)                     FUNCTION
   save the *monitor-table* in a loadable form
monitor-restore (file)                        FUNCTION
  restore a checkpointed file so that everything is monitored

***** ALGEBRA *****
monitor-autoload ()                           FUNCTION
  traces autoload of algebra to monitor corresponding source files
  NOTE: this requires the /spad/int/algebra directory
monitor-dirname (args)                        FUNCTION
  expects a list of 1 libstream (loadvol's arglist) and monitors the source
  this is a function called by monitor-autoload 
monitor-nrlib (nrlib)                         FUNCTION
  takes an nrlib name as a string (eg POLY) and returns a list of 
  monitor-data structures from that source file
monitor-report ()                             FUNCTION
  generate a report of the monitored activity for domains in 
  *monitor-domains*
monitor-spadfile (name)                       FUNCTION
  given a spad file, report all nrlibs it creates
  this adds each nrlib name to *monitor-domains* but does not
  trace the functions from those domains
monitor-percent ()                            FUNCTION
  ratio of (functions executed)/(functions traced)
monitor-apropos (str)                         FUNCTION
  given a string, find all monitored symbols containing the string
  the search is case-insensitive. returns a list of monitor-data items

for example:
 suppose we have a file "/u/daly/testmon.lisp" that contains:
 (defun foo1 () (print 'foo1))
 (defun foo2 () (print 'foo2))
 (defun foo3 () (foo1) (foo2) (print 'foo3))
 (defun foo4 () (print 'foo4))

 an example session is:

 ; FIRST WE LOAD THE FILE (WHICH INITS *monitor-table*)

 >(load "/u/daly/monitor.lisp")
 Loading /u/daly/monitor.lisp
 Finished loading /u/daly/monitor.lisp
 T

 ; SECOND WE LOAD THE TESTMON FILE
 >(load "/u/daly/testmon.lisp")
 T

 ; THIRD WE MONITOR THE FILE
 >(monitor-file "/u/daly/testmon.lisp")
 monitoring "/u/daly/testmon.lisp"
 NIL
 
 ; FOURTH WE CALL A FUNCTION FROM THE FILE (BUMP ITS COUNT)
 >(foo1)
 
 FOO1 
 FOO1
 
 ; AND ANOTHER FUNCTION (BUMP ITS COUNT)
 >(foo2)
 
 FOO2 
 FOO2
 
 ; AND A THIRD FUNCTION THAT CALLS THE OTHER TWO (BUMP ALL THREE)
 >(foo3)

 FOO1 
 FOO2 
 FOO3 
 FOO3
 
 ; CHECK THAT THE RESULTS ARE CORRECT

 >(monitor-results)
 (#S(MONITOR-DATA NAME FOO1 COUNT 2 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO2 COUNT 2 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO3 COUNT 1 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))
  #S(MONITOR-DATA NAME FOO4 COUNT 0 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))

 ; STOP COUNTING CALLS TO FOO2
 
 >(monitor-disable 'foo2)
 NIL

 ; INVOKE FOO2 THRU FOO3

 >(foo3)
 
 FOO1 
 FOO2 
 FOO3 
 FOO3

 ; NOTICE THAT FOO1 AND FOO3 WERE BUMPED BUT NOT FOO2 
 >(monitor-results)
 (#S(MONITOR-DATA NAME FOO1 COUNT 3 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO2 COUNT 2 MONITORP NIL SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO3 COUNT 2 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))
  #S(MONITOR-DATA NAME FOO4 COUNT 0 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))
 
 ; TEMPORARILY STOP ALL MONITORING

 >(monitor-disable)
 NIL

 ; CHECK THAT NOTHING CHANGES
 
 >(foo3)
 
 FOO1 
 FOO2 
 FOO3 
 FOO3

 ; NO COUNT HAS CHANGED
 
 >(monitor-results)
 (#S(MONITOR-DATA NAME FOO1 COUNT 3 MONITORP NIL SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO2 COUNT 2 MONITORP NIL SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO3 COUNT 2 MONITORP NIL SOURCEFILE
        "/u/daly/testmon.lisp"))
  #S(MONITOR-DATA NAME FOO4 COUNT 0 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))

 ; MONITOR ONLY CALLS TO FOO1
 
 >(monitor-enable 'foo1)
 T

 ; FOO3 CALLS FOO1
 
 >(foo3)
 
 FOO1 
 FOO2 
 FOO3 
 FOO3

 ; FOO1 HAS CHANGED BUT NOT FOO2 OR FOO3
 
 >(monitor-results)
 (#S(MONITOR-DATA NAME FOO1 COUNT 4 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO2 COUNT 2 MONITORP NIL SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO3 COUNT 2 MONITORP NIL SOURCEFILE
        "/u/daly/testmon.lisp"))
  #S(MONITOR-DATA NAME FOO4 COUNT 0 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))
 
 ; MONITOR EVERYBODY

 >(monitor-enable)
 NIL

 ; CHECK THAT EVERYBODY CHANGES
 
 >(foo3)
 
 FOO1 
 FOO2 
 FOO3 
 FOO3

 ; EVERYBODY WAS BUMPED
 
 >(monitor-results)
 (#S(MONITOR-DATA NAME FOO1 COUNT 5 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO2 COUNT 3 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO3 COUNT 3 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))
  #S(MONITOR-DATA NAME FOO4 COUNT 0 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))

 ; WHAT FUNCTIONS WERE TESTED?

 >(monitor-tested)
 (FOO1 FOO2 FOO3)

 ; WHAT FUNCTIONS WERE NOT TESTED?

 >(monitor-untested)
 (FOO4)

 ; UNTRACE THE WHOLE WORLD, MONITORING CANNOT RESTART
 
 >(monitor-end)
 NIL

 ; CHECK THE RESULTS
 
 >(monitor-results)
 (#S(MONITOR-DATA NAME FOO1 COUNT 5 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO2 COUNT 3 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO3 COUNT 3 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))
  #S(MONITOR-DATA NAME FOO4 COUNT 0 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))

 ; CHECK THAT THE FUNCTIONS STILL WORK
 
 >(foo3)
 
 FOO1 
 FOO2 
 FOO3 
 FOO3
 
 ; CHECK THAT MONITORING IS NOT OCCURING

 >(monitor-results)
 (#S(MONITOR-DATA NAME FOO1 COUNT 5 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO2 COUNT 3 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp")
  #S(MONITOR-DATA NAME FOO3 COUNT 3 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))
  #S(MONITOR-DATA NAME FOO4 COUNT 0 MONITORP T SOURCEFILE
        "/u/daly/testmon.lisp"))

\end{verbatim}

\defvar{*monitor-domains*}
<<initvars>>=
(defvar *monitor-domains* nil "a list of domains to report")

@

\defvar{*monitor-nrlibs*}
<<initvars>>=
(defvar *monitor-nrlibs* nil "a list of nrlibs that have been traced")

@

\defvar{*monitor-table*}
<<initvars>>=
(defvar *monitor-table* nil "a table of all of the monitored data")

@

<<postvars>>=
(eval-when (eval load) 
 (unless *monitor-table* (monitor-inittable)))

@

\defstruct{monitor-data}
<<initvars>>=
(defstruct monitor-data name count monitorp sourcefile)

@

\defstruct{libstream}
<<initvars>>=
(defstruct libstream  mode dirname (indextable nil)  (indexstream nil))

@

\defun{monitor-inittable}{Initialize the monitor statistics hashtable}
\uses{monitor-inittable}{*monitor-table*}
<<defun monitor-inittable>>=
(defun monitor-inittable ()
 "initialize the monitor statistics hashtable"
 (declare (special *monitor-table*))
 (setq *monitor-table* (make-hash-table)))

@

\defun{monitor-end}{End the monitoring process, we cannot restart}
\uses{monitor-end}{*monitor-table*}
<<defun monitor-end>>=
(defun monitor-end ()
 "End the monitoring process. we cannot restart"
 (declare (special *monitor-table*))
 (maphash 
  #'(lambda (key value)
     (declare (ignore value))
     (eval `(untrace ,key)))
   *monitor-table*))

@

\defun{monitor-results}{Return a list of the monitor-data structures}
\uses{monitor-results}{*monitor-table*}
<<defun monitor-results>>=
(defun monitor-results ()
 "return a list of the monitor-data structures"
 (let (result)
 (declare (special *monitor-table*))
  (maphash 
  #'(lambda (key value)
     (declare (ignore key))
     (push value result))
   *monitor-table*)
  (mapcar #'(lambda (x) (pprint x)) result)))

@

\defun{monitor-add}{Add a function to be monitored}
\calls{monitor-add}{monitor-delete}
\calls{monitor-add}{make-monitor-data}
\uses{monitor-add}{*monitor-table*}
<<defun monitor-add>>=
(defun monitor-add (name &optional sourcefile)
 "add a function to be monitored"
 (declare (special *monitor-table*))
 (unless (fboundp name) (load sourcefile))
 (when (gethash name *monitor-table*) 
  (monitor-delete name))
 (eval `(trace (,name :cond (progn (monitor-incr ',name) nil))))
 (setf (gethash name *monitor-table*)
  (make-monitor-data 
     :name name :count 0 :monitorp t :sourcefile sourcefile)))))

@

\defun{monitor-delete}{Remove a function being monitored}
\uses{monitor-delete}{*monitor-table*}
<<defun monitor-delete>>=
(defun monitor-delete (fn)
 "Remove a function being monitored"
 (declare (special *monitor-table*))
 (eval `(untrace ,fn))
 (remhash fn *monitor-table*))

@

\defun{monitor-enable}{Enable all (or optionally one) function for monitoring}
\uses{monitor-enable}{*monitor-table*}
<<defun monitor-enable>>=
(defun monitor-enable (&optional fn)
 "enable all (or optionally one) function for monitoring"
 (declare (special *monitor-table*))
 (if fn 
  (progn
   (eval `(trace (,fn :cond (progn (monitor-incr ',fn) nil))))
   (setf (monitor-data-monitorp (gethash fn *monitor-table*)) t))
  (maphash 
   #'(lambda (key value)
      (declare (ignore value))
      (eval `(trace (,key :cond (progn (monitor-incr ',key) nil))))
      (setf (monitor-data-monitorp (gethash key *monitor-table*)) t))
   *monitor-table*)))

@

\defun{monitor-disable}{Disable all (optionally one) function for monitoring}
\uses{monitor-disable}{*monitor-table*}
<<defun monitor-disable>>=
(defun monitor-disable (&optional fn)
 "disable all (optionally one) function for monitoring"
 (declare (special *monitor-table*))
 (if fn
  (progn
   (eval `(untrace ,fn))   
   (setf (monitor-data-monitorp (gethash fn *monitor-table*)) nil))
  (maphash 
   #'(lambda (key value)
      (declare (ignore value))
      (eval `(untrace ,key))
      (setf (monitor-data-monitorp (gethash key *monitor-table*)) nil))
   *monitor-table*)))

@

\defun{monitor-reset}{Reset the table count for the table (or a function)}
\uses{monitor-reset}{*monitor-table*}
<<defun monitor-reset>>=
(defun monitor-reset (&optional fn)
 "reset the table count for the table (or a function)"
 (declare (special *monitor-table*))
 (if fn
  (setf (monitor-data-count (gethash fn *monitor-table*)) 0)
  (maphash 
   #'(lambda (key value)
      (declare (ignore value))
      (setf (monitor-data-count (gethash key *monitor-table*)) 0))
   *monitor-table*)))

@

\defun{monitor-incr}{Incr the count of fn by 1}
\uses{monitor-incr}{*monitor-table*}
<<defun monitor-incr>>=
(defun monitor-incr (fn)
 "incr the count of fn by 1"
 (let (data)
  (declare (special *monitor-table*))
  (setq data (gethash fn *monitor-table*))
  (if data 
   (incf (monitor-data-count data))  ;; change table entry by side-effect
   (warn "~s is monitored but not in table..do (untrace ~s)~%" fn fn))))

@

\defun{monitor-decr}{Decr the count of fn by 1}
\uses{monitor-decr}{*monitor-table*}
<<defun monitor-decr>>=
(defun monitor-decr (fn)
 "decr the count of fn by 1"
 (let (data)
  (declare (special *monitor-table*))
  (setq data (gethash fn *monitor-table*))
  (if data 
   (decf (monitor-data-count data))  ;; change table entry by side-effect
   (warn "~s is monitored but not in table..do (untrace ~s)~%" fn fn))))

@

\defun{monitor-info}{Return the monitor information for a function}
\uses{monitor-info}{*monitor-table*}
<<defun monitor-info>>=
(defun monitor-info (fn)
 "return the monitor information for a function"
 (declare (special *monitor-table*))
 (gethash fn *monitor-table*))

@

\defun{monitor-file}{Hang a monitor call on all of the defuns in a file}
\catches{monitor-file}{done}
\throws{monitor-file}{done}
\calls{monitor-file}{monitor-add}
<<defun monitor-file>>=
(defun monitor-file (file)
 "hang a monitor call on all of the defuns in a file"
 (let (expr (package "BOOT"))
  (format t "monitoring ~s~%" file)
  (with-open-file (in file)
   (catch 'done
    (loop
     (setq expr (read in nil 'done))
     (when (eq expr 'done) (throw 'done nil))
     (if (and (consp expr) (eq (car expr) 'in-package))
      (if (and (consp (second expr)) (eq (first (second expr)) 'quote))
       (setq package (string (second (second expr))))
       (setq package (second expr)))
      (when (and (consp expr) (eq (car expr) 'defun))
       (monitor-add (intern (string (second expr)) package) file))))))))

@

\defun{monitor-untested}{Return a list of the functions with zero count fields}
\uses{monitor-untested}{*monitor-table*}
<<defun monitor-untested>>=
(defun monitor-untested ()
 "return a list of the functions with zero count fields"
 (let (result)
  (declare (special *monitor-table*))
  (maphash 
   #'(lambda (key value)
      (if (and (monitor-data-monitorp value) (= (monitor-data-count value) 0))
       (push key result)))
    *monitor-table*)
 result))

@

\defun{monitor-tested}{Return a list of functions with non-zero counts}
\calls{monitor-tested}{monitor-delete}
\uses{monitor-tested}{*monitor-table*)}
<<defun monitor-tested>>=
(defun monitor-tested (&optional delete)
 "return a list of functions with non-zero counts, optionally deleting them"
 (let (result)
 (declare (special *monitor-table*))
  (maphash 
   #'(lambda (key value)
      (when (and (monitor-data-monitorp value) 
                 (> (monitor-data-count value) 0))
       (when delete (monitor-delete key))
       (push key result)))
    *monitor-table*)
 result))

@

\defun{monitor-write}{Write out a list of symbols or structures to a file}
<<defun monitor-write>>=
(defun monitor-write (items file)
 "write out a list of symbols or structures to a file"
 (with-open-file (out file :direction :output)
  (dolist (item items)
    (if (symbolp item)
     (format out "~s~%" item)
     (format out "~s~50t~s~100t~s~%"
       (monitor-data-sourcefile item)
       (monitor-data-name item)
       (monitor-data-count item))))))

@

\defun{monitor-checkpoint}{Save the *monitor-table* in loadable form}
\uses{monitor-checkpoint}{*monitor-table*}
\uses{monitor-checkpoint}{*print-package*}
<<defun monitor-checkpoint>>=
(defun monitor-checkpoint (file)
 "save the *monitor-table* in loadable form"
 (let ((*print-package* t))
  (declare (special *print-package* *monitor-table*))
  (with-open-file (out file :direction :output)
   (format out "(in-package \"BOOT\")~%")
   (format out "(monitor-inittable)~%")
   (dolist (data (monitor-results))
    (format out "(monitor-add '~s ~s)~%"
     (monitor-data-name data)
     (monitor-data-sourcefile data))
    (format out "(setf (gethash '~s *monitor-table*) 
                  (make-monitor-data :name '~s :count ~s :monitorp ~s
                                     :sourcefile ~s))~%"
     (monitor-data-name data)
     (monitor-data-name data)
     (monitor-data-count data)
     (monitor-data-monitorp data)
     (monitor-data-sourcefile data))))))

@

\defun{monitor-restore}{restore a checkpointed file}
<<defun monitor-restore>>=
(defun monitor-restore (file)
 "restore a checkpointed file"
 (load file))

@

\defun{monitor-help}{Printing help documentation}
<<defun monitor-help>>=
(defun monitor-help ()
 (format t "~%
;;; MONITOR                                                                
;;;                                                                        
;;; This file contains a set of function for monitoring the execution      
;;; of the functions in a file. It constructs a hash table that contains   
;;; the function name as the key and monitor-data structures as the value  
;;;                                                                        
;;; The technique is to use a :cond parameter on trace to call the         
;;; monitor-incr function to incr the count every time a function is called
;;;                                                                        
;;; *monitor-table*                                HASH TABLE              
;;;    is the monitor table containing the hash entries                    
;;; *monitor-nrlibs*                               LIST of STRING
;;;    list of nrlib filenames that are monitored
;;; *monitor-domains*                              LIST of STRING
;;;    list of domains to monitor-report (default is all exposed domains)
;;; monitor-data                                   STRUCTURE               
;;;    is the defstruct name of records in the table                       
;;;    name is the first field and is the name of the monitored function   
;;;    count contains a count of times the function was called             
;;;    monitorp is a flag that skips counting if nil, counts otherwise     
;;;    sourcefile is the name of the file that contains the source code    
;;;                                                                        
;;;  ***** SETUP, SHUTDOWN ****                                            
;;;                                                                        
;;; monitor-inittable ()                           FUNCTION                
;;;    creates the hashtable and sets *monitor-table*                      
;;;    note that it is called every time this file is loaded               
;;; monitor-end ()                                 FUNCTION                
;;;    unhooks all of the trace hooks                                      
;;;                                                                        
;;;  ***** TRACE, UNTRACE *****                                            
;;;                                                                        
;;; monitor-add (name &optional sourcefile)        FUNCTION                
;;;    sets up the trace and adds the function to the table                
;;; monitor-delete (fn)                            FUNCTION                
;;;    untraces a function and removes it from the table                   
;;; monitor-enable (&optional fn)                  FUNCTION                
;;;    starts tracing for all (or optionally one) functions that           
;;;    are in the table                                                    
;;; monitor-disable (&optional fn)                 FUNCTION                
;;;    stops tracing for all (or optionally one) functions that            
;;;    are in the table                                                    
;;;                                                                        
;;; ***** COUNTING, RECORDING  *****                                       
;;;                                                                        
;;; monitor-reset (&optional fn)                   FUNCTION                
;;;    reset the table count for the table (or optionally, for a function) 
;;; monitor-incr (fn)                              FUNCTION                
;;;    increments the count information for a function                     
;;;    it is called by trace to increment the count                        
;;; monitor-decr (fn)                              FUNCTION                
;;;    decrements the count information for a function                     
;;; monitor-info (fn)                              FUNCTION                
;;;    returns the monitor-data structure for a function                   
;;;                                                                        
;;; ***** FILE IO *****                                                    
;;;                                                                        
;;; monitor-write (items file)                     FUNCTION                
;;;    writes a list of symbols or structures to a file                    
;;; monitor-file (file)                            FUNCTION                
;;;    will read a file, scan for defuns, monitor each defun               
;;;    NOTE: monitor-file assumes that the file has been loaded            
;;;                                                                        
;;; ***** RESULTS *****                                                    
;;;                                                                        
;;; monitor-results ()                             FUNCTION                
;;;    returns a list of the monitor-data structures                       
;;; monitor-untested ()                            FUNCTION                
;;;    returns a list of files that have zero counts                       
;;; monitor-tested (&optional delete)              FUNCTION                
;;;    returns a list of files that have nonzero counts                    
;;;    optionally calling monitor-delete on those functions
;;;
;;; ***** CHECKPOINT/RESTORE *****
;;;
;;; monitor-checkpoint (file)                     FUNCTION
;;;    save the *monitor-table* in a loadable form
;;; monitor-restore (file)                        FUNCTION
;;;   restore a checkpointed file so that everything is monitored
;;;
;;; ***** ALGEBRA *****
;;;
;;; monitor-autoload ()                           FUNCTION
;;;   traces autoload of algebra to monitor corresponding source files
;;;   NOTE: this requires the /spad/int/algebra directory
;;; monitor-dirname (args)                        FUNCTION
;;;   expects a list of 1 libstream (loadvol's arglist) and monitors the source
;;;   this is a function called by monitor-autoload 
;;; monitor-nrlib (nrlib)                         FUNCTION
;;;   takes an nrlib name as a string (eg POLY) and returns a list of 
;;;   monitor-data structures from that source file
;;; monitor-report ()                             FUNCTION
;;;   generate a report of the monitored activity for domains in 
;;;   *monitor-domains*
;;; monitor-spadfile (name)                       FUNCTION
;;;   given a spad file, report all nrlibs it creates
;;;   this adds each nrlib name to *monitor-domains* but does not
;;;   trace the functions from those domains
;;; monitor-percent ()                            FUNCTION
;;;   ratio of (functions executed)/(functions traced)
;;; monitor-apropos (str)                         FUNCTION
;;;   given a string, find all monitored symbols containing the string
;;;   the search is case-insensitive. returns a list of monitor-data items
") nil)


@

\subsection{Monitoring algebra files}
\defun{monitor-dirname}{Monitoring algebra code.lsp files}
\uses{monitor-dirname}{*monitor-nrlibs*}
<<defun monitor-dirname>>=
(defun monitor-dirname (args)
  "expects a list of 1 libstream (loadvol's arglist) and monitors the source"
 (let (name)
 (declare (special *monitor-nrlibs*))
  (setq name (libstream-dirname (car args)))
  (setq name (file-namestring name))
  (setq name (concatenate 'string "/spad/int/algebra/" name "/code.lsp"))
  (when (probe-file name)
   (push name *monitor-nrlibs*)
   (monitor-file name))))

@

\defun{monitor-autoload}{Monitor autoloaded files}
<<defun monitor-autoload>>=
(defun monitor-autoload ()
 "traces autoload of algebra to monitor corresponding source files"
 (trace (vmlisp::loadvol 
          :entrycond nil
          :exitcond (progn (monitor-dirname system::arglist) nil))))

@

\defun{monitor-nrlib}{Monitor an nrlib}
\uses{monitor-nrlib}{*monitor-table*}
<<defun monitor-nrlib>>=
(defun monitor-nrlib (nrlib)
 "takes an nrlib name as a string (eg POLY) and returns a list of 
  monitor-data structures from that source file"
 (let (result)
 (declare (special *monitor-table*))
  (maphash 
   #'(lambda (k v)
      (declare (ignore k))
      (when (string= nrlib 
             (pathname-name (car (last
                (pathname-directory (monitor-data-sourcefile v))))))
       (push v result)))
   *monitor-table*)
 result))

@

\defun{monitor-libname}{Given a monitor-data item, extract the nrlib name}
<<defun monitor-libname>>=
(defun monitor-libname (item)
  "given a monitor-data item, extract the nrlib name"
  (pathname-name (car (last
   (pathname-directory (monitor-data-sourcefile item))))))

@

\defun{monitor-exposedp}{Is this an exposed algebra function?}
<<defun monitor-exposedp>>=
(defun monitor-exposedp (fn)
 "exposed functions have more than 1 semicolon. given a symbol, count them"
   (> (count #\; (symbol-name fn)) 1))

@

\defun{monitor-readinterp}{Monitor exposed domains}
\tpdhere{note that the file interp.exposed no longer exists.}
The exposure information is now in bookvol5.
This needs to work off the internal exposure list, not the file.
\catches{monitor-readinterp}{done}
\throws{monitor-readinterp}{done}
\uses{monitor-readinterp}{*monitor-domains*}
<<defun monitor-readinterp>>=
(defun monitor-readinterp ()
  "read interp.exposed to initialize *monitor-domains* to exposed domains.
   this is the default action. adding or deleting domains from the list
   will change the report results"
  (let (skip expr name)
   (declare (special *monitor-domains*))
   (setq *monitor-domains* nil)
   (with-open-file (in "/spad/src/algebra/interp.exposed")
    (read-line in)
    (read-line in)
    (read-line in)
    (read-line in)
    (catch 'done
     (loop
      (setq expr (read-line in nil "done"))
      (when (string= expr "done") (throw 'done nil))
      (cond
       ((string= expr "basic") (setq skip nil))
       ((string= expr "categories") (setq skip t))
       ((string= expr "hidden") (setq skip t))
       ((string= expr "defaults") (setq skip nil)))
      (when (and (not skip) (> (length expr) 58))
       (setq name (subseq expr 58 (length expr)))
       (setq name (string-right-trim '(#\space) name))
       (when (> (length name) 0)
        (push name *monitor-domains*))))))))

@

\defun{monitor-report}{Generate a report of the monitored domains}
\calls{monitor-report}{monitor-readinterp}
\uses{monitor-report}{*monitor-domains*}
<<defun monitor-report>>=
(defun monitor-report ()
 "generate a report of the monitored activity for domains in *monitor-domains*"
 (let (nrlibs nonzero total)
 (declare (special *monitor-domains*))
  (unless *monitor-domains* (monitor-readinterp))
  (setq nonzero 0)
  (setq total 0)
  (maphash 
   #'(lambda (k v)
      (declare (ignore k))
      (let (nextlib point)
       (when (> (monitor-data-count v) 0) (incf nonzero))
       (incf total)
       (setq nextlib (monitor-libname v))
       (setq point (member nextlib nrlibs :test #'string= :key #'car))
       (if point
         (setf (cdr (first point)) (cons v (cdr (first point))))
         (push (cons nextlib (list v)) nrlibs))))
   *monitor-table*)
  (format t "~d of ~d (~d percent) tested~%" nonzero total 
    (round (/ (* 100.0 nonzero) total)))
  (setq nrlibs (sort nrlibs #'string< :key #'car))
  (dolist (pair nrlibs)
   (let ((exposedcount 0) (testcount 0))
    (when (member (car pair) *monitor-domains* :test #'string=)
     (format t "for library ~s~%" (car pair))
     (dolist (item (sort (cdr pair)  #'> :key #'monitor-data-count))
      (when (monitor-exposedp (monitor-data-name item))
       (incf exposedcount)
       (when (> (monitor-data-count item) 0) (incf testcount))
       (format t "~5d ~s~%" 
         (monitor-data-count item) 
         (monitor-data-name item))))
      (if (= exposedcount testcount)
       (format t "~a has all exposed functions tested~%" (car pair))
       (format t "Daly bug:~a has untested exposed functions~%" (car pair))))))
 nil))

@

\defun{monitor-parse}{Parse an )abbrev expression for the domain name}
<<defun monitor-parse>>=
(defun monitor-parse (expr)
  (let (point1 point2)
   (setq point1 (position #\space expr :test #'char=))
   (setq point1 (position #\space expr :start point1 :test-not #'char=))
   (setq point1 (position #\space expr :start point1 :test #'char=))
   (setq point1 (position #\space expr :start point1 :test-not #'char=))
   (setq point2 (position #\space expr :start point1 :test #'char=))
   (subseq expr point1 point2)))

@

\defun{monitor-spadfile}{Given a spad file, report all nrlibs it creates}
\catches{monitor-spadfile}{done}
\throws{monitor-spadfile}{done}
\calls{monitor-spadfile}{monitor-parse}
\uses{monitor-spadfile}{*monitor-domains*}
<<defun monitor-spadfile>>=
(defun monitor-spadfile (name)
 "given a spad file, report all nrlibs it creates"
 (let (expr)
 (declare (special *monitor-domains*))
  (with-open-file (in name)
   (catch 'done
    (loop
     (setq expr (read-line in nil 'done))
     (when (eq expr 'done) (throw 'done nil))
     (when (and (> (length expr) 4) (string= (subseq expr 0 4) ")abb"))
      (setq *monitor-domains* 
       (adjoin (monitor-parse expr) *monitor-domains* :test #'string=))))))))

@

\defun{monitor-percent}{Print percent of functions tested}
\uses{monitor-percent}{*monitor-table*}
<<defun monitor-percent>>=
(defun monitor-percent ()
 "Print percent of functions tested"
 (let (nonzero total)
 (declare (special *monitor-table*))
  (setq nonzero 0)
  (setq total 0)
  (maphash 
   #'(lambda (k v)
      (declare (ignore k))
      (when (> (monitor-data-count v) 0) (incf nonzero))
      (incf total))
   *monitor-table*)
   (format t "~d of ~d (~d percent) tested~%" nonzero total 
     (round (/ (* 100.0 nonzero) total)))))

@

\defun{monitor-apropos}{Find all monitored symbols containing the string}
\uses{monitor-apropos}{*monitor-table*}
<<defun monitor-apropos>>=
(defun monitor-apropos (str)
  "given a string, find all monitored symbols containing the string
   the search is case-insensitive. returns a list of monitor-data items"
 (let (result)
  (maphash 
   #'(lambda (k v)
      (when
       (search (string-upcase str) 
               (string-upcase (symbol-name k)) 
               :test #'string=)
        (push v result)))
   *monitor-table*)
 result))

@

\chapter{The Interpreter}
<<Interpreter>>=
(setq *print-array* nil)
(setq *print-circle* nil)
(setq *print-pretty* nil)

(in-package "BOOT")
<<initvars>>

<<defmacro assq>>
<<defmacro bit-to-truth>>
<<defmacro bvec-elt>>
<<defmacro bvec-setelt>>
<<defmacro bvec-size>>
<<defmacro DFAdd>>
<<defmacro DFAcos>>
<<defmacro DFAcosh>>
<<defmacro DFAsin>>
<<defmacro DFAsinh>>
<<defmacro DFAtan>>
<<defmacro DFAtan2>>
<<defmacro DFAtanh>>
<<defmacro DFCos>>
<<defmacro DFCosh>>
<<defmacro DFDivide>>
<<defmacro DFEql>>
<<defmacro DFExp>>
<<defmacro DFExpt>>
<<defmacro DFIntegerDivide>>
<<defmacro DFIntegerExpt>>
<<defmacro DFIntegerMultiply>>
<<defmacro DFLessThan>>
<<defmacro DFLog>>
<<defmacro DFLogE>>
<<defmacro DFMax>>
<<defmacro DFMin>>
<<defmacro DFMinusp>>
<<defmacro DFMultiply>>
<<defmacro DFSin>>
<<defmacro DFSinh>>
<<defmacro DFSqrt>>
<<defmacro DFSubtract>>
<<defmacro DFTan>>
<<defmacro DFTanh>>
<<defmacro DFUnaryMinus>>
<<defmacro DFZerop>>
<<defmacro funfind>>
<<defmacro hget>>
<<defmacro idChar?>>
<<defmacro identp>>
<<defmacro memq>>
<<defmacro Rest>>
<<defmacro startsId?>>
<<defmacro truth-to-bit>>
<<defmacro while>>
<<defmacro whileWithResult>>

<<defun abbQuery>>
<<defun abbreviations>>
<<defun abbreviationsSpad2Cmd>>
<<defun acot>>
<<defun acoth>>
<<defun acsc>>
<<defun acsch>>
<<defun addBinding>>
<<defun addBindingInteractive>>
<<defun addInputLibrary>>
<<defun addNewInterpreterFrame>>
<<defun addoperations>>
<<defun addTraceItem>>
<<defun allConstructors>>
<<defun allOperations>>
<<defun alqlGetOrigin>>
<<defun alqlGetParams>>
<<defun alqlGetKindString>>
<<defun alreadyOpened?>>
<<defun apropos>>
<<defun asec>>
<<defun asech>>
<<defun assertCond>>
<<defun augmentTraceNames>>

<<defun break>>
<<defun breaklet>>
<<defun brightprint>>
<<defun brightprint-0>>
<<defun browse>>
<<defun browseOpen>>
<<defun bvec-and>>
<<defun bvec-concat>>
<<defun bvec-copy>>
<<defun bvec-equal>>
<<defun bvec-greater>>
<<defun bvec-make-full>>
<<defun bvec-nand>>
<<defun bvec-nor>>
<<defun bvec-not>>
<<defun bvec-or>>
<<defun bvec-xor>>

<<defun cacheKeyedMsg>>
<<defun categoryOpen>>
<<defun changeHistListLen>>
<<defun changeToNamedInterpreterFrame>>
<<defun charDigitVal>>
<<defun cleanline>>
<<defun cleanupLine>>
<<defun clear>>
<<defun clearCmdAll>>
<<defun clearCmdCompletely>>
<<defun clearCmdExcept>>
<<defun clearCmdParts>>
<<defun clearCmdSortedCaches>>
<<defun clearFrame>>
<<defun clearMacroTable>>
<<defun clearParserMacro>>
<<defun clearSpad2Cmd>>
<<defun close>>
<<defun closeInterpreterFrame>>
<<defun coerceSpadArgs2E>>
<<defun coerceSpadFunValue2E>>
<<defun coerceTraceArgs2E>>
<<defun coerceTraceFunValue2E>>
<<defun commandAmbiguityError>>
<<defun commandError>>
<<defun commandErrorIfAmbiguous>>
<<defun commandErrorMessage>>
<<defun commandsForUserLevel>>
<<defun commandUserLevelError>>
<<defun compareposns>>
<<defun compileBoot>>
<<defun compiler>>
<<defun compressOpen>>
<<defun concat>>
<<defun constoken>>
<<defun copyright>>
<<defun cot>>
<<defun coth>>
<<defun countCache>>
<<defun createCurrentInterpreterFrame>>
<<defun credits>>
<<defun csc>>
<<defun csch>>

<<defun DaaseName>>
<<defun decideHowMuch>>
<<defun defiostream>>
<<defun Delay>>
<<defun deldatabase>>
<<defun deleteFile>>
<<defun describe>>
<<defun describeAsharpArgs>>
<<defun describeFortPersistence>>
<<defun describeInputLibraryArgs>>
<<defun describeOutputLibraryArgs>>
<<defun describeProtectedSymbolsWarning>>
<<defun describeProtectSymbols>>
<<defun describeSetFortDir>>
<<defun describeSetFortTmpDir>>
<<defun describeSetFunctionsCache>>
<<defun describeSetLinkerArgs>>
<<defun describeSetNagHost>>
<<defun describeSetOutputAlgebra>>
<<defun describeSetOutputFormula>>
<<defun describeSetOutputFortran>>
<<defun describeSetOutputMathml>>
<<defun describeSetOutputOpenMath>>
<<defun describeSetOutputTex>>
<<defun describeSetStreamsCalculate>>
<<defun describeSpad2Cmd>>
<<defun desiredMsg>>
<<defun dewritify>>
<<defun dewritify,dewritifyInner>>
<<defun dewritify,is?>>
<<defun diffAlist>>
<<defun digit?>>
<<defun digitp>>
<<defun DirToString>>
<<defun disableHist>>
<<defun display>>
<<defun displayCondition>>
<<defun displayExposedConstructors>>
<<defun displayExposedGroups>>
<<defun displayFrameNames>>
<<defun displayHiddenConstructors>>
<<defun displayMacro>>
<<defun displayMacros>>
<<defun displayMode>>
<<defun displayModemap>>
<<defun displayOperations>>
<<defun displayOperationsFromLisplib>>
<<defun displayProperties>>
<<defun displayProperties,sayFunctionDeps>>
<<defun displaySetOptionInformation>>
<<defun displaySetVariableSettings>>
<<defun displaySpad2Cmd>>
<<defun displayType>>
<<defun displayValue>>
<<defun displayWorkspaceNames>>
<<defun divide2>>
<<defun domainToGenvar>>
<<defun doSystemCommand>>
<<defun dqAppend>>
<<defun dqConcat>>
<<defun dqToList>>
<<defun dqUnit>>
<<defun dropInputLibrary>>
<<defun dumbTokenize>>

<<defun edit>>
<<defun editFile>>
<<defun editSpad2Cmd>>
<<defun Else?>>
<<defun Elseif?>>
<<defun emptyInterpreterFrame>>
<<defun enPile>>
<<defun eofp>>
<<defun eqpileTree>>
<<defun erMsgCompare>>
<<defun erMsgSep>>
<<defun erMsgSort>>
<<defun ExecuteInterpSystemCommand>>
<<defun executeQuietCommand>>

<<defun fetchKeyedMsg>>
<<defun fetchOutput>>
<<defun fillerSpaces>>
<<defun filterAndFormatConstructors>>
<<defun filterListOfStrings>>
<<defun filterListOfStringsWithFn>>
<<defun findFrameInRing>>
<<defun firstTokPosn>>
<<defun fixObjectForPrinting>>
<<defun flatten>>
<<defun flattenOperationAlist>>
<<defun float2Sex>>
<<defun fnameDirectory>>
<<defun fnameExists?>>
<<defun fnameMake>>
<<defun fnameName>>
<<defun fnameNew>>
<<defun fnameReadable?>>
<<defun fnameType>>
<<defun fnameWritable?>>
<<defun frame>>
<<defun frameEnvironment>>
<<defun frameExposureData>>
<<defun frameHiFiAccess>>
<<defun frameHistList>>
<<defun frameHistListAct>>
<<defun frameHistListLen>>
<<defun frameHistoryTable>>
<<defun frameHistRecord>>
<<defun frameInteractive>>
<<defun frameIOIndex>>
<<defun frameName>>
<<defun frameNames>>
<<defun frameSpad2Cmd>>
<<defun From>>
<<defun FromTo>>
<<defun functionp>>
<<defun funfind,LAM>>

<<defun genDomainTraceName>>
<<defun gensymInt>>
<<defun getAliasIfTracedMapParameter>>
<<defun getAndSay>>
<<defun getBpiNameIfTracedMap>>
<<defun getBrowseDatabase>>
<<defun get-current-directory>>
<<defun getdatabase>>
<<defun getDirectoryList>>
<<defun getenviron>>
<<defun getErFromDbL>>
<<defun getFirstWord>>
<<defun getKeyedMsg>>
<<defun getLinePos>>
<<defun getLineText>>
<<defun getMapSig>>
<<defun getMapSubNames>>
<<defun getMsgArgL>>
<<defun getMsgCatAttr>>
<<defun getMsgFTTag?>>
<<defun getMsgInfoFromKey>>
<<defun getMsgKey>>
<<defun getMsgKey?>>
<<defun getMsgLitSym>>
<<defun getMsgPrefix>>
<<defun getMsgPos>>
<<defun getMsgPos2>>
<<defun getMsgPosTagOb>>
<<defun getMsgPrefix?>>
<<defun getMsgTag>>
<<defun getMsgTag?>>
<<defun getMsgText>>
<<defun getMsgToWhere>>
<<defun getOption>>
<<defun getParserMacroNames>>
<<defun getPosStL>>
<<defun getPreStL>>
<<defun getPreviousMapSubNames>>
<<defun getProplist>>
<<defun getStFromMsg>>
<<defun getSystemCommandLine>>
<<defun getTraceOption>>
<<defun getTraceOption,hn>>
<<defun getTraceOptions>>
<<defun getWorkspaceNames>>

<<defun handleNoParseCommands>>
<<defun handleParsedSystemCommands>>
<<defun handleTokensizeSystemCommands>>
<<defun hashable>>
<<defun hasOptArgs?>>
<<defun hasOption>>
<<defun hasPair>>
<<defun help>>
<<defun helpSpad2Cmd>>
<<defun histFileErase>>
<<defun histFileName>>
<<defun histInputFileName>>
<<defun history>>
<<defun historySpad2Cmd>>
<<defun hkeys>>
<<defun hput>>

<<defun If?>>
<<defun ifCond>>
<<defun importFromFrame>>
<<defun incActive?>>
<<defun incAppend>>
<<defun incAppend1>>
<<defun incBiteOff>>
<<defun incClassify>>
<<defun incCommand?>>
<<defun incCommandTail>>
<<defun incConsoleInput>>
<<defun incDrop>>
<<defun incFileInput>>
<<defun incFileName>>
<<defun incHandleMessage>>
<<defun incIgen>>
<<defun incIgen1>>
<<defun inclFname>>
<<defun incLine>>
<<defun incLine1>>
<<defun inclmsgCannotRead>>
<<defun inclmsgConsole>>
<<defun inclmsgFileCycle>>
<<defun inclmsgFinSkipped>>
<<defun inclmsgPrematureEOF>>
<<defun inclmsgPrematureFin>>
<<defun incLude>>
<<defun incLude1>>
<<defun inclmsgCmdBug>>
<<defun inclmsgConActive>>
<<defun inclmsgConStill>>
<<defun inclmsgIfBug>>
<<defun inclmsgIfSyntax>>
<<defun inclmsgNoSuchFile>>
<<defun inclmsgSay>>
<<defun incNConsoles>>
<<defun incPrefix?>>
<<defun incRenumber>>
<<defun incRenumberItem>>
<<defun incRenumberLine>>
<<defun incRgen>>
<<defun incRgen1>>
<<defun incStream>>
<<defun incString>>
<<defun incZip>>
<<defun incZip1>>
<<defun init-boot/spad-reader>>
<<defun initHist>>
<<defun initHistList>>
<<defun initial-getdatabase>>
<<defun initializeInterpreterFrameRing>>
<<defun initializeSetVariables>>
<<defun initImPr>>
<<defun init-memory-config>>
<<defun initroot>>
<<defun initToWhere>>
<<defun insertpile>>
<<defun insertPos>>
<<defun integer-decode-float-denominator>>
<<defun integer-decode-float-exponent>>
<<defun integer-decode-float-numerator>>
<<defun integer-decode-float-sign>>
<<defun InterpExecuteSpadSystemCommand>>
<<defun interpFunctionDepAlists>>
<<defun interpOpen>>
<<defun interpret>>
<<defun interpret1>>
<<defun interpret2>>
<<defun interpretTopLevel>>
<<defun intInterpretPform>>
<<defun intloop>>
<<defun intloopEchoParse>>
<<defun intloopInclude>>
<<defun intloopInclude0>>
<<defun intnplisp>>
<<defun intloopPrefix?>>
<<defun intloopProcess>>
<<defun intloopProcessString>>
<<defun intloopReadConsole>>
<<defun intloopSpadProcess>>
<<defun intloopSpadProcess,interp>>
<<defun intProcessSynonyms>>
<<defun intSayKeyedMsg>>
<<defun isDomainOrPackage>>
<<defun isgenvar>>
<<defun isIntegerString>>
<<defun isInterpOnlyMap>>
<<defun isKeyQualityP>>
<<defun isListOfIdentifiers>>
<<defun isListOfIdentifiersOrStrings>>
<<defun isSharpVar>>
<<defun isSharpVarWithNum>>
<<defun isSubForRedundantMapName>>
<<defun isTraceGensym>>
<<defun isUncompiledMap>>

<<defun justifyMyType>>

<<defun KeepPart?>>
<<defun keyword>>
<<defun keyword?>>

<<defun lassocSub>>
<<defun lastTokPosn>>
<<defun leader?>>
<<defun leaveScratchpad>>
<<defun letPrint>>
<<defun letPrint2>>
<<defun letPrint3>>
<<defun lfcomment>>
<<defun lferror>>
<<defun lffloat>>
<<defun lfid>>
<<defun lfinteger>>
<<defun lfkey>>
<<defun lfnegcomment>>
<<defun lfrinteger>>
<<defun lfspaces>>
<<defun lfstring>>
<<defun library>>
<<defun line?>>
<<defun lineoftoks>>
<<defun listConstructorAbbreviations>>
<<defun listDecideHowMuch>>
<<defun listOutputter>>
<<defun lnCreate>>
<<defun lnExtraBlanks>>
<<defun lnFileName>>
<<defun lnFileName?>>
<<defun lnGlobalNum>>
<<defun lnImmediate?>>
<<defun lnLocalNum>>
<<defun lnPlaceOfOrigin>>
<<defun lnSetGlobalNum>>
<<defun lnString>>
<<defun load>>
<<defun localdatabase>>
<<defun localnrlib>>
<<defun loopIters2Sex>>
<<defun lotsof>>
<<defun ltrace>>

<<defun macApplication>>
<<defun macExpand>>
<<defun macId>>
<<defun macLambda>>
<<defun macLambda,mac>>
<<defun macLambdaParameterHandling>>
<<defun macMacro>>
<<defun macSubstituteId>>
<<defun macSubstituteOuter>>
<<defun macroExpanded>>
<<defun macWhere>>
<<defun macWhere,mac>>
<<defun mac0Define>>
<<defun mac0ExpandBody>>
<<defun mac0Get>>
<<defun mac0GetName>>
<<defun mac0InfiniteExpansion>>
<<defun mac0InfiniteExpansion,name>>
<<defun mac0MLambdaApply>>
<<defun mac0SubstituteOuter>>
<<defun make-absolute-filename>>
<<defun make-appendstream>>
<<defun make-databases>>
<<defun makeFullNamestring>>
<<defun makeHistFileName>>
<<defun makeInitialModemapFrame>>
<<defun makeInputFilename>>
<<defun make-instream>>
<<defun makeLeaderMsg>>
<<defun makeMsgFromLine>>
<<defun make-outstream>>
<<defun makePathname>>
<<defun makeStream>>
<<defun manexp>>
<<defun mapLetPrint>>
<<defun member>>
<<defun mergePathnames>>
<<defun messageprint>>
<<defun messageprint-1>>
<<defun messageprint-2>>
<<defun mkLineList>>
<<defun mkprompt>>
<<defun monitor-add>>
<<defun monitor-apropos>>
<<defun monitor-autoload>>
<<defun monitor-checkpoint>>
<<defun monitor-decr>>
<<defun monitor-delete>>
<<defun monitor-dirname>>
<<defun monitor-disable>>
<<defun monitor-enable>>
<<defun monitor-end>>
<<defun monitor-exposedp>>
<<defun monitor-file>>
<<defun monitor-help>>
<<defun monitor-incr>>
<<defun monitor-info>>
<<defun monitor-inittable>>
<<defun monitor-libname>>
<<defun monitor-nrlib>>
<<defun monitor-parse>>
<<defun monitor-percent>>
<<defun monitor-readinterp>>
<<defun monitor-report>>
<<defun monitor-reset>>
<<defun monitor-restore>>
<<defun monitor-results>>
<<defun monitor-spadfile>>
<<defun monitor-tested>>
<<defun monitor-untested>>
<<defun monitor-write>>
<<defun msgCreate>>
<<defun msgImPr?>>
<<defun msgNoRep?>>
<<defun msgOutputter>>
<<defun msgText>>
<<defun myWritable?>>

<<defun namestring>>
<<defun ncAlist>>
<<defun ncBug>>
<<defun ncConversationPhase>>
<<defun ncConversationPhase,wrapup>>
<<defun ncEltQ>>
<<defun ncError>>
<<defun ncHardError>>
<<defun ncIntLoop>>
<<defun ncloopCommand>>
<<defun ncloopDQlines>>
<<defun ncloopEscaped>>
<<defun ncloopIncFileName>>
<<defun ncloopInclude>>
<<defun ncloopInclude0>>
<<defun ncloopInclude1>>
<<defun ncloopParse>>
<<defun ncloopPrefix?>>
<<defun ncloopPrintLines>>
<<defun ncPutQ>>
<<defun ncSoftError>>
<<defun ncTag>>
<<defun ncTopLevel>>
<<defun newHelpSpad2Cmd>>
<<defun next>>
<<defun next1>>
<<defun nextInterpreterFrame>>
<<defun nextline>>
<<defun next-lines-clear>>
<<defun nonBlank>>
<<defun npAdd>>
<<defun npADD>>
<<defun npAmpersand>>
<<defun npAmpersandFrom>>
<<defun npAndOr>>
<<defun npAngleBared>>
<<defun npAnyNo>>
<<defun npApplication>>
<<defun npApplication2>>
<<defun npArith>>
<<defun npAssign>>
<<defun npAssignment>>
<<defun npAssignVariable>>
<<defun npAtom1>>
<<defun npAtom2>>
<<defun npBacksetElse>>
<<defun npBackTrack>>
<<defun npBDefinition>>
<<defun npboot>>
<<defun npBPileDefinition>>
<<defun npBraced>>
<<defun npBracked>>
<<defun npBracketed>>
<<defun npBreak>>
<<defun npBy>>
<<defun npCategory>>
<<defun npCategoryL>>
<<defun npCoerceTo>>
<<defun npColon>>
<<defun npColonQuery>>
<<defun npComma>>
<<defun npCommaBackSet>>
<<defun npCompMissing>>
<<defun npConditional>>
<<defun npConditionalStatement>>
<<defun npConstTok>>
<<defun npDDInfKey>>
<<defun npDecl>>
<<defun npDef>>
<<defun npDefaultDecl>>
<<defun npDefaultItem>>
<<defun npDefaultItemlist>>
<<defun npDefaultValue>>
<<defun npDefinition>>
<<defun npDefinitionItem>>
<<defun npDefinitionlist>>
<<defun npDefinitionOrStatement>>
<<defun npDefn>>
<<defun npDefTail>>
<<defun npDiscrim>>
<<defun npDisjand>>
<<defun npDollar>>
<<defun npDotted>>
<<defun npElse>>
<<defun npEncAp>>
<<defun npEncl>>
<<defun npEnclosed>>
<<defun npEqKey>>
<<defun npEqPeek>>
<<defun npExit>>
<<defun npExpress>>
<<defun npExpress1>>
<<defun npExport>>
<<defun npFirstTok>>
<<defun npFix>>
<<defun npForIn>>
<<defun npFree>>
<<defun npFromdom>>
<<defun npFromdom1>>
<<defun npGives>>
<<defun npId>>
<<defun npImport>>
<<defun npInfGeneric>>
<<defun npInfixOp>>
<<defun npInfixOperator>>
<<defun npInfKey>>
<<defun npInline>>
<<defun npInterval>>
<<defun npItem>>
<<defun npItem1>>
<<defun npIterate>>
<<defun npIterator>>
<<defun npIterators>>
<<defun npLambda>>
<<defun npLeftAssoc>>
<<defun npLet>>
<<defun npLetQualified>>
<<defun nplisp>>
<<defun npList>>
<<defun npListAndRecover>>
<<defun npListing>>
<<defun npListofFun>>
<<defun npLocal>>
<<defun npLocalDecl>>
<<defun npLocalItem>>
<<defun npLocalItemlist>>
<<defun npLogical>>
<<defun npLoop>>
<<defun npMacro>>
<<defun npMatch>>
<<defun npMdef>>
<<defun npMDEF>>
<<defun npMDEFinition>>
<<defun npMissing>>
<<defun npMissingMate>>
<<defun npMoveTo>>
<<defun npName>>
<<defun npNext>>
<<defun npNull>>
<<defun npParened>>
<<defun npParenthesize>>
<<defun npParenthesized>>
<<defun npParse>>
<<defun npPDefinition>>
<<defun npPileBracketed>>
<<defun npPileDefinitionlist>>
<<defun npPileExit>>
<<defun npPop1>>
<<defun npPop2>>
<<defun npPop3>>
<<defun npPower>>
<<defun npPP>>
<<defun npPPf>>
<<defun npPPff>>
<<defun npPPg>>
<<defun npPrefixColon>>
<<defun npPretend>>
<<defun npPrimary>>
<<defun npPrimary1>>
<<defun npPrimary2>>
<<defun npProcessSynonym>>
<<defun npProduct>>
<<defun npPush>>
<<defun npPushId>>
<<defun npRelation>>
<<defun npRemainder>>
<<defun npQualDef>>
<<defun npQualified>>
<<defun npQualifiedDefinition>>
<<defun npQualType>>
<<defun npQualTypelist>>
<<defun npQuiver>>
<<defun npRecoverTrap>>
<<defun npRestore>>
<<defun npRestrict>>
<<defun npReturn>>
<<defun npRightAssoc>>
<<defun npRule>>
<<defun npSCategory>>
<<defun npSDefaultItem>>
<<defun npSegment>>
<<defun npSelector>>
<<defun npSemiBackSet>>
<<defun npSemiListing>>
<<defun npSigDecl>>
<<defun npSigItem>>
<<defun npSigItemlist>>
<<defun npSignature>>
<<defun npSignatureDefinee>>
<<defun npSingleRule>>
<<defun npSLocalItem>>
<<defun npSQualTypelist>>
<<defun npStatement>>
<<defun npSuch>>
<<defun npSuchThat>>
<<defun npSum>>
<<defun npsynonym>>
<<defun npSymbolVariable>>
<<defun npSynthetic>>
<<defun npsystem>>
<<defun npState>>
<<defun npTagged>>
<<defun npTerm>>
<<defun npTrap>>
<<defun npTrapForm>>
<<defun npTuple>>
<<defun npType>>
<<defun npTypedForm>>
<<defun npTypedForm1>>
<<defun npTypeStyle>>
<<defun npTypified>>
<<defun npTyping>>
<<defun npTypeVariable>>
<<defun npTypeVariablelist>>
<<defun npVariable>>
<<defun npVariablelist>>
<<defun npVariableName>>
<<defun npVoid>>
<<defun npWConditional>>
<<defun npWhile>>
<<defun npWith>>
<<defun npZeroOrMore>>

<<defun oldHistFileName>>
<<defun oldParseAndInterpret>>
<<defun openOutputLibrary>>
<<defun openserver>>
<<defun operationOpen>>
<<defun optionError>>
<<defun optionUserLevelError>>
<<defun opTran>>
<<defun orderBySlotNumber>>

<<defun packageTran>>
<<defun parseAndInterpret>>
<<defun parseSystemCmd>>
<<defun pathname>>
<<defun pathnameDirectory>>
<<defun pathnameName>>
<<defun pathnameType>>
<<defun pathnameTypeId>>
<<defun patternVarsOf>>
<<defun patternVarsOf1>>
<<defun pcounters>>
<<defun pfAbSynOp>>
<<defun pfAbSynOp?>>
<<defun pfAdd>>
<<defun pfAnd>>
<<defun pfAnd?>>
<<defun pfAndLeft>>
<<defun pfAndRight>>
<<defun pfAppend>>
<<defun pfApplication>>
<<defun pfApplicationArg>>
<<defun pfApplicationOp>>
<<defun pfApplication?>>
<<defun pfApplication2Sex>>
<<defun pfAssign>>
<<defun pfAssign?>>
<<defun pfAssignLhsItems>>
<<defun pfAssignRhs>>
<<defun pfAttribute>>
<<defun pfBrace>>
<<defun pfBraceBar>>
<<defun pfBracket>>
<<defun pfBracketBar>>
<<defun pfBreak>>
<<defun pfBreak?>>
<<defun pfBreakFrom>>
<<defun pfCharPosn>>
<<defun pfCheckArg>>
<<defun pfCheckMacroOut>>
<<defun pfCheckId>>
<<defun pfCheckItOut>>
<<defun pfCoerceto>>
<<defun pfCoerceto?>>
<<defun pfCoercetoExpr>>
<<defun pfCoercetoType>>
<<defun pfCollect>>
<<defun pfCollect?>>
<<defun pfCollect1?>>
<<defun pfCollectArgTran>>
<<defun pfCollectBody>>
<<defun pfCollectIterators>>
<<defun pfCollectVariable1>>
<<defun pfCollect2Sex>>
<<defun pfDefinition>>
<<defun pfDefinitionLhsItems>>
<<defun pfDefinitionRhs>>
<<defun pfDefinition?>>
<<defun pfDefinition2Sex>>
<<defun pfDo>>
<<defun pfDo?>>
<<defun pfDoBody>>
<<defun pfDocument>>
<<defun pfEnSequence>>
<<defun pfExit>>
<<defun pfExit?>>
<<defun pfExitCond>>
<<defun pfExitExpr>>
<<defun pfExport>>
<<defun pfExpression>>
<<defun pfFileName>>
<<defun pfFirst>>
<<defun pfFix>>
<<defun pfFlattenApp>>
<<defun pfFree>>
<<defun pfFree?>>
<<defun pfFreeItems>>
<<defun pfForin>>
<<defun pfForin?>>
<<defun pfForinLhs>>
<<defun pfForinWhole>>
<<defun pfFromDom>>
<<defun pfFromdom>>
<<defun pfFromdom?>>
<<defun pfFromdomDomain>>
<<defun pfFromdomWhat>>
<<defun pfGlobalLinePosn>>
<<defun pfHide>>
<<defun pfId>>
<<defun pfId?>>
<<defun pfIdPos>>
<<defun pfIdSymbol>>
<<defun pfIf>>
<<defun pfIf?>>
<<defun pfIfCond>>
<<defun pfIfElse>>
<<defun pfIfThen>>
<<defun pfIfThenOnly>>
<<defun pfImport>>
<<defun pfInline>>
<<defun pfInfApplication>>
<<defun pfIterate>>
<<defun pfIterate?>>
<<defun pfLam>>
<<defun pfLambda>>
<<defun pfLambdaArgs>>
<<defun pfLambdaBody>>
<<defun pfLambdaRets>>
<<defun pfLambdaTran>>
<<defun pfLambda?>>
<<defun pfLambda2Sex>>
<<defun pfLeaf>>
<<defun pfLeaf?>>
<<defun pfLeafPosition>>
<<defun pfLeafToken>>
<<defun pfLhsRule2Sex>>
<<defun pfLinePosn>>
<<defun pfListOf>>
<<defun pfLiteral?>>
<<defun pfLiteralClass>>
<<defun pfLiteralString>>
<<defun pfLiteral2Sex>>
<<defun pfLocal>>
<<defun pfLocalItems>>
<<defun pfLocal?>>
<<defun pfLoopIterators>>
<<defun pfLoop>>
<<defun pfLoop1>>
<<defun pfLoop?>>
<<defun pfLp>>
<<defun pfMacro>>
<<defun pfMacro?>>
<<defun pfMacroLhs>>
<<defun pfMacroRhs>>
<<defun pfMLambda>>
<<defun pfMLambda?>>
<<defun pfMLambdaArgs>>
<<defun pfMLambdaBody>>
<<defun pfname>>
<<defun pfNoPosition>>
<<defun pfNoPosition?>>
<<defun pfNot?>>
<<defun pfNotArg>>
<<defun pfNothing>>
<<defun pfNothing?>>
<<defun pfNovalue>>
<<defun pfNovalue?>>
<<defun pfNovalueExpr>>
<<defun pfOp2Sex>>
<<defun pfOr>>
<<defun pfOr?>>
<<defun pfOrLeft>>
<<defun pfOrRight>>
<<defun pfParen>>
<<defun pfParts>>
<<defun pfPile>>
<<defun pfPretend>>
<<defun pfPretend?>>
<<defun pfPretendExpr>>
<<defun pfPretendType>>
<<defun pfPushBody>>
<<defun pfPushMacroBody>>
<<defun pfQualType>>
<<defun pfRestrict>>
<<defun pfRestrict?>>
<<defun pfRestrictExpr>>
<<defun pfRestrictType>>
<<defun pfRetractTo>>
<<defun pfReturn>>
<<defun pfReturn?>>
<<defun pfReturnExpr>>
<<defun pfReturnNoName>>
<<defun pfReturnTyped>>
<<defun pfRhsRule2Sex>>
<<defun pfRule>>
<<defun pfRuleLhsItems>>
<<defun pfRuleRhs>>
<<defun pfRule?>>
<<defun pfRule2Sex>>
<<defun pfSecond>>
<<defun pfSequence>>
<<defun pfSequenceArgs>>
<<defun pfSequence?>>
<<defun pfSequenceToList>>
<<defun pfSequence2Sex>>
<<defun pfSequence2Sex0>>
<<defun pfSexpr>>
<<defun pfSexpr,strip>>
<<defun pfSourcePosition>>
<<defun pfSourceStok>>
<<defun pfSpread>>
<<defun pfSuch>>
<<defun pfSuchthat>>
<<defun pfSuchthat?>>
<<defun pfSuchthatCond>>
<<defun pfSuchThat2Sex>>
<<defun pfSymb>>
<<defun pfSymbol>>
<<defun pfSymbol?>>
<<defun pfSymbolSymbol>>
<<defun pfTagged>>
<<defun pfTagged?>>
<<defun pfTaggedExpr>>
<<defun pfTaggedTag>>
<<defun pfTaggedToTyped>>
<<defun pfTaggedToTyped1>>
<<defun pfTransformArg>>
<<defun pfTree>>
<<defun pfTuple>>
<<defun pfTupleListOf>>
<<defun pfTweakIf>>
<<defun pfTyped>>
<<defun pfTyped?>>
<<defun pfTypedId>>
<<defun pfTypedType>>
<<defun pfTyping>>
<<defun pfTupleParts>>
<<defun pfTuple?>>
<<defun pfUnSequence>>
<<defun pfWDec>>
<<defun pfWDeclare>>
<<defun pfWhere>>
<<defun pfWhere?>>
<<defun pfWhereContext>>
<<defun pfWhereExpr>>
<<defun pfWhile>>
<<defun pfWhile?>>
<<defun pfWhileCond>>
<<defun pfWith>>
<<defun pfWrong>>
<<defun pfWrong?>>
<<defun pf0AssignLhsItems>>
<<defun pf0DefinitionLhsItems>>
<<defun pf0ForinLhs>>
<<defun pf0FreeItems>>
<<defun pf0LambdaArgs>>
<<defun pf0LocalItems>>
<<defun pf0LoopIterators>>
<<defun pf0MLambdaArgs>>
<<defun pf0SequenceArgs>>
<<defun pf0TupleParts>>
<<defun pf0WhereContext>>
<<defun pf2Sex>>
<<defun pf2Sex1>>
<<defun phBegin>>
<<defun phMacro>>
<<defun phParse>>
<<defun phInterpret>>
<<defun phIntReportMsgs>>
<<defun pileCforest>>
<<defun pileColumn>>
<<defun pileCtree>>
<<defun pileForest>>
<<defun pileForest1>>
<<defun pileForests>>
<<defun pilePlusComment>>
<<defun pilePlusComments>>
<<defun pileTree>>
<<defun pmDontQuote?>>
<<defun poCharPosn>>
<<defun poFileName>>
<<defun poGetLineObject>>
<<defun poGlobalLinePosn>>
<<defun poLinePosn>>
<<defun poNopos?>>
<<defun poNoPosition>>
<<defun poNoPosition?>>
<<defun poPosImmediate?>>
<<defun porigin>>
<<defun posend>>
<<defun posPointers>>
<<defun ppos>>
<<defun pquit>>
<<defun pquitSpad2Cmd>>
<<defun previousInterpreterFrame>>
<<defun printAsTeX>>
<<defun printLabelledList>>
<<defun printStatisticsSummary>>
<<defun printStorage>>
<<defun printSynonyms>>
<<defun printTypeAndTime>>
<<defun printTypeAndTimeNormal>>
<<defun printTypeAndTimeSaturn>>
<<defun probeName>>
<<defun processChPosesForOneLine>>
<<defun processInteractive>>
<<defun processInteractive1>>
<<defun processKeyedError>>
<<defun processMsgList>>
<<defun protectedSymbolsWarning>>
<<defun protectedEVAL>>
<<defun processSynonymLine>>
<<defun processSynonymLine,removeKeyFromLine>>
<<defun processSynonyms>>
<<defun protectSymbols>>
<<defun prTraceNames>>
<<defun prTraceNames,fn>>
<<defun pspacers>>
<<defun ptimers>>
<<defun putFTText>>
<<defun punctuation?>>
<<defun putDatabaseStuff>>
<<defun putHist>>
<<defun pvarPredTran>>

<<defun qenum>>
<<defun queryClients>>
<<defun queueUpErrors>>
<<defun quit>>
<<defun quitSpad2Cmd>>
<<defun quotient2>>

<<defun rassocSub>>
<<defun rdefinstream>>
<<defun rdefoutstream>>
<<defun rdigit?>>
<<defun read>>
<<defun /read>>
<<defun readHiFi>>
<<defun readSpadProfileIfThere>>
<<defun readSpad2Cmd>>
<<defun reclaim>>
<<defun recordAndPrint>>
<<defun recordFrame>>
<<defun recordNewValue>>
<<defun recordNewValue0>>
<<defun recordOldValue>>
<<defun recordOldValue0>>
<<defun redundant>>
<<defun remainder2>>
<<defun remFile>>
<<defun remLine>>
<<defun removeOption>>
<<defun removeTracedMapSigs>>
<<defun removeUndoLines>>
<<defun rep>>
<<defun replaceFile>>
<<defun reportOperations>>
<<defun reportOpsFromLisplib>>
<<defun reportOpsFromLisplib0>>
<<defun reportOpsFromLisplib1>>
<<defun reportOpsFromUnitDirectly>>
<<defun reportOpsFromUnitDirectly0>>
<<defun reportOpsFromUnitDirectly1>>
<<defun reportSpadTrace>>
<<defun reportUndo>>
<<defun reportWhatOptions>>
<<defun reroot>>
<<defun resetCounters>>
<<defun resethashtables>>
<<defun resetInCoreHist>>
<<defun resetSpacers>>
<<defun resetStackLimits>>
<<defun resetTimers>>
<<defun resetWorkspaceVariables>>
<<defun restart>>
<<defun restart0>>
<<defun restoreHistory>>
<<defun /rf-1>>
<<defun /rq>>
<<defun rread>>
<<defun ruleLhsTran>>
<<defun rulePredicateTran>>
<<defun runspad>>
<<defun rwrite>>

<<defun safeWritify>>
<<defun sameMsg?>>
<<defun sameUnionBranch>>
<<defun satisfiesRegularExpressions>>
<<defun satisfiesUserLevel>>
<<defun saveHistory>>
<<defun saveMapSig>>
<<defun savesystem>>
<<defun sayAllCacheCounts>>
<<defun sayBrightly1>>
<<defun sayCacheCount>>
<<defun sayExample>>
<<defun sayKeyedMsg>>
<<defun sayKeyedMsgLocal>>
<<defun sayMSG>>
<<defun sayMSG2File>>
<<defun sayShowWarning>>
<<defun scanCheckRadix>>
<<defun scanCloser?>>
<<defun scanComment>>
<<defun scanDictCons>>
<<defun scanError>>
<<defun scanEsc>>
<<defun scanEscape>>
<<defun scanExponent>>
<<defun scanIgnoreLine>>
<<defun scanInsert>>
<<defun scanKeyTr>>
<<defun scanNegComment>>
<<defun scanNumber>>
<<defun ScanOrPairVec>>
<<defun ScanOrPairVec,ScanOrInner>>
<<defun scanPossFloat>>
<<defun scanPunct>>
<<defun scanPunCons>>
<<defun scanS>>
<<defun scanSpace>>
<<defun scanString>>
<<defun scanKeyTableCons>>
<<defun scanToken>>
<<defun scanTransform>>
<<defun scanW>>
<<defun scanWord>>
<<defun search>>
<<defun searchCurrentEnv>>
<<defun searchTailEnv>>
<<defun sec>>
<<defun sech>>
<<defun segmentKeyedMsg>>
<<defun selectOption>>
<<defun selectOptionLC>>
<<defun separatePiles>>
<<defun serverReadLine>>
<<defun set>>
<<defun set1>>
<<defun setAsharpArgs>>
<<defun setCurrentLine>>
<<defun setdatabase>>
<<defun setExpose>>
<<defun setExposeAdd>>
<<defun setExposeAddConstr>>
<<defun setExposeAddGroup>>
<<defun setExposeDrop>>
<<defun setExposeDropConstr>>
<<defun setExposeDropGroup>>
<<defun setFortDir>>
<<defun setFortPers>>
<<defun setFortTmpDir>>
<<defun setFunctionsCache>>
<<defun setHistoryCore>>
<<defun setInputLibrary>>
<<defun setIOindex>>
<<defun setLinkerArgs>>
<<defun setMsgCatlessAttr>>
<<defun setMsgForcedAttr>>
<<defun setMsgForcedAttrList>>
<<defun setMsgPrefix>>
<<defun setMsgText>>
<<defun setMsgUnforcedAttr>>
<<defun setMsgUnforcedAttrList>>
<<defun setNagHost>>
<<defun setOptKeyBlanks>>
<<defun setOutputAlgebra>>
<<defun setOutputCharacters>>
<<defun setOutputFormula>>
<<defun setOutputFortran>>
<<defun setOutputLibrary>>
<<defun setOutputMathml>>
<<defun setOutputOpenMath>>
<<defun setOutputTex>>
<<defun set-restart-hook>>
<<defun setStreamsCalculate>>
<<defun shortenForPrinting>>
<<defun show>>
<<defun showdatabase>>
<<defun showInOut>>
<<defun showInput>>
<<defun showMsgPos?>>
<<defun showSpad2Cmd>>
<<defun shut>>
<<defun size>>
<<defun SkipEnd?>>
<<defun SkipPart?>>
<<defun Skipping?>>
<<defun spad>>
<<defun spadClosure?>>
<<defun SpadInterpretStream>>
<<defun spadReply>>
<<defun spadReply,printName>>
<<defun spadrread>>
<<defun spadrwrite>>
<<defun spadrwrite0>>
<<defun spad-save>>
<<defun spadStartUpMsgs>>
<<defun spadTrace>>
<<defun spadTraceAlias>>
<<defun spadTrace,g>>
<<defun spadTrace,isTraceable>>
<<defun spadUntrace>>
<<defun specialChar>>
<<defun spleI>>
<<defun spleI1>>
<<defun splitIntoOptionBlocks>>
<<defun squeeze>>
<<defun stackTraceOptionError>>
<<defun startsComment?>>
<<defun startsNegComment?>>
<<defun statisticsInitialization>>
<<defun streamChop>>
<<defun StreamNull>>
<<defun stringMatches?>>
<<defun StringToDir>>
<<defun stripLisp>>
<<defun stripSpaces>>
<<defun strpos>>
<<defun strposl>>
<<defun stupidIsSpadFunction>>
<<defun subMatch>>
<<defun substringMatch>>
<<defun subTypes>>
<<defun summary>>
<<defun syGeneralErrorHere>>
<<defun syIgnoredFromTo>>
<<defun synonym>>
<<defun synonymsForUserLevel>>
<<defun synonymSpad2Cmd>>
<<defun sySpecificErrorAtToken>>
<<defun sySpecificErrorHere>>
<<defun systemCommand>>

<<defun ?t>>
<<defun tabbing>>
<<defun terminateSystemCommand>>
<<defun tersyscommand>>
<<defun theid>>
<<defun thefname>>
<<defun theorigin>>
<<defun thisPosIsEqual>>
<<defun thisPosIsLess>>
<<defun toFile?>>
<<defun tokConstruct>>
<<defun tokPart>>
<<defun tokPosn>>
<<defun tokTran>>
<<defun tokType>>
<<defun To>>
<<defun Top?>>
<<defun toScreen?>>
<<defun trace>>
<<defun trace1>>
<<defun traceDomainConstructor>>
<<defun traceDomainLocalOps>>
<<defun tracelet>>
<<defun traceOptionError>>
<<defun /tracereply>>
<<defun traceReply>>
<<defun traceSpad2Cmd>>
<<defun trademark>>
<<defun translateTrueFalse2YesNo>>
<<defun translateYesNo2TrueFalse>>
<<defun transOnlyOption>>
<<defun transTraceItem>>

<<defun unAbbreviateKeyword>>
<<defun undo>>
<<defun undoChanges>>
<<defun undoCount>>
<<defun undoFromFile>>
<<defun undoInCore>>
<<defun undoLocalModemapHack>>
<<defun undoSingleStep>>
<<defun undoSteps>>
<<defun unescapeStringsInForm>>
<<defun unsqueeze>>
<<defun untrace>>
<<defun untraceDomainConstructor>>
<<defun untraceDomainConstructor,keepTraced?>>
<<defun untraceDomainLocalOps>>
<<defun untraceMapSubNames>>
<<defun unwritable?>>
<<defun updateCurrentInterpreterFrame>>
<<defun updateFromCurrentInterpreterFrame>>
<<defun updateHist>>
<<defun updateInCoreHist>>
<<defun updateSourceFiles>>
<<defun userLevelErrorMessage>>

<<defun validateOutputDirectory>>

<<defun what>>
<<defun whatCommands>>
<<defun whatConstructors>>
<<defun whatSpad2Cmd>>
<<defun whatSpad2Cmd,fixpat>>
<<defun whichCat>>
<<defun with>>
<<defun workfiles>>
<<defun workfilesSpad2Cmd>>
<<defun wrap>>
<<defun write-browsedb>>
<<defun write-categorydb>>
<<defun write-compress>>
<<defun writeHiFi>>
<<defun writeHistModesAndValues>>
<<defun writeInputLines>>
<<defun write-interpdb>>
<<defun write-operationdb>>
<<defun write-warmdata>>
<<defun writify>>
<<defun writifyComplain>>
<<defun writify,writifyInner>>

<<defun xlCannotRead>>
<<defun xlCmdBug>>
<<defun xlConActive>>
<<defun xlConsole>>
<<defun xlConStill>>
<<defun xlFileCycle>>
<<defun xlIfBug>>
<<defun xlIfSyntax>>
<<defun xlMsg>>
<<defun xlNoSuchFile>>
<<defun xlOK>>
<<defun xlOK1>>
<<defun xlPrematureEOF>>
<<defun xlPrematureFin>>
<<defun xlSay>>
<<defun xlSkip>>
<<defun xlSkippingFin>>

<<defun yesanswer>>

<<defun zeroOneTran>>
<<defun zsystemdevelopment>>
<<defun zsystemdevelopment1>>
<<defun zsystemDevelopmentSpad2Cmd>>

<<postvars>>

@
\chapter{The Global Variables}
\section{Star Global Variables}
\begin{tabular}{lll}
NAME                        & SET              & USE \\
*eof*                       & ncTopLevel       & \\
*features*                  &                  & restart \\
*package*                   &                  & restart \\
*standard-input*            &                  & ncIntLoop \\
*standard-output*           &                  & ncIntLoop \\
*top-level-hook*            & set-restart-hook & \\
\end{tabular}
\subsection{*eof*}
The \verb|*eof*| variable is set to NIL in ncTopLevel.
\subsection{*features*}
The \verb|*features*| variable from common lisp is tested for the presence
of the \verb|:unix| keyword. Apparently this controls the use of Saturn,
a previous Axiom frontend. The Saturn frontend was never released as
open source and so this test and the associated variables are probably
not used.

\subsection{*package*}
The \verb|*package*| variable, from common lisp, is set in restart
to the BOOT package where the intepreter lives.
\subsection{*standard-input*}
The \verb|*standard-input*| common lisp variable is used to set the 
curinstream variable in ncIntLoop. 

This variable is an argument to serverReadLine in
the intloopReadConsole function.

\subsection{*standard-output*}
The \verb|*standard-output*| common lisp variable is used to set the 
curoutstream variable in ncIntLoop.

\subsection{*top-level-hook*}
The \verb|*top-level-hook*| common lisp variable contains the name of
a function to invoke when an image is started. In our case it is
called restart. This is the entry point to the Axiom interpreter.

\section{Dollar Global Variables}
\begin{tabular}{lll}
NAME                         & SET                 & USE \\
\$boot                       & ncTopLevel          & \\
coerceFailure                &                     & runspad \\
curinstream                  & ncIntLoop           & \\
curoutstream                 & ncIntLoop           & \\
\$currentLine                & restart             & removeUndoLines \\
\$dalymode                   &                     & intloopReadConsole \\
\$displayStartMsgs           &                     & restart \\
\$e                          & ncTopLevel          & \\
\$erMsgToss                  & SpadInterpretStream & \\
\$fn                         & SpadInterpretStream & \\
\$frameRecord                & initvars            & \\
                             & clearFrame          & \\
                             & undoSteps           & undoSteps \\
                             & recordFrame         & recordFrame \\
\$HiFiAccess                 & initHist            & historySpad2Cmd \\
                             & historySpad2Cmd     & \\
                             &                     & setHistoryCore \\
\$HistList                   & initHist            & \\
\$HistListAct                & initHist            & \\
\$HistListLen                & initHistList        & \\
\$HistRecord                 & initHistList        & \\
\$historyDirectory           &                     & makeHistFileName \\
                             &                     & makeHistFileName \\
\$historyFileType            & initvars           & histInputFileName \\
\$InteractiveFrame           & restart             & ncTopLevel \\
                             & undo                & recordFrame \\
                             & undoSteps           & undoSteps \\
                             &                     & reportUndo \\
\$internalHistoryTable       & initvars            & \\
\$interpreterFrameName       & initializeInterpreterFrameRing & \\
\$interpreterFrameRing       & initializeInterpreterFrameRing & \\
\$intRestart                 &                     & intloop \\
\$intTopLevel                & intloop             & \\
\$IOindex                    & restart             & historySpad2Cmd \\
                             & removeUndoLines     & undoCount \\
\$genValue                   & bookvol5            & i-toplev \\
                             &                     & i-analy \\
                             &                     & i-syscmd \\
                             &                     & i-spec1 \\
                             &                     & i-spec2 \\
                             &                     & i-map \\
\$lastPos                    & SpadInterpretStream & \\
\$libQuiet                   & SpadInterpretStream & \\
\$msgDatabaseName            & reroot              * \\
\$ncMsgList                  & SpadInterpretStream & \\
\$newcompErrorCount          & SpadInterpretStream & \\
\$newcompMode                & SpadInterpretStream & \\
\$newspad                    & ncTopLevel          & \\
\$nopos                      &                     & SpadInterpretStream \\
\$okToExecuteMachineCode     & SpadInterpretStream & \\
\$oldHistoryFileName         & initvars            & oldHistFileName \\
\$options                    &                     & history \\
                             & historySpad2Cmd     & historySpad2Cmd \\
                             &                     & undo \\
\$previousBindings           & initvars            & \\
                             & clearFrame          & \\
                             & recordFrame         & recordFrame \\
\$PrintCompilerMessageIfTrue & spad                & \\
\$reportUndo                 & initvars            & diffAlist \\
\$spad                       & ncTopLevel          & \\
\$SpadServer                 & restart             & \\
\$SpadServerName             & initvars            & restart \\
\$systemCommandFunction      & SpadInterpretStream & \\
top\_level                   &                     & runspad \\
\$quitTag                    &                     & runspad \\
\$useInternalHistoryTable    & initvars            & initHist \\
                             & setHistoryCore      & setHistoryCore \\
\$undoFlag                   & initvars            & recordFrame \\
\end{tabular}

\subsection{\$boot}
The \verb|$boot| variable is set to NIL in ncTopLevel.

\subsection{coerceFailure}
The coerceFailure symbol is a catch tag used in runspad
to catch an exit from ncTopLevel.

\subsection{\$currentLine}
The \verb|$currentLine| line is set to NIL in restart.
It is used in removeUndoLines in the undo mechanism.

\subsection{\$displayStartMsgs}
The \verb|$displayStartMsgs| variable is used in restart but is not
set so this is likely a bug.

\subsection{\$e}
The \verb|$e| variable is set to the value of
\verb|$InteractiveFrame| which is set in restart to the value of the
call to the makeInitialModemapFrame function. This function simply
returns a copy of the variable \verb|$InitialModemapFrame|.

Thus \verb|$e| is a copy of the variable \verb|$InitialModemapFrame|.

This variable is used in the undo mechanism.

\subsection{\$erMsgToss}
The \verb|$erMsgToss| variable is set to NIL in SpadInterpretStream.

\subsection{\$fn}
The \verb|$fn| variable is set in SpadInterpretStream. It is set to
the second argument which is a list. It appears that this list has the
same structure as an argument to the LispVM rdefiostream function.

\subsection{\$frameRecord}
\verb|$frameRecord = [delta1, delta2,... ]| where
delta(i) contains changes in the ``backwards'' direction.
Each delta(i) has the form ((var . proplist)...) where
proplist denotes an ordinary proplist. For example, an entry
of the form ((x (value) (mode (Integer)))...) indicates that
to undo 1 step, x's value is cleared and its mode should be set
to (Integer).

A delta(i) of the form (systemCommand . delta) is a special
delta indicating changes due to system commands executed between
the last command and the current command. By recording these deltas
separately, it is possible to undo to either BEFORE or AFTER
the command. These special delta(i)s are given ONLY when a
a system command is given which alters the environment.

Note: recordFrame('system) is called before a command is executed, and
recordFrame('normal) is called after (see processInteractive1).
If no changes are found for former, no special entry is given.

This is part of the undo mechanism.

\subsection{\$HiFiAccess}
The \verb|$HiFiAccess| is set by initHist to T. It is a flag
used by the history mechanism to record whether the history function
is currently on. It can be reset by using the axiom
command
\begin{verbatim}
  )history off
\end{verbatim}
It appears that the name means ``History File Access''.

The \verb|$HiFiAccess| variable is used by historySpad2Cmd to check
whether history is turned on. T means it is, NIL means it is not.

\subsection{\$HistList}
Thie \verb|$HistList| variable is set by initHistList to an initial
value of NIL elements. The last element of the list is smashed to
point to the first element to make the list circular.
This is a circular list of length \verb|$HistListLen|.

\subsection{\$HistListAct}
The \verb|$HistListAct| variable is set by initHistList to 0.
This variable holds the actual number of elements in the history list.
This is the number of ``undoable'' steps.

\subsection{\$HistListLen}
The \verb|$HistListLen| variable is set by initHistList to 20.
This is the length of a circular list maintained in the variable
\verb|$HistList|.

\subsection{\$HistRecord}
The \verb|$HistRecord| variable is set by initHistList to NIL.
\verb|$HistRecord| collects the input line, all variable bindings
and the output of a step, before it is written to the file named by
the function histFileName.

\subsection{\$historyFileType}
The \verb|$historyFileType| is set at load time by a call to 
initvars to a value of ``axh''. It appears that this
is intended to be used as a filetype extension.
It is part of the history mechanism. It is used in makeHistFileName
as part of the history file name.

\subsection{\$internalHistoryTable}
The \verb|$internalHistoryTable| variable is set at load time by a call to
initvars to a value of NIL.
It is part of the history mechanism.

\subsection{\$interpreterFrameName}
The \verb|$interpreterFrameName| variable, set in 
initializeInterpreterFrameRing to the constant
initial to indicate that this is the initial (default) frame.

Frames are structures that capture all of the variables defined in a
session. There can be multiple frames and the user can freely switch
between them. Frames are kept in a ring data structure so you can 
move around the ring.

\subsection{\$interpreterFrameRing}
The \verb|$interpreterFrameRing| is set to a pair whose car is set to
the result of emptyInterpreterFrame

\subsection{\$InteractiveFrame}
The \verb|$InteractiveFrame| is set in restart to the value of the
call to the makeInitialModemapFrame function. This function simply
returns a copy of the variable \verb|$InitialModemapFrame|

\subsection{\$intRestart}
The \verb|$intRestart| variable is used in intloop but has no value.
This is probably a bug. While the variable's value is unchanged the
system will continually reenter the SpadInterpretStream function.

\subsection{\$intTopLevel}
The \verb|$intTopLevel| is a catch tag. Throwing to this tags which is
caught in the intloop will restart the SpadInterpretStream function.

\subsection{\$IOindex}
The \verb|$IOindex| index variable is set to 1 in restart.
This variable is used in the historySpad2Cmd function in the
history mechanism. It is set in the removeUndoLines function
in the undo mechanism.

This is used in the undo mechanism in function undoCount
to compute the number of undos. You can't undo more actions then
have already happened.

\subsection{\$lastPos}
The \verb|$lastPos| variable is set in SpadInterpretStream
to the value of the \verb|$nopos| variable.
Since \verb|$nopos| appears to have no value
this is likely a bug.

\subsection{\$libQuiet}
The \verb|$libQuiet| variable is set to the third argument of the
SpadInterpretStream function. This is passed from intloop
with the value of T. This variable appears to be intended to
control the printing of library loading messages which would need
to be suppressed if input was coming from a file.

\subsection{\$msgDatabaseName}
The \verb|$msgDatabaseName| is set to NIL in reroot.

\subsection{\$ncMsgList}
The \verb|$ncMsgList| is set to NIL in SpadInterpretStream.

\subsection{\$newcompErrorCount}
The \verb|$newcompErrorCount| is set to 0 in SpadInterpretStream.

\subsection{\$newcompMode}
The \verb|$newcompMode| is set to NIL in SpadInterpretStream.

\subsection{\$newspad}
The \verb|$newspad| is set to T in ncTopLevel.

\subsection{\$nopos}
The \verb|$nopos| variable is used in SpadInterpretStream but does
not appear to have a value and is likely a bug.

\subsection{\$oldHistoryFileName}
The \verb|$oldHistoryFileName| is set at load time by a call to 
initvars to a value of ``last''. 
It is part of the history mechanism. It is used in the function
oldHistFileName and restoreHistory.

\subsection{\$okToExecuteMachineCode}
The \verb|$okToExecuteMachineCode| is set to T in SpadInterpretStream.

\subsection{\$options}
The \verb|$options| variable is tested by the history function.
If it is NIL then output the message 
\begin{verbatim}
  You have not used the correct syntax for the history command.
  Issue )help history for more information.
\end{verbatim}

The \verb|$options| variable is tested in the historySpad2Cmd function.
It appears to record the options that were given to a spad command on
the input line. The function selectOptionLC appears to take a list
off options to scan.

This variable is not yet set and is probably a bug.

\subsection{\$previousBindings}
The \verb|$previousBindings| is a copy of the 
\verb|CAAR $InteractiveFrame|. This is used to
compute the delta(i)s stored in \verb|$frameRecord|.
This is part of the undo mechanism.

\subsection{\$PrintCompilerMessageIfTrue}
The \verb|$PrintCompilerMessageIfTrue| variable is set to NIL in spad.

\subsection{\$reportUndo}
The \verb|$reportUndo| variable is used in diffAlist. It was not normally
bound but has been set to T in initvars. If the variable is set
to T then we call reportUndo.

It is part of the undo mechanism.

\subsection{\$spad}
The \verb|$spad| variable is set to T in ncTopLevel.

\subsection{\$SpadServer}
If an open server is not requested then this variable to T.
It has no value before this time (and is thus a bug).

\subsection{\$SpadServerName}
The \verb|$SpadServerName| is passed to the openServer function, if the
function exists. 

\subsection{\$systemCommandFunction}
The \verb|$systemCommandFunction| is set in SpadInterpretStream
to point to the function InterpExecuteSpadSystemCommand.

\subsection{top\_level}
The top\_level symbol is a catch tag used in runspad
to catch an exit from ncTopLevel.

\subsection{\$quitTag}
The \verb|$quitTag| is used as a variable in a catch block. 
It appears that it can be thrown somewhere below ncTopLevel.

\subsection{\$useInternalHistoryTable}
The \verb|$useInternalHistoryTable| variable is set at load time by a call to
initvars to a value of NIL. It is part of the history mechanism.

\subsection{\$undoFlag}
The \verb|$undoFlag| is used in recordFrame to decide whether to do
undo recording. It is initially set to T in initvars.
This is part of the undo mechanism.

\eject
\begin{thebibliography}{99}
\bibitem{1} Daly, Timothy, "The Axiom Literate Documentation"\\
{\bf http://axiom.axiom-developer.org/axiom-website/documentation.html}
\bibitem{2} Daly, Timothy, ``The Axiom Wiki Website''\\
{\bf http://axiom.axiom-developer.org}
\end{thebibliography}
\chapter{Index}
\printindex
\end{document}
