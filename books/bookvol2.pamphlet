\documentclass[dvipdfm]{book}
\newcommand{\VolumeName}{Volume 2: Axiom Users Guide}
\input{bookheader.tex}
\mainmatter
\setcounter{chapter}{0} % Chapter 1
\chapter{Axiom and Category Theory}
\section{Covariance and Contravariance}
Axiom has an order relation between types. The types can be in one of
five possible relationships. 

A type can be more general than another type. For example, Integer is
more general than PositiveInteger.

A type can be more specific than another type. Conversely PositiveInteger
is more specific than Integer.

A type can be equal to another type. 

A type can be converted or coerced to another type. For example, 
Fraction(Polynomial(Integer)) can be coerced to Polynomial(Fraction(Integer)).

A type can be unrelated to another type. String and Expression are not related.

Covariance is converting from a wider type to a narrower type. 
For instance, converting from Matrix(Float) to Matrix(Integer).

Contravariance is converting from a narrower type to a wider type.
For instance, converting from Matrix(Integer) to Matrix(Float).

Invariance means that one type cannot convert to another.
For instance, a Matrix(Float) which contains numbers which cannot
be represented as Integers cannot be converted to a Matrix(Integer).

These facts form an order relation, which by definition is reflexive,
transitive and antisymmetric. 

Reflexive means that Integer = Integer.

Transitive means that PositiveInteger $<$ Integer $<$ Float implies
that PositiveInteger $<$ Float.

Antisymmetric means that PositiveInteger $<$ Float implies
not(Float $<$ PositiveInteger).

\section{Axiom Type Lattice}

The types in Axiom form a lattice based on the order relationship.
It is a lattice because Axiom supports multiple inheritance.

References of interest include:

Michael Barr and Charles Wells
``Category Theory for Computing Science'' 1998\\
\verb|www.math.mcgill.ca/triples/Barr-Wells-ctcs.pdf|

Saunders Mac Lane
``Catogories for the Working Mathematician''\\
Springer-Verlag 2010 ISBN 978-1-4419-3123-8 

Steve Awodey
``Category Theory''\\
\verb|ftp://sumin.in.ua/Books/DVD-021/Awodey_S._Category_Theory(en)(305s).pdf|

``Introduction to Category Theory''\\
\verb|www.youtube.com/watch?v=eu0rj5C2Otg|

Luca Cardelli and Peter Wegner
``On understanding types, data abstraction and polymorphism''
Computing Surveys, Vol 17 no 4 pp471-522 Dec. 1985\\
\verb|lucacardelli.name/Papers/OnUnderstanding.A4.pdf|

A. J. H. Simons,
``Adding Axioms to Cardelli-Wegner Subtyping'' 1994\\
\verb|staffwww.dcs.shef.ac.uk/people/A.Simons/research/reports/addaxiom.pdf|

Dana Scott
``Data Types as Lattices''\\
\verb|www.cs.ox.ac.uk/files/3287/PRG05.pdf|

Roland Backhouse and Marcel Bijsterveld
``Category Theory as Coherently Constructive Lattice Theory''
November 1994

\section{Terms to Understand}

Suppose we wish to join Complex with Polynomial(Integer).
What would elements of this combination look like?

The union of the two is a co-product of topological spaces.

The simple combination is not simply adding elements since 
\[i + x^2\]
is not a valid combination.

We need the algebraic co-product, known as the tensor product.
We end up with a domain of Complex(Polynomial(Integer)).

\begin{verbatim}
-> a:Complex(POLY(INT)):=%i+3*x

     3x + %i
                                           Type: Complex(Polynomial(Integer))
-> a::POLY(COMPLEX(INT))

     3x + %i
                                           Type: Polynomial(Complex(Integer))
\end{verbatim}

\section{Category Definition}
A category has four parts. 
We need a set of objects, usually represented as dots. 
We need a set of arrows (maps, morphisms), from dot to dot. 
We need a way to compose arrows in an associative manner. 
We need an identity arrow from a dot to itself.

The set of all arrows from dot A to dot B is written as $Hom_c(A,B)$
or, sometimes $C(A,B)$. Notice that the set $C(A,B)$ is disjoint from
$C(A,D)$ since each arrow has a unique domain and co-domain.

For the example of the category Set, the objects are sets and the
arrows are functions between sets. 
For the category Ring, the objects are rings and the arrows are ring 
homomorphisms. 
Similarly for the category Group, the dots are groups and the arrows 
are group homomorphisms. 
For a fixed Ring R, the category R-Mod has dots which
are left R-modules and the arrows are R-module homomorphisms.
We can also look at the category Mod-R which has dots of right R-modules
and arrows which are R-module homomorphisms.
For the category K, if K is a field, the dots are K-vector spaces and
the arrows are K-linear transformations.

In Axiom the dots are Types (such as Integer or Character) and the
arrows are functions between them with signature:
\begin{verbatim}
   f : Integer -> Character
\end{verbatim}

Relations between categories is called a {\bf functor}.
A functor F takes things in category C into things in category D.
We need a function on objects which maps objects of C to objects of D.
We need a function on arrows which take arrows of C to arrows of D.

The categories C and D well defined structure. 
They have a domain and co-domain of arrows.
They have identity arrows.
There is a rule of composition of arrows. These form commutative diagrams.

First we have to make sure the functor F maintains the domain and co-domain
structure of C.
When we apply functor F to C we need to preserve all of the structure
so F has to be defined on all of these properties. If we look at two
dots in category C and a function f which is an arrow in C 
\begin{verbatim}
          f
      A ----> B
\end{verbatim}
then the functor F has to operate on everything so we get:
\begin{verbatim}
         Ff
      FA ----> FB
\end{verbatim}
This means that if $dom$ is the domain function in C then the functor
F commutes with $dom$. That is, applying $F(dom(f)) = dom(F(f))$.

Next we have to make sure the functor F maintains the identity arrow of C.
From the above we know that $F(identity(x)) = identity(F(x))$.

Finally we have to make sure that the rule for composition of arrows
in C is preserved. So the functor F has to make sure that what composes
in C also composes with the same diagram in D.

Some standard functors are the identity functor $1_c$ which just maps
C to C. We can form a functor which forgets properties so that the
category Group could map to its underlying set. We can lift a category
by forgetting properties, for example, lifting the category of Abelian
Group C to Group D by ``forgetting'' the commutative property of C.
Similarly the category Ring or the category Module can be mapped to 
the underlying Abelian Group. There is also the Constant functor which
maps all of the dots in C to a single dot in D and all of the arrows in
C to the identity arrow in D.

The category CommutativeRing R can be mapped to a Group with the functor
$GL_n$ which is the group of invertible NxN matrices with entries in
the CommutativeRing R.

\section{Monoids and Groups}

Given a single element set and a set of arrows from that element to
itself we know from the associative property that $(fg)h = f(gh)$ and 
from the identity property that $ef = f = fe$. 

A 1-object category is a monoid.
A 1-object category where all of the arrows are invertible is a group.

If we restrict the category so there is at most one arrow between any
two objects in the set then we have an ordered set.

A functor F from category C to category D consists of
\begin{itemize}
\item  object function takes objects of C to objects of D
\item  arrow function takes arrows of C to arrows of D
\end{itemize}

Structurally we have 3 things to preserve.
\begin{itemize}
\item domains and co-domains of arrows.
In order to preserve structure the functor F has to commute with the
domain and co-domain functions. That is, $F(dom(f)) = dom(F(f))$ and
$F(co-dom(f)) = co-dom(F(f))$.
\item identity arrows.
The functor F must preserve identity so $F(id(x)) = id(F(x))$.
\item composition properties of arrows.
The functor F must take commuting diagrams to commuting diagrams.
\end{itemize}

\chapter{Axiom Implementation Details}
\section{Makefile}
This book is actually a literate program\cite{Knut92} and can contain 
executable source code. In particular, the Makefile for this book
is part of the source of the book and is included below. 
\chapter{Writing Spad Code}
\section{The Description: label and the )describe command}
The describe command will print out the comments associated with Axiom
source code elements. For the category, domain, and package sections
the text is taken from the Description: keyword.

This information is stored in a database and can be queried with
\begin{verbatim}
  )lisp (getdatabase '|Integer| 'documentation)
\end{verbatim}
for the Integer domain. However, this information has other uses in 
the system so it contains tags and control information. Most tags are
removed by the describe function since the output is intended to be
displayed in ASCII on the terminal.

The Description: keyword is in the comment block just after the 
abbreviation command. It is freeform and the paragraph will be reflowed
automatically to allow for about 60 characters per line, adjusted for
spaces. The Description: section should be written after the keyword in
the ``++'' comments as in:
\begin{verbatim}
)abbrev package D03AGNT d03AgentsPackage
++ Description:
++ This package does some interesting stuff. We can write multiple
++ lines but they should all line up with the first character of
++ the Description keyword. Special \spad{terms} will be removed.
++
++ The above line will force a newline. So will ending a line with \br
++ \tab{5}This will allow primitive formatting\br
++ \tab{5}So you can align text\br
++ \tab{10}Start in column 11\tab{5}and skip 5 spaces\br
++ \tab{10}End in column 11\tab{7}and count out the needed spaces\br
++ \tab{5} note that the last line will not need the br command
\end{verbatim}
As the comment says, the Description should all be aligned under the
``D'' in Description. You can indent using \verb|\tab{n}| which will insert
$n$ spaces. You can force a newline in two ways. Either include a
blank line (with the ``++'' comments) or use the \verb|\br| keyword.

Due to lousy parsing algorithms for comments there are various ways this
can all go wrong. 

There should not be any macros between the Description: section and
the beginning of the definition. This is wrong. It will cause the
\begin{verbatim}
   )describe package d03AgentsPackage
\end{verbatim}
to give the wrong output because it does not find the end of the
description section properly.
\begin{verbatim}
)abbrev package D03AGNT d03AgentsPackage
++ Description:
++ This description does not work

LEDF  ==> List Expression DoubleFloat

d03AgentsPackage(): E == I where
\end{verbatim}

In the Description: section the \verb|\tab{nn}| function will be transformed
into nn spaces. If you end each line with a \verb|\br| you can control
alignment.
\begin{verbatim}
++ Description:
++ This is an example of a table alignment\br
++ \tab{5}First Item\tab{5} This will line up with the following line\br
++ \tab{5}Second Item\tab{4} This will line up with the following line\br
++ \tab{5}Third Item\tab{5} This will line up with the following line
\end{verbatim}

If the main body of the category, domain, or package begins with 
properties rather than functions the Description will be incorrectly
recorded. This is a known bug finding the end of the Description section.
For instance, this
\begin{verbatim}
++ Description:
++ The category of Lie Algebras.
++ It is used by the domains of non-commutative algebra,
++ LiePolynomial and XPBWPolynomial. 

LieAlgebra(R: CommutativeRing): Category ==  Module(R) with
    NullSquare 
      ++ \axiom{NullSquare} means that \axiom{[x,x] = 0} holds.
    JacobiIdentity 
      ++ \axiom{JacobiIdentity} means that 
      ++ \axiom{[x,[y,z]]+[y,[z,x]]+[z,[x,y]] = 0} holds.
    construct:  ($,$) -> $
      ++ \axiom{construct(x,y)} returns the Lie bracket of \axiom{x} 
      ++ and \axiom{y}.
\end{verbatim}
will give the output
\begin{verbatim}
{JacobiIdentity} means that} [x,[y,z]]+[y,[z,x]]+[z,[x,y]] = 0 holds.
\end{verbatim}
but reordering it to read:
\begin{verbatim}
++ Description:
++ The category of Lie Algebras.
++ It is used by the domains of non-commutative algebra,
++ LiePolynomial and XPBWPolynomial. 

LieAlgebra(R: CommutativeRing): Category ==  Module(R) with
    construct:  ($,$) -> $
      ++ \axiom{construct(x,y)} returns the Lie bracket of \axiom{x} 
      ++ and \axiom{y}.
    NullSquare 
      ++ \axiom{NullSquare} means that \axiom{[x,x] = 0} holds.
    JacobiIdentity 
      ++ \axiom{JacobiIdentity} means that 
      ++ \axiom{[x,[y,z]]+[y,[z,x]]+[z,[x,y]] = 0} holds.
\end{verbatim}
will give the output
\begin{verbatim}
The category of Lie Algebras. It is used by the domains of 
non-commutative algebra, LiePolynomial and XPBWPolynomial. 
\end{verbatim}
which is correct.

\begin{chunk}{*}
PROJECT=bookvol2
TANGLE=/usr/local/bin/NOTANGLE
WEAVE=/usr/local/bin/NOWEAVE
LATEX=/usr/bin/latex
MAKEINDEX=/usr/bin/makeindex

all: 
	${WEAVE} -t8 -delay ${PROJECT}.pamphlet >${PROJECT}.tex
	${LATEX} ${PROJECT}.tex 2>/dev/null 1>/dev/null
	${MAKEINDEX} ${PROJECT}.idx
	${LATEX} ${PROJECT}.tex 2>/dev/null 1>/dev/null

\end{chunk}
\eject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Bibliography}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Index}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\printindex
\end{document}

